// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const KEY_BLOCK_SIZE = 57366
const PARSER = 57367
const RTREE = 57368
const SPATIAL = 57369
const SYMBOL = 57370
const UNIQUE = 57371
const KEY = 57372
const ALL = 57373
const DISTINCT = 57374
const AS = 57375
const EXISTS = 57376
const ASC = 57377
const DESC = 57378
const INTO = 57379
const DUPLICATE = 57380
const DEFAULT = 57381
const SET = 57382
const LOCK = 57383
const FULL = 57384
const CHECKSUM = 57385
const VALUES = 57386
const LAST_INSERT_ID = 57387
const NEXT = 57388
const VALUE = 57389
const SHARE = 57390
const MODE = 57391
const SQL_NO_CACHE = 57392
const SQL_CACHE = 57393
const JOIN = 57394
const STRAIGHT_JOIN = 57395
const LEFT = 57396
const RIGHT = 57397
const INNER = 57398
const OUTER = 57399
const CROSS = 57400
const NATURAL = 57401
const USE = 57402
const FORCE = 57403
const ON = 57404
const ID = 57405
const HEX = 57406
const STRING = 57407
const INTEGRAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const VALUE_ARG = 57411
const LIST_ARG = 57412
const COMMENT = 57413
const COMMENT_KEYWORD = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const AND = 57420
const NOT = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const ELSE = 57426
const END = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const MODIFY = 57452
const TABLE = 57453
const INDEX = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const USING = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const BIT = 57470
const TINYINT = 57471
const SMALLINT = 57472
const MEDIUMINT = 57473
const INT = 57474
const INTEGER = 57475
const BIGINT = 57476
const INTNUM = 57477
const REAL = 57478
const DOUBLE = 57479
const FLOAT_TYPE = 57480
const DECIMAL = 57481
const NUMERIC = 57482
const TIME = 57483
const TIMESTAMP = 57484
const DATETIME = 57485
const YEAR = 57486
const CHAR = 57487
const VARCHAR = 57488
const BOOL = 57489
const CHARACTER = 57490
const VARBINARY = 57491
const NCHAR = 57492
const CHARSET = 57493
const TEXT = 57494
const TINYTEXT = 57495
const MEDIUMTEXT = 57496
const LONGTEXT = 57497
const BLOB = 57498
const TINYBLOB = 57499
const MEDIUMBLOB = 57500
const LONGBLOB = 57501
const JSON = 57502
const ENUM = 57503
const GEOMETRY = 57504
const POINT = 57505
const LINESTRING = 57506
const POLYGON = 57507
const GEOMETRYCOLLECTION = 57508
const MULTIPOINT = 57509
const MULTILINESTRING = 57510
const MULTIPOLYGON = 57511
const NULLX = 57512
const AUTO_INCREMENT = 57513
const APPROXNUM = 57514
const SIGNED = 57515
const UNSIGNED = 57516
const ZEROFILL = 57517
const FIXED = 57518
const DYNAMIC = 57519
const STORAGE = 57520
const DISK = 57521
const MEMORY = 57522
const COLUMN_FORMAT = 57523
const AVG_ROW_LENGTH = 57524
const COMPRESSION = 57525
const CONNECTION = 57526
const DATA = 57527
const DIRECTORY = 57528
const DELAY_KEY_WRITE = 57529
const ENCRYPTION = 57530
const INSERT_METHOD = 57531
const MAX_ROWS = 57532
const MIN_ROWS = 57533
const PACK_KEYS = 57534
const PASSWORD = 57535
const ROW_FORMAT = 57536
const STATS_AUTO_RECALC = 57537
const STATS_PERSISTENT = 57538
const STATS_SAMPLE_PAGES = 57539
const TABLESPACE = 57540
const COMPRESSED = 57541
const REDUNDANT = 57542
const COMPACT = 57543
const TOKUDB_DEFAULT = 57544
const TOKUDB_FAST = 57545
const TOKUDB_SMALL = 57546
const TOKUDB_ZLIB = 57547
const TOKUDB_QUICKLZ = 57548
const TOKUDB_LZMA = 57549
const TOKUDB_SNAPPY = 57550
const TOKUDB_UNCOMPRESSED = 57551
const DATABASES = 57552
const TABLES = 57553
const WARNINGS = 57554
const VARIABLES = 57555
const EVENTS = 57556
const BINLOG = 57557
const GTID = 57558
const STATUS = 57559
const COLUMNS = 57560
const FIELDS = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583
const PARTITION = 57584
const PARTITIONS = 57585
const LIST = 57586
const XA = 57587
const DISTRIBUTED = 57588
const ENGINES = 57589
const VERSIONS = 57590
const PROCESSLIST = 57591
const QUERYZ = 57592
const TXNZ = 57593
const KILL = 57594
const ENGINE = 57595
const SINGLE = 57596
const BEGIN = 57597
const START = 57598
const TRANSACTION = 57599
const COMMIT = 57600
const ROLLBACK = 57601
const GLOBAL = 57602
const LOCAL = 57603
const SESSION = 57604
const NAMES = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const RADON = 57615
const ATTACH = 57616
const ATTACHLIST = 57617
const DETACH = 57618
const RESHARD = 57619
const CLEANUP = 57620
const RECOVER = 57621
const REBALANCE = 57622

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"KEY_BLOCK_SIZE",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4733

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 216,
	90, 839,
	-2, 655,
	-1, 222,
	90, 701,
	-2, 633,
	-1, 460,
	118, 685,
	-2, 681,
	-1, 461,
	118, 686,
	-2, 682,
	-1, 495,
	115, 82,
	165, 82,
	168, 82,
	-2, 93,
	-1, 546,
	1, 76,
	298, 76,
	-2, 82,
	-1, 666,
	5, 27,
	-2, 604,
	-1, 700,
	115, 82,
	165, 82,
	168, 82,
	-2, 94,
	-1, 758,
	30, 301,
	63, 301,
	66, 301,
	129, 301,
	-2, 836,
	-1, 811,
	1, 77,
	298, 77,
	-2, 82,
	-1, 898,
	118, 688,
	-2, 684,
	-1, 1068,
	5, 28,
	-2, 483,
	-1, 1092,
	5, 28,
	-2, 605,
	-1, 1220,
	5, 27,
	-2, 607,
	-1, 1346,
	5, 28,
	-2, 608,
}

const yyPrivate = 57344

const yyLast = 9855

var yyAct = [...]int{
	461, 438, 1244, 1349, 436, 1375, 1422, 1381, 1251, 1379,
	1252, 569, 414, 1293, 669, 1279, 807, 1211, 217, 1210,
	793, 1001, 1405, 1150, 951, 978, 927, 56, 1190, 928,
	1061, 787, 1053, 991, 679, 1290, 352, 892, 99, 66,
	980, 416, 626, 3, 353, 191, 670, 908, 859, 882,
	439, 50, 1216, 839, 572, 812, 924, 955, 221, 1016,
	889, 728, 413, 762, 99, 481, 225, 403, 355, 897,
	220, 469, 480, 701, 463, 412, 803, 213, 981, 212,
	99, 99, 479, 562, 401, 399, 400, 210, 200, 185,
	55, 1101, 944, 190, 482, 943, 483, 99, 945, 1102,
	1103, 50, 688, 689, 483, 687, 398, 482, 176, 196,
	1303, 350, 1350, 1448, 698, 349, 205, 1421, 179, 181,
	180, 182, 183, 348, 184, 1383, 637, 173, 1404, 347,
	1447, 1395, 367, 368, 1445, 1420, 1361, 593, 592, 602,
	603, 595, 596, 597, 598, 599, 600, 601, 594, 387,
	891, 604, 1203, 1273, 76, 77, 370, 143, 381, 101,
	836, 759, 758, 369, 131, 487, 1394, 757, 994, 964,
	756, 963, 995, 996, 1007, 1011, 1384, 786, 117, 1406,
	1319, 391, 393, 99, 1022, 133, 1175, 794, 151, 136,
	70, 374, 987, 988, 989, 71, 954, 73, 376, 377,
	990, 434, 435, 1268, 1266, 99, 354, 1036, 99, 894,
	1035, 1071, 1191, 225, 60, 107, 1034, 220, 1152, 225,
	225, 983, 465, 488, 488, 1006, 364, 581, 580, 75,
	392, 392, 357, 1033, 957, 395, 1193, 956, 1152, 466,
	62, 63, 64, 65, 582, 1371, 957, 50, 1370, 956,
	1369, 360, 1195, 362, 1199, 574, 1194, 474, 1192, 1383,
	477, 359, 358, 1197, 78, 1128, 371, 96, 1300, 755,
	162, 756, 80, 1196, 1031, 1258, 79, 574, 1095, 794,
	111, 1072, 149, 1067, 160, 103, 1198, 1200, 616, 617,
	484, 1362, 1065, 937, 116, 124, 72, 625, 158, 159,
	112, 163, 476, 604, 104, 1341, 1343, 142, 1159, 157,
	1384, 695, 594, 1250, 174, 604, 1426, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 982, 579, 580,
	152, 1008, 1009, 123, 118, 156, 115, 137, 108, 102,
	1248, 109, 110, 114, 113, 582, 129, 135, 138, 144,
	145, 150, 697, 573, 841, 582, 1389, 99, 1160, 1407,
	1393, 994, 99, 99, 99, 995, 996, 99, 866, 1385,
	755, 99, 99, 1030, 155, 573, 122, 1342, 952, 1004,
	1005, 1032, 864, 865, 863, 491, 936, 486, 581, 580,
	1249, 1205, 100, 105, 132, 1207, 148, 121, 161, 909,
	909, 1078, 406, 464, 547, 582, 68, 363, 581, 580,
	120, 153, 467, 154, 551, 552, 554, 128, 986, 1130,
	1129, 1383, 1441, 560, 561, 582, 1046, 1047, 1048, 53,
	164, 165, 167, 166, 168, 106, 169, 170, 471, 862,
	1433, 840, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 614, 356, 597, 598, 599, 600, 601,
	594, 613, 615, 604, 1351, 565, 1428, 652, 653, 225,
	1073, 1239, 1384, 658, 99, 1240, 1243, 99, 1242, 225,
	672, 1124, 1002, 220, 1003, 1414, 366, 624, 671, 1123,
	627, 628, 629, 630, 631, 632, 633, 355, 636, 638,
	638, 638, 638, 638, 638, 638, 638, 646, 647, 648,
	649, 654, 581, 580, 409, 666, 1122, 581, 580, 852,
	854, 855, 883, 667, 884, 853, 668, 361, 1119, 582,
	795, 796, 797, 750, 582, 676, 789, 790, 791, 792,
	1147, 1145, 1143, 1114, 696, 1113, 674, 1112, 1020, 1019,
	1012, 655, 800, 801, 802, 1126, 656, 99, 682, 584,
	389, 1322, 809, 1241, 99, 99, 681, 1230, 690, 402,
	1146, 1144, 1142, 99, 1229, 752, 639, 640, 641, 642,
	643, 644, 645, 1127, 53, 1125, 1120, 1116, 1115, 860,
	592, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 1107, 570, 604, 835, 1040, 583, 1039, 813, 834,
	1310, 1017, 999, 1442, 1434, 1246, 842, 843, 585, 805,
	806, 1374, 581, 580, 225, 847, 1437, 402, 888, 861,
	220, 428, 427, 429, 430, 431, 432, 225, 1316, 582,
	433, 910, 1245, 979, 896, 1312, 1409, 1312, 1377, 570,
	1372, 402, 1312, 1353, 846, 1177, 635, 95, 1312, 1352,
	1277, 402, 1312, 402, 1059, 402, 50, 929, 225, 672,
	900, 1174, 933, 1166, 1165, 1162, 1163, 671, 627, 926,
	1121, 94, 946, 225, 898, 1162, 1161, 220, 1094, 402,
	57, 885, 886, 887, 845, 402, 693, 355, 550, 549,
	548, 496, 495, 1309, 934, 906, 365, 938, 913, 1308,
	931, 899, 1158, 925, 845, 935, 930, 935, 50, 1090,
	1277, 1087, 917, 911, 24, 916, 602, 603, 595, 596,
	597, 598, 599, 600, 601, 594, 82, 1164, 604, 24,
	1059, 947, 680, 89, 24, 1059, 833, 686, 948, 949,
	940, 684, 953, 650, 958, 959, 960, 961, 962, 941,
	484, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 950, 1059, 478, 1219, 664, 901,
	902, 53, 665, 905, 1368, 1355, 197, 788, 1306, 808,
	849, 850, 1236, 856, 857, 935, 53, 912, 1231, 914,
	915, 53, 1281, 1284, 1285, 1286, 1282, 67, 1283, 1287,
	1013, 1014, 923, 74, 1156, 804, 99, 99, 99, 799,
	798, 1365, 925, 817, 816, 985, 595, 596, 597, 598,
	599, 600, 601, 594, 99, 815, 604, 570, 992, 556,
	903, 904, 83, 53, 93, 91, 662, 81, 22, 88,
	1367, 1281, 1284, 1285, 1286, 1282, 1331, 1283, 1287, 1018,
	464, 1366, 1330, 201, 202, 860, 1435, 1021, 1024, 1025,
	1026, 1023, 1334, 813, 1028, 1419, 204, 1335, 1045, 84,
	92, 86, 87, 90, 1332, 1336, 1037, 1285, 1286, 1333,
	939, 848, 470, 1402, 922, 225, 921, 1042, 1412, 1063,
	404, 1256, 1111, 1015, 492, 861, 468, 195, 475, 749,
	1088, 814, 1049, 470, 555, 1217, 1289, 198, 199, 99,
	1411, 1154, 998, 405, 997, 1234, 984, 1429, 1233, 1418,
	192, 1235, 618, 619, 620, 621, 622, 623, 1417, 1325,
	672, 1416, 220, 920, 494, 493, 193, 1066, 671, 355,
	355, 919, 57, 1324, 1276, 1077, 1099, 680, 563, 564,
	559, 207, 1096, 1297, 1000, 578, 59, 61, 54, 1,
	1056, 1085, 346, 1348, 1057, 1108, 811, 810, 1149, 1109,
	1110, 437, 1097, 1089, 1100, 1068, 1069, 1070, 1117, 1118,
	1074, 761, 760, 1105, 1106, 1080, 898, 1081, 1082, 1083,
	1084, 1151, 1415, 69, 1403, 1380, 1153, 1410, 1382, 1387,
	1359, 1356, 1358, 700, 699, 1091, 1092, 1093, 351, 97,
	751, 767, 766, 765, 1155, 763, 1010, 785, 1247, 99,
	772, 771, 1104, 694, 1157, 725, 724, 355, 723, 722,
	721, 1058, 720, 719, 718, 206, 717, 1167, 1168, 716,
	715, 1041, 714, 713, 712, 1043, 711, 1075, 710, 709,
	708, 206, 206, 225, 707, 706, 702, 1063, 225, 705,
	220, 704, 220, 1178, 1176, 1169, 1170, 1171, 206, 1302,
	703, 1172, 770, 1179, 896, 768, 1189, 764, 99, 501,
	499, 500, 929, 1185, 498, 225, 225, 1184, 503, 1222,
	1223, 858, 1202, 1204, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 1079,
	1218, 1208, 1201, 1209, 898, 502, 497, 1188, 1288, 1214,
	1292, 1227, 1228, 1060, 1029, 1187, 1220, 818, 1215, 612,
	570, 930, 1224, 1183, 1221, 918, 1098, 593, 592, 602,
	603, 595, 596, 597, 598, 599, 600, 601, 594, 993,
	218, 604, 942, 685, 206, 683, 209, 208, 932, 651,
	225, 225, 225, 1180, 1253, 1253, 1253, 1151, 1237, 1254,
	1255, 1238, 462, 1323, 1275, 1076, 206, 1054, 634, 206,
	1225, 1226, 907, 593, 592, 602, 603, 595, 596, 597,
	598, 599, 600, 601, 594, 415, 851, 604, 426, 423,
	425, 424, 1264, 657, 663, 586, 99, 99, 407, 1340,
	1213, 929, 553, 1261, 1262, 375, 1263, 85, 472, 1265,
	1280, 1267, 225, 1278, 1212, 1086, 1253, 225, 558, 1272,
	1304, 1253, 1360, 661, 769, 1305, 1298, 25, 58, 203,
	14, 21, 15, 13, 1271, 12, 29, 1214, 10, 225,
	9, 1151, 1307, 220, 1299, 8, 1291, 7, 6, 5,
	930, 4, 50, 1259, 194, 1260, 1301, 1189, 99, 99,
	99, 99, 23, 1318, 2, 1313, 1269, 1270, 1206, 99,
	20, 19, 99, 18, 17, 99, 1327, 1326, 1329, 1328,
	16, 225, 672, 1337, 11, 1347, 753, 225, 1344, 754,
	671, 1253, 1345, 225, 1232, 1354, 0, 1253, 0, 1214,
	1214, 1214, 1214, 1357, 0, 779, 778, 0, 1215, 1215,
	1215, 1215, 0, 1214, 900, 775, 1311, 1364, 546, 1314,
	1315, 0, 1291, 206, 206, 206, 0, 0, 557, 0,
	0, 0, 206, 206, 0, 0, 225, 1321, 781, 1376,
	1253, 0, 0, 0, 1378, 0, 1388, 1391, 1386, 1390,
	0, 780, 773, 0, 0, 1339, 1401, 0, 774, 1050,
	1051, 1052, 0, 1408, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	225, 225, 0, 1423, 1423, 1423, 1424, 1425, 1413, 0,
	0, 782, 0, 0, 0, 1430, 0, 1274, 0, 0,
	1398, 1399, 1400, 0, 0, 0, 0, 0, 1440, 1427,
	0, 777, 0, 1373, 1443, 1444, 1431, 1432, 225, 1055,
	0, 0, 1446, 0, 0, 1392, 24, 51, 26, 27,
	0, 0, 0, 0, 0, 206, 0, 673, 675, 593,
	592, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 0, 0, 604, 0, 0, 46, 392, 0, 0,
	28, 830, 0, 36, 776, 0, 0, 0, 0, 0,
	0, 784, 0, 0, 783, 0, 0, 0, 0, 0,
	37, 0, 0, 53, 0, 0, 829, 1436, 0, 1438,
	1439, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 0, 0, 604, 0, 0, 0, 0,
	0, 0, 0, 832, 1363, 570, 0, 0, 206, 0,
	0, 0, 828, 0, 0, 206, 206, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 30, 31, 32, 0, 34, 0, 0, 0, 1181,
	1182, 0, 0, 171, 0, 1396, 1397, 35, 47, 39,
	0, 0, 48, 49, 33, 739, 0, 0, 0, 825,
	823, 819, 0, 822, 824, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 731, 0, 895, 675, 0, 0,
	895, 895, 0, 172, 895, 175, 0, 177, 178, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 895, 895,
	895, 895, 827, 0, 0, 0, 726, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 372, 373, 0,
	378, 379, 380, 0, 382, 383, 384, 385, 386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	735, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 38, 518, 0, 0, 0, 0, 0, 40,
	0, 0, 41, 42, 821, 44, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 388, 0, 729,
	390, 0, 0, 0, 0, 394, 0, 396, 397, 0,
	730, 732, 733, 734, 0, 736, 737, 738, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 0, 0, 506,
	0, 0, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 206,
	0, 0, 0, 519, 0, 0, 0, 0, 532, 535,
	536, 537, 538, 539, 540, 206, 541, 542, 543, 544,
	545, 520, 521, 522, 523, 504, 505, 533, 0, 507,
	0, 727, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 524, 525, 526, 527, 528, 529, 530, 531,
	0, 0, 0, 0, 0, 0, 0, 588, 0, 591,
	0, 0, 0, 0, 0, 605, 606, 607, 608, 609,
	610, 611, 895, 589, 590, 587, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 895, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 534, 673, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 566, 0, 567, 143, 568, 101, 571, 0, 125,
	0, 131, 575, 576, 577, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 224, 0, 1064, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 582, 0, 0, 675, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 837, 838, 0, 152, 0, 844,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 1295, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 169, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	206, 206, 206, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 206, 0, 0, 1295, 0, 0, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 314, 274, 332, 250, 265, 344, 267, 268,
	304, 234, 284, 143, 263, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 330, 281, 0, 253, 227,
	260, 228, 251, 278, 117, 249, 316, 287, 266, 0,
	338, 133, 296, 0, 151, 136, 0, 0, 280, 319,
	282, 313, 273, 305, 242, 295, 333, 264, 301, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 298, 327, 262, 300, 303, 226, 297, 0,
	230, 235, 343, 325, 256, 257, 0, 0, 0, 0,
	0, 0, 1027, 279, 283, 310, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 294, 0, 1038,
	0, 237, 232, 277, 0, 0, 0, 241, 0, 255,
	311, 1044, 0, 0, 320, 272, 162, 326, 270, 269,
	334, 307, 0, 317, 252, 261, 111, 259, 149, 302,
	160, 103, 323, 318, 292, 275, 276, 231, 0, 309,
	116, 124, 248, 299, 158, 159, 112, 163, 236, 340,
	104, 223, 339, 142, 222, 157, 324, 293, 289, 233,
	322, 291, 288, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 229, 0, 152, 331, 345, 123,
	118, 156, 115, 137, 108, 102, 239, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 247, 321, 0, 0, 0, 0, 0,
	155, 238, 122, 245, 246, 243, 244, 285, 286, 335,
	336, 337, 312, 240, 0, 0, 315, 290, 100, 105,
	132, 342, 148, 121, 161, 0, 0, 0, 0, 0,
	258, 341, 308, 306, 328, 0, 120, 153, 0, 154,
	211, 0, 0, 216, 214, 215, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1173, 329, 314, 274, 332, 250, 265,
	344, 267, 268, 304, 234, 284, 143, 263, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 330, 281,
	0, 253, 227, 260, 228, 251, 278, 117, 249, 316,
	287, 266, 0, 338, 133, 296, 0, 151, 136, 0,
	0, 280, 319, 282, 313, 273, 305, 242, 295, 333,
	264, 301, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 298, 327, 262, 300, 303,
	226, 297, 0, 230, 235, 343, 325, 256, 257, 0,
	0, 0, 0, 0, 0, 0, 279, 283, 310, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	294, 0, 0, 0, 237, 232, 277, 0, 0, 0,
	241, 0, 255, 311, 0, 0, 0, 320, 272, 162,
	326, 270, 269, 334, 307, 0, 317, 252, 261, 111,
	259, 149, 302, 160, 103, 323, 318, 292, 275, 276,
	231, 0, 309, 116, 124, 248, 299, 158, 159, 112,
	163, 236, 340, 104, 223, 339, 142, 222, 157, 324,
	293, 289, 233, 322, 291, 288, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 229, 0, 152,
	331, 345, 123, 118, 156, 115, 137, 108, 102, 239,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 321, 0, 0,
	0, 0, 0, 155, 238, 122, 245, 246, 243, 244,
	285, 286, 335, 336, 337, 312, 240, 0, 0, 315,
	290, 100, 105, 132, 342, 148, 121, 161, 0, 0,
	0, 0, 0, 258, 341, 308, 306, 328, 0, 120,
	153, 0, 154, 0, 0, 0, 216, 214, 215, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 329, 314, 274,
	332, 250, 265, 344, 267, 268, 304, 234, 284, 143,
	263, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 330, 281, 0, 253, 227, 260, 228, 251, 278,
	117, 249, 316, 287, 266, 0, 338, 133, 296, 0,
	151, 136, 0, 0, 280, 319, 282, 313, 273, 305,
	242, 295, 333, 264, 301, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 298, 327,
	262, 300, 303, 226, 297, 0, 230, 235, 343, 325,
	256, 257, 0, 0, 0, 0, 0, 0, 0, 279,
	283, 310, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 294, 0, 0, 0, 237, 232, 277,
	0, 0, 0, 241, 0, 255, 311, 0, 0, 0,
	320, 272, 162, 326, 270, 269, 334, 307, 0, 317,
	252, 261, 111, 259, 149, 302, 160, 103, 323, 318,
	292, 275, 276, 231, 0, 309, 116, 124, 248, 299,
	158, 159, 112, 163, 236, 340, 104, 223, 339, 142,
	222, 157, 324, 293, 289, 233, 322, 291, 288, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	229, 0, 152, 331, 345, 123, 118, 156, 115, 137,
	108, 102, 239, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	321, 0, 0, 0, 0, 0, 155, 238, 122, 245,
	246, 243, 244, 285, 286, 335, 336, 337, 312, 240,
	0, 0, 315, 290, 100, 105, 132, 342, 148, 121,
	161, 0, 0, 0, 0, 0, 258, 341, 308, 306,
	328, 0, 120, 153, 0, 154, 485, 0, 0, 128,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	329, 314, 274, 332, 250, 265, 344, 267, 268, 304,
	234, 284, 143, 263, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 330, 281, 0, 253, 227, 260,
	228, 251, 278, 117, 249, 316, 287, 266, 0, 338,
	133, 296, 0, 151, 136, 0, 0, 280, 319, 282,
	313, 273, 305, 242, 295, 333, 264, 301, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 298, 327, 262, 300, 303, 226, 297, 0, 230,
	235, 343, 325, 256, 257, 0, 0, 0, 0, 0,
	0, 0, 279, 283, 310, 271, 0, 0, 0, 0,
	0, 0, 1317, 0, 254, 0, 294, 0, 0, 0,
	237, 232, 277, 0, 0, 0, 241, 0, 255, 311,
	0, 0, 0, 320, 272, 162, 326, 270, 269, 334,
	307, 0, 317, 252, 261, 111, 259, 149, 302, 160,
	103, 323, 318, 292, 275, 276, 231, 0, 309, 116,
	124, 248, 299, 158, 159, 112, 163, 236, 340, 104,
	677, 339, 142, 678, 157, 324, 293, 289, 233, 322,
	291, 288, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 229, 0, 152, 331, 345, 123, 118,
	156, 115, 137, 108, 102, 239, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 321, 0, 0, 0, 0, 0, 155,
	238, 122, 245, 246, 243, 244, 285, 286, 335, 336,
	337, 312, 240, 0, 0, 315, 290, 100, 105, 132,
	342, 148, 121, 161, 0, 0, 0, 0, 0, 258,
	341, 308, 306, 328, 0, 120, 153, 0, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 329, 314, 274, 332, 250, 265, 344,
	267, 268, 304, 234, 284, 143, 263, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 330, 281, 0,
	253, 227, 260, 228, 251, 278, 117, 249, 316, 287,
	266, 0, 338, 133, 296, 0, 151, 136, 0, 0,
	280, 319, 282, 313, 273, 305, 242, 295, 333, 264,
	301, 0, 0, 0, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 298, 327, 262, 300, 303, 226,
	297, 0, 230, 235, 343, 325, 256, 257, 0, 0,
	0, 0, 0, 0, 0, 279, 283, 310, 271, 0,
	0, 0, 0, 0, 0, 1186, 0, 254, 0, 294,
	0, 0, 0, 237, 232, 277, 0, 0, 0, 241,
	0, 255, 311, 0, 0, 0, 320, 272, 162, 326,
	270, 269, 334, 307, 0, 317, 252, 261, 111, 259,
	149, 302, 160, 103, 323, 318, 292, 275, 276, 231,
	0, 309, 116, 124, 248, 299, 158, 159, 112, 163,
	236, 340, 104, 677, 339, 142, 678, 157, 324, 293,
	289, 233, 322, 291, 288, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 229, 0, 152, 331,
	345, 123, 118, 156, 115, 137, 108, 102, 239, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 321, 0, 0, 0,
	0, 0, 155, 238, 122, 245, 246, 243, 244, 285,
	286, 335, 336, 337, 312, 240, 0, 0, 315, 290,
	100, 105, 132, 342, 148, 121, 161, 0, 0, 0,
	0, 0, 258, 341, 308, 306, 328, 0, 120, 153,
	0, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 329, 314, 274, 332,
	250, 265, 344, 267, 268, 304, 234, 284, 143, 263,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	330, 281, 0, 253, 227, 260, 228, 251, 278, 117,
	249, 316, 287, 266, 0, 338, 133, 296, 0, 151,
	136, 0, 0, 280, 319, 282, 313, 273, 305, 242,
	295, 333, 264, 301, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 298, 327, 262,
	300, 303, 226, 297, 0, 230, 235, 343, 325, 256,
	257, 0, 0, 0, 0, 0, 0, 0, 279, 283,
	310, 271, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 294, 0, 0, 0, 237, 232, 277, 0,
	0, 0, 241, 0, 255, 311, 0, 0, 0, 320,
	272, 162, 326, 270, 269, 334, 307, 0, 317, 252,
	261, 111, 259, 149, 302, 160, 103, 323, 318, 292,
	275, 276, 231, 0, 309, 116, 124, 248, 299, 158,
	159, 112, 163, 236, 340, 104, 223, 339, 142, 222,
	157, 324, 293, 289, 233, 322, 291, 288, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 229,
	0, 152, 331, 345, 123, 118, 156, 115, 137, 108,
	102, 239, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 321,
	0, 0, 0, 0, 0, 155, 238, 122, 245, 246,
	243, 244, 285, 286, 335, 336, 337, 312, 240, 0,
	0, 315, 290, 100, 105, 132, 342, 148, 121, 161,
	0, 0, 0, 0, 0, 258, 341, 308, 306, 328,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 329,
	314, 274, 332, 250, 265, 344, 267, 268, 304, 234,
	284, 143, 263, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 330, 281, 0, 253, 227, 260, 228,
	251, 278, 117, 249, 316, 287, 266, 0, 338, 133,
	296, 0, 151, 136, 0, 0, 280, 319, 282, 313,
	273, 305, 242, 295, 333, 264, 301, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	298, 327, 262, 300, 303, 226, 297, 0, 230, 235,
	343, 325, 256, 257, 0, 0, 0, 0, 0, 0,
	0, 279, 283, 310, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 294, 0, 0, 0, 237,
	232, 277, 0, 0, 0, 241, 0, 255, 311, 0,
	0, 0, 320, 272, 162, 326, 270, 269, 334, 307,
	0, 317, 252, 261, 111, 259, 149, 302, 160, 103,
	323, 318, 292, 275, 276, 231, 0, 309, 116, 124,
	248, 299, 158, 159, 112, 163, 236, 340, 104, 677,
	339, 142, 678, 157, 324, 293, 289, 233, 322, 291,
	288, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 229, 0, 152, 331, 345, 123, 118, 156,
	115, 137, 108, 102, 239, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 321, 0, 0, 0, 0, 0, 155, 238,
	122, 245, 246, 243, 244, 285, 286, 335, 336, 337,
	312, 240, 0, 0, 315, 290, 100, 105, 132, 342,
	148, 121, 161, 0, 0, 0, 0, 0, 258, 341,
	308, 306, 328, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 170, 329, 314, 274, 332, 250, 265, 344, 267,
	268, 304, 234, 284, 143, 263, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 330, 281, 0, 253,
	227, 260, 228, 251, 278, 117, 249, 316, 287, 266,
	0, 338, 133, 296, 0, 151, 136, 0, 0, 280,
	319, 282, 313, 273, 305, 242, 295, 333, 264, 301,
	0, 0, 0, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 298, 327, 262, 300, 303, 226, 297,
	0, 230, 235, 343, 325, 256, 257, 0, 0, 0,
	0, 0, 0, 0, 279, 283, 310, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 294, 0,
	0, 0, 237, 232, 277, 0, 0, 0, 241, 0,
	255, 311, 0, 0, 0, 320, 272, 162, 326, 270,
	269, 334, 307, 0, 317, 252, 261, 111, 259, 149,
	302, 160, 103, 323, 318, 292, 275, 276, 231, 0,
	309, 116, 124, 248, 299, 158, 159, 112, 163, 236,
	340, 104, 677, 339, 142, 678, 157, 324, 293, 289,
	233, 322, 291, 288, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 229, 0, 152, 331, 345,
	123, 118, 156, 115, 137, 108, 102, 239, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 321, 0, 0, 0, 0,
	0, 155, 238, 122, 245, 246, 243, 244, 285, 286,
	335, 336, 337, 312, 240, 0, 0, 315, 290, 100,
	105, 132, 342, 148, 121, 161, 0, 0, 0, 0,
	0, 258, 341, 308, 306, 328, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 169, 170, 329, 314, 274, 332, 250,
	265, 344, 267, 268, 304, 234, 284, 143, 263, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 330,
	281, 0, 253, 227, 260, 228, 251, 278, 117, 249,
	316, 287, 266, 0, 338, 133, 296, 0, 151, 136,
	0, 0, 280, 319, 282, 313, 273, 305, 242, 295,
	333, 264, 301, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 298, 327, 262, 300,
	303, 226, 297, 0, 230, 235, 343, 325, 256, 257,
	0, 0, 0, 0, 0, 0, 0, 279, 283, 310,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 294, 0, 0, 0, 237, 232, 277, 0, 0,
	0, 241, 0, 255, 311, 0, 0, 0, 320, 272,
	162, 326, 270, 269, 334, 307, 0, 317, 252, 261,
	111, 259, 149, 302, 160, 103, 323, 318, 292, 275,
	276, 231, 0, 309, 116, 124, 248, 299, 158, 159,
	112, 163, 236, 340, 104, 677, 339, 142, 678, 157,
	324, 293, 289, 233, 322, 291, 288, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 229, 0,
	152, 331, 345, 123, 118, 156, 115, 137, 108, 102,
	239, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 321, 0,
	0, 0, 0, 0, 155, 238, 122, 245, 246, 243,
	244, 285, 286, 335, 336, 337, 312, 240, 0, 0,
	315, 290, 100, 105, 132, 342, 148, 121, 161, 0,
	0, 0, 0, 0, 258, 341, 308, 306, 328, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 411, 0, 0, 0, 117,
	410, 0, 0, 0, 0, 447, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 460, 428, 427,
	429, 430, 431, 432, 0, 0, 107, 433, 434, 435,
	0, 0, 0, 408, 421, 0, 446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 418, 419, 893, 0,
	0, 0, 458, 0, 420, 0, 0, 417, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 456, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 122, 448, 457,
	454, 455, 452, 453, 451, 450, 449, 459, 442, 443,
	445, 0, 444, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 411,
	0, 0, 0, 117, 410, 0, 0, 0, 0, 447,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 440,
	441, 0, 0, 0, 0, 0, 0, 691, 53, 0,
	0, 460, 428, 427, 429, 430, 431, 432, 0, 0,
	107, 433, 434, 435, 692, 0, 0, 408, 421, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	418, 419, 0, 0, 0, 0, 458, 0, 420, 0,
	0, 417, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 456, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 122, 448, 457, 454, 455, 452, 453, 451, 450,
	449, 459, 442, 443, 445, 0, 444, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 154, 0,
	0, 0, 128, 0, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 411, 0, 0, 0, 117, 410, 0,
	0, 0, 0, 447, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 460, 428, 427, 429, 430,
	431, 432, 0, 0, 107, 433, 434, 435, 0, 0,
	0, 408, 421, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 419, 893, 0, 0, 0,
	458, 0, 420, 0, 0, 417, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 456, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 448, 457, 454, 455,
	452, 453, 451, 450, 449, 459, 442, 443, 445, 0,
	444, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 154, 0, 0, 0, 128, 0, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 411, 0, 0,
	0, 117, 410, 0, 0, 0, 0, 447, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 440, 441, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 402, 460,
	428, 427, 429, 430, 431, 432, 0, 0, 107, 433,
	434, 435, 0, 0, 0, 408, 421, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 418, 419,
	0, 0, 0, 0, 458, 0, 420, 0, 0, 417,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 456, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 122,
	448, 457, 454, 455, 452, 453, 451, 450, 449, 459,
	442, 443, 445, 0, 444, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	170, 143, 0, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 0, 117, 410, 0, 0, 0, 0, 447, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 440, 441,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	460, 428, 427, 429, 430, 431, 432, 0, 0, 107,
	433, 434, 435, 0, 0, 0, 408, 421, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	419, 0, 0, 0, 0, 458, 0, 420, 0, 0,
	417, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 456, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	122, 448, 457, 454, 455, 452, 453, 451, 450, 449,
	459, 442, 443, 445, 0, 444, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 164, 165, 167, 166, 168, 106,
	169, 170, 411, 0, 0, 0, 117, 410, 0, 0,
	0, 0, 447, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 440, 441, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 460, 428, 427, 429, 430, 431,
	432, 0, 0, 107, 433, 434, 435, 0, 0, 0,
	408, 421, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 419, 0, 0, 0, 0, 458,
	0, 420, 0, 0, 417, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 456, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 122, 448, 457, 454, 455, 452,
	453, 451, 450, 449, 459, 442, 443, 445, 0, 444,
	100, 105, 132, 0, 148, 121, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 154, 0, 0, 0, 128, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 0, 117, 0, 0,
	0, 0, 0, 447, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 460, 428, 427, 429, 430,
	431, 432, 0, 0, 107, 433, 434, 435, 0, 0,
	0, 0, 421, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 419, 0, 0, 0, 0,
	458, 0, 420, 0, 0, 417, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 456, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 122, 448, 457, 454, 455,
	452, 453, 451, 450, 449, 459, 442, 443, 445, 0,
	444, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 154, 0, 0, 0, 128, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 0, 117, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 0, 0, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 24, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 122, 117, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 53, 0, 0, 98, 0, 0, 0, 0,
	120, 153, 0, 154, 107, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 98, 0, 1296, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 24, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 117, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 53, 0,
	0, 224, 0, 0, 0, 0, 120, 153, 0, 154,
	107, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 224, 0,
	0, 659, 0, 0, 660, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 117,
	490, 0, 0, 0, 0, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 224, 0, 489,
	0, 0, 120, 153, 0, 154, 107, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 117, 122, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 98, 0, 1296, 0, 0, 0,
	0, 120, 153, 107, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 117, 122, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 161, 0, 53, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 120, 153,
	107, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 224, 0,
	1064, 0, 0, 0, 0, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 473,
	117, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 120, 153, 0, 154, 0, 107, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 117, 122, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 120, 153, 107, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 117, 122, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 120, 153, 107, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 117, 122, 0, 0, 0,
	0, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	120, 153, 107, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 169, 170,
}

var yyPact = [...]int{
	1440, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 938, 961, -1000, -1000, -1000, -1000, -1000, 744,
	168, 97, 26, 148, 144, 615, 139, 9163, -1000, -1000,
	58, -1000, -166, -1000, -1000, -173, -1000, -1000, -1000, -1000,
	718, -1000, -1000, -1000, -1000, -1000, 914, 931, 780, 886,
	813, -1000, 97, 9163, 951, 2296, -148, 9360, 99, 133,
	132, 122, 99, -1000, 125, -1000, 93, 640, 93, 9163,
	9163, -68, 28, -1000, -1000, -37, -1000, -1000, -1000, -76,
	-1000, -1000, -1000, -1000, -1000, -1000, 9163, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 491, -1000, -1000, -1000, -1000, 521,
	521, -1000, 9163, -1000, -1000, -190, -1000, -1000, -1000, -1000,
	504, 882, 6268, 6268, 938, -1000, 718, -1000, -1000, -1000,
	860, -1000, -1000, 364, 8572, 868, 184, 9163, 712, -1000,
	-1000, -187, 2892, -1000, -1000, -1000, -1000, 297, 7781, 7781,
	-1000, -1000, -1000, 864, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 930,
	929, 637, -1000, 1663, -1000, -1000, 9163, 322, 634, 633,
	632, 9163, 9163, 9163, 880, 777, 9163, -1000, -1000, 950,
	9163, 9163, -1000, -1000, 948, 949, -1000, -1000, -1000, -1000,
	-1000, 948, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6268, -1000, -1000, 222, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 957, 228, 542, -1000, 6268, 1775,
	521, 521, -1000, -1000, 169, -1000, -1000, 6529, 6529, 6529,
	6529, 6529, 6529, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 521, 179, -1000, 6004,
	521, 521, 521, 521, 521, 521, 6268, 521, 521, 521,
	521, 521, 521, 521, 521, 521, 521, 521, 521, 521,
	-1000, -1000, 689, -1000, 432, 914, 504, 813, 7582, 793,
	-1000, -1000, 738, 9163, -1000, 8966, 4650, 946, 2599, -1000,
	687, 683, -177, -182, -1000, -187, 5195, -1000, -1000, -1000,
	-1000, 196, -1000, 521, 91, 1561, 140, 1296, -14, -1000,
	-1000, -1000, 724, -1000, 724, 724, 724, 724, 22, 22,
	22, 22, -1000, -1000, -1000, -1000, -1000, 757, 756, -1000,
	724, 724, 724, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 752, 752, 752, 726, 726, 870, 877, 773, 762,
	761, -1000, 1467, 682, -1000, -1000, 9163, -1000, 914, -73,
	-1000, -1000, 343, 9163, 9163, -1000, -1000, -1000, -1000, 630,
	328, -1000, 9163, -1000, -1000, -1000, -1000, -1000, -1000, 843,
	6268, 6268, 443, 6268, 6268, 258, 6529, 366, 284, 6529,
	6529, 6529, 6529, 6529, 6529, 6529, 6529, 6529, 6529, 6529,
	6529, 6529, 6529, 6529, 456, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 625, -1000, 718, 564, 564, 188, 188,
	188, 188, 188, 6790, 4931, 4357, 504, 6004, 5459, 5459,
	6268, 6268, 5459, 881, 314, 328, 8769, -1000, 504, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5459, 5459, 5459, 5459,
	6268, -1000, -1000, -1000, 882, -1000, 881, 933, -1000, 852,
	850, 5459, -1000, 760, 8966, 521, -1000, 7385, -1000, 731,
	-1000, 296, -1000, 175, -1000, -1000, -1000, -1000, -1000, 938,
	6268, -1000, 3771, -1000, -179, -1000, -174, -191, -1000, -1000,
	-1000, -1000, -1000, 328, -1000, 616, 9360, 521, 521, -1000,
	1561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 288, 288, 81, 288,
	288, 288, 288, 288, -32, -34, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, -1000,
	-1000, -1000, 577, 241, 192, -1000, -1000, -1000, -1000, 898,
	-1000, 1296, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 342, 124, -1000, 894, -1000, 892,
	544, 956, 416, 186, 135, -17, -1000, -1000, 481, 22,
	22, -1000, -1000, -1000, 863, -1000, -1000, -1000, 543, 543,
	-1000, -1000, -1000, -1000, 480, -1000, -1000, -1000, 479, -1000,
	-1000, 870, -1000, 69, -1000, 9163, 9163, 9163, -1000, 244,
	291, 102, 80, 74, 71, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9163, -1000, -1000, 539, -1000, -1000, -1000,
	537, 6268, -1000, 343, -1000, 6268, -1000, -1000, 829, 258,
	248, -1000, -1000, 350, -1000, -1000, 328, 328, 1410, -1000,
	-1000, -1000, -1000, 366, 6529, 6529, 6529, 1046, 1410, 1358,
	623, 488, 188, 348, 348, 200, 200, 200, 200, 200,
	721, 721, -1000, -1000, -1000, 504, -1000, -1000, -1000, 504,
	5459, 681, -1000, -1000, 1947, 174, 521, 165, -1000, -1000,
	504, 600, 600, 147, 437, 600, 5459, 313, -1000, 6268,
	504, -1000, 600, 504, 600, 600, -1000, -1000, 9163, -1000,
	-1000, -1000, -1000, 711, -1000, 872, 651, 655, -1000, -1000,
	5723, 504, 624, 160, 938, 8966, 6268, 4357, 914, 328,
	-1000, -1000, -1000, -192, -188, -1000, -1000, 504, 9360, 9360,
	-1000, 533, -1000, 416, 288, 288, -1000, 862, 478, 476,
	474, 520, 519, 288, 288, 459, 518, 614, 447, 420,
	412, 516, 515, 226, 503, 502, 501, 9557, 84, -1000,
	577, -1000, 891, 241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 751, -1000, -1000, -1000, -1000, -1000, -1000,
	-69, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 647, -1000, -1000, 242, 621, -1000, 611, 673,
	609, -1000, 288, 288, 521, 521, 521, -1000, 9163, -1000,
	-1000, -1000, 605, 21, 744, 589, 9360, -1000, -1000, -1000,
	-1000, 328, -1000, 328, -1000, -1000, -1000, -1000, -1000, -1000,
	1046, 1410, 1092, -1000, 6529, 6529, -1000, -1000, 600, 5459,
	-1000, -1000, 8372, -1000, -1000, 3478, 5459, 4064, -1000, -1000,
	-1000, 96, 456, 96, -100, 676, 302, -1000, 6268, 308,
	-1000, -1000, -1000, -1000, -1000, -1000, 946, 8175, 885, -1000,
	521, -1000, -1000, 733, 8769, 8769, 914, -1000, 328, -1000,
	-1000, -1000, -1000, -1000, -1000, 504, 504, -1000, -1000, 416,
	416, -1000, -1000, -1000, -1000, -1000, -1000, 506, 499, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	735, -1000, 905, 729, 84, 577, 406, -1000, -1000, -1000,
	-1000, -1000, 495, -1000, 409, -1000, 407, 576, 274, 8769,
	8769, 8769, -1000, -1000, -1000, 861, -1000, -1000, -1000, -1000,
	6529, 1410, 1410, -1000, -1000, -1000, -1000, 157, 504, -1000,
	504, 724, 724, -1000, 724, 726, -1000, 724, 54, 724,
	53, 504, 504, 521, -97, -1000, 328, 6268, 942, 656,
	750, -1000, -1000, -1000, 883, 6989, 7186, 955, -1000, 521,
	-1000, 718, 150, -1000, -1000, 521, -150, -1000, -1000, -1000,
	-1000, 8769, -1000, -1000, -1000, -1000, 8769, 725, 84, -1000,
	644, -1000, 638, 545, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 598, -1000, 724, 598, 598, 572, 1410, 3185, -1000,
	-1000, -1000, 114, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6529, 504, 493, 328, 940, 924, 8175, 8175, 8175,
	8175, -1000, 810, 804, -1000, 832, 820, 833, 9163, -1000,
	596, 6989, 245, -1000, 7978, -1000, -1000, 8966, 655, 504,
	8769, -147, -1000, 395, 594, 588, 8769, 722, -1000, -1000,
	-1000, -1000, 8769, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36, -1000, -1000, -1000, 6268, 6268, 750, 759, 799, -1000,
	-1000, -1000, -1000, 798, -1000, 732, -1000, -1000, -1000, -1000,
	-1000, 121, 119, 116, -1000, 653, -1000, -1000, 586, -1000,
	555, -1000, -1000, -1000, 583, 8769, 235, -1000, 101, 397,
	504, 107, -125, 328, 650, 6268, 6268, -1000, -1000, 521,
	521, 521, -147, -1000, 849, 104, 104, -1000, 581, 879,
	-1000, -1000, -1000, 288, 417, 918, 879, -1000, -1000, 904,
	879, -1000, -1000, 826, -119, -140, 328, 328, 8769, 8769,
	8769, -1000, 216, -1000, 288, -1000, 398, 902, 104, -1000,
	-1000, 288, 288, 371, -1000, -1000, -1000, -1000, 548, -1000,
	817, -1000, 562, -1000, 562, 562, 521, 353, -1000, 547,
	104, 576, 576, -1000, -1000, -121, -1000, 8769, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -126, -1000, -144, -1000,
}

var yyPgo = [...]int{
	0, 22, 23, 1314, 1309, 1306, 25, 1304, 1300, 1294,
	1293, 1291, 1290, 1284, 42, 848, 1282, 1274, 1271, 1269,
	1268, 1267, 1265, 1260, 1258, 1256, 1255, 1253, 1252, 1251,
	1250, 214, 1249, 1248, 1247, 33, 1244, 71, 1243, 88,
	1242, 1239, 1238, 32, 150, 60, 37, 209, 1235, 35,
	19, 17, 1234, 1233, 15, 1230, 52, 1228, 83, 1227,
	1225, 53, 1222, 1220, 1219, 6, 34, 1218, 62, 1215,
	1214, 75, 514, 1213, 1211, 1210, 1209, 1208, 1206, 48,
	11, 26, 1, 29, 1205, 41, 12, 1192, 47, 1188,
	1185, 1184, 1183, 27, 1182, 74, 1169, 45, 67, 1168,
	56, 14, 46, 1167, 1166, 77, 87, 82, 65, 1165,
	72, 1163, 1162, 165, 1160, 1159, 1145, 813, 1139, 407,
	454, 1137, 54, 1134, 58, 0, 4, 18, 30, 1133,
	44, 981, 69, 13, 1130, 1128, 1573, 49, 79, 28,
	1126, 1125, 1098, 1094, 1091, 1090, 1089, 31, 1087, 1085,
	1082, 1080, 1079, 1071, 1069, 1066, 1065, 1064, 1060, 1059,
	1058, 1056, 1054, 1053, 1052, 1050, 1049, 1046, 1044, 1043,
	1042, 1040, 1039, 1038, 1036, 1035, 20, 1033, 1031, 1030,
	21, 57, 24, 61, 1028, 1027, 1026, 76, 16, 1025,
	1023, 1022, 1021, 59, 36, 1020, 78, 40, 39, 1018,
	1014, 1013, 73, 10, 8, 1012, 9, 1011, 1010, 5,
	7, 1009, 1008, 1007, 1005, 1004, 1003, 1002, 2, 992,
	991, 63, 977, 976, 55, 3, 973, 972, 969, 968,
	50, 84, 967, 126,
}

var yyR1 = [...]int{
	0, 228, 229, 229, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 226,
	226, 225, 152, 152, 22, 22, 22, 22, 22, 227,
	227, 227, 227, 227, 227, 217, 217, 218, 218, 212,
	210, 210, 207, 207, 214, 214, 205, 205, 211, 211,
	208, 208, 206, 206, 213, 213, 222, 222, 223, 223,
	224, 224, 183, 183, 182, 182, 181, 181, 184, 184,
	184, 25, 198, 200, 200, 201, 201, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 154, 156, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 169, 170, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 172, 172, 173, 173, 174, 174, 175, 175, 157,
	180, 180, 155, 151, 153, 199, 199, 199, 194, 130,
	130, 140, 140, 140, 140, 219, 219, 220, 220, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 143,
	143, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 144, 144, 144, 144, 144,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 193, 193, 147, 147, 187, 187, 188,
	188, 188, 185, 185, 186, 186, 189, 189, 148, 148,
	148, 148, 148, 148, 36, 35, 35, 35, 115, 115,
	115, 190, 176, 176, 176, 150, 177, 177, 178, 178,
	178, 179, 179, 179, 191, 191, 192, 192, 149, 195,
	195, 195, 195, 6, 6, 215, 215, 215, 215, 209,
	209, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 197, 197, 196, 196, 204, 204, 203, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	62, 62, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 42, 42, 58,
	58, 59, 59, 60, 60, 61, 61, 61, 30, 28,
	29, 29, 29, 29, 232, 31, 32, 32, 33, 33,
	33, 39, 39, 39, 37, 37, 38, 38, 45, 45,
	44, 44, 46, 46, 46, 46, 129, 129, 129, 128,
	128, 48, 48, 49, 49, 50, 50, 51, 51, 51,
	63, 52, 52, 52, 52, 135, 135, 134, 134, 134,
	133, 133, 53, 53, 53, 53, 54, 54, 54, 54,
	55, 55, 57, 57, 56, 56, 64, 64, 64, 64,
	65, 65, 66, 66, 47, 47, 47, 47, 47, 47,
	47, 118, 118, 68, 68, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 78, 78, 78, 78, 78,
	78, 69, 69, 69, 69, 69, 69, 69, 43, 43,
	79, 79, 79, 85, 80, 80, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 76, 76, 76, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 233, 233, 77, 77,
	77, 77, 40, 40, 40, 40, 40, 137, 137, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 89, 89, 41, 41, 87, 87, 88, 90,
	90, 86, 86, 86, 71, 71, 71, 71, 71, 71,
	71, 73, 73, 73, 91, 91, 92, 92, 93, 93,
	94, 94, 95, 96, 96, 96, 97, 97, 97, 97,
	98, 98, 98, 70, 70, 70, 70, 70, 70, 99,
	99, 99, 99, 100, 100, 81, 81, 83, 83, 82,
	84, 101, 101, 102, 103, 103, 106, 106, 105, 105,
	105, 105, 105, 114, 114, 113, 113, 113, 104, 104,
	107, 107, 111, 111, 110, 112, 112, 112, 112, 109,
	109, 108, 108, 138, 138, 138, 116, 116, 119, 119,
	120, 120, 117, 117, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 122, 122, 122, 123, 123, 216,
	216, 126, 126, 127, 127, 131, 131, 132, 132, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 230, 231, 136,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 6, 3, 3,
	3, 5, 3, 3, 3, 3, 3, 0, 3, 0,
	2, 0, 1, 1, 1, 0, 2, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0,
}

var yyChk = [...]int{
	-1000, -228, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 40, -25,
	121, 122, 123, 144, 125, 137, 43, 60, 262, 139,
	269, 272, 273, 276, 275, 290, 36, 138, 142, 143,
	-230, 7, 246, 63, -229, 298, -93, 14, -33, 5,
	-31, -232, -31, -31, -31, -31, -198, 63, 238, -216,
	22, 27, 128, 29, -117, 132, 128, 129, 238, 128,
	128, 232, 121, 227, 264, -59, 266, 267, 234, 128,
	268, 230, 265, 229, 66, 42, 128, -131, 66, -125,
	252, 19, 199, 145, 164, 253, 295, 75, 198, 201,
	202, 140, 160, 204, 203, 196, 154, 38, 194, 178,
	270, 257, 236, 193, 155, 22, 179, 183, 277, 206,
	177, 24, 254, 45, 181, 207, 49, 197, 208, 185,
	184, 186, 167, 17, 209, 210, 180, 182, 256, 142,
	211, 48, 190, 271, 273, 234, 195, 169, 158, 159,
	144, 258, 130, 161, 290, 291, 293, 292, 294, 296,
	297, -136, -136, 69, 256, -136, 274, -136, -136, 291,
	293, 292, 294, 295, 297, 262, -136, -136, -136, -136,
	-14, -97, 16, 15, -17, -15, -230, 6, 31, 32,
	-39, 50, 51, -32, -117, -56, -131, 10, -103, -104,
	-106, 274, -138, -105, 278, 279, 277, -127, -114, 280,
	-126, -124, 168, 165, 66, -125, 81, 33, 35, 188,
	84, 151, 116, 173, 15, 85, 162, 115, 235, 200,
	247, 121, 58, 239, 240, 237, 238, 227, 156, 39,
	9, 36, 138, 32, 109, 123, 88, 89, 264, 141,
	34, 139, 78, 18, 61, 10, 42, 12, 13, 133,
	132, 100, 129, 56, 7, 149, 150, 117, 37, 97,
	52, 30, 54, 98, 16, 241, 242, 41, 176, 172,
	251, 175, 148, 171, 111, 59, 46, 82, 76, 157,
	79, 62, 143, 80, 14, 57, 267, 135, 266, 153,
	99, 124, 246, 55, 6, 250, 40, 137, 147, 53,
	128, 228, 174, 146, 170, 87, 131, 77, 268, 5,
	29, 191, 8, 60, 134, 243, 244, 245, 44, 166,
	163, 265, 255, 86, 11, 192, -227, 277, 271, 263,
	259, -199, -194, -130, 66, -125, -120, 133, 129, 129,
	129, -120, 128, -119, 133, 66, -119, -56, -56, 231,
	128, 238, -136, -136, 228, -60, 235, 236, -136, -136,
	-136, 234, -136, -136, -136, -136, -136, -56, -136, 69,
	-136, -82, -230, -82, -136, -56, -136, -136, 296, 275,
	276, -231, 65, -98, 18, 41, -47, -67, 82, -72,
	39, 34, -71, -68, -86, -84, -85, 116, 105, 106,
	113, 83, 117, -76, -74, -75, -77, 68, 67, 69,
	70, 71, 72, 76, 77, 78, -126, -131, -82, -230,
	54, 55, 247, 248, 251, 249, 85, 44, 237, 245,
	244, 243, 241, 242, 239, 240, 133, 238, 111, 246,
	66, -125, -94, -95, -47, -93, -14, -31, 46, -37,
	32, 74, -57, 37, -56, 40, 118, -56, 64, -107,
	-110, -108, 281, 283, -105, 274, 90, -113, -126, 68,
	39, -113, 40, 15, 15, 65, 64, -140, -143, -145,
	-144, -146, -141, -142, 162, 163, 116, 166, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 40, 140,
	158, 159, 160, 161, 179, 180, 181, 182, 183, 184,
	185, 186, 145, 164, 253, 146, 147, 148, 149, 150,
	151, 153, 154, 155, 156, 157, -131, 82, 66, 66,
	66, -56, -56, -62, -56, 34, 62, -131, -42, 10,
	-56, -56, -58, 10, 10, -58, -136, -136, -136, -80,
	-47, -136, -122, 131, 33, -136, -136, -136, 8, 100,
	81, 80, 97, 64, 17, -47, -69, 100, 82, 98,
	99, 84, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 115, 90, 91, 92, 93, 94,
	95, 96, -118, -230, -85, -230, 119, 120, -72, -72,
	-72, -72, -72, -72, -230, 118, -14, -230, -230, -230,
	-230, -230, -230, -230, -89, -47, -230, -233, -230, -233,
	-233, -233, -233, -233, -233, -233, -230, -230, -230, -230,
	64, -96, 35, 36, -97, -231, -39, -73, -126, 69,
	72, -38, 53, -70, 40, 44, -14, -230, -56, -101,
	-102, -86, -126, -131, -132, -131, -124, 165, 168, -66,
	11, -106, -138, -109, 64, -111, 64, 282, 284, 285,
	-107, 62, 79, -47, -177, 115, -230, 261, 23, -200,
	-201, -202, -155, -151, -153, -154, -156, -157, -158, -159,
	-160, -161, -162, -163, -164, -165, -166, -167, -168, -169,
	-170, -171, -172, -173, -174, -175, 75, 270, -183, 188,
	199, 43, 200, 201, 202, 129, 204, 205, 206, 24,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 39,
	-194, -195, -196, -5, -4, 129, 30, 27, 22, 21,
	-219, -220, -221, -189, -148, -190, -191, -192, -149, -36,
	-150, -178, -179, 76, 82, 39, 188, 135, 30, 29,
	75, 62, 115, 198, 195, -185, 191, -147, 63, -147,
	-147, -147, -147, -176, 165, -176, -176, -176, 63, 63,
	-147, -147, -147, -187, 63, -187, -187, -188, 63, -188,
	-222, -223, -224, -183, 34, 62, 62, 62, -121, 124,
	270, 247, 126, 123, 127, 122, 188, 165, 75, 39,
	14, 258, 66, 64, -56, -97, 233, -136, -136, -61,
	98, 11, -56, -56, -136, 64, -231, -56, 48, -47,
	-47, -78, 76, 82, 77, 78, -47, -47, -72, -79,
	-82, -85, 73, 100, 98, 99, 84, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -137, 66, 68, 66, -71, -71, -126, -45,
	32, -44, -46, 107, -47, -131, -127, -132, -124, -231,
	-14, -44, -44, -47, -47, -44, -37, -87, -88, 86,
	-126, -231, -44, -45, -44, -44, -95, -98, -116, 18,
	10, 44, 44, -44, -100, 62, -101, -81, -83, -82,
	-230, -14, -99, -126, -66, 64, 90, 118, -93, -47,
	-108, -110, -112, 286, 283, 289, 66, -130, -230, -230,
	-202, -182, 90, -182, 115, -181, 168, 165, -182, -182,
	-182, -182, -182, 203, 203, -182, -182, -182, -182, -182,
	-182, -182, -182, -182, -182, -182, -182, -182, -6, 66,
	-197, -196, 135, 29, 28, -221, 76, 68, 69, 70,
	76, -35, -68, -115, 237, 241, 242, 30, 30, 68,
	8, -180, 66, 68, 193, 194, 39, 39, 196, 197,
	-186, 192, 69, -176, -176, 40, -193, 68, -193, 69,
	69, -224, 115, -181, -56, -56, -56, -136, -122, -123,
	129, 30, 90, 131, 136, 136, 136, -56, -136, 68,
	68, -47, -61, -47, -136, 49, 76, 77, 78, -79,
	-72, -72, -72, -43, 141, 81, -231, -231, -44, 64,
	-129, -128, 33, -126, 68, 118, -230, 118, -231, -231,
	-231, 64, 134, 33, -231, -44, -90, -88, 88, -47,
	-231, -231, -231, -231, -231, -56, -48, 10, 38, -100,
	64, -231, -231, -231, 64, 118, -93, -102, -47, -127,
	-97, 283, 287, 288, -231, -130, -130, 68, -180, -182,
	-182, 40, 69, 69, 69, 68, 68, -182, -182, 69,
	68, 66, 69, 69, 69, 69, 39, 68, 39, 194,
	193, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 69, 39, 69, 39, 69, 39, 66, -125,
	-2, -1, 134, -6, 30, -197, 63, -35, 65, 66,
	116, 65, 64, 65, 64, 65, 64, -182, -182, -230,
	-230, -230, -56, -136, 66, 165, -198, 66, -194, -43,
	81, -72, -72, -231, -46, -128, 107, -132, -45, -127,
	-139, 116, 162, 140, 160, 156, 177, 167, 190, 158,
	191, -137, -139, 252, -93, 89, -47, 87, -66, -49,
	-50, -51, -52, -63, -85, -230, -56, 30, -83, 44,
	-14, -230, -126, -126, -97, -231, -231, -180, -180, 68,
	68, 63, -3, 23, 20, 26, 63, -2, -6, 65,
	69, 68, 69, 69, -218, 66, 39, -184, 66, 116,
	39, -204, -203, -126, -204, -204, 40, -72, 118, -231,
	-231, -147, -147, -147, -188, -147, 150, -147, 150, -231,
	-231, -230, -41, 250, -47, -91, 12, 64, -53, -54,
	-55, 52, 56, 58, 53, 54, 55, 59, -135, 33,
	-49, -230, -134, -133, 33, -131, 68, 8, -81, -14,
	118, -230, -152, 260, -204, -204, 63, -2, 65, 65,
	65, -231, 64, -147, -231, -231, 66, 107, -176, 66,
	-72, -231, 68, -92, 13, 15, -50, -51, -50, -51,
	52, 52, 52, 57, 52, 57, 52, -54, -131, -231,
	-64, 60, 132, 61, -133, -101, -231, -126, -226, -225,
	259, 69, 65, 65, -204, 63, -207, -203, -205, -208,
	-40, 100, 255, -47, -80, 62, 62, 52, 52, 129,
	129, 129, 64, -231, 66, -209, -209, 65, -204, -206,
	-214, -210, -212, 24, 75, 134, -206, -211, -210, 255,
	-206, -210, -231, 253, 59, 256, -47, -47, -230, -230,
	-230, -225, 44, -215, 24, -1, 75, 255, -209, 65,
	-213, 41, 19, -182, 68, -217, 23, 20, 25, 49,
	254, 257, -65, -126, -65, -65, 100, -182, 68, 25,
	-209, -182, -182, 69, 66, 49, -231, 64, -231, -231,
	-82, 69, 66, -218, -218, 255, -126, 256, 257,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 588, 0, 374, 374, 374, 374, 374, 0,
	679, 662, 0, 0, 0, 361, 0, 0, 884, 884,
	0, 884, 0, 884, 884, 0, 884, 884, 884, 884,
	0, 33, 34, 882, 1, 3, 596, 0, 0, 378,
	381, 376, 662, 0, 0, 0, 49, 0, 660, 0,
	0, 0, 660, 680, 0, 663, 658, 0, 658, 0,
	0, 0, 0, 884, 884, 0, 884, 884, 884, 0,
	884, 884, 884, 884, 884, 362, 0, 369, 685, 686,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 324, 325, 884, 0, 328, 884, 330, 331, 0,
	0, 884, 0, 884, 884, 0, 370, 371, 372, 373,
	27, 600, 0, 0, 588, 29, 0, 374, 379, 380,
	384, 382, 383, 375, 0, 0, 434, 0, 37, 38,
	624, 0, 0, 626, 653, 654, -2, 0, 0, 0,
	683, 684, -2, 700, 681, 682, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 44, 50, 51, 0,
	0, 0, 165, 0, 169, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 357,
	0, 0, 344, 345, 359, 0, 363, 364, 348, 349,
	350, 359, 352, 353, 354, 355, 356, 884, 326, 884,
	329, 884, 0, 884, 334, 674, 336, 337, 884, 884,
	884, 28, 883, 23, 0, 0, 597, 444, 0, 449,
	451, 0, 486, 487, 488, 489, 490, 0, 0, 0,
	0, 0, 0, 512, 513, 514, 515, 574, 575, 576,
	577, 578, 579, 580, 453, 454, 571, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 536, 536,
	536, 536, 536, 536, 536, 536, 0, 0, 0, 0,
	-2, -2, 589, 590, 593, 596, 27, 381, 0, 386,
	385, 377, 0, 0, 433, 0, 0, 442, 0, 638,
	649, 642, 0, 0, 627, 0, 0, 631, 635, 636,
	637, 266, 634, 0, 0, -2, 291, 175, 242, 172,
	173, 174, 235, 190, 235, 235, 235, 235, 262, 262,
	262, 262, 218, 219, 220, 221, 222, 0, 0, 205,
	235, 235, 235, 209, 225, 226, 227, 228, 229, 230,
	231, 232, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 237, 237, 237, 239, 239, -2, 0, 0, 0,
	0, 91, 0, 317, 320, 659, 0, 319, 596, 0,
	884, 884, 365, 0, 0, 884, 368, 327, 332, 0,
	484, 333, 0, 675, 676, 338, 339, 340, 601, 0,
	0, 0, 0, 0, 0, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 472, 473, 474, 475,
	476, 477, 450, 0, 464, 0, 0, 0, 506, 507,
	508, 509, 510, 0, 388, 0, 27, 0, 0, 0,
	0, 0, 0, 384, 0, 563, 0, 528, 0, 529,
	530, 531, 532, 533, 534, 535, 0, 388, 0, 0,
	0, 592, 594, 595, 600, 30, 384, 0, 581, 0,
	0, 0, 387, 613, 0, 0, -2, 0, 432, 442,
	621, 0, 571, 0, 435, 687, 688, 700, 701, 588,
	0, 625, 0, 640, 0, 641, 0, 0, 651, 652,
	639, 628, 629, 630, 632, 0, 0, 0, 0, 92,
	-2, 95, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 84, 84, 0, 84,
	84, 84, 84, 84, 0, 0, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 83,
	166, 167, 283, 302, 0, 304, 305, 300, -2, 292,
	168, 176, 177, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 246, 0, 0, 261, 0, 275, 277,
	0, 0, 0, 0, 0, 244, 243, 189, 0, 262,
	262, 212, 213, 214, 0, 215, 216, 217, 0, 0,
	206, 207, 208, 200, 0, 201, 202, 203, 0, 204,
	45, -2, 78, 0, 661, 0, 0, 0, 884, 674,
	0, 671, 0, 669, 0, 664, 665, 666, 667, 668,
	670, 672, 673, 0, 318, 884, 0, 342, 343, 346,
	0, 0, 360, 365, 351, 0, 619, 884, 0, 445,
	446, 448, 465, 0, 467, 469, 598, 599, 455, 456,
	480, 481, 482, 0, 0, 0, 0, 478, 460, 0,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 505, 547, 548, 0, 503, 504, 511, 0,
	0, 389, 390, 392, 396, 0, 572, 0, -2, 483,
	27, 0, 0, 0, 0, 0, 0, 569, 566, 0,
	0, 537, 0, 0, 0, 0, 591, 24, 0, 656,
	657, 582, 583, 401, 31, 0, 613, 603, 615, 617,
	0, 27, 0, 609, 588, 0, 0, 0, 596, 443,
	650, 643, 644, 0, 0, 648, 267, 0, 0, 0,
	96, 0, 85, 0, 84, 84, 86, 0, 0, 0,
	0, 0, 0, 84, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 284,
	283, 303, 0, 302, 293, 178, 247, 248, 249, 250,
	251, 252, 253, 255, 258, 259, 260, 274, 276, 278,
	0, 265, 160, 161, 268, 269, 270, 271, 272, 273,
	171, 245, 0, 210, 211, 0, 0, 233, 0, 0,
	0, 79, 84, 84, 0, 0, 0, 309, 0, 884,
	677, 678, 0, 0, 0, 0, 0, 321, 341, 358,
	366, 367, 347, 485, 335, 602, 466, 468, 470, 457,
	478, 461, 0, 458, 0, 0, 452, 516, 0, 0,
	393, 397, 0, 399, 400, 0, 388, 0, -2, 519,
	520, 0, 0, 0, 0, 588, 0, 567, 0, 0,
	527, 538, 539, 540, 541, 25, 442, 0, 0, 32,
	0, 618, -2, 0, 0, 0, 596, 622, 623, 572,
	36, 645, 646, 647, 52, 0, 0, 162, 163, 0,
	0, 87, 121, 122, 159, 124, 125, 0, 0, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	0, 296, 0, 0, 295, 283, 0, 254, 236, 263,
	264, 223, 0, 224, 0, 240, 0, 0, 0, 0,
	0, 0, 310, 311, 312, 0, 314, 315, 316, 459,
	0, 479, 462, 517, 391, 398, 394, 0, 0, 573,
	0, 235, 235, 552, 235, 239, 555, 235, 557, 235,
	560, 0, 0, 0, 564, 526, 570, 0, 584, 402,
	403, 405, 406, 407, 415, 0, 417, 0, 616, 0,
	-2, 0, 611, 610, 35, 0, 42, 123, 164, 126,
	127, 0, 294, 297, 298, 299, 0, 0, 295, 256,
	0, 234, 0, 0, 80, 57, 58, 81, 88, 89,
	90, 0, 306, 235, 0, 0, 0, 463, 0, 518,
	521, 549, 262, 553, 554, 556, 558, 559, 561, 523,
	522, 0, 0, 0, 568, 586, 0, 0, 0, 0,
	0, 422, 0, 0, 425, 0, 0, 0, 0, 416,
	0, 0, 436, 418, 0, 420, 421, 0, 606, 27,
	0, 0, 54, 0, 0, 0, 0, 0, 257, 238,
	241, 62, 0, 308, 66, 70, 313, 395, 550, 551,
	542, 525, 565, 26, 0, 0, 404, 411, 0, 414,
	423, 424, 426, 0, 428, 0, 430, 431, 408, 409,
	410, 0, 0, 0, 419, 614, -2, 612, 0, 39,
	0, 43, 289, 289, 0, 0, 72, 307, 72, 72,
	0, 0, 0, 587, 585, 0, 0, 427, 429, 0,
	0, 0, 0, 53, 0, 279, 280, 289, 0, 46,
	63, 64, 65, 84, 0, 0, 47, 67, 68, 0,
	48, 71, 524, 0, 0, 0, 412, 413, 0, 0,
	0, 40, 0, 290, 84, 286, 0, 0, 281, 289,
	73, 84, 84, 0, 61, 59, 55, 56, 0, 543,
	0, 546, 0, 440, 0, 0, 0, 0, 287, 0,
	282, 0, 0, 60, 69, 544, 437, 0, 438, 439,
	41, 285, 288, 74, 75, 0, 441, 0, 545,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 110, 102, 3,
	63, 65, 107, 105, 64, 106, 118, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 298,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}
type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}
func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}
func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4
	if !yyErrorVerbose {
		return "syntax error"
	}
	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)
	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)
	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}
	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}
		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}
	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}
func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}
out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}
func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}
yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}
		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}
	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}
	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1
	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1046
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1054
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1058
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1065
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1085
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1091
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1102
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1124
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1130
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1156
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1183
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1191
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1199
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1217
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1223
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1230
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1260
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1325
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1344
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1355
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1367
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1387
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1394
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1402
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1407
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1431
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1437
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1448
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1529
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1549
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1605
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1626
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1647
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1723
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1729
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1754
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1760
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1772
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1788
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1845
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1853
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1865
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1869
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1909
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1936
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1966
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2115
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2333
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2337
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2345
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2355
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2538
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2554
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2566
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2580
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2591
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2607
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2617
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2646
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2656
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2705
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2731
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2743
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2747
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2752
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2757
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2761
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2765
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2769
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2773
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2779
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2787
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2792
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2840
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2846
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2864
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2868
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2872
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2876
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2888
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2892
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2902
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2906
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2910
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2914
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2922
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2926
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2942
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2946
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2967
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.tableName = TableName{}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2986
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.str = "full "
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3006
		{
			yyVAL.showFilter = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3020
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.statement = &OtherRead{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.statement = &OtherRead{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3044
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3049
		{
			setAllowComments(yylex, true)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3058
		{
			yyVAL.bytes2 = nil
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.str = UnionStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3072
		{
			yyVAL.str = UnionAllStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.str = UnionDistinctStr
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3081
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.str = SQLCacheStr
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3094
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.str = DistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3103
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.str = StraightJoinHint
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.selectExprs = nil
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3126
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3140
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3144
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3149
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3173
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3201
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3220
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3224
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3228
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3254
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.str = JoinStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3271
		{
			yyVAL.str = JoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.str = JoinStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.str = StraightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3285
		{
			yyVAL.str = LeftJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.str = LeftJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3293
		{
			yyVAL.str = RightJoinStr
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3297
		{
			yyVAL.str = RightJoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3303
		{
			yyVAL.str = NaturalJoinStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3307
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3317
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3331
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3336
		{
			yyVAL.indexHints = nil
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3340
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3344
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3348
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3354
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3358
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3363
		{
			yyVAL.expr = nil
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3367
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3377
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3403
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3407
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3423
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3427
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3439
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3443
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3447
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3451
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3455
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.str = IsNullStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3469
		{
			yyVAL.str = IsNotNullStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			yyVAL.str = IsTrueStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3477
		{
			yyVAL.str = IsNotTrueStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.str = IsFalseStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3485
		{
			yyVAL.str = IsNotFalseStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.str = EqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3495
		{
			yyVAL.str = LessThanStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.str = GreaterThanStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.str = LessEqualStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.str = GreaterEqualStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.str = NotEqualStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3520
		{
			yyVAL.expr = nil
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3524
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3538
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3544
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3564
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3568
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3572
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3636
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3640
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3644
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3652
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3666
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3670
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3674
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3700
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3714
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3718
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3722
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3726
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 524:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3730
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3734
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3738
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3742
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3817
		{
			yyVAL.str = ""
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3821
		{
			yyVAL.str = BooleanModeStr
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3825
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 545:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3829
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3833
		{
			yyVAL.str = QueryExpansionStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3839
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3865
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3899
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3904
		{
			yyVAL.expr = nil
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3908
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3913
		{
			yyVAL.str = string("")
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3917
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3923
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3927
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3933
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3938
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3948
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3952
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3956
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3970
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.expr = &NullVal{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4001
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4005
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4010
		{
			yyVAL.exprs = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4014
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4019
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4023
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4028
		{
			yyVAL.orderBy = nil
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4032
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4038
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4042
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4048
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4053
		{
			yyVAL.str = AscScr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4057
		{
			yyVAL.str = AscScr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4061
		{
			yyVAL.str = DescScr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4066
		{
			yyVAL.limit = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4070
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4074
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4078
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4083
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4087
		{
			yyVAL.str = ForUpdateStr
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4091
		{
			yyVAL.str = ShareModeStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4104
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4108
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4112
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4117
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4121
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4125
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4132
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4136
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4140
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4144
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4149
		{
			yyVAL.updateExprs = nil
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4153
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4159
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4163
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4169
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4173
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4179
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4185
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4195
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4199
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4205
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4211
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4215
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4221
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4225
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4232
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4236
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4240
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4244
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4248
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4255
		{
			yyVAL.bytes = []byte("charset")
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4261
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4265
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4269
		{
			yyVAL.expr = &Default{}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4275
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4279
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4285
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4289
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4295
		{
			yyVAL.str = ""
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4299
		{
			yyVAL.str = yyDollar[2].str
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4305
		{
			yyVAL.str = yyDollar[3].str
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4311
		{
			yyVAL.str = RepeatableRead
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4315
		{
			yyVAL.str = ReadCommitted
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4319
		{
			yyVAL.str = ReadUncommitted
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4323
		{
			yyVAL.str = Serializable
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4329
		{
			yyVAL.str = ""
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4333
		{
			yyVAL.str = yyDollar[2].str
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4339
		{
			yyVAL.str = TxReadWrite
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4343
		{
			yyVAL.str = TxReadOnly
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4349
		{
			yyVAL.str = SessionStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4353
		{
			yyVAL.str = SessionStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4357
		{
			yyVAL.str = GlobalStr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4366
		{
			yyVAL.byt = 0
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4370
		{
			yyVAL.byt = 1
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4375
		{
			yyVAL.byt = 0
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4379
		{
			yyVAL.byt = 1
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4384
		{
			yyVAL.str = ""
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4388
		{
			yyVAL.str = IgnoreStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4394
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4398
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4402
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4406
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4410
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4414
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4418
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4422
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4426
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4430
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4435
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4439
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4443
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4449
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4453
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4458
		{
			yyVAL.str = IndexStr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4462
		{
			yyVAL.str = UniqueStr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4468
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4472
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4479
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4485
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4489
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4496
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4716
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4725
		{
			decNesting(yylex)
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4730
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
