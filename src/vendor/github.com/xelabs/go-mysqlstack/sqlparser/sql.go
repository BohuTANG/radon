//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
	checkOptionEnum       CheckOptionEnum
	checkOptionList       CheckOptionList
	delete_options_list   DeleteOptionList
	delete_option         DeleteOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const DO = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALGORITHM = 57362
const BTREE = 57363
const CASCADE = 57364
const CONSTRAINT = 57365
const FULLTEXT = 57366
const HASH = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHANGED = 57390
const CHECK = 57391
const CHECKSUM = 57392
const FAST = 57393
const MEDIUM = 57394
const UPGRADE = 57395
const VALUES = 57396
const LAST_INSERT_ID = 57397
const NEXT = 57398
const VALUE = 57399
const SHARE = 57400
const MODE = 57401
const SQL_NO_CACHE = 57402
const SQL_CACHE = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const ID = 57415
const HEX = 57416
const STRING = 57417
const INTEGRAL = 57418
const FLOAT = 57419
const HEXNUM = 57420
const VALUE_ARG = 57421
const LIST_ARG = 57422
const COMMENT = 57423
const COMMENT_KEYWORD = 57424
const NULL = 57425
const TRUE = 57426
const FALSE = 57427
const OFF = 57428
const OR = 57429
const AND = 57430
const NOT = 57431
const BETWEEN = 57432
const CASE = 57433
const WHEN = 57434
const THEN = 57435
const ELSE = 57436
const END = 57437
const LE = 57438
const GE = 57439
const NE = 57440
const NULL_SAFE_EQUAL = 57441
const IS = 57442
const LIKE = 57443
const REGEXP = 57444
const IN = 57445
const SHIFT_LEFT = 57446
const SHIFT_RIGHT = 57447
const DIV = 57448
const MOD = 57449
const UNARY = 57450
const COLLATE = 57451
const BINARY = 57452
const INTERVAL = 57453
const JSON_EXTRACT_OP = 57454
const JSON_UNQUOTE_EXTRACT_OP = 57455
const CREATE = 57456
const ALTER = 57457
const DROP = 57458
const RENAME = 57459
const ANALYZE = 57460
const ADD = 57461
const MODIFY = 57462
const COLUMN = 57463
const IF = 57464
const IGNORE = 57465
const INDEX = 57466
const PRIMARY = 57467
const QUICK = 57468
const TABLE = 57469
const TO = 57470
const USING = 57471
const VIEW = 57472
const DESC = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const SHOW = 57476
const DATE = 57477
const ESCAPE = 57478
const HELP = 57479
const REPAIR = 57480
const TRUNCATE = 57481
const OPTIMIZE = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const CHARSET = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const FIXED = 57531
const DYNAMIC = 57532
const STORAGE = 57533
const DISK = 57534
const MEMORY = 57535
const COLUMN_FORMAT = 57536
const AVG_ROW_LENGTH = 57537
const COMPRESSION = 57538
const CONNECTION = 57539
const DATA = 57540
const DIRECTORY = 57541
const DELAY_KEY_WRITE = 57542
const ENCRYPTION = 57543
const INSERT_METHOD = 57544
const MAX_ROWS = 57545
const MIN_ROWS = 57546
const PACK_KEYS = 57547
const PASSWORD = 57548
const ROW_FORMAT = 57549
const STATS_AUTO_RECALC = 57550
const STATS_PERSISTENT = 57551
const STATS_SAMPLE_PAGES = 57552
const TABLESPACE = 57553
const DELAYED = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const COMPRESSED = 57557
const REDUNDANT = 57558
const COMPACT = 57559
const TOKUDB_DEFAULT = 57560
const TOKUDB_FAST = 57561
const TOKUDB_SMALL = 57562
const TOKUDB_ZLIB = 57563
const TOKUDB_QUICKLZ = 57564
const TOKUDB_LZMA = 57565
const TOKUDB_SNAPPY = 57566
const TOKUDB_UNCOMPRESSED = 57567
const COLLATION = 57568
const DATABASES = 57569
const TABLES = 57570
const WARNINGS = 57571
const VARIABLES = 57572
const EVENTS = 57573
const BINLOG = 57574
const GTID = 57575
const STATUS = 57576
const COLUMNS = 57577
const FIELDS = 57578
const CURRENT_TIMESTAMP = 57579
const CURRENT_DATE = 57580
const DATABASE = 57581
const SCHEMA = 57582
const CURRENT_TIME = 57583
const LOCALTIME = 57584
const LOCALTIMESTAMP = 57585
const UTC_DATE = 57586
const UTC_TIME = 57587
const UTC_TIMESTAMP = 57588
const REPLACE = 57589
const CONVERT = 57590
const CAST = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const MATCH = 57594
const AGAINST = 57595
const BOOLEAN = 57596
const LANGUAGE = 57597
const WITH = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const FORMAT = 57602
const TREE = 57603
const TRADITIONAL = 57604
const EXTENDED = 57605
const PARTITION = 57606
const PARTITIONS = 57607
const LIST = 57608
const XA = 57609
const DISTRIBUTED = 57610
const ENGINES = 57611
const VERSIONS = 57612
const PROCESSLIST = 57613
const QUERYZ = 57614
const TXNZ = 57615
const KILL = 57616
const ENGINE = 57617
const SINGLE = 57618
const BEGIN = 57619
const START = 57620
const TRANSACTION = 57621
const COMMIT = 57622
const ROLLBACK = 57623
const GLOBAL = 57624
const LOCAL = 57625
const SESSION = 57626
const NAMES = 57627
const ISOLATION = 57628
const LEVEL = 57629
const READ = 57630
const WRITE = 57631
const ONLY = 57632
const REPEATABLE = 57633
const COMMITTED = 57634
const UNCOMMITTED = 57635
const SERIALIZABLE = 57636
const NO_WRITE_TO_BINLOG = 57637
const RADON = 57638
const ATTACH = 57639
const ATTACHLIST = 57640
const DETACH = 57641
const RESHARD = 57642
const CLEANUP = 57643
const RECOVER = 57644
const REBALANCE = 57645

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"DO",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHANGED",
	"CHECK",
	"CHECKSUM",
	"FAST",
	"MEDIUM",
	"UPGRADE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"USING",
	"VIEW",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5345

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 207,
	6, 392,
	7, 392,
	8, 392,
	9, 392,
	19, 392,
	73, 392,
	264, 392,
	-2, 949,
	-1, 417,
	128, 788,
	-2, 784,
	-1, 418,
	128, 789,
	-2, 785,
	-1, 454,
	100, 957,
	-2, 758,
	-1, 460,
	100, 808,
	-2, 736,
	-1, 481,
	1, 112,
	321, 112,
	-2, 122,
	-1, 521,
	5, 33,
	-2, 383,
	-1, 658,
	125, 122,
	175, 122,
	178, 122,
	181, 122,
	-2, 134,
	-1, 709,
	1, 112,
	321, 112,
	-2, 122,
	-1, 717,
	1, 113,
	321, 113,
	-2, 122,
	-1, 804,
	128, 791,
	-2, 787,
	-1, 853,
	74, 61,
	146, 61,
	-2, 537,
	-1, 877,
	125, 122,
	175, 122,
	178, 122,
	181, 122,
	-2, 135,
	-1, 934,
	36, 342,
	73, 342,
	76, 342,
	141, 342,
	-2, 954,
	-1, 1054,
	5, 34,
	-2, 586,
	-1, 1266,
	5, 33,
	-2, 707,
	-1, 1279,
	74, 61,
	146, 61,
	-2, 538,
	-1, 1482,
	5, 34,
	-2, 708,
	-1, 1521,
	5, 33,
	-2, 710,
	-1, 1582,
	5, 34,
	-2, 711,
}

const yyPrivate = 57344

const yyLast = 12553

var yyAct = [...]int{

	418, 1533, 1413, 1127, 471, 371, 846, 1554, 1462, 588,
	1463, 1561, 395, 1412, 963, 424, 1592, 1347, 1409, 1567,
	65, 393, 1374, 1152, 1175, 455, 1283, 1216, 983, 856,
	1217, 470, 373, 969, 1294, 1020, 76, 1107, 1165, 1099,
	1218, 1106, 1098, 1154, 803, 122, 1263, 122, 213, 1089,
	1093, 1240, 847, 521, 3, 795, 788, 1047, 1039, 519,
	730, 798, 750, 1190, 938, 362, 370, 1008, 719, 878,
	643, 451, 459, 644, 122, 616, 463, 621, 473, 815,
	636, 765, 514, 891, 979, 716, 1155, 450, 484, 642,
	842, 718, 448, 433, 122, 369, 122, 458, 627, 731,
	487, 797, 650, 117, 599, 634, 64, 482, 540, 541,
	421, 1120, 423, 69, 1119, 865, 866, 1121, 122, 1013,
	212, 86, 420, 1300, 1301, 645, 360, 646, 1299, 170,
	539, 124, 116, 646, 115, 150, 721, 154, 157, 158,
	396, 58, 864, 645, 351, 71, 72, 73, 74, 75,
	875, 1072, 1498, 113, 140, 1534, 354, 356, 355, 357,
	358, 422, 359, 468, 190, 735, 160, 467, 1090, 178,
	163, 744, 1030, 1617, 1580, 466, 30, 31, 33, 34,
	1077, 465, 112, 1074, 1075, 349, 1616, 462, 1547, 1612,
	1579, 1220, 1253, 485, 1591, 1405, 130, 1546, 1569, 58,
	1168, 500, 496, 473, 492, 1169, 1170, 517, 429, 498,
	499, 506, 366, 88, 800, 1017, 491, 1219, 439, 438,
	440, 1138, 554, 553, 563, 564, 556, 557, 558, 559,
	560, 561, 562, 555, 737, 1137, 565, 97, 443, 442,
	739, 1185, 118, 62, 1007, 348, 962, 114, 1181, 1370,
	105, 1400, 1593, 1180, 80, 970, 1570, 1472, 192, 745,
	746, 1349, 81, 134, 526, 85, 176, 189, 1398, 126,
	363, 752, 1204, 480, 855, 1073, 1495, 95, 139, 148,
	94, 1494, 185, 186, 135, 193, 1493, 111, 127, 478,
	477, 169, 476, 184, 1012, 1157, 88, 1011, 488, 475,
	1010, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 1207, 1206, 1349, 179, 1205, 493, 147, 141, 183,
	138, 164, 131, 125, 1553, 132, 133, 137, 136, 87,
	155, 162, 165, 171, 172, 177, 932, 914, 30, 31,
	33, 34, 92, 119, 58, 58, 1103, 577, 578, 110,
	98, 520, 109, 107, 1485, 96, 1298, 104, 122, 970,
	1114, 1390, 182, 1104, 146, 1440, 1442, 532, 534, 1097,
	1053, 738, 1051, 857, 82, 586, 614, 751, 528, 565,
	872, 123, 128, 159, 1605, 175, 144, 191, 149, 188,
	187, 145, 99, 108, 102, 103, 106, 720, 501, 1545,
	1380, 575, 1156, 143, 180, 62, 181, 826, 874, 545,
	153, 1255, 1076, 1182, 1183, 1178, 1179, 30, 31, 33,
	34, 544, 543, 122, 194, 195, 197, 196, 198, 129,
	199, 200, 1378, 555, 32, 1441, 565, 1022, 545, 1356,
	1594, 931, 1128, 1203, 1575, 1096, 122, 527, 623, 90,
	587, 463, 740, 1202, 1130, 649, 752, 463, 463, 1513,
	554, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 458, 529, 565, 484, 816, 710, 651, 651,
	122, 122, 1379, 624, 62, 1160, 83, 84, 484, 1357,
	1161, 1162, 1163, 122, 122, 533, 533, 502, 1164, 391,
	392, 122, 1057, 629, 1012, 613, 1614, 1011, 574, 576,
	1010, 601, 602, 603, 604, 605, 606, 607, 544, 543,
	543, 62, 647, 612, 760, 762, 763, 474, 831, 122,
	761, 768, 1059, 1021, 585, 545, 545, 589, 590, 591,
	592, 593, 594, 595, 625, 598, 600, 600, 600, 600,
	600, 600, 600, 600, 608, 609, 610, 611, 1201, 630,
	654, 766, 751, 631, 83, 84, 816, 734, 1064, 1610,
	58, 1457, 1241, 741, 1058, 1458, 1535, 544, 543, 1461,
	546, 767, 709, 544, 543, 463, 722, 579, 580, 581,
	582, 583, 584, 1460, 545, 724, 32, 732, 1243, 463,
	545, 743, 1220, 1032, 1033, 1034, 794, 1321, 458, 1569,
	479, 363, 802, 122, 828, 1245, 1320, 1249, 597, 1244,
	817, 1242, 1514, 1325, 1319, 1316, 1247, 463, 1219, 1383,
	587, 122, 122, 1311, 122, 832, 1246, 772, 848, 833,
	619, 622, 463, 807, 1344, 1342, 1340, 1310, 837, 1248,
	1250, 770, 771, 769, 849, 1309, 1176, 1194, 1177, 804,
	473, 544, 543, 458, 1382, 820, 1168, 1570, 1257, 1323,
	827, 1169, 1170, 792, 793, 32, 1193, 1186, 545, 1343,
	1341, 1339, 965, 966, 967, 968, 544, 543, 1029, 530,
	1220, 926, 808, 809, 813, 823, 812, 1569, 976, 977,
	978, 1607, 1598, 545, 1322, 1475, 971, 972, 973, 789,
	819, 790, 821, 822, 1459, 1448, 1219, 58, 1447, 835,
	1324, 1317, 845, 122, 122, 1313, 1312, 905, 1571, 859,
	589, 1305, 122, 122, 858, 1223, 122, 985, 867, 852,
	1222, 1191, 1016, 1173, 1615, 1611, 928, 1376, 363, 1507,
	1596, 122, 1585, 615, 615, 1570, 1560, 756, 757, 758,
	764, 1507, 1563, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 1511, 1375,
	1558, 615, 766, 1507, 1537, 1327, 1326, 1507, 1536, 1505,
	981, 982, 1507, 615, 1025, 986, 1153, 873, 1486, 615,
	1504, 463, 767, 1009, 363, 1014, 1372, 810, 811, 1006,
	1369, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1049, 554, 553, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 1484, 615, 565, 558, 559,
	560, 561, 562, 555, 122, 1318, 565, 1281, 615, 1363,
	1362, 1035, 122, 1359, 1360, 122, 122, 1122, 122, 791,
	463, 1359, 1358, 1503, 870, 1040, 556, 557, 558, 559,
	560, 561, 562, 555, 473, 713, 565, 712, 1123, 1045,
	615, 458, 542, 615, 1355, 1215, 711, 1110, 486, 1105,
	659, 658, 66, 1214, 1063, 1092, 1094, 1410, 1044, 1094,
	1480, 542, 1115, 1281, 1361, 735, 1045, 1081, 1129, 1082,
	1132, 1133, 1134, 1135, 1136, 1061, 1262, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	743, 647, 1230, 394, 1117, 1116, 1113, 735, 30, 30,
	863, 1095, 1088, 1052, 861, 854, 905, 1126, 1095, 829,
	641, 1045, 554, 553, 563, 564, 556, 557, 558, 559,
	560, 561, 562, 555, 805, 806, 565, 385, 384, 386,
	387, 388, 389, 1131, 30, 62, 390, 818, 120, 1045,
	205, 430, 1539, 1036, 1037, 1038, 30, 1520, 964, 122,
	122, 122, 1501, 1454, 1449, 1111, 984, 77, 1353, 1187,
	1188, 834, 1159, 1281, 980, 62, 62, 205, 855, 1489,
	1094, 1208, 1209, 1270, 975, 1124, 1125, 1212, 1166, 28,
	974, 1410, 1265, 990, 989, 1264, 988, 205, 723, 205,
	841, 1065, 1492, 1433, 1265, 1431, 1491, 1041, 1434, 1192,
	1432, 62, 1079, 1080, 622, 1430, 1429, 1603, 62, 463,
	1578, 205, 1259, 62, 463, 1199, 1078, 554, 553, 563,
	564, 556, 557, 558, 559, 560, 561, 562, 555, 1589,
	1049, 565, 1087, 458, 628, 458, 1226, 802, 1435, 1239,
	1289, 1290, 1254, 1086, 122, 1225, 1258, 428, 434, 435,
	1227, 1220, 626, 617, 1219, 1229, 1237, 1467, 1211, 1210,
	848, 122, 1189, 655, 122, 122, 1235, 1234, 1238, 632,
	1478, 1252, 122, 122, 1271, 1251, 849, 1219, 987, 458,
	618, 725, 78, 1275, 804, 473, 473, 1293, 628, 1303,
	1304, 431, 432, 1518, 1307, 1308, 1110, 1351, 1278, 1269,
	1277, 1314, 1315, 1266, 1110, 1297, 1266, 1272, 1276, 1279,
	1172, 1171, 1346, 1158, 1306, 1296, 1280, 1285, 1288, 1289,
	1290, 1286, 91, 1287, 1291, 587, 1608, 1490, 1042, 1348,
	804, 58, 1043, 1602, 1085, 1601, 1220, 743, 1350, 1600,
	66, 425, 1084, 1452, 1054, 1055, 1056, 1451, 1517, 1060,
	657, 656, 426, 1453, 1066, 1516, 1067, 1068, 1069, 1070,
	122, 1352, 1477, 1285, 1288, 1289, 1290, 1286, 473, 1287,
	1291, 1095, 727, 1354, 1550, 1174, 825, 68, 525, 7,
	522, 6, 70, 1386, 1387, 524, 5, 523, 4, 63,
	1267, 1268, 1, 1267, 635, 445, 464, 1224, 1532, 1373,
	717, 937, 1371, 936, 1111, 1599, 79, 1590, 1566, 1385,
	1568, 1573, 1295, 1231, 1232, 1543, 1393, 1394, 1384, 1395,
	1540, 1388, 1397, 122, 1399, 1542, 877, 876, 473, 473,
	848, 1411, 1418, 1420, 1396, 469, 848, 1421, 1414, 1256,
	927, 943, 122, 122, 122, 122, 849, 1422, 942, 1184,
	961, 205, 849, 122, 939, 1110, 122, 1408, 941, 1377,
	209, 1381, 948, 947, 871, 902, 901, 900, 899, 1297,
	1273, 1274, 1407, 898, 1110, 1110, 1110, 1110, 1436, 897,
	1426, 1416, 1428, 1425, 896, 1427, 895, 1423, 1110, 1424,
	894, 893, 1445, 1446, 892, 890, 1364, 1365, 1366, 563,
	564, 556, 557, 558, 559, 560, 561, 562, 555, 807,
	889, 565, 888, 887, 886, 885, 205, 884, 883, 879,
	882, 881, 1497, 880, 946, 463, 463, 463, 1348, 1455,
	944, 940, 664, 662, 1465, 1466, 1456, 663, 661, 640,
	666, 665, 660, 1292, 481, 1046, 1464, 1464, 1464, 93,
	1213, 463, 347, 1200, 1403, 991, 46, 89, 573, 1083,
	1167, 456, 1118, 1111, 862, 860, 1415, 447, 58, 1468,
	1469, 446, 458, 205, 205, 1419, 1239, 1417, 830, 620,
	1515, 1233, 1111, 1111, 1111, 1111, 205, 729, 1471, 1476,
	1479, 1062, 596, 814, 205, 372, 1295, 759, 383, 380,
	382, 381, 836, 1389, 1488, 547, 364, 1439, 1109, 824,
	463, 1071, 419, 736, 203, 463, 516, 101, 1499, 100,
	497, 1284, 742, 1500, 1282, 1108, 1261, 726, 1404, 1512,
	840, 1464, 1406, 1348, 1502, 441, 1464, 437, 945, 1508,
	67, 436, 27, 1519, 26, 473, 463, 473, 15, 1523,
	24, 1525, 16, 1414, 14, 13, 36, 11, 10, 9,
	1302, 25, 463, 8, 1526, 427, 29, 1524, 463, 2,
	1538, 22, 23, 21, 20, 19, 18, 17, 1541, 801,
	742, 12, 929, 1464, 801, 801, 930, 1549, 801, 1464,
	463, 463, 463, 1414, 1551, 1450, 0, 1521, 1556, 1557,
	463, 201, 801, 801, 801, 801, 205, 0, 1564, 1562,
	0, 1555, 1555, 1555, 473, 0, 848, 1581, 1583, 0,
	1588, 1464, 1574, 1577, 205, 205, 850, 853, 1565, 0,
	1572, 1576, 849, 1597, 0, 1595, 1552, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 463, 0, 0, 0,
	0, 350, 0, 352, 353, 1606, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 1609, 0,
	0, 0, 0, 0, 0, 1391, 1473, 1392, 1613, 0,
	1112, 1415, 0, 0, 1522, 0, 0, 0, 1401, 1402,
	363, 0, 0, 0, 1529, 1530, 1531, 0, 0, 0,
	494, 495, 0, 0, 503, 504, 505, 0, 507, 508,
	509, 510, 511, 512, 513, 0, 205, 205, 0, 0,
	0, 1415, 0, 58, 0, 1023, 205, 202, 0, 205,
	0, 1438, 0, 0, 0, 0, 916, 0, 0, 0,
	1443, 1444, 0, 0, 205, 30, 31, 33, 34, 55,
	0, 0, 0, 721, 444, 0, 0, 0, 0, 908,
	0, 0, 0, 0, 1527, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 489, 0, 490, 0, 955, 954,
	0, 0, 0, 0, 35, 0, 0, 951, 57, 43,
	801, 1548, 363, 0, 903, 0, 0, 0, 515, 0,
	0, 0, 0, 0, 0, 0, 533, 801, 0, 44,
	0, 0, 62, 0, 0, 957, 554, 553, 563, 564,
	556, 557, 558, 559, 560, 561, 562, 555, 956, 949,
	565, 0, 0, 0, 801, 950, 0, 205, 0, 0,
	0, 1474, 0, 0, 0, 1101, 1003, 0, 205, 640,
	912, 742, 1481, 1482, 1483, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	37, 38, 39, 0, 41, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 61, 60, 59,
	42, 0, 0, 47, 54, 40, 56, 0, 0, 1506,
	0, 0, 1509, 1510, 0, 0, 0, 1005, 0, 0,
	906, 0, 0, 0, 0, 0, 1001, 0, 0, 0,
	0, 907, 909, 910, 911, 0, 913, 914, 915, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 1544,
	0, 960, 0, 531, 959, 0, 0, 0, 535, 0,
	537, 538, 0, 998, 996, 992, 0, 995, 997, 1559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 205, 0, 0, 0, 0, 1582,
	0, 1584, 0, 1586, 1587, 0, 0, 0, 0, 0,
	0, 904, 0, 32, 0, 0, 0, 0, 0, 1000,
	0, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 0, 45, 565, 0, 0, 0, 0, 0,
	48, 0, 999, 49, 50, 0, 52, 51, 536, 801,
	0, 0, 0, 0, 0, 742, 801, 0, 0, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 742, 0, 0, 1101, 0, 994, 205, 742, 0,
	0, 0, 0, 515, 0, 205, 1101, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 748, 0, 749, 0, 0, 0,
	0, 753, 754, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 160, 0, 0, 178, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 462, 0, 1050, 205, 0, 850, 0,
	0, 0, 130, 0, 850, 0, 0, 544, 543, 0,
	0, 0, 0, 0, 0, 205, 205, 205, 205, 0,
	0, 0, 0, 0, 545, 0, 1437, 0, 0, 205,
	0, 0, 0, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 844, 844, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 134,
	1018, 1019, 176, 189, 0, 126, 1026, 0, 1028, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 193, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 515, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 0, 0, 1027, 0, 0, 0,
	0, 0, 0, 0, 681, 0, 0, 0, 182, 0,
	146, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 128, 159,
	0, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 0, 0, 0, 695, 698, 699,
	700, 701, 702, 703, 850, 704, 705, 706, 707, 708,
	683, 684, 685, 686, 667, 668, 696, 0, 670, 0,
	0, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 687, 688, 689, 690, 691, 692, 693, 694, 0,
	0, 0, 0, 0, 0, 0, 549, 0, 552, 0,
	0, 0, 0, 1198, 566, 567, 568, 569, 570, 571,
	572, 0, 550, 551, 548, 554, 553, 563, 564, 556,
	557, 558, 559, 560, 561, 562, 555, 0, 1221, 565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1195,
	1196, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 314, 270, 333, 243,
	248, 260, 345, 262, 263, 301, 222, 280, 170, 258,
	124, 0, 223, 0, 150, 0, 154, 157, 158, 0,
	311, 0, 0, 0, 322, 331, 277, 0, 246, 215,
	254, 216, 274, 140, 242, 316, 283, 261, 225, 229,
	0, 257, 288, 190, 339, 160, 293, 0, 178, 163,
	0, 0, 276, 319, 278, 312, 269, 302, 235, 292,
	334, 259, 298, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 1260, 130, 295, 328, 256, 297,
	300, 214, 294, 0, 218, 224, 344, 326, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 308,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	0, 291, 1368, 0, 0, 230, 220, 273, 0, 0,
	0, 234, 0, 249, 309, 0, 0, 0, 0, 265,
	266, 268, 305, 304, 320, 327, 335, 192, 244, 245,
	255, 317, 134, 253, 264, 176, 189, 299, 126, 324,
	318, 289, 271, 272, 219, 0, 307, 139, 148, 241,
	296, 185, 186, 135, 193, 226, 341, 127, 461, 340,
	169, 460, 184, 325, 290, 285, 221, 323, 287, 284,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	1367, 217, 0, 179, 332, 346, 147, 141, 183, 138,
	164, 131, 125, 232, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 240, 321, 0, 0, 0, 0,
	0, 182, 231, 146, 238, 236, 239, 313, 237, 281,
	282, 336, 337, 338, 310, 233, 0, 0, 315, 286,
	123, 128, 159, 343, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 252, 342, 306, 303,
	329, 0, 143, 180, 0, 181, 449, 0, 0, 454,
	452, 453, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 330, 314, 270, 333, 243, 248, 260, 345, 262,
	263, 301, 222, 280, 170, 258, 124, 0, 223, 0,
	150, 0, 154, 157, 158, 0, 311, 0, 0, 0,
	322, 331, 277, 0, 246, 215, 254, 216, 274, 140,
	242, 316, 283, 261, 225, 229, 0, 257, 288, 190,
	339, 160, 293, 0, 178, 163, 0, 0, 276, 319,
	278, 312, 269, 302, 235, 292, 334, 259, 298, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 295, 328, 256, 297, 300, 214, 294, 0,
	218, 224, 344, 326, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 275, 279, 308, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 291, 0, 0,
	0, 230, 220, 273, 0, 0, 0, 234, 0, 249,
	309, 0, 0, 0, 0, 265, 266, 268, 305, 304,
	320, 327, 335, 192, 244, 245, 255, 317, 134, 253,
	264, 176, 189, 299, 126, 324, 318, 289, 271, 272,
	219, 0, 307, 139, 148, 241, 296, 185, 186, 135,
	193, 226, 341, 127, 461, 340, 169, 460, 184, 325,
	290, 285, 221, 323, 287, 284, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 217, 0, 179,
	332, 346, 147, 141, 183, 138, 164, 131, 125, 232,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 321, 0, 0, 0, 0, 0, 182, 231, 146,
	238, 236, 239, 313, 237, 281, 282, 336, 337, 338,
	310, 233, 0, 0, 315, 286, 123, 128, 159, 343,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 0, 252, 342, 306, 303, 329, 0, 143, 180,
	0, 181, 0, 0, 0, 454, 452, 453, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 330, 314, 270,
	333, 243, 248, 260, 345, 262, 263, 301, 222, 280,
	170, 258, 124, 0, 223, 0, 150, 0, 154, 157,
	158, 0, 311, 0, 0, 0, 322, 331, 277, 0,
	246, 215, 254, 216, 274, 140, 242, 316, 283, 261,
	225, 229, 0, 257, 288, 190, 339, 160, 293, 0,
	178, 163, 0, 0, 276, 319, 278, 312, 269, 302,
	235, 292, 334, 259, 298, 0, 0, 0, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 295, 328,
	256, 297, 300, 214, 294, 0, 218, 224, 344, 326,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 275,
	279, 308, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 0, 291, 0, 0, 0, 230, 220, 273,
	0, 0, 0, 234, 0, 249, 309, 0, 0, 0,
	0, 265, 266, 268, 305, 304, 320, 327, 335, 192,
	244, 245, 255, 317, 134, 253, 264, 176, 189, 299,
	126, 324, 318, 289, 271, 272, 219, 0, 307, 139,
	148, 241, 296, 185, 186, 135, 193, 226, 341, 127,
	461, 340, 169, 460, 184, 325, 290, 285, 221, 323,
	287, 284, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 217, 0, 179, 332, 346, 147, 141,
	183, 138, 164, 131, 125, 232, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 240, 321, 0, 0,
	0, 0, 0, 182, 231, 146, 238, 236, 239, 313,
	237, 281, 282, 336, 337, 338, 310, 233, 0, 0,
	315, 286, 123, 128, 159, 343, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 252, 342,
	306, 303, 329, 0, 143, 180, 0, 181, 648, 0,
	0, 153, 0, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 330, 314, 270, 333, 243, 248, 260,
	345, 262, 263, 301, 222, 280, 170, 258, 124, 0,
	223, 0, 150, 0, 154, 157, 158, 0, 311, 0,
	0, 0, 322, 331, 277, 0, 246, 215, 254, 216,
	274, 140, 242, 316, 283, 261, 225, 229, 0, 257,
	288, 190, 339, 160, 293, 0, 178, 163, 0, 0,
	276, 319, 278, 312, 269, 302, 235, 292, 334, 259,
	298, 0, 0, 0, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 295, 328, 256, 297, 300, 214,
	294, 0, 218, 224, 344, 326, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 275, 279, 308, 267, 0,
	0, 0, 0, 0, 0, 1470, 0, 247, 0, 291,
	0, 0, 0, 230, 220, 273, 0, 0, 0, 234,
	0, 249, 309, 0, 0, 0, 0, 265, 266, 268,
	305, 304, 320, 327, 335, 192, 244, 245, 255, 317,
	134, 253, 264, 176, 189, 299, 126, 324, 318, 289,
	271, 272, 219, 0, 307, 139, 148, 241, 296, 185,
	186, 135, 193, 226, 341, 127, 227, 340, 169, 228,
	184, 325, 290, 285, 221, 323, 287, 284, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 217,
	0, 179, 332, 346, 147, 141, 183, 138, 164, 131,
	125, 232, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 240, 321, 0, 0, 0, 0, 0, 182,
	231, 146, 238, 236, 239, 313, 237, 281, 282, 336,
	337, 338, 310, 233, 0, 0, 315, 286, 123, 128,
	159, 343, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 252, 342, 306, 303, 329, 0,
	143, 180, 0, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 330,
	314, 270, 333, 243, 248, 260, 345, 262, 263, 301,
	222, 280, 170, 258, 124, 0, 223, 0, 150, 0,
	154, 157, 158, 0, 311, 0, 0, 0, 322, 331,
	277, 0, 246, 215, 254, 216, 274, 140, 242, 316,
	283, 261, 225, 229, 0, 257, 288, 190, 339, 160,
	293, 0, 178, 163, 0, 0, 276, 319, 278, 312,
	269, 302, 235, 292, 334, 259, 298, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	295, 328, 256, 297, 300, 214, 294, 0, 218, 224,
	344, 326, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 275, 279, 308, 267, 0, 0, 0, 0, 0,
	0, 1114, 0, 247, 0, 291, 0, 0, 0, 230,
	220, 273, 0, 0, 0, 234, 0, 249, 309, 0,
	0, 0, 0, 265, 266, 268, 305, 304, 320, 327,
	335, 192, 244, 245, 255, 317, 134, 253, 264, 176,
	189, 299, 126, 324, 318, 289, 271, 272, 219, 0,
	307, 139, 148, 241, 296, 185, 186, 135, 193, 226,
	341, 127, 227, 340, 169, 228, 184, 325, 290, 285,
	221, 323, 287, 284, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 217, 0, 179, 332, 346,
	147, 141, 183, 138, 164, 131, 125, 232, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 321,
	0, 0, 0, 0, 0, 182, 231, 146, 238, 236,
	239, 313, 237, 281, 282, 336, 337, 338, 310, 233,
	0, 0, 315, 286, 123, 128, 159, 343, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	252, 342, 306, 303, 329, 0, 143, 180, 0, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 330, 314, 270, 333, 243,
	248, 260, 345, 262, 263, 301, 222, 280, 170, 258,
	124, 0, 223, 0, 150, 0, 154, 157, 158, 0,
	311, 0, 0, 0, 322, 331, 277, 0, 246, 215,
	254, 216, 274, 140, 242, 316, 283, 261, 225, 229,
	0, 257, 288, 190, 339, 160, 293, 0, 178, 163,
	0, 0, 276, 319, 278, 312, 269, 302, 235, 292,
	334, 259, 298, 0, 0, 0, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 295, 328, 256, 297,
	300, 214, 294, 0, 218, 224, 344, 326, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 308,
	267, 0, 0, 0, 0, 0, 0, 1236, 0, 247,
	0, 291, 0, 0, 0, 230, 220, 273, 0, 0,
	0, 234, 0, 249, 309, 0, 0, 0, 0, 265,
	266, 268, 305, 304, 320, 327, 335, 192, 244, 245,
	255, 317, 134, 253, 264, 176, 189, 299, 126, 324,
	318, 289, 271, 272, 219, 0, 307, 139, 148, 241,
	296, 185, 186, 135, 193, 226, 341, 127, 227, 340,
	169, 228, 184, 325, 290, 285, 221, 323, 287, 284,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 217, 0, 179, 332, 346, 147, 141, 183, 138,
	164, 131, 125, 232, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 240, 321, 0, 0, 0, 0,
	0, 182, 231, 146, 238, 236, 239, 313, 237, 281,
	282, 336, 337, 338, 310, 233, 0, 0, 315, 286,
	123, 128, 159, 343, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 252, 342, 306, 303,
	329, 0, 143, 180, 0, 181, 0, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 330, 314, 270, 333, 243, 248, 260, 345, 262,
	263, 301, 222, 280, 170, 258, 124, 0, 223, 0,
	150, 0, 154, 157, 158, 0, 311, 0, 0, 0,
	322, 331, 277, 0, 246, 215, 254, 216, 274, 140,
	242, 316, 283, 261, 225, 229, 0, 257, 288, 190,
	339, 160, 293, 0, 178, 163, 0, 0, 276, 319,
	278, 312, 269, 302, 235, 292, 334, 259, 298, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 295, 328, 256, 297, 300, 214, 294, 0,
	218, 224, 344, 326, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 275, 279, 308, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 291, 0, 0,
	0, 230, 220, 273, 0, 0, 0, 234, 0, 249,
	309, 0, 0, 0, 0, 265, 266, 268, 305, 304,
	320, 327, 335, 192, 244, 245, 255, 317, 134, 253,
	264, 176, 189, 299, 126, 324, 318, 289, 271, 272,
	219, 0, 307, 139, 148, 241, 296, 185, 186, 135,
	193, 226, 341, 127, 461, 340, 169, 460, 184, 325,
	290, 285, 221, 323, 287, 284, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 217, 0, 179,
	332, 346, 147, 141, 183, 138, 164, 131, 125, 232,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 321, 0, 0, 0, 0, 0, 182, 231, 146,
	238, 236, 239, 313, 237, 281, 282, 336, 337, 338,
	310, 233, 0, 0, 315, 286, 123, 128, 159, 343,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 0, 252, 342, 306, 303, 329, 0, 143, 180,
	0, 181, 0, 0, 0, 153, 0, 0, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 330, 314, 270,
	333, 243, 248, 260, 345, 262, 263, 301, 222, 280,
	170, 258, 124, 0, 223, 0, 150, 0, 154, 157,
	158, 0, 311, 0, 0, 0, 322, 331, 277, 0,
	246, 215, 254, 216, 274, 140, 242, 316, 283, 261,
	225, 229, 0, 257, 288, 190, 339, 160, 293, 0,
	178, 163, 0, 0, 276, 319, 278, 312, 269, 302,
	235, 292, 334, 259, 298, 0, 0, 0, 210, 0,
	211, 0, 0, 0, 0, 0, 0, 130, 295, 328,
	256, 297, 300, 214, 294, 0, 218, 224, 344, 326,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 275,
	279, 308, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 0, 291, 0, 0, 0, 230, 220, 273,
	0, 0, 0, 234, 0, 249, 309, 0, 0, 0,
	0, 265, 266, 268, 305, 304, 320, 327, 335, 192,
	244, 245, 255, 317, 134, 253, 264, 176, 189, 299,
	126, 324, 318, 289, 271, 272, 219, 0, 307, 139,
	148, 241, 296, 185, 186, 135, 193, 226, 341, 127,
	227, 340, 169, 228, 184, 325, 290, 285, 221, 323,
	287, 284, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 217, 0, 179, 332, 346, 147, 141,
	183, 138, 164, 131, 125, 232, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 240, 321, 0, 0,
	0, 0, 0, 182, 231, 146, 238, 236, 239, 313,
	237, 281, 282, 336, 337, 338, 310, 233, 0, 0,
	315, 286, 123, 128, 159, 343, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 252, 342,
	306, 303, 329, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 330, 314, 270, 333, 243, 248, 260,
	345, 262, 263, 301, 222, 280, 170, 258, 124, 0,
	223, 0, 150, 0, 154, 157, 158, 0, 311, 0,
	0, 0, 322, 331, 277, 0, 246, 215, 254, 216,
	274, 140, 242, 316, 283, 261, 225, 229, 0, 257,
	288, 190, 339, 160, 293, 0, 178, 163, 0, 0,
	276, 319, 278, 312, 269, 302, 235, 292, 334, 259,
	298, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 295, 328, 256, 297, 300, 214,
	294, 0, 218, 224, 344, 326, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 275, 279, 308, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 0, 291,
	0, 0, 0, 230, 220, 273, 0, 0, 0, 234,
	0, 249, 309, 0, 0, 0, 0, 265, 266, 268,
	305, 304, 320, 327, 335, 192, 244, 245, 255, 317,
	134, 253, 264, 176, 189, 299, 126, 324, 318, 289,
	271, 272, 219, 0, 307, 139, 148, 241, 296, 185,
	186, 135, 193, 226, 341, 127, 227, 340, 169, 228,
	184, 325, 290, 285, 221, 323, 287, 284, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 217,
	0, 179, 332, 346, 147, 141, 183, 138, 164, 131,
	125, 232, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 240, 321, 0, 0, 0, 0, 0, 182,
	231, 146, 238, 236, 239, 313, 237, 281, 282, 336,
	337, 338, 310, 233, 0, 0, 315, 286, 123, 128,
	159, 343, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 252, 342, 306, 303, 329, 0,
	143, 180, 0, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 330,
	314, 270, 333, 243, 248, 260, 345, 262, 263, 301,
	222, 280, 170, 258, 124, 0, 223, 0, 150, 0,
	154, 157, 158, 0, 311, 0, 0, 0, 322, 331,
	277, 0, 246, 215, 254, 216, 274, 140, 242, 316,
	283, 261, 225, 229, 0, 257, 288, 190, 339, 160,
	293, 0, 178, 163, 0, 0, 276, 319, 278, 312,
	269, 302, 235, 292, 334, 259, 298, 0, 0, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	295, 328, 256, 297, 300, 214, 294, 0, 218, 224,
	344, 326, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 275, 279, 308, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 247, 0, 291, 0, 0, 0, 230,
	220, 273, 0, 0, 0, 234, 0, 249, 309, 0,
	0, 0, 0, 265, 266, 268, 305, 304, 320, 327,
	335, 192, 244, 245, 255, 317, 134, 253, 264, 176,
	189, 299, 126, 324, 318, 289, 271, 272, 219, 0,
	307, 139, 148, 241, 296, 185, 186, 135, 193, 226,
	341, 127, 227, 340, 169, 228, 184, 325, 290, 285,
	221, 323, 287, 284, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 217, 0, 179, 332, 346,
	147, 141, 183, 138, 164, 131, 125, 232, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 321,
	0, 0, 0, 0, 0, 182, 231, 146, 238, 236,
	239, 313, 237, 281, 282, 336, 337, 338, 310, 233,
	0, 0, 315, 286, 123, 128, 159, 343, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	252, 342, 306, 303, 329, 0, 143, 180, 0, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 330, 314, 270, 333, 243,
	248, 260, 345, 262, 263, 301, 222, 280, 170, 258,
	124, 0, 223, 0, 150, 0, 154, 157, 158, 0,
	311, 0, 0, 0, 322, 331, 277, 0, 246, 215,
	254, 216, 274, 140, 242, 316, 283, 261, 225, 229,
	0, 257, 288, 190, 339, 160, 293, 0, 178, 163,
	0, 0, 276, 319, 278, 312, 269, 302, 235, 292,
	334, 259, 298, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 295, 328, 256, 297,
	300, 214, 294, 0, 218, 224, 344, 326, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 308,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	0, 291, 0, 0, 0, 230, 220, 273, 0, 0,
	0, 234, 0, 249, 309, 0, 0, 0, 0, 265,
	266, 268, 305, 304, 320, 327, 335, 192, 244, 245,
	255, 317, 134, 253, 264, 176, 189, 299, 126, 324,
	318, 289, 271, 272, 219, 0, 307, 139, 148, 241,
	296, 185, 186, 135, 193, 226, 341, 127, 227, 340,
	169, 228, 184, 325, 290, 285, 221, 323, 287, 284,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 217, 0, 179, 332, 346, 147, 141, 183, 138,
	164, 131, 125, 232, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 240, 321, 0, 0, 0, 0,
	0, 182, 231, 146, 238, 236, 239, 313, 237, 281,
	282, 336, 337, 338, 310, 233, 0, 0, 315, 286,
	123, 128, 159, 343, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 252, 342, 306, 303,
	329, 0, 143, 180, 0, 181, 0, 0, 0, 153,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 0, 368, 0, 0, 140, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 404, 160, 0, 0,
	178, 163, 0, 0, 0, 0, 397, 398, 0, 0,
	0, 0, 0, 0, 868, 62, 0, 0, 417, 385,
	384, 386, 387, 388, 389, 0, 0, 130, 390, 391,
	392, 869, 0, 0, 365, 378, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 376, 0,
	0, 0, 0, 415, 0, 377, 0, 0, 374, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 405, 411, 414, 0,
	412, 409, 410, 408, 407, 406, 416, 399, 400, 402,
	0, 401, 123, 128, 159, 0, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 170, 0, 124, 0, 0, 0, 150,
	0, 154, 157, 158, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 796, 0, 368, 0, 0, 140, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 404,
	160, 0, 0, 178, 163, 0, 0, 0, 0, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 417, 385, 384, 386, 387, 388, 389, 0, 0,
	130, 390, 391, 392, 0, 0, 0, 365, 378, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 799, 0, 0, 0, 415, 0, 377, 0,
	0, 374, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 134, 0, 0,
	176, 189, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 148, 0, 0, 185, 186, 135, 193,
	0, 0, 127, 0, 0, 169, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 0, 0, 179, 0,
	0, 147, 141, 183, 138, 164, 131, 125, 0, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 146, 405,
	411, 414, 0, 412, 409, 410, 408, 407, 406, 416,
	399, 400, 402, 0, 401, 123, 128, 159, 0, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 180, 0,
	181, 0, 0, 0, 153, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 0, 368, 0, 0,
	140, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 404, 160, 0, 0, 178, 163, 0, 0, 0,
	0, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 615, 417, 385, 384, 386, 387, 388, 389,
	0, 0, 130, 390, 391, 392, 0, 0, 0, 365,
	378, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 0, 0, 0, 0, 415, 0,
	377, 0, 0, 374, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 193, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	146, 405, 411, 414, 0, 412, 409, 410, 408, 407,
	406, 416, 399, 400, 402, 0, 401, 123, 128, 159,
	0, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 368,
	0, 0, 140, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 404, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 417, 385, 384, 386, 387,
	388, 389, 0, 0, 130, 390, 391, 392, 0, 0,
	0, 365, 378, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 799, 0, 0, 0,
	415, 0, 377, 0, 0, 374, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 146, 405, 411, 414, 0, 412, 409, 410,
	408, 407, 406, 416, 399, 400, 402, 0, 401, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 0, 0, 30, 0, 0,
	0, 143, 180, 0, 181, 0, 0, 0, 153, 170,
	0, 124, 0, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 368, 0, 0, 140, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 404, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 417, 385, 384,
	386, 387, 388, 389, 0, 0, 130, 390, 391, 392,
	0, 0, 0, 365, 378, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 0, 0,
	0, 0, 415, 0, 377, 0, 0, 374, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 193, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 146, 405, 411, 414, 0, 412,
	409, 410, 408, 407, 406, 416, 399, 400, 402, 0,
	401, 123, 128, 159, 0, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 0, 368, 0, 0, 140, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 404, 160, 0,
	0, 178, 163, 0, 0, 0, 0, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 417,
	385, 384, 386, 387, 388, 389, 0, 0, 130, 390,
	391, 392, 0, 0, 0, 365, 378, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	0, 0, 0, 0, 415, 0, 377, 0, 0, 374,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 193, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 146, 405, 411, 414,
	0, 412, 409, 410, 408, 407, 406, 416, 399, 400,
	402, 0, 401, 123, 128, 159, 0, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 180, 0, 181, 170,
	0, 124, 153, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 404, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 417, 385, 384,
	386, 387, 388, 389, 0, 0, 130, 390, 391, 392,
	0, 0, 0, 0, 378, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 0, 0,
	0, 0, 415, 0, 377, 0, 0, 374, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 193, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 146, 405, 411, 414, 0, 412,
	409, 410, 408, 407, 406, 416, 399, 400, 402, 0,
	401, 123, 128, 159, 0, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 170, 0, 124, 0, 0, 935, 934, 0,
	154, 157, 158, 0, 0, 0, 933, 0, 0, 0,
	932, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 193, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 128, 159, 0, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 143, 180, 0, 181,
	170, 0, 124, 153, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 160, 0, 0,
	178, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 639, 0, 0, 637, 0, 0, 0, 192,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 128, 159, 0, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 30, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 170, 0,
	124, 153, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 160, 0, 0, 178, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 193, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 128, 159, 0, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 143, 180, 0, 181, 170, 0, 124, 153,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 182,
	140, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 160, 0, 0, 178, 163, 0, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 121, 0, 1102, 0, 0, 0, 0,
	143, 180, 130, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 193, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 140,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 160, 0, 0, 178, 163, 0, 123, 128, 159,
	0, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 462, 0, 0, 838, 0, 0, 839, 143,
	180, 130, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	193, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 128, 159, 0,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 180,
	0, 181, 170, 0, 124, 153, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 140, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	462, 0, 652, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 193, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 140, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 160, 0,
	0, 178, 163, 0, 123, 128, 159, 0, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 143, 180, 130, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 193, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 128, 159, 0, 175, 144, 191,
	206, 188, 187, 207, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 180, 0, 181, 170,
	0, 124, 153, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 193, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 140, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 160, 0, 0, 178, 163,
	0, 123, 128, 159, 0, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 0, 121, 0, 1102, 0,
	0, 0, 0, 143, 180, 130, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 193, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 140, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	123, 128, 159, 0, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 462, 0, 1050, 0, 0,
	0, 0, 143, 180, 130, 181, 0, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 180, 0, 181, 0, 0, 170, 153, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 843, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 140, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 160, 0, 0, 178, 163, 0, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 472, 0, 518, 0, 0, 0,
	0, 143, 180, 130, 181, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	140, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 160, 0, 0, 178, 163, 0, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 462, 0, 0, 0, 0, 0, 0,
	143, 180, 130, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 193, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 140,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 160, 0, 0, 178, 163, 0, 123, 128, 159,
	0, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 143,
	180, 130, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	193, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 170, 0, 124, 0, 0, 0, 150,
	0, 154, 157, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 140, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	160, 0, 0, 178, 163, 0, 123, 128, 159, 0,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 143, 180,
	130, 181, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 134, 0, 0,
	176, 189, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 148, 0, 0, 185, 186, 135, 193,
	0, 0, 127, 0, 0, 169, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 0, 0, 179, 0,
	0, 147, 141, 183, 138, 164, 131, 125, 0, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 170, 0, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 140, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 160,
	0, 0, 178, 163, 0, 123, 128, 159, 0, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 143, 180, 130,
	181, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 193, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 140, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 160, 0,
	0, 178, 163, 0, 123, 128, 159, 0, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 143, 180, 130, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 193, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 140, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 160, 0, 0,
	178, 163, 0, 123, 128, 159, 0, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 0, 0, 143, 180, 130, 181, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 128, 159, 0, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200,
}
var yyPact = [...]int{

	1679, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1165, 1212,
	-1000, -1000, -1000, -1000, -1000, -1000, 924, 230, 73, 308,
	136, 133, 106, 98, 11814, -1000, 9793, 4832, -29, -1000,
	-152, -1000, -1000, -158, -1000, 7473, -190, 98, 932, -1000,
	-1000, -1000, -1000, -1000, -1000, 1164, 1176, 975, 1094, 1028,
	-1000, -11, 9, 11814, -1000, 2620, -118, 11396, 160, 151,
	149, 148, 160, -1000, -1000, -1000, 129, 12232, -1000, 98,
	812, 159, -1000, 11814, -1000, 11814, -32, 60, -1000, -1000,
	-43, 387, -1000, -1000, -1000, -40, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11814, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10978, 332, 170, 250, 373, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 610, -1000, -1000,
	-1000, -1000, -1000, -1000, 902, 902, -1000, 11814, -1000, -1000,
	-189, -1000, 827, 331, -1000, 7473, 2434, 902, 902, -1000,
	-1000, 218, -1000, -1000, 7751, 7751, 7751, 7751, 7751, 7751,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 902, 247, -1000, 7191, 902, 902, 902,
	902, 902, 902, 7473, 902, 902, 902, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, -1000, -1000, 98,
	-1000, -1000, 11814, 679, 1074, 7473, 7473, 1165, -1000, 932,
	-1000, -1000, -1000, 1036, -1000, -1000, 419, 156, -1000, -1000,
	-1000, 156, -1000, -1000, 1064, 8332, 876, -1000, -1000, -178,
	3252, -1000, -1000, -1000, -1000, 355, 9584, 9584, -1000, -1000,
	-1000, 1058, -1000, -1000, -1000, -1000, -1000, 1175, 1174, 816,
	-1000, 2319, -1000, -1000, 12232, 385, 810, 801, 799, 11814,
	11814, 92, -1000, -1000, -1000, 159, 956, 12232, 1081, -1000,
	-1000, 1201, 11814, 11814, -1000, -1000, 387, 387, -1000, -1000,
	11814, -1000, -1000, -1000, -1000, -1000, 387, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 91, -1000, -1000, -1000, -1000, -1000,
	26, -1000, -1000, -1000, -1000, -1000, -1000, 352, 5780, -19,
	-1000, -1000, -1000, 7473, -1000, -1000, 232, -1000, -1000, -1000,
	-1000, -1000, 7473, 7473, 7473, 438, 302, 7751, 448, 543,
	7751, 7751, 7751, 7751, 7751, 7751, 7751, 7751, 7751, 7751,
	7751, 7751, 7751, 7751, 7751, 633, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 783, -1000, 932, 890, 890, 254,
	254, 254, 254, 254, 111, 6345, 5148, 679, 808, 7191,
	6909, 6909, 7473, 7473, 6909, 1090, 380, 331, 11187, -1000,
	679, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6909, 6909,
	6909, 6909, 11814, 831, -1000, -1000, -1000, 1208, 297, 596,
	875, -1000, 487, 1164, 679, 1028, 9306, 967, -1000, -1000,
	10769, 10769, 11605, 11814, 934, -1000, -1000, -1000, -1000, -1000,
	245, 2936, -1000, 870, 866, -162, -191, -1000, -178, 6062,
	-1000, -1000, -1000, -1000, 255, -1000, 902, 125, 1649, 8054,
	1683, 42, -1000, -1000, -1000, 915, -1000, 915, 915, 915,
	915, 77, 77, 77, 77, -1000, -1000, -1000, -1000, -1000,
	947, 941, -1000, 915, 915, 915, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 931, 931, 931, 923, 923, 92,
	1078, 954, 952, 951, -1000, 1771, -1000, 92, -1000, 119,
	-188, -1000, 11814, 11814, -1000, -1000, 1164, -35, -1000, -1000,
	425, 11814, 11814, 387, -1000, 11814, -1000, -1000, -1000, 609,
	-106, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11814, -1000, -1000, -1000, -1000, -1000, 331, 302, 429, -1000,
	-1000, 517, -1000, -1000, 1645, -1000, -1000, -1000, -1000, 448,
	7751, 7751, 7751, 712, 1645, 946, 1226, 1839, 254, 721,
	721, 311, 311, 311, 311, 311, 751, 751, -1000, -1000,
	-1000, 679, -1000, -1000, -1000, 679, 6909, 832, -1000, -1000,
	2117, 244, 902, 242, -1000, -1000, -1000, 679, 805, 805,
	428, 493, 805, 6909, 470, -1000, 7473, 679, -1000, 805,
	679, 805, 805, 831, 132, -1000, 998, 7473, 7473, 7473,
	-1000, -1000, -1000, 1074, -1000, 1090, 1163, -1000, 1029, 1018,
	6909, -1000, -113, 11814, -1000, -113, 936, -1000, 345, -1000,
	241, 9097, 200, 235, 10071, 11814, -1000, 3884, -1000, 4516,
	-1000, -172, -1000, -160, -194, -1000, -1000, -1000, -1000, -1000,
	331, -1000, 781, 11396, 902, 902, -1000, 1649, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 342, 342, 329, 342, 342, 342, 342,
	342, 19, 5, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, -1000, -1000, 720, 300,
	260, -1000, -1000, -1000, -1000, 1120, -1000, 1683, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	399, 412, -1000, 1115, -1000, 1114, 665, 1207, 580, 209,
	204, 36, -1000, -1000, 598, 77, 77, -1000, -1000, -1000,
	1057, -1000, -1000, -1000, 663, 663, -1000, -1000, -1000, -1000,
	597, -1000, -1000, -1000, 578, -1000, -1000, -1000, 11814, 11814,
	11814, -1000, 417, 343, 127, 177, 174, 173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 342, 342, -1000,
	-1000, 1054, 1053, 342, 863, 1071, -1000, 662, -1000, -1000,
	-1000, 657, 7473, -1000, 387, 1199, -1000, -1000, -1000, -1000,
	411, -1000, -1000, -1000, -1000, -1000, 712, 1645, 841, -1000,
	7751, 7751, -1000, -1000, 805, 6909, -1000, -1000, 10489, -1000,
	-1000, 4200, 6909, 5464, -1000, -1000, -1000, 446, 633, 446,
	-78, 877, 312, -1000, 7473, 571, -1000, -1000, -1000, -1000,
	-1000, -1000, 1033, -1000, -1000, -1000, -1000, -1000, 993, 331,
	331, -1000, -1000, 11814, -1000, -1000, -1000, -1000, 905, 980,
	902, -1000, 968, 1165, 11605, 7473, 7473, 5148, -113, -1000,
	10280, -1000, -1000, 10071, 3884, 929, 1141, -1000, -1000, -1000,
	1088, 8610, 9097, -1000, -1000, 228, -1000, -1000, -1000, -177,
	-186, -1000, -1000, 679, 11396, 11396, -1000, 653, -1000, 580,
	342, 342, 576, 568, 554, 648, 647, 342, 342, 546,
	643, 769, 545, 537, 528, 625, 642, 579, 602, 601,
	600, 12023, 115, -1000, 720, -1000, 1101, 300, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 925, -1000, -1000,
	-1000, -1000, -1000, -1000, -54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 809, -1000, -1000, 363,
	787, -1000, 779, 830, 775, 902, 902, 902, -1000, 11814,
	-1000, -1000, -1000, 734, 71, 924, 730, 11396, 703, 356,
	-1000, -1000, 585, -1000, -1000, -1000, -1000, 1156, 1048, 342,
	342, -1000, -1000, -1000, 331, 425, -1000, -1000, -1000, -1000,
	7751, 1645, 1645, -1000, -1000, -1000, -1000, 233, 679, -1000,
	679, 915, 915, -1000, 915, 923, -1000, 915, 105, 915,
	88, 679, 679, 902, -73, -1000, 331, 7473, -1000, -1000,
	-1000, 1199, 10071, 949, 11605, 902, -1000, 8888, 11396, -1000,
	11605, 1164, -1000, 331, 331, -1000, 1199, -1000, 929, 228,
	-1000, 10071, 10071, 10071, 10071, -1000, 984, 983, -1000, 973,
	971, 1016, 11814, -1000, 773, 8610, 295, -1000, 243, -1000,
	-1000, -1000, -1000, 679, 679, -1000, -1000, 580, 580, -1000,
	-1000, -1000, -1000, -1000, 640, 637, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 921, -1000, 1162,
	920, 115, 720, 496, -1000, -1000, -1000, -1000, -1000, 636,
	-1000, 514, -1000, 500, 11187, 11187, 11187, -1000, -1000, -1000,
	1052, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 703, 703, -1000, 1645,
	3568, -1000, -1000, -1000, 181, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7751, 679, 627, 331, 1189, 829, -1000,
	1067, 825, 826, -1000, -1000, 6627, 679, 761, 226, 724,
	-1000, 822, -1000, 1165, -1000, 1141, 937, 1095, -1000, -1000,
	-1000, -1000, 974, -1000, 970, -1000, -1000, -1000, -1000, -1000,
	145, 140, 135, 902, -130, -1000, -1000, -1000, -1000, 11187,
	-1000, -1000, -1000, -1000, 11187, 919, 115, -1000, 788, -1000,
	725, 714, 718, -1000, 915, 718, 718, 702, -1000, -1000,
	-1000, -1000, -1000, 349, -1000, -1000, 1181, 1172, 1097, -1000,
	902, -1000, -1000, 933, 11396, 11187, 11396, -1000, 1164, 7473,
	7473, -1000, -1000, 902, 902, 902, -126, -1000, 497, 713,
	709, 11187, 909, -1000, -1000, -1000, -1000, 11187, -1000, -1000,
	-1000, -1000, 679, 128, -86, -1000, 7473, 7473, 1206, -1000,
	902, -1000, 932, 196, -1000, -1000, -1000, 331, 331, 11187,
	11187, 11187, 706, -1000, 680, -1000, -1000, -1000, 687, 11187,
	582, -1000, 171, 670, -1000, 991, -82, -101, 331, 827,
	11605, 826, 679, 11396, 678, -1000, 678, 678, -126, -1000,
	1015, 167, 167, -1000, 675, -1000, -1000, -1000, -1000, 342,
	624, 1154, -1000, -1000, -1000, 1144, -1000, -1000, -1000, 988,
	-1000, 822, -1000, -1000, -1000, 11187, -1000, -1000, -1000, 274,
	-1000, 342, -1000, 623, 1137, 167, -1000, 490, -1000, -1000,
	-1000, -1000, 669, -84, -1000, 902, 427, -1000, 668, 167,
	-1000, -1000, -88, -1000, -1000, -1000, -102, -1000,
}
var yyPgo = [...]int{

	0, 16, 17, 1535, 1526, 1522, 23, 1122, 1521, 1517,
	1516, 1515, 59, 1514, 1513, 1512, 1511, 1509, 53, 1019,
	1506, 1505, 1227, 1225, 1220, 1218, 1503, 1501, 1499, 1498,
	1497, 1496, 1495, 1494, 1492, 1490, 1488, 1484, 1482, 113,
	1481, 1480, 38, 1478, 1477, 1475, 98, 1470, 93, 1469,
	1468, 1467, 58, 101, 55, 61, 214, 1466, 34, 41,
	37, 1465, 1464, 26, 1461, 1620, 90, 80, 1460, 60,
	99, 1459, 1457, 35, 1456, 1454, 1453, 1452, 1451, 1449,
	82, 105, 1448, 1447, 7, 50, 1446, 1445, 46, 95,
	212, 1442, 1441, 1440, 1439, 1438, 1437, 81, 9, 13,
	12, 2, 1435, 32, 5, 1433, 79, 1432, 1431, 1429,
	1420, 20, 1419, 77, 1418, 15, 75, 1417, 49, 1415,
	18, 6, 52, 1411, 1407, 71, 92, 89, 73, 1405,
	70, 1404, 1402, 102, 1401, 1400, 1399, 121, 1398, 100,
	527, 1397, 1396, 1395, 1393, 1392, 1390, 1389, 103, 62,
	29, 72, 0, 21, 25, 57, 1385, 4, 933, 44,
	39, 42, 107, 1384, 1383, 1541, 56, 87, 51, 1382,
	1381, 1380, 1378, 1377, 1373, 1372, 14, 1371, 1370, 1364,
	1363, 1362, 1361, 1360, 1359, 1358, 1357, 1355, 1354, 1353,
	1352, 1350, 1335, 83, 1334, 1331, 1330, 1326, 1324, 1319,
	1313, 1308, 1307, 1306, 1305, 33, 1304, 1303, 1302, 1301,
	24, 1300, 67, 3, 68, 1299, 84, 28, 1298, 66,
	1294, 1290, 1289, 1288, 1281, 63, 31, 1280, 86, 43,
	36, 1275, 1267, 1266, 69, 10, 8, 1265, 1260, 1255,
	11, 19, 1251, 1250, 1248, 1247, 27, 30, 40, 1246,
	1245, 22, 1243, 1241, 64, 85, 1240, 91, 1, 1238,
	1236, 1235, 1234, 1232, 1229, 140, 376, 1222, 104,
}
var yyR1 = [...]int{

	0, 263, 264, 264, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 18,
	18, 18, 19, 20, 20, 21, 21, 22, 22, 23,
	23, 44, 44, 44, 44, 45, 45, 45, 119, 119,
	118, 118, 24, 25, 25, 25, 262, 262, 262, 261,
	261, 150, 150, 67, 67, 81, 81, 27, 26, 26,
	259, 259, 258, 181, 181, 7, 7, 28, 28, 28,
	28, 28, 260, 260, 260, 260, 260, 260, 250, 250,
	251, 251, 243, 241, 241, 238, 238, 244, 244, 237,
	237, 242, 242, 239, 239, 246, 246, 246, 246, 246,
	247, 248, 255, 255, 256, 256, 209, 209, 257, 257,
	257, 257, 214, 214, 213, 213, 212, 212, 212, 215,
	215, 215, 31, 230, 232, 232, 233, 233, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 183, 185, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 198, 199, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 201, 201, 202, 202, 203, 203, 204, 204,
	186, 210, 210, 184, 180, 182, 231, 231, 231, 226,
	157, 157, 169, 169, 169, 169, 252, 252, 253, 253,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	172, 172, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 171, 171, 171, 171, 171, 173, 173, 173, 173,
	173, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 225, 225, 176, 176, 216, 216,
	217, 217, 217, 221, 221, 222, 222, 220, 220, 177,
	177, 177, 177, 177, 177, 43, 42, 42, 42, 135,
	135, 135, 218, 205, 205, 205, 179, 206, 206, 207,
	207, 207, 208, 208, 208, 223, 223, 224, 224, 178,
	227, 227, 227, 227, 6, 6, 245, 245, 245, 245,
	240, 240, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 5, 5, 229, 229, 228, 228, 236, 236, 235,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 163,
	163, 141, 141, 146, 146, 146, 30, 30, 30, 80,
	80, 147, 147, 8, 32, 9, 142, 142, 142, 74,
	74, 74, 10, 12, 12, 12, 12, 12, 75, 75,
	75, 75, 75, 75, 11, 11, 11, 11, 211, 211,
	211, 211, 211, 13, 145, 145, 145, 14, 16, 16,
	16, 16, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	51, 51, 72, 72, 72, 69, 69, 70, 70, 71,
	71, 68, 68, 73, 73, 73, 76, 76, 76, 36,
	148, 148, 34, 77, 77, 77, 37, 78, 78, 78,
	78, 78, 78, 79, 79, 38, 35, 267, 39, 40,
	40, 41, 41, 41, 48, 48, 48, 46, 46, 47,
	47, 54, 54, 53, 53, 55, 55, 55, 55, 156,
	156, 156, 155, 155, 57, 57, 58, 58, 59, 59,
	60, 60, 60, 82, 61, 61, 61, 61, 164, 164,
	161, 161, 161, 160, 160, 62, 62, 62, 62, 63,
	63, 63, 63, 64, 64, 66, 66, 65, 65, 83,
	83, 83, 83, 84, 84, 85, 85, 56, 56, 56,
	56, 56, 56, 56, 138, 138, 219, 219, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 96, 96,
	96, 96, 96, 96, 87, 87, 87, 87, 87, 87,
	87, 52, 52, 97, 97, 97, 103, 98, 98, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 94,
	94, 94, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 93, 93, 93, 93, 93, 93, 93, 93, 268,
	268, 95, 95, 95, 95, 49, 49, 49, 49, 49,
	166, 166, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 107, 107, 50, 50, 105,
	105, 106, 108, 108, 104, 104, 104, 89, 89, 89,
	89, 89, 89, 89, 91, 91, 91, 109, 109, 110,
	110, 111, 111, 112, 112, 113, 114, 114, 114, 115,
	115, 115, 115, 116, 116, 116, 88, 88, 88, 88,
	88, 88, 117, 117, 117, 117, 120, 120, 99, 99,
	101, 101, 100, 102, 121, 121, 122, 123, 123, 126,
	126, 125, 125, 125, 125, 125, 134, 134, 133, 133,
	133, 124, 124, 127, 127, 131, 131, 130, 132, 132,
	132, 132, 129, 129, 128, 128, 167, 167, 167, 136,
	136, 139, 139, 140, 140, 137, 137, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 149, 149, 149,
	144, 144, 249, 249, 153, 153, 154, 154, 158, 158,
	159, 159, 162, 162, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 265, 266, 165,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 7, 10, 1, 3, 1, 3, 8, 9, 7,
	8, 0, 1, 1, 1, 0, 1, 1, 1, 3,
	0, 4, 8, 10, 7, 8, 1, 1, 1, 0,
	2, 0, 2, 2, 4, 1, 3, 2, 3, 3,
	1, 3, 5, 0, 2, 1, 1, 3, 5, 11,
	11, 11, 0, 1, 1, 5, 9, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 1, 1, 2, 2,
	3, 3, 0, 1, 1, 2, 1, 1, 4, 4,
	2, 4, 0, 1, 0, 1, 1, 2, 2, 1,
	1, 1, 4, 4, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 4, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 3, 3, 4, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 3, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 4, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 3, 4, 1,
	1, 1, 1, 0, 3, 3, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
	7, 7, 8, 9, 0, 1, 3, 1, 2, 3,
	0, 2, 0, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 3, 2,
	6, 7, 7, 7, 9, 7, 7, 7, 4, 0,
	1, 0, 1, 0, 1, 1, 6, 6, 4, 1,
	3, 0, 1, 3, 3, 2, 1, 1, 1, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 3,
	3, 3, 1, 1, 3, 5, 3, 6, 0, 1,
	1, 1, 1, 2, 0, 1, 1, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 6, 7, 3,
	3, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	0, 3, 1, 1, 1, 0, 2, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 1, 1, 5,
	1, 1, 2, 0, 1, 1, 4, 2, 1, 1,
	1, 1, 1, 0, 2, 4, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 1,
	2, 3, 3, 3, 2, 3, 1, 2, 1, 1,
	1, 2, 3, 2, 2, 0, 2, 3, 2, 2,
	2, 1, 0, 2, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -263, -17, -18, -22, -23, -24, -25, -26, -28,
	-29, -30, -8, -32, -33, -36, -34, -9, -10, -11,
	-13, -14, -16, -15, -35, -27, -37, -38, -19, -20,
	6, 7, 264, 8, 9, 45, -31, 131, 132, 133,
	156, 135, 151, 50, 70, 284, -142, 154, 291, 294,
	295, 298, 297, 313, 155, 10, 157, 49, -265, 150,
	149, 148, 73, -264, 321, -111, 15, -41, 5, -39,
	-267, -39, -39, -39, -39, -39, -230, 73, -7, -249,
	24, 32, 144, 256, 257, 35, -137, 256, 140, -141,
	141, -7, 34, -147, 144, 144, 249, 131, 244, 286,
	-71, -72, 288, 289, 251, 144, 290, 247, 287, 246,
	243, 181, 76, 47, 141, 28, 26, -148, 144, 245,
	-158, 76, -152, 270, 20, 212, 158, 177, 271, 318,
	85, 211, 214, 215, 152, 173, 217, 216, 209, 167,
	43, 207, 191, 292, 275, 280, 253, 206, 168, 277,
	24, 192, 196, 299, 26, 219, 190, 27, 28, 272,
	55, 194, 220, 59, 210, 221, 198, 197, 199, 180,
	18, 222, 223, 193, 195, 274, 155, 224, 58, 203,
	293, 295, 251, 208, 182, 171, 172, 279, 278, 156,
	53, 276, 147, 174, 313, 314, 316, 315, 317, 319,
	320, -165, -65, -75, 135, -158, 277, 280, 282, -211,
	76, 78, -151, -152, 91, 39, 41, 201, 94, 164,
	126, 186, 16, 22, 95, 48, 175, 178, 181, 49,
	125, 252, 213, 265, 131, 68, 255, 258, 254, 256,
	244, 169, 44, 9, 148, 149, 38, 119, 10, 133,
	98, 99, 286, 153, 40, 150, 88, 51, 19, 71,
	11, 47, 13, 14, 154, 139, 140, 110, 141, 66,
	7, 162, 163, 127, 42, 107, 62, 36, 64, 108,
	17, 259, 260, 46, 189, 185, 269, 188, 52, 161,
	184, 121, 69, 56, 92, 86, 170, 89, 72, 157,
	90, 15, 67, 289, 143, 142, 288, 166, 109, 134,
	264, 30, 65, 257, 6, 268, 45, 151, 160, 63,
	144, 245, 34, 187, 159, 183, 97, 145, 87, 290,
	5, 35, 204, 8, 70, 146, 261, 262, 263, 54,
	179, 176, 287, 273, 96, 12, 205, -145, 274, 214,
	-165, 296, -165, -165, 314, 316, 315, 317, 318, 320,
	284, -165, -98, -56, -86, 92, -90, 44, 40, -89,
	-219, -104, -102, -103, 126, 115, 116, 123, 93, 127,
	-94, -92, -93, -95, 78, 77, 79, 80, 81, 82,
	86, 87, 88, -153, -158, -100, -265, 64, 65, 265,
	266, 269, 267, 95, 54, 254, 263, 262, 261, 259,
	260, 255, 258, 139, 256, 121, 264, 76, -152, -77,
	312, 300, -148, -18, -115, 17, 16, -21, -19, -265,
	6, 37, 38, -48, 60, 61, -40, -44, 230, 229,
	231, -45, 230, 229, -65, -261, -123, -124, -126, 296,
	-167, -125, 300, 301, 299, -154, -134, 302, -153, -151,
	181, 178, 76, -152, -260, 299, 293, 285, 281, -231,
	-226, -157, 76, -152, -140, 139, 141, 141, 141, -140,
	144, -163, -162, 76, -152, -148, 76, -139, 139, -65,
	-65, 248, 144, 256, -165, -165, 245, -68, 252, 253,
	-70, 11, 110, -165, -165, -165, 251, -165, -165, -165,
	-165, -165, -165, -165, -80, -65, -74, -157, 78, -12,
	19, -18, -24, -22, -23, -25, -12, 277, 128, 100,
	79, -165, -100, -265, -100, -165, -65, -165, -165, 319,
	297, 298, 74, 91, 90, 107, -56, -87, 110, 92,
	108, 109, 94, 112, 111, 122, 115, 116, 117, 118,
	119, 120, 121, 113, 114, 125, 100, 101, 102, 103,
	104, 105, 106, -138, -265, -103, -265, 129, 130, -90,
	-90, -90, -90, -90, -90, -265, 128, -18, -98, -265,
	-265, -265, -265, -265, -265, -265, -107, -56, -265, -268,
	-265, -268, -268, -268, -268, -268, -268, -268, -265, -265,
	-265, -265, -148, -80, -266, 75, -116, 19, 46, -56,
	-112, -113, -56, -111, -18, -39, 56, -46, 38, 84,
	-137, -137, 45, 11, -81, -262, -67, 143, 230, 140,
	-158, 74, -127, -130, -128, 303, 305, -125, 296, 100,
	-133, -153, 78, 44, -133, 45, 16, 16, 75, 74,
	-169, -172, -174, -173, -175, -170, -171, 175, 176, 126,
	179, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 45, 152, 171, 172, 173, 174, 192, 193, 194,
	195, 196, 197, 198, 199, 158, 177, 271, 159, 160,
	161, 162, 163, 164, 166, 167, 168, 169, 170, -162,
	92, 76, 76, 76, -65, -65, -255, -256, -257, -214,
	305, 44, -139, 72, -162, 40, -51, 11, -65, -158,
	-69, -70, -70, -65, -69, 74, -76, 143, 280, 214,
	100, -159, -158, -151, 190, 278, 279, -165, -165, -165,
	-149, 145, 39, -165, -165, -165, -56, -56, -56, -96,
	86, 92, 87, 88, -90, -97, -100, -103, 83, 110,
	108, 109, 94, -90, -90, -90, -90, -90, -90, -90,
	-90, -90, -90, -90, -90, -90, -90, -90, -166, 76,
	78, 76, -89, -89, -153, -54, 38, -53, -55, 117,
	-56, -158, -154, -159, -151, -266, -266, -18, -53, -53,
	-56, -56, -53, -46, -105, -106, 96, -153, -266, -53,
	-54, -53, -53, -80, -79, 8, 110, 74, 18, 74,
	-114, 41, 148, -115, -266, -48, -91, -153, 79, 82,
	-47, 63, -66, 42, -65, -66, -121, -122, -104, -153,
	-158, -65, -81, -158, 11, 74, -150, 128, -126, -167,
	-129, 74, -131, 74, 304, 306, 307, -127, 72, 89,
	-56, -206, 125, -265, 283, 25, -232, -233, -234, -184,
	-180, -182, -183, -185, -186, -187, -188, -189, -190, -191,
	-192, -193, -194, -195, -196, -197, -198, -199, -200, -201,
	-202, -203, -204, 85, 292, -214, 201, 212, 50, 213,
	214, 215, 141, 217, 218, 219, 27, 220, 221, 222,
	223, 224, 225, 226, 227, 228, -226, -227, -228, -5,
	-4, 141, 36, 32, 24, 23, -252, -253, -254, -220,
	-177, -218, -223, -224, -178, -43, -179, -207, -208, 86,
	92, 44, 201, 142, 36, 35, 85, 72, 125, 211,
	208, -221, 204, -176, 73, -176, -176, -176, -176, -205,
	178, -205, -205, -205, 73, 73, -176, -176, -176, -216,
	73, -216, -216, -217, 73, -217, -255, 40, 72, 72,
	72, -143, 134, 292, 265, 136, 133, 137, 132, 201,
	178, 85, 44, 15, 276, 76, -257, 125, -212, -193,
	181, 178, 175, 307, -80, -65, -115, 250, -165, -165,
	-73, 108, 12, -158, -65, -69, -165, -65, -165, 79,
	278, -65, 86, 87, 88, -97, -90, -90, -90, -52,
	153, 91, -266, -266, -53, 74, -156, -155, 39, -153,
	78, 128, -265, 128, -266, -266, -266, 74, 146, 39,
	-266, -53, -108, -106, 98, -56, -266, -266, -266, -266,
	-266, -78, 19, 143, 51, 52, 280, 48, 58, -56,
	-56, -113, -116, -136, 19, 11, 54, 54, -53, -118,
	281, -65, -118, -85, 74, 12, 100, 128, -161, -160,
	39, -158, 78, 146, 128, -58, -59, -60, -61, -82,
	-103, -265, -65, -67, 117, -159, -128, -130, -132, 308,
	305, 311, 76, -157, -265, -265, -234, -213, 100, -213,
	125, -212, -213, -213, -213, -213, -213, 216, 216, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -6, 76, -229, -228, 142, 35, 33, -254,
	86, 78, 79, 80, 86, -42, -219, -135, 254, 259,
	260, 36, 36, 78, 8, -210, 76, 78, 206, 207,
	44, 44, 209, 210, -222, 205, 79, -205, -205, 45,
	-225, 78, -225, 79, 79, -65, -65, -65, -165, -149,
	-144, 141, 36, 100, 145, 138, 138, 138, -213, -213,
	45, 45, -213, -146, 30, 22, -246, -247, -248, 46,
	20, -165, 78, 78, -56, -69, -85, -12, -165, -52,
	91, -90, -90, -266, -55, -155, 117, -159, -54, -154,
	-168, 126, 175, 152, 173, 169, 190, 180, 203, 171,
	204, -166, -168, 270, -111, 99, -56, 97, 53, 59,
	-65, -57, 11, -88, 45, 54, -18, -265, -265, -88,
	45, -111, -122, -56, -56, -154, -118, -160, -58, -159,
	-85, 74, -62, -63, -64, 62, 66, 68, 63, 64,
	65, 69, -164, 39, -58, -265, -161, -150, 128, 305,
	309, 310, -266, -157, -157, 78, -210, -213, -213, 79,
	79, 79, 78, 78, -213, -213, 79, 78, 76, 79,
	79, 79, 79, 44, 78, 44, 207, 206, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 79,
	44, 79, 44, 79, 44, 76, -152, -2, -1, 146,
	-6, 36, -229, 73, -42, 75, 76, 126, 75, 74,
	75, 74, 75, 74, -265, -265, -265, -65, -165, 76,
	178, -230, 76, -226, -251, 76, 44, -215, 76, 126,
	44, -209, 79, 44, -248, -247, -213, -213, -73, -90,
	128, -266, -266, -176, -176, -176, -217, -176, 163, -176,
	163, -266, -266, -265, -50, 268, -56, -85, -58, -120,
	72, -121, -99, -101, -100, -265, -18, -117, -157, -119,
	-157, -121, -115, -85, -85, -59, -60, -59, -60, 62,
	62, 62, 67, 62, 67, 62, -63, -158, -266, -83,
	70, 140, 71, -266, -266, -210, -210, 78, 78, 73,
	-3, 25, 21, 31, 73, -2, -6, 75, 79, 78,
	79, 79, -236, -235, -153, -236, -236, 45, -251, -251,
	117, -205, 76, -90, -266, 78, -109, 13, 43, -120,
	74, -266, -266, -266, 74, 128, 74, -266, -111, 72,
	72, 62, 62, 141, 141, 141, -265, -181, 282, -236,
	-236, 73, -2, 75, 75, 75, -266, 74, -176, -266,
	-266, 76, -49, 110, 273, -110, 14, 16, 36, -101,
	54, -18, -265, -157, -153, -157, -115, -56, -56, -265,
	-265, -265, -259, -258, 281, 79, 75, 75, -236, 73,
	-238, -235, -237, -239, -266, 271, 69, 274, -56, -98,
	8, -99, -18, 128, -84, -153, -84, -84, 74, -266,
	76, -240, -240, 75, -236, -246, -244, -241, -243, 27,
	85, 146, -246, -242, -241, 273, -246, -241, 59, 272,
	275, -121, -266, -157, -266, 74, -266, -266, -258, 54,
	-245, 27, -1, 85, 273, -240, 75, -213, 78, -250,
	25, 21, 29, 59, -153, 110, -213, 78, 29, -240,
	79, 76, 273, -100, 79, 76, 274, 275,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 691, 0,
	477, 477, 477, 477, 477, 477, 0, 782, 765, 361,
	371, 0, 449, 0, 0, 1007, 388, 398, 404, 1007,
	0, 1007, 1007, 0, 1007, 0, 463, 0, 0, 376,
	377, 378, 1005, 1, 3, 699, 0, 0, 481, 484,
	479, 41, 45, 0, 59, 0, 82, 0, 763, 0,
	0, 0, 763, 75, 76, 783, 0, 359, 766, 0,
	0, 761, 362, 0, 372, 0, 0, 0, 1007, 1007,
	0, 0, 1007, 1007, 1007, 0, 1007, 1007, 1007, 1007,
	1007, 1007, 1007, 450, 442, 443, 444, 0, 460, 461,
	462, 788, 789, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 375, 379, 0, 0, 537, 953, -2, 393, 403,
	399, 400, 401, 402, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 0, 405, 406,
	408, 1007, 410, 411, 0, 0, 1007, 0, 1007, 1007,
	0, 476, 67, 587, 547, 0, 552, 554, 0, 589,
	590, 591, 592, 593, 0, 0, 0, 0, 0, 0,
	615, 616, 617, 618, 677, 678, 679, 680, 681, 682,
	683, 556, 557, 674, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 665, 0, 639, 639, 639, 639, 639,
	639, 639, 639, 0, 0, 0, 0, -2, -2, 0,
	464, 465, 0, 33, 703, 0, 0, 691, 35, 0,
	477, 482, 483, 487, 485, 486, 478, 765, 42, 43,
	44, 765, 46, 47, 0, 0, 68, 69, 727, 0,
	0, 729, 756, 757, -2, 0, 0, 0, 786, 787,
	-2, 807, 784, 785, 77, 83, 84, 0, 0, 0,
	206, 0, 210, 211, 0, 0, 0, 0, 0, 0,
	0, -2, 360, 792, 793, 761, 0, 0, 0, 373,
	374, 440, 0, 0, 424, 425, 445, 0, 451, 452,
	0, 447, 448, 429, 430, 431, 445, 433, 434, 435,
	436, 437, 438, 439, 456, 369, 382, 380, 381, 394,
	0, -2, 384, 385, 386, 387, 396, 0, 0, 0,
	1007, 409, 1007, 0, 1007, 414, 777, 416, 417, 1007,
	1007, 1007, 0, 0, 0, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 575, 576, 577,
	578, 579, 580, 553, 0, 567, 0, 0, 0, 609,
	610, 611, 612, 613, 0, 491, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 487, 0, 666, 0, 631,
	0, 632, 633, 634, 635, 636, 637, 638, 0, 491,
	0, 0, 0, 473, 34, 1006, 29, 0, 0, 700,
	692, 693, 696, 699, 33, 484, 0, 489, 488, 480,
	0, 0, 0, 0, 0, 60, 65, 56, 57, 58,
	61, 0, 741, 752, 745, 0, 0, 730, 0, 0,
	734, 738, 739, 740, 307, 737, 0, 0, -2, 332,
	216, 283, 213, 214, 215, 276, 231, 276, 276, 276,
	276, 303, 303, 303, 303, 259, 260, 261, 262, 263,
	0, 0, 246, 276, 276, 276, 250, 266, 267, 268,
	269, 270, 271, 272, 273, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 278, 278, 278, 280, 280, -2,
	0, 0, 0, 0, 132, 0, 358, -2, 114, 0,
	0, 123, 0, 0, 368, 762, 699, 0, 1007, 1007,
	453, 0, 0, 445, 1007, 0, 1007, 457, 458, 0,
	0, 538, 790, 791, 389, 390, 391, 407, 412, 413,
	0, 778, 779, 418, 419, 420, 588, 548, 549, 551,
	568, 0, 570, 572, 558, 559, 583, 584, 585, 0,
	0, 0, 0, 581, 563, 0, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 608, 650,
	651, 0, 606, 607, 614, 0, 0, 492, 493, 495,
	499, 0, 675, 0, -2, 586, 722, 33, 0, 0,
	0, 0, 0, 0, 672, 669, 0, 0, 640, 0,
	0, 0, 0, 466, 475, 704, 0, 0, 0, 0,
	695, 697, 698, 703, 36, 487, 0, 684, 0, 0,
	0, 490, 50, 0, 536, 50, 545, 724, 0, 674,
	0, 520, 0, -2, 0, 0, 63, 0, 728, 0,
	743, 0, 744, 0, 0, 754, 755, 742, 731, 732,
	733, 735, 0, 0, 0, 0, 133, -2, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 124, 124, 0, 124, 124, 124, 124,
	124, 0, 0, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 207, 208, 324, 343,
	0, 345, 346, 341, -2, 333, 209, 217, 218, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 287,
	0, 0, 302, 0, 316, 318, 0, 0, 0, 0,
	0, 285, 284, 230, 0, 303, 303, 253, 254, 255,
	0, 256, 257, 258, 0, 0, 247, 248, 249, 241,
	0, 242, 243, 244, 0, 245, 78, 764, 0, 0,
	0, 1007, 777, 0, 774, 0, 772, 0, 767, 768,
	769, 770, 771, 773, 775, 776, 115, 124, 124, 120,
	126, 0, 0, 124, 363, 105, 1007, 0, 422, 423,
	426, 0, 0, 446, 445, 545, 432, 370, 459, 395,
	0, 1007, 569, 571, 573, 560, 581, 564, 0, 561,
	0, 0, 555, 619, 0, 0, 496, 500, 0, 502,
	503, 0, 491, 0, -2, 622, 623, 0, 0, 0,
	0, 691, 0, 670, 0, 0, 630, 641, 642, 643,
	644, 474, 0, 468, 469, 470, 471, 472, 0, 701,
	702, 694, 30, 0, 759, 760, 685, 686, 504, 0,
	0, 535, 0, 691, 0, 0, 0, 0, 50, 521,
	0, 523, 524, 0, 0, 545, 506, 508, 509, 510,
	518, 0, 520, 66, 62, 61, 753, 746, 747, 0,
	0, 751, 308, 0, 0, 0, 137, 0, 125, 0,
	124, 124, 0, 0, 0, 0, 0, 124, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 325, 324, 344, 0, 343, 334, 219,
	288, 289, 290, 291, 292, 293, 294, 296, 299, 300,
	301, 315, 317, 319, 0, 306, 201, 202, 309, 310,
	311, 312, 313, 314, 212, 286, 0, 251, 252, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 350, 0,
	1007, 780, 781, 0, 0, 0, 0, 0, 0, 0,
	127, 128, 0, 366, 364, 365, 367, 106, 107, 124,
	124, 421, 441, 454, 455, 453, 427, 397, 415, 562,
	0, 582, 565, 620, 494, 501, 497, 0, 0, 676,
	0, 276, 276, 655, 276, 280, 658, 276, 660, 276,
	663, 0, 0, 0, 667, 629, 673, 0, 467, 705,
	31, 545, 0, 716, 0, 0, -2, 0, 0, 39,
	0, 699, 725, 546, 726, 675, 545, 522, 545, -2,
	54, 0, 0, 0, 0, 525, 0, 0, 528, 0,
	0, 0, 0, 519, 0, 0, 539, 64, 0, 748,
	749, 750, 85, 0, 0, 203, 204, 0, 0, 162,
	163, 200, 165, 166, 0, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 0, 337, 0,
	0, 336, 324, 0, 295, 277, 304, 305, 264, 0,
	265, 0, 281, 0, 0, 0, 0, 351, 352, 353,
	0, 355, 356, 357, 118, 90, 91, 119, 129, 130,
	131, 121, 116, 117, 108, 109, 0, 0, 428, 566,
	0, 621, 624, 652, 303, 656, 657, 659, 661, 662,
	664, 626, 625, 0, 0, 0, 671, 687, 505, 37,
	0, 716, 706, 718, 720, 0, 33, 0, 712, 0,
	48, 40, 52, 691, 55, 507, 514, 0, 517, 526,
	527, 529, 0, 531, 0, 533, 534, 511, 512, 513,
	0, 0, 0, 0, 73, 164, 205, 167, 168, 0,
	335, 338, 339, 340, 0, 0, 336, 297, 0, 275,
	0, 0, 0, 347, 276, 0, 0, 0, 110, 111,
	498, 653, 654, 645, 628, 668, 689, 0, 0, 38,
	0, 721, -2, 0, 0, 0, 0, 51, 699, 0,
	0, 530, 532, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 298, 279, 282, 95, 0, 349, 99,
	103, 354, 0, 0, 0, 32, 0, 0, 0, 719,
	0, -2, 0, 714, 713, 49, 53, 515, 516, 0,
	0, 0, 0, 70, 0, 74, 330, 330, 0, 0,
	105, 348, 105, 105, 627, 0, 0, 0, 690, 688,
	0, 709, 33, 0, 0, 543, 0, 0, 0, 86,
	0, 320, 321, 330, 0, 79, 96, 97, 98, 124,
	0, 0, 80, 100, 101, 0, 81, 104, 646, 0,
	649, 717, -2, 715, 540, 0, 541, 542, 71, 0,
	331, 124, 327, 0, 0, 322, 330, 0, 94, 92,
	88, 89, 0, 647, 544, 0, 0, 328, 0, 323,
	93, 102, 0, 72, 326, 329, 0, 648,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 93, 3, 3, 3, 120, 112, 3,
	73, 75, 117, 115, 74, 116, 128, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 321,
	101, 100, 102, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 123,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 94, 95,
	96, 97, 98, 99, 103, 104, 105, 106, 107, 108,
	109, 110, 113, 114, 119, 121, 124, 125, 126, 127,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1107
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1109
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1143
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingClause, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1188
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1201
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1213
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1225
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = ""
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1253
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereClause, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 53:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1291
		{
			// Single table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].delete_options_list), TableRefs: TableExprs{&AliasedTableExpr{Expr: TableName{Qualifier: yyDollar[5].tableName.Qualifier, Name: yyDollar[5].tableName.Name}, As: yyDollar[6].tableIdent}}, Partitions: yyDollar[7].partitions, Where: NewWhere(WhereClause, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit, IsSingleTable: true}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1296
		{
			// Multi table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].delete_options_list), TableList: yyDollar[4].tableNames, TableRefs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), IsSingleTable: false, IsTableBeforeFrom: false}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1301
		{
			// Multi table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].delete_options_list), TableList: yyDollar[5].tableNames, TableRefs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr), IsSingleTable: false, IsTableBeforeFrom: false}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.delete_option = QuickOption
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.delete_option = LowPriorityOption
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.delete_option = IgnoreOption
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.delete_options_list = []DeleteOptionEnum{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.delete_options_list = append(yyDollar[1].delete_options_list, yyDollar[2].delete_option)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1330
		{
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Do{Exprs: yyDollar[2].exprs}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.optVal = nil
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1392
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1419
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 81:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 87:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = "hash"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = "btree"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.str = "default"
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1625
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.str = "default"
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1710
		{
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1715
		{
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1717
		{
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = "character set"
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.str = "char set"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.str = "default"
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1749
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2047
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2084
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2100
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2299
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.optVal = nil
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.str = yyDollar[3].str
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2801
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2831
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2841
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2866
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2878
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2892
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2903
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2968
		{
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2974
		{
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2985
		{
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3017
		{
			// set empty
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.str = yyDollar[1].str
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3059
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3064
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3069
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.byt = 0
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.byt = 1
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3112
		{
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3114
		{
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3116
		{
		}
	case 366:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3120
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3136
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3146
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3150
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3156
		{
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3158
		{
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.statement = &Xa{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3182
		{
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.showFilter = nil
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3258
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.optVal = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3276
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3281
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3301
		{
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3303
		{
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3305
		{
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3309
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3387
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3391
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3395
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3406
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3413
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3417
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3429
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3433
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3437
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3441
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3445
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3472
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3476
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3482
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3486
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3492
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3502
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.str = "full "
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3512
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3516
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.showFilter = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3526
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3535
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3539
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3555
		{
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3557
		{
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3561
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3566
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3570
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3574
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3586
		{
			yyVAL.checkOptionEnum = CheckOptionForUpgrade
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3590
		{
			yyVAL.checkOptionEnum = CheckOptionQuick
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3594
		{
			yyVAL.checkOptionEnum = CheckOptionFast
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3598
		{
			yyVAL.checkOptionEnum = CheckOptionMedium
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3602
		{
			yyVAL.checkOptionEnum = CheckOptionExtended
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.checkOptionEnum = CheckOptionChanged
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3611
		{
			yyVAL.checkOptionList = []CheckOptionEnum{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3615
		{
			yyVAL.checkOptionList = append(yyDollar[1].checkOptionList, yyDollar[2].checkOptionEnum)
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3622
		{
			yyVAL.statement = &Check{Tables: yyDollar[3].tableNames, CheckOptions: yyDollar[4].checkOptionList}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3628
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3633
		{
			setAllowComments(yylex, true)
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3642
		{
			yyVAL.bytes2 = nil
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.str = UnionStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.str = UnionAllStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.str = UnionDistinctStr
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3665
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3669
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3673
		{
			yyVAL.str = SQLCacheStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3678
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3682
		{
			yyVAL.str = DistinctStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3687
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3691
		{
			yyVAL.str = StraightJoinHint
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3696
		{
			yyVAL.selectExprs = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3700
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3710
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3728
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3733
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3741
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3753
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3757
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3763
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3767
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3777
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3781
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3785
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3791
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3821
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3834
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3838
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3845
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3851
		{
			yyVAL.str = JoinStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3855
		{
			yyVAL.str = JoinStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3859
		{
			yyVAL.str = JoinStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3863
		{
			yyVAL.str = StraightJoinStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3869
		{
			yyVAL.str = LeftJoinStr
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.str = LeftJoinStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.str = RightJoinStr
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3881
		{
			yyVAL.str = RightJoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.str = NaturalJoinStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3891
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3911
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3915
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3920
		{
			yyVAL.indexHints = nil
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3924
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3928
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3932
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3957
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3961
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3965
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3969
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3973
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3977
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3987
		{
			yyVAL.str = ""
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4001
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4043
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.str = IsNullStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4053
		{
			yyVAL.str = IsNotNullStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.str = IsTrueStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.str = IsNotTrueStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.str = IsFalseStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.str = IsNotFalseStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4075
		{
			yyVAL.str = EqualStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4079
		{
			yyVAL.str = LessThanStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4083
		{
			yyVAL.str = GreaterThanStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.str = LessEqualStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.str = GreaterEqualStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.str = NotEqualStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4099
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4104
		{
			yyVAL.expr = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4108
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4114
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4118
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4122
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4128
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4138
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4152
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4156
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4220
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4224
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4228
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4236
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4250
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4254
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4258
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4276
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4280
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4284
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4298
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4302
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4306
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4310
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 627:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4326
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4358
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.str = BooleanModeStr
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4409
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4413
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4417
		{
			yyVAL.str = QueryExpansionStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4437
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4441
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4445
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.expr = nil
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4492
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.str = string("")
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4507
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4511
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4517
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4522
		{
			yyVAL.expr = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4526
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4532
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4540
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4546
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4550
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4554
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4558
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4562
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4566
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4570
		{
			yyVAL.expr = &NullVal{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4576
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4589
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.exprs = nil
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4598
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4603
		{
			yyVAL.expr = nil
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4607
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4612
		{
			yyVAL.orderBy = nil
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4616
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4637
		{
			yyVAL.str = AscScr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4641
		{
			yyVAL.str = AscScr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4645
		{
			yyVAL.str = DescScr
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.limit = nil
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4654
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4658
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4662
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4667
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4671
		{
			yyVAL.str = ForUpdateStr
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4675
		{
			yyVAL.str = ShareModeStr
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4688
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4692
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4696
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4705
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4709
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4716
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4720
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4724
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4733
		{
			yyVAL.updateExprs = nil
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4737
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4743
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4747
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4753
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4757
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4763
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4769
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4779
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4783
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4789
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4795
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4799
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4805
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4809
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4816
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4820
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4824
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4828
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4832
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4839
		{
			yyVAL.bytes = []byte("charset")
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4845
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4849
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4853
		{
			yyVAL.expr = &Default{}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4859
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4863
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4869
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4873
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4879
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4883
		{
			yyVAL.str = yyDollar[2].str
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4889
		{
			yyVAL.str = yyDollar[3].str
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4895
		{
			yyVAL.str = RepeatableRead
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4899
		{
			yyVAL.str = ReadCommitted
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4903
		{
			yyVAL.str = ReadUncommitted
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4907
		{
			yyVAL.str = Serializable
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4913
		{
			yyVAL.str = ""
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4917
		{
			yyVAL.str = yyDollar[2].str
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4923
		{
			yyVAL.str = TxReadWrite
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4927
		{
			yyVAL.str = TxReadOnly
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4933
		{
			yyVAL.str = SessionStr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4937
		{
			yyVAL.str = SessionStr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4941
		{
			yyVAL.str = GlobalStr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4950
		{
			yyVAL.byt = 0
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4954
		{
			yyVAL.byt = 1
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4959
		{
			yyVAL.byt = 0
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4963
		{
			yyVAL.byt = 1
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4968
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4972
		{
			yyVAL.str = IgnoreStr
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4978
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4982
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4986
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4990
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4994
		{
			yyVAL.empty = struct{}{}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4998
		{
			yyVAL.empty = struct{}{}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5002
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5006
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5010
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5014
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5019
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5023
		{
			yyVAL.empty = struct{}{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5027
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5033
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5037
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5042
		{
			yyVAL.str = IndexStr
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5046
		{
			yyVAL.str = UniqueStr
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5052
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5056
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5063
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5069
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5073
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5080
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5086
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5090
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5328
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5337
		{
			decNesting(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5342
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
