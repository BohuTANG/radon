// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       IndexOptionList
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const FULLTEXT = 57363
const KEY_BLOCK_SIZE = 57364
const NGRAM = 57365
const PARSER = 57366
const SPATIAL = 57367
const UNIQUE = 57368
const KEY = 57369
const ALL = 57370
const DISTINCT = 57371
const AS = 57372
const EXISTS = 57373
const ASC = 57374
const DESC = 57375
const INTO = 57376
const DUPLICATE = 57377
const DEFAULT = 57378
const SET = 57379
const LOCK = 57380
const FULL = 57381
const CHECKSUM = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const JOIN = 57391
const STRAIGHT_JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const INNER = 57395
const OUTER = 57396
const CROSS = 57397
const NATURAL = 57398
const USE = 57399
const FORCE = 57400
const ON = 57401
const ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const MODIFY = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const USING = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const BIT = 57467
const TINYINT = 57468
const SMALLINT = 57469
const MEDIUMINT = 57470
const INT = 57471
const INTEGER = 57472
const BIGINT = 57473
const INTNUM = 57474
const REAL = 57475
const DOUBLE = 57476
const FLOAT_TYPE = 57477
const DECIMAL = 57478
const NUMERIC = 57479
const TIME = 57480
const TIMESTAMP = 57481
const DATETIME = 57482
const YEAR = 57483
const CHAR = 57484
const VARCHAR = 57485
const BOOL = 57486
const CHARACTER = 57487
const VARBINARY = 57488
const NCHAR = 57489
const CHARSET = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const GEOMETRY = 57501
const POINT = 57502
const LINESTRING = 57503
const POLYGON = 57504
const GEOMETRYCOLLECTION = 57505
const MULTIPOINT = 57506
const MULTILINESTRING = 57507
const MULTIPOLYGON = 57508
const NULLX = 57509
const AUTO_INCREMENT = 57510
const APPROXNUM = 57511
const SIGNED = 57512
const UNSIGNED = 57513
const ZEROFILL = 57514
const FIXED = 57515
const DYNAMIC = 57516
const STORAGE = 57517
const DISK = 57518
const MEMORY = 57519
const COLUMN_FORMAT = 57520
const AVG_ROW_LENGTH = 57521
const COMPRESSION = 57522
const CONNECTION = 57523
const DATA = 57524
const DIRECTORY = 57525
const DELAY_KEY_WRITE = 57526
const ENCRYPTION = 57527
const INSERT_METHOD = 57528
const MAX_ROWS = 57529
const MIN_ROWS = 57530
const PACK_KEYS = 57531
const PASSWORD = 57532
const ROW_FORMAT = 57533
const STATS_AUTO_RECALC = 57534
const STATS_PERSISTENT = 57535
const STATS_SAMPLE_PAGES = 57536
const TABLESPACE = 57537
const COMPRESSED = 57538
const REDUNDANT = 57539
const COMPACT = 57540
const TOKUDB_DEFAULT = 57541
const TOKUDB_FAST = 57542
const TOKUDB_SMALL = 57543
const TOKUDB_ZLIB = 57544
const TOKUDB_QUICKLZ = 57545
const TOKUDB_LZMA = 57546
const TOKUDB_SNAPPY = 57547
const TOKUDB_UNCOMPRESSED = 57548
const DATABASES = 57549
const TABLES = 57550
const WARNINGS = 57551
const VARIABLES = 57552
const EVENTS = 57553
const BINLOG = 57554
const GTID = 57555
const STATUS = 57556
const COLUMNS = 57557
const FIELDS = 57558
const CURRENT_TIMESTAMP = 57559
const DATABASE = 57560
const CURRENT_DATE = 57561
const CURRENT_TIME = 57562
const LOCALTIME = 57563
const LOCALTIMESTAMP = 57564
const UTC_DATE = 57565
const UTC_TIME = 57566
const UTC_TIMESTAMP = 57567
const REPLACE = 57568
const CONVERT = 57569
const CAST = 57570
const GROUP_CONCAT = 57571
const SEPARATOR = 57572
const MATCH = 57573
const AGAINST = 57574
const BOOLEAN = 57575
const LANGUAGE = 57576
const WITH = 57577
const QUERY = 57578
const EXPANSION = 57579
const UNUSED = 57580
const PARTITION = 57581
const PARTITIONS = 57582
const HASH = 57583
const LIST = 57584
const XA = 57585
const DISTRIBUTED = 57586
const ENGINES = 57587
const VERSIONS = 57588
const PROCESSLIST = 57589
const QUERYZ = 57590
const TXNZ = 57591
const KILL = 57592
const ENGINE = 57593
const SINGLE = 57594
const BEGIN = 57595
const START = 57596
const TRANSACTION = 57597
const COMMIT = 57598
const ROLLBACK = 57599
const GLOBAL = 57600
const SESSION = 57601
const NAMES = 57602
const RADON = 57603
const ATTACH = 57604
const ATTACHLIST = 57605
const DETACH = 57606
const RESHARD = 57607
const CLEANUP = 57608

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"NGRAM",
	"PARSER",
	"SPATIAL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4495

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 207,
	87, 794,
	-2, 40,
	-1, 212,
	87, 656,
	-2, 605,
	-1, 444,
	115, 640,
	-2, 636,
	-1, 445,
	115, 641,
	-2, 637,
	-1, 472,
	112, 81,
	162, 81,
	165, 81,
	-2, 92,
	-1, 522,
	1, 75,
	284, 75,
	-2, 81,
	-1, 639,
	5, 27,
	-2, 581,
	-1, 662,
	112, 81,
	162, 81,
	165, 81,
	-2, 93,
	-1, 774,
	1, 76,
	284, 76,
	-2, 81,
	-1, 861,
	115, 643,
	-2, 639,
	-1, 1018,
	5, 28,
	-2, 460,
	-1, 1042,
	5, 28,
	-2, 582,
	-1, 1169,
	5, 27,
	-2, 584,
	-1, 1298,
	5, 28,
	-2, 585,
}

const yyPrivate = 57344

const yyLast = 8813

var yyAct = [...]int{

	445, 1195, 1370, 208, 1332, 1303, 422, 1339, 1176, 1314,
	1184, 908, 545, 1242, 1313, 642, 1228, 890, 1160, 398,
	385, 652, 1239, 1307, 770, 891, 1139, 599, 3, 952,
	56, 852, 845, 860, 855, 211, 1003, 186, 99, 1011,
	66, 887, 643, 822, 340, 400, 871, 802, 548, 1159,
	341, 912, 691, 719, 775, 447, 168, 726, 387, 453,
	396, 766, 55, 610, 99, 538, 216, 663, 343, 205,
	176, 178, 177, 179, 180, 173, 658, 659, 185, 337,
	99, 99, 757, 195, 338, 1362, 1251, 423, 50, 1304,
	95, 1390, 1369, 1389, 420, 1349, 169, 99, 172, 1387,
	174, 175, 1334, 181, 182, 183, 184, 1368, 1348, 1152,
	1222, 170, 369, 1105, 94, 358, 1183, 1106, 1107, 70,
	799, 76, 77, 71, 73, 362, 357, 921, 24, 51,
	26, 27, 364, 365, 203, 920, 962, 750, 50, 1124,
	360, 361, 854, 366, 367, 368, 191, 370, 371, 372,
	373, 374, 1335, 958, 957, 46, 972, 758, 911, 28,
	210, 1217, 36, 1215, 793, 943, 944, 945, 60, 82,
	986, 985, 984, 946, 1334, 983, 89, 1271, 352, 37,
	99, 350, 53, 379, 381, 345, 792, 1293, 1295, 1075,
	75, 96, 1140, 1326, 62, 63, 64, 65, 1325, 1324,
	99, 348, 857, 99, 981, 216, 914, 550, 914, 913,
	216, 913, 347, 795, 346, 80, 1142, 79, 1249, 450,
	449, 550, 791, 72, 1335, 359, 723, 376, 589, 590,
	378, 78, 1144, 577, 1148, 382, 1143, 384, 1141, 1207,
	30, 31, 32, 1146, 34, 568, 569, 570, 571, 572,
	573, 574, 567, 1145, 751, 577, 35, 47, 39, 1294,
	1045, 48, 49, 33, 380, 380, 1147, 1149, 657, 788,
	786, 782, 1017, 785, 787, 83, 758, 93, 91, 50,
	81, 1015, 88, 1336, 723, 1316, 566, 565, 575, 576,
	568, 569, 570, 571, 572, 573, 574, 567, 171, 210,
	577, 1201, 1347, 980, 466, 549, 1109, 900, 955, 956,
	959, 960, 790, 84, 92, 86, 87, 90, 598, 549,
	937, 460, 829, 1361, 567, 722, 1374, 577, 1199, 552,
	553, 1021, 1343, 68, 947, 789, 827, 828, 826, 463,
	555, 625, 626, 1077, 1076, 99, 555, 554, 553, 909,
	99, 99, 99, 804, 982, 99, 1110, 872, 899, 99,
	99, 451, 554, 553, 555, 52, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 464, 1200, 555,
	1154, 523, 38, 722, 942, 351, 554, 553, 53, 40,
	390, 448, 41, 42, 784, 44, 43, 344, 825, 557,
	45, 1022, 872, 555, 1028, 794, 566, 565, 575, 576,
	568, 569, 570, 571, 572, 573, 574, 567, 783, 455,
	577, 575, 576, 568, 569, 570, 571, 572, 573, 574,
	567, 1334, 542, 577, 543, 541, 544, 803, 547, 1375,
	1317, 587, 1023, 556, 1301, 1194, 1004, 570, 571, 572,
	573, 574, 567, 216, 1193, 577, 1094, 1329, 99, 554,
	553, 99, 1092, 216, 354, 996, 997, 998, 554, 553,
	349, 628, 1071, 1261, 343, 1156, 555, 1262, 1359, 644,
	1090, 1335, 586, 588, 639, 555, 1093, 627, 1070, 554,
	553, 953, 1091, 954, 647, 1069, 649, 612, 613, 614,
	615, 616, 617, 618, 1073, 846, 555, 847, 597, 1066,
	1089, 600, 601, 602, 603, 604, 605, 606, 715, 609,
	611, 611, 611, 611, 611, 611, 611, 611, 619, 620,
	621, 622, 654, 99, 1072, 629, 815, 817, 818, 1061,
	99, 99, 816, 1060, 640, 1059, 772, 631, 970, 99,
	969, 963, 377, 1274, 645, 1192, 1182, 210, 1181, 660,
	1074, 1067, 1063, 1062, 1054, 990, 809, 823, 989, 759,
	760, 761, 798, 968, 950, 776, 1197, 1381, 386, 386,
	768, 769, 1268, 546, 1126, 1327, 386, 412, 411, 413,
	414, 415, 416, 800, 801, 558, 417, 216, 807, 1254,
	1310, 1311, 859, 1196, 1254, 1309, 824, 1254, 1306, 1264,
	216, 1230, 1233, 1234, 1235, 1231, 1123, 1232, 1236, 1102,
	862, 1321, 1226, 386, 1254, 386, 546, 1101, 863, 1254,
	1258, 74, 874, 608, 861, 1254, 1257, 1254, 1253, 1009,
	386, 216, 1115, 1114, 1263, 892, 1112, 1111, 57, 1098,
	849, 850, 876, 889, 1068, 1044, 386, 644, 938, 903,
	848, 343, 808, 386, 897, 526, 869, 655, 894, 525,
	524, 473, 472, 808, 353, 1108, 50, 898, 888, 879,
	898, 1040, 1226, 901, 653, 1113, 880, 24, 600, 1037,
	1009, 851, 796, 210, 199, 1009, 24, 462, 623, 53,
	192, 752, 910, 771, 873, 1191, 915, 916, 917, 918,
	919, 906, 1190, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 893, 637, 50, 1189,
	907, 638, 645, 24, 898, 896, 753, 754, 755, 756,
	1009, 53, 1186, 67, 864, 865, 904, 905, 868, 1100,
	53, 763, 764, 765, 53, 1099, 812, 813, 1097, 819,
	820, 767, 875, 762, 877, 878, 1320, 888, 1168, 635,
	780, 779, 936, 778, 939, 940, 532, 886, 1323, 99,
	99, 99, 1288, 941, 1234, 1235, 1322, 53, 1129, 1230,
	1233, 1234, 1235, 1231, 1286, 1232, 1236, 99, 393, 1287,
	22, 1283, 1282, 546, 196, 197, 866, 867, 566, 565,
	575, 576, 568, 569, 570, 571, 572, 573, 574, 567,
	1284, 1379, 577, 1367, 995, 1285, 448, 776, 973, 971,
	811, 978, 1357, 823, 885, 884, 964, 965, 977, 566,
	565, 575, 576, 568, 569, 570, 571, 572, 573, 574,
	567, 454, 1365, 577, 992, 988, 902, 388, 216, 190,
	1205, 1058, 966, 469, 459, 452, 714, 994, 777, 1006,
	999, 1364, 824, 1007, 531, 1038, 1238, 389, 193, 194,
	454, 1166, 99, 949, 1018, 1019, 1020, 948, 935, 1024,
	1366, 187, 1378, 883, 1030, 1277, 1031, 1032, 1033, 1034,
	57, 882, 471, 470, 1049, 343, 343, 188, 1276, 1225,
	653, 743, 742, 539, 1041, 1042, 1043, 1027, 644, 540,
	535, 739, 202, 1056, 1057, 1246, 951, 1053, 1046, 551,
	59, 1039, 1064, 1065, 61, 1096, 861, 54, 1, 1050,
	1055, 1047, 1302, 774, 745, 773, 1005, 1016, 725, 724,
	1360, 69, 1013, 1331, 1363, 1051, 1052, 744, 737, 1333,
	1341, 662, 661, 339, 738, 716, 566, 565, 575, 576,
	568, 569, 570, 571, 572, 573, 574, 567, 967, 99,
	577, 731, 730, 729, 1116, 1117, 727, 343, 961, 749,
	1198, 736, 735, 645, 656, 210, 1008, 746, 688, 687,
	686, 685, 684, 683, 682, 681, 680, 991, 679, 678,
	677, 993, 1025, 216, 676, 675, 674, 741, 216, 859,
	673, 1138, 672, 671, 670, 1125, 669, 664, 668, 1132,
	667, 1127, 666, 1250, 665, 734, 1122, 1128, 99, 732,
	728, 478, 476, 477, 1133, 216, 216, 892, 1137, 1136,
	1151, 861, 1134, 475, 216, 1150, 1153, 1178, 1157, 480,
	1158, 479, 1118, 1119, 1120, 474, 1167, 204, 1237, 1241,
	740, 1169, 1174, 1175, 1010, 1029, 979, 748, 781, 585,
	747, 881, 1104, 1163, 1173, 209, 1179, 1180, 465, 895,
	624, 446, 1275, 1224, 1026, 607, 546, 870, 216, 399,
	216, 216, 1048, 814, 410, 407, 409, 1013, 408, 630,
	210, 636, 210, 559, 397, 391, 1292, 1162, 529, 216,
	216, 216, 363, 85, 456, 1164, 1229, 1227, 893, 1161,
	1036, 1170, 534, 1221, 1315, 634, 733, 1103, 25, 1171,
	1172, 1177, 58, 198, 14, 21, 15, 13, 210, 12,
	29, 10, 9, 8, 7, 6, 5, 4, 1208, 189,
	1209, 23, 2, 20, 19, 99, 99, 18, 17, 1213,
	16, 1218, 1219, 11, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 216, 0, 0,
	216, 216, 1185, 0, 1185, 1185, 0, 0, 1248, 0,
	591, 592, 593, 594, 595, 596, 0, 421, 216, 0,
	1163, 1138, 0, 1185, 1185, 1185, 1187, 1188, 0, 0,
	0, 0, 0, 1265, 1266, 1267, 0, 99, 99, 99,
	99, 1155, 0, 0, 0, 1202, 1203, 1204, 99, 0,
	1220, 99, 1273, 0, 99, 97, 1279, 0, 1281, 0,
	216, 216, 1240, 1289, 1178, 216, 893, 1296, 50, 1300,
	1291, 0, 1297, 1252, 0, 1305, 644, 0, 863, 1298,
	0, 201, 1163, 1163, 1163, 1163, 1278, 0, 1280, 0,
	0, 1185, 1308, 0, 1185, 1185, 1163, 201, 201, 1312,
	1319, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 210, 1256, 201, 0, 1259, 1260, 0, 0,
	0, 0, 0, 0, 1164, 1164, 1164, 1164, 1342, 1345,
	1338, 1340, 1344, 1328, 1337, 0, 0, 0, 1240, 216,
	1330, 0, 1178, 1355, 0, 0, 1346, 1356, 1177, 0,
	1165, 645, 1342, 1345, 1299, 210, 1358, 0, 0, 1185,
	0, 0, 0, 216, 216, 216, 1372, 1373, 821, 1223,
	0, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 1376, 1377, 1385, 1386,
	0, 1384, 216, 0, 0, 0, 0, 201, 0, 0,
	0, 1380, 0, 1382, 1383, 1210, 1211, 0, 1212, 0,
	0, 1214, 0, 1216, 200, 0, 0, 201, 0, 0,
	201, 0, 1352, 1353, 1354, 0, 1177, 0, 0, 0,
	355, 356, 0, 210, 0, 565, 575, 576, 568, 569,
	570, 571, 572, 573, 574, 567, 0, 375, 577, 0,
	1255, 0, 0, 0, 0, 0, 0, 1371, 1371, 1371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 101, 1388, 125, 131, 1318,
	546, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	383, 1014, 0, 1350, 1351, 0, 0, 0, 107, 0,
	0, 0, 0, 554, 553, 0, 0, 0, 0, 0,
	458, 0, 0, 461, 0, 0, 0, 0, 0, 0,
	555, 0, 522, 0, 0, 0, 0, 201, 201, 201,
	0, 0, 533, 0, 0, 0, 201, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 704, 0, 111, 0, 149, 0, 159, 103, 0,
	0, 0, 0, 0, 0, 714, 0, 116, 124, 696,
	0, 157, 158, 112, 162, 0, 0, 104, 0, 0,
	142, 0, 156, 0, 0, 0, 1000, 1001, 1002, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 689, 0, 152, 0, 0, 123, 118, 155, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 201, 0, 646, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 122,
	527, 528, 530, 0, 0, 700, 0, 0, 0, 536,
	537, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 0, 163, 164, 166, 165, 167, 106,
	201, 0, 0, 0, 0, 0, 0, 201, 201, 0,
	0, 0, 0, 0, 694, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 697, 698, 699, 0,
	701, 702, 703, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 0,
	0, 0, 0, 1130, 1131, 858, 648, 0, 0, 858,
	858, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 858, 858,
	858, 0, 0, 0, 0, 0, 0, 690, 693, 0,
	0, 0, 858, 0, 692, 646, 0, 0, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 797, 0, 0, 0, 495, 0, 0,
	805, 806, 508, 511, 512, 513, 514, 515, 516, 810,
	517, 518, 519, 520, 521, 496, 497, 498, 499, 481,
	482, 509, 0, 484, 0, 0, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 500, 501, 502, 503,
	504, 505, 506, 507, 561, 0, 564, 0, 1206, 0,
	0, 0, 578, 579, 580, 581, 582, 583, 584, 0,
	562, 563, 560, 566, 565, 575, 576, 568, 569, 570,
	571, 572, 573, 574, 567, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 201, 201, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	975, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 101, 0, 125, 131, 0,
	0, 0, 0, 0, 0, 853, 0, 395, 0, 0,
	0, 117, 394, 0, 0, 0, 201, 431, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 424, 425, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 444,
	412, 411, 413, 414, 415, 416, 0, 858, 107, 417,
	418, 419, 1035, 648, 858, 392, 405, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 402, 403,
	856, 0, 0, 0, 442, 0, 404, 0, 0, 401,
	406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 440, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 159, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 157, 158, 112, 162, 0, 0, 104, 0, 0,
	142, 0, 156, 0, 0, 0, 0, 0, 0, 1121,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 155, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 1244, 0, 0, 0, 154, 0, 122,
	432, 441, 438, 439, 436, 437, 435, 434, 433, 443,
	426, 427, 429, 0, 428, 100, 105, 132, 0, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 0, 163, 164, 166, 165, 167, 106,
	0, 0, 0, 0, 201, 201, 201, 201, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 201, 0,
	0, 1244, 0, 0, 646, 320, 305, 265, 323, 241,
	256, 335, 258, 259, 295, 225, 275, 143, 254, 101,
	0, 125, 131, 0, 0, 0, 321, 272, 0, 244,
	218, 251, 219, 242, 269, 117, 240, 307, 278, 257,
	0, 329, 133, 287, 0, 151, 136, 0, 0, 271,
	310, 273, 304, 264, 296, 233, 286, 324, 255, 292,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 289, 318, 253, 291, 294, 217, 288,
	0, 221, 226, 334, 316, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 301, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 285, 0,
	0, 0, 228, 223, 268, 0, 0, 0, 232, 0,
	246, 302, 0, 0, 0, 311, 263, 161, 317, 261,
	260, 325, 298, 0, 308, 243, 252, 111, 250, 149,
	293, 159, 103, 314, 309, 283, 266, 267, 222, 0,
	300, 116, 124, 239, 290, 157, 158, 112, 162, 227,
	331, 104, 213, 330, 142, 212, 156, 315, 284, 280,
	224, 313, 282, 279, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 220, 0, 152, 322, 336,
	123, 118, 155, 115, 137, 108, 102, 230, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 312, 0, 0, 0, 0,
	0, 154, 229, 122, 236, 237, 234, 235, 276, 277,
	326, 327, 328, 303, 231, 0, 0, 306, 281, 100,
	105, 132, 333, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 249, 332, 299, 297, 319, 0, 120, 153,
	0, 0, 0, 0, 0, 207, 206, 214, 163, 164,
	166, 165, 167, 106, 320, 305, 265, 323, 241, 256,
	335, 258, 259, 295, 225, 275, 143, 254, 101, 0,
	125, 131, 0, 0, 0, 321, 272, 0, 244, 218,
	251, 219, 242, 269, 117, 240, 307, 278, 257, 0,
	329, 133, 287, 0, 151, 136, 0, 0, 271, 310,
	273, 304, 264, 296, 233, 286, 324, 255, 292, 53,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 289, 318, 253, 291, 294, 217, 288, 0,
	221, 226, 334, 316, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 270, 274, 301, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 285, 0, 0,
	0, 228, 223, 268, 0, 0, 0, 232, 0, 246,
	302, 0, 0, 0, 311, 263, 161, 317, 261, 260,
	325, 298, 0, 308, 243, 252, 111, 250, 149, 293,
	159, 103, 314, 309, 283, 266, 267, 222, 0, 300,
	116, 124, 239, 290, 157, 158, 112, 162, 227, 331,
	104, 650, 330, 142, 651, 156, 315, 284, 280, 224,
	313, 282, 279, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 220, 0, 152, 322, 336, 123,
	118, 155, 115, 137, 108, 102, 230, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 312, 0, 0, 0, 0, 0,
	154, 229, 122, 236, 237, 234, 235, 276, 277, 326,
	327, 328, 303, 231, 0, 0, 306, 281, 100, 105,
	132, 333, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 249, 332, 299, 297, 319, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 163, 164, 166,
	165, 167, 106, 320, 305, 265, 323, 241, 256, 335,
	258, 259, 295, 225, 275, 143, 254, 101, 0, 125,
	131, 0, 0, 0, 321, 272, 0, 244, 218, 251,
	219, 242, 269, 117, 240, 307, 278, 257, 0, 329,
	133, 287, 0, 151, 136, 0, 0, 271, 310, 273,
	304, 264, 296, 233, 286, 324, 255, 292, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 289, 318, 253, 291, 294, 217, 288, 0, 221,
	226, 334, 316, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 270, 274, 301, 262, 0, 0, 0, 0,
	0, 0, 1269, 0, 245, 0, 285, 0, 0, 0,
	228, 223, 268, 0, 0, 0, 232, 0, 246, 302,
	0, 0, 0, 311, 263, 161, 317, 261, 260, 325,
	298, 0, 308, 243, 252, 111, 250, 149, 293, 159,
	103, 314, 309, 283, 266, 267, 222, 0, 300, 116,
	124, 239, 290, 157, 158, 112, 162, 227, 331, 104,
	650, 330, 142, 651, 156, 315, 284, 280, 224, 313,
	282, 279, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 220, 0, 152, 322, 336, 123, 118,
	155, 115, 137, 108, 102, 230, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 312, 0, 0, 0, 0, 0, 154,
	229, 122, 236, 237, 234, 235, 276, 277, 326, 327,
	328, 303, 231, 0, 0, 306, 281, 100, 105, 132,
	333, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	249, 332, 299, 297, 319, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 163, 164, 166, 165,
	167, 106, 320, 305, 265, 323, 241, 256, 335, 258,
	259, 295, 225, 275, 143, 254, 101, 0, 125, 131,
	0, 0, 0, 321, 272, 0, 244, 218, 251, 219,
	242, 269, 117, 240, 307, 278, 257, 0, 329, 133,
	287, 0, 151, 136, 0, 0, 271, 310, 273, 304,
	264, 296, 233, 286, 324, 255, 292, 0, 0, 0,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	289, 318, 253, 291, 294, 217, 288, 0, 221, 226,
	334, 316, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 270, 274, 301, 262, 0, 0, 0, 0, 0,
	0, 1135, 0, 245, 0, 285, 0, 0, 0, 228,
	223, 268, 0, 0, 0, 232, 0, 246, 302, 0,
	0, 0, 311, 263, 161, 317, 261, 260, 325, 298,
	0, 308, 243, 252, 111, 250, 149, 293, 159, 103,
	314, 309, 283, 266, 267, 222, 0, 300, 116, 124,
	239, 290, 157, 158, 112, 162, 227, 331, 104, 650,
	330, 142, 651, 156, 315, 284, 280, 224, 313, 282,
	279, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 220, 0, 152, 322, 336, 123, 118, 155,
	115, 137, 108, 102, 230, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 238, 312, 0, 0, 0, 0, 0, 154, 229,
	122, 236, 237, 234, 235, 276, 277, 326, 327, 328,
	303, 231, 0, 0, 306, 281, 100, 105, 132, 333,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 249,
	332, 299, 297, 319, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 163, 164, 166, 165, 167,
	106, 320, 305, 265, 323, 241, 256, 335, 258, 259,
	295, 225, 275, 143, 254, 101, 0, 125, 131, 0,
	0, 0, 321, 272, 0, 244, 218, 251, 219, 242,
	269, 117, 240, 307, 278, 257, 0, 329, 133, 287,
	0, 151, 136, 0, 0, 271, 310, 273, 304, 264,
	296, 233, 286, 324, 255, 292, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 289,
	318, 253, 291, 294, 217, 288, 0, 221, 226, 334,
	316, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	270, 274, 301, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 285, 0, 0, 0, 228, 223,
	268, 0, 0, 0, 232, 0, 246, 302, 0, 0,
	0, 311, 263, 161, 317, 261, 260, 325, 298, 0,
	308, 243, 252, 111, 250, 149, 293, 159, 103, 314,
	309, 283, 266, 267, 222, 0, 300, 116, 124, 239,
	290, 157, 158, 112, 162, 227, 331, 104, 213, 330,
	142, 212, 156, 315, 284, 280, 224, 313, 282, 279,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 220, 0, 152, 322, 336, 123, 118, 155, 115,
	137, 108, 102, 230, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 312, 0, 0, 0, 0, 0, 154, 229, 122,
	236, 237, 234, 235, 276, 277, 326, 327, 328, 303,
	231, 0, 0, 306, 281, 100, 105, 132, 333, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 249, 332,
	299, 297, 319, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 214, 163, 164, 166, 165, 167, 106,
	320, 305, 265, 323, 241, 256, 335, 258, 259, 295,
	225, 275, 143, 254, 101, 0, 125, 131, 0, 0,
	0, 321, 272, 0, 244, 218, 251, 219, 242, 269,
	117, 240, 307, 278, 257, 0, 329, 133, 287, 0,
	151, 136, 0, 0, 271, 310, 273, 304, 264, 296,
	233, 286, 324, 255, 292, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 289, 318,
	253, 291, 294, 217, 288, 0, 221, 226, 334, 316,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 270,
	274, 301, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 285, 0, 0, 0, 228, 223, 268,
	0, 0, 0, 232, 0, 246, 302, 0, 0, 0,
	311, 263, 161, 317, 261, 260, 325, 298, 0, 308,
	243, 252, 111, 250, 149, 293, 159, 103, 314, 309,
	283, 266, 267, 222, 0, 300, 116, 124, 239, 290,
	157, 158, 112, 162, 227, 331, 104, 650, 330, 142,
	651, 156, 315, 284, 280, 224, 313, 282, 279, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	220, 0, 152, 322, 336, 123, 118, 155, 115, 137,
	108, 102, 230, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 238,
	312, 0, 0, 0, 0, 0, 154, 229, 122, 236,
	237, 234, 235, 276, 277, 326, 327, 328, 303, 231,
	0, 0, 306, 281, 100, 105, 132, 333, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 249, 332, 299,
	297, 319, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 163, 164, 166, 165, 167, 106, 320,
	305, 265, 323, 241, 256, 335, 258, 259, 295, 225,
	275, 143, 254, 101, 0, 125, 131, 0, 0, 0,
	321, 272, 0, 244, 218, 251, 219, 242, 269, 117,
	240, 307, 278, 257, 0, 329, 133, 287, 0, 151,
	136, 0, 0, 271, 310, 273, 304, 264, 296, 233,
	286, 324, 255, 292, 0, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 289, 318, 253,
	291, 294, 217, 288, 0, 221, 226, 334, 316, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 270, 274,
	301, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 285, 0, 0, 0, 228, 223, 268, 0,
	0, 0, 232, 0, 246, 302, 0, 0, 0, 311,
	263, 161, 317, 261, 260, 325, 298, 0, 308, 243,
	252, 111, 250, 149, 293, 159, 103, 314, 309, 283,
	266, 267, 222, 0, 300, 116, 124, 239, 290, 157,
	158, 112, 162, 227, 331, 104, 650, 330, 142, 651,
	156, 315, 284, 280, 224, 313, 282, 279, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 220,
	0, 152, 322, 336, 123, 118, 155, 115, 137, 108,
	102, 230, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 238, 312,
	0, 0, 0, 0, 0, 154, 229, 122, 236, 237,
	234, 235, 276, 277, 326, 327, 328, 303, 231, 0,
	0, 306, 281, 100, 105, 132, 333, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 249, 332, 299, 297,
	319, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 163, 164, 166, 165, 167, 106, 320, 305,
	265, 323, 241, 256, 335, 258, 259, 295, 225, 275,
	143, 254, 101, 0, 125, 131, 0, 0, 0, 321,
	272, 0, 244, 218, 251, 219, 242, 269, 117, 240,
	307, 278, 257, 0, 329, 133, 287, 0, 151, 136,
	0, 0, 271, 310, 273, 304, 264, 296, 233, 286,
	324, 255, 292, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 289, 318, 253, 291,
	294, 217, 288, 0, 221, 226, 334, 316, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 270, 274, 301,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 285, 0, 0, 0, 228, 223, 268, 0, 0,
	0, 232, 0, 246, 302, 0, 0, 0, 311, 263,
	161, 317, 261, 260, 325, 298, 0, 308, 243, 252,
	111, 250, 149, 293, 159, 103, 314, 309, 283, 266,
	267, 222, 0, 300, 116, 124, 239, 290, 157, 158,
	112, 162, 227, 331, 104, 650, 330, 142, 651, 156,
	315, 284, 280, 224, 313, 282, 279, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 220, 0,
	152, 322, 336, 123, 118, 155, 115, 137, 108, 102,
	230, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 312, 0,
	0, 0, 0, 0, 154, 229, 122, 236, 237, 234,
	235, 276, 277, 326, 327, 328, 303, 231, 0, 0,
	306, 281, 100, 105, 132, 333, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 249, 332, 299, 297, 319,
	0, 120, 153, 0, 0, 143, 0, 101, 128, 125,
	131, 163, 164, 166, 165, 167, 106, 0, 0, 395,
	0, 0, 0, 117, 394, 0, 0, 0, 0, 431,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 444, 412, 411, 413, 414, 415, 416, 0, 0,
	107, 417, 418, 419, 0, 0, 0, 392, 405, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 403, 856, 0, 0, 0, 442, 0, 404, 0,
	0, 401, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 122, 432, 441, 438, 439, 436, 437, 435, 434,
	433, 443, 426, 427, 429, 0, 428, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	143, 0, 101, 128, 125, 131, 163, 164, 166, 165,
	167, 106, 0, 0, 395, 0, 0, 0, 117, 394,
	0, 0, 0, 0, 431, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 386, 444, 412, 411, 413,
	414, 415, 416, 0, 0, 107, 417, 418, 419, 0,
	0, 0, 392, 405, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 403, 0, 0, 0,
	0, 442, 0, 404, 0, 0, 401, 406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 122, 432, 441, 438,
	439, 436, 437, 435, 434, 433, 443, 426, 427, 429,
	0, 428, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 143, 0, 101, 128, 125,
	131, 163, 164, 166, 165, 167, 106, 0, 0, 395,
	0, 0, 0, 117, 394, 0, 0, 0, 0, 431,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 444, 412, 411, 413, 414, 415, 416, 0, 0,
	107, 417, 418, 419, 0, 0, 0, 392, 405, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 403, 0, 0, 0, 0, 442, 0, 404, 0,
	0, 401, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 122, 432, 441, 438, 439, 436, 437, 435, 434,
	433, 443, 426, 427, 429, 0, 428, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	143, 0, 101, 128, 125, 131, 163, 164, 166, 165,
	167, 106, 0, 0, 395, 0, 0, 0, 117, 394,
	0, 0, 0, 0, 431, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 444, 412, 411, 413,
	414, 415, 416, 0, 0, 107, 417, 418, 419, 0,
	0, 0, 392, 405, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 403, 0, 0, 0,
	0, 442, 0, 404, 0, 0, 401, 406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 122, 432, 441, 438,
	439, 436, 437, 435, 434, 433, 443, 426, 427, 429,
	0, 428, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 143, 0, 101, 128, 125,
	131, 163, 164, 166, 165, 167, 106, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 431,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 444, 412, 411, 413, 414, 415, 416, 0, 0,
	107, 417, 418, 419, 0, 0, 0, 0, 405, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 403, 0, 0, 0, 0, 442, 0, 404, 0,
	0, 401, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 122, 432, 441, 438, 439, 436, 437, 435, 434,
	433, 443, 426, 427, 429, 0, 428, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 143, 0, 101,
	0, 125, 131, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 117, 163, 164, 166, 165,
	167, 106, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 565,
	575, 576, 568, 569, 570, 571, 572, 573, 574, 567,
	0, 0, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	143, 0, 101, 0, 720, 131, 0, 0, 721, 718,
	723, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 154, 0, 122, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 160, 342, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 163, 164,
	166, 165, 167, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	161, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 24, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 143, 0, 101,
	152, 125, 131, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 117, 129, 135, 138, 144,
	145, 150, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 98, 154, 0, 122, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 163, 164, 166, 165, 167, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 143, 0, 101, 152, 125, 131,
	123, 118, 155, 115, 137, 108, 102, 1243, 109, 110,
	114, 113, 117, 129, 135, 138, 144, 145, 150, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 154, 1245, 122, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 163, 164,
	166, 165, 167, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 159, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 157, 158, 112, 162, 0, 0, 104, 0,
	0, 142, 0, 156, 0, 0, 0, 0, 0, 0,
	24, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 143, 0, 101, 152, 125, 131, 123, 118, 155,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 117,
	129, 135, 138, 144, 145, 150, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 215, 154, 0,
	122, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 163, 164, 166, 165, 167,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 155, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 143, 0, 101, 0, 125, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 154, 0, 122, 0, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 160,
	215, 0, 0, 632, 0, 0, 633, 0, 0, 107,
	0, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 163, 164, 166, 165, 167, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 159, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 157, 158, 112, 162, 0, 0, 104, 0,
	0, 142, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 155,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 143, 0, 101,
	0, 125, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 468, 0, 154, 0,
	122, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 160, 215, 0, 467, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 163, 164, 166, 165, 167,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 143, 0, 101, 152, 125, 131,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 117, 129, 135, 138, 144, 145, 150, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 154, 1245, 122, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 163, 164,
	166, 165, 167, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 159, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 157, 158, 112, 162, 0, 0, 104, 0,
	0, 142, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 143, 0, 101, 152, 125, 131, 123, 118, 155,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 117,
	129, 135, 138, 144, 145, 150, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 98, 154, 0,
	122, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 105, 132, 0,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 153, 0, 0, 0,
	0, 0, 128, 0, 0, 163, 164, 166, 165, 167,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 143, 0,
	101, 152, 125, 131, 123, 118, 155, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 117, 129, 135, 138,
	144, 145, 150, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 154, 1014, 122, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 163, 164, 166, 165, 167, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 143, 0, 101, 0, 125, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 117,
	0, 0, 154, 0, 122, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 163,
	164, 166, 165, 167, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 143, 0,
	101, 152, 125, 131, 123, 118, 155, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 117, 129, 135, 138,
	144, 145, 150, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 154, 0, 122, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 163, 164, 166, 165, 167, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 143, 0, 101, 152, 125,
	131, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 117, 129, 135, 138, 144, 145, 150,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 444, 154, 0, 122, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 163,
	164, 166, 165, 167, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 143, 0, 101, 152, 125, 131, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	117, 129, 135, 138, 144, 145, 150, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 154,
	0, 122, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 163, 164, 166, 165,
	167, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 143,
	0, 101, 152, 125, 131, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 117, 129, 135,
	138, 144, 145, 150, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 154, 0, 122, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 163, 164, 166, 165, 167, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 143, 0, 101, 152,
	125, 131, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 117, 129, 135, 138, 144, 145,
	150, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 154, 0, 122, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	163, 164, 166, 165, 167, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	159, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 157, 158, 112, 162, 0, 0,
	104, 0, 0, 142, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 155, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 163, 164, 166,
	165, 167, 106,
}
var yyPact = [...]int{

	122, -1000, -222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 886, 925, -1000, -1000, -1000, -1000, -1000, 683,
	98, 61, -4, 92, 90, 51, 66, 8195, -1000, -1000,
	45, -1000, -197, -1000, -1000, -209, -1000, -1000, -1000, -1000,
	681, -1000, -1000, -1000, -1000, -1000, 875, 892, 694, 850,
	757, -1000, 61, 8195, 912, 2450, -177, 8362, 55, 88,
	86, 75, 55, -1000, 56, -1000, 48, 611, 48, 8195,
	8195, -102, -10, -1000, -1000, -100, -1000, -1000, -1000, -119,
	-1000, -1000, -1000, -1000, -1000, -1000, 8195, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 486, -1000, -1000, -1000, -1000, 639, 639, -1000, 8195,
	-1000, -1000, -1000, -1000, -1000, 517, 839, 5423, 5423, 886,
	-1000, 681, -1000, -1000, -1000, 822, -1000, -1000, 348, 7694,
	827, 206, 8195, 636, 3566, -1000, -1000, -1000, 290, 7000,
	-1000, -1000, -1000, 826, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 888, 887, 610,
	-1000, 1740, -1000, -1000, 8195, 302, 607, 606, 602, 8195,
	8195, 8195, 843, 717, 8195, -1000, -1000, 910, 8195, 8195,
	-1000, -1000, 903, 909, -1000, -1000, -1000, -1000, -1000, 903,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5423, -1000, -1000, 191, -1000, -1000, -1000, -1000, 921, 232,
	382, -1000, 5423, 1845, 639, 639, -1000, -1000, 112, -1000,
	-1000, 5678, 5678, 5678, 5678, 5678, 5678, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	639, 203, -1000, 5168, 639, 639, 639, 639, 639, 639,
	5423, 639, 639, 639, 639, 639, 639, 639, 639, 639,
	639, 639, 639, 639, -1000, -1000, 637, -1000, 309, 875,
	517, 757, 6807, 719, -1000, -1000, 690, 8195, -1000, 8028,
	4403, 899, 3566, 636, 5423, 156, -1000, -1000, -1000, -1000,
	-182, 639, 1569, 6113, 885, -51, -1000, -1000, -1000, 641,
	-1000, 641, 641, 641, 641, -5, -5, -5, -5, -1000,
	-1000, -1000, -1000, -1000, 703, -1000, 641, 641, 641, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 701, 701, 701,
	643, 643, 830, 837, 714, 712, 711, -1000, 150, 631,
	-1000, -1000, 8195, -1000, 875, -110, -1000, -1000, 342, 8195,
	8195, -1000, -1000, -1000, -1000, 601, 285, -1000, 8195, -1000,
	-1000, -1000, 785, 5423, 5423, 463, 5423, 5423, 246, 5678,
	328, 241, 5678, 5678, 5678, 5678, 5678, 5678, 5678, 5678,
	5678, 5678, 5678, 5678, 5678, 5678, 5678, 442, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, -1000, 681, 523,
	523, 121, 121, 121, 121, 121, 5920, 2146, 4124, 517,
	5168, 4658, 4658, 5423, 5423, 4658, 851, 274, 285, 7861,
	-1000, 517, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4658,
	4658, 4658, 4658, 5423, -1000, -1000, -1000, 839, -1000, 851,
	883, -1000, 794, 793, 4658, -1000, 708, 8028, 639, -1000,
	6614, -1000, 673, -1000, 271, -1000, 192, -1000, -1000, -1000,
	-1000, -1000, 886, 5423, -1000, 285, -1000, 596, 639, 639,
	8362, -1000, 1569, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 262,
	262, 46, -1000, -1000, 262, 262, 262, 262, 262, -65,
	-73, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, -1000, -1000, -1000, 861, 257, 595,
	199, 199, -1000, -1000, -1000, 885, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 311, 100,
	-1000, 860, -1000, 856, 509, 918, 428, 118, 117, -53,
	-1000, -1000, 485, -5, -5, -1000, -1000, -1000, 825, -1000,
	-1000, -1000, 508, -1000, -1000, -1000, -1000, 484, -1000, -1000,
	-1000, 482, -1000, -1000, 830, -1000, 44, -1000, 8195, 8195,
	8195, -1000, 177, 267, 47, 39, 38, 37, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8195, -1000, -1000, 503,
	-1000, -1000, -1000, 500, 5423, -1000, 342, -1000, 5423, -1000,
	-1000, 778, 246, 252, -1000, -1000, 392, -1000, -1000, 285,
	285, 741, -1000, -1000, -1000, -1000, 328, 5678, 5678, 5678,
	308, 741, 868, 321, 1326, 121, 343, 343, 215, 215,
	215, 215, 215, 143, 143, -1000, -1000, -1000, 517, -1000,
	-1000, -1000, 517, 4658, 629, -1000, -1000, 1456, 166, 639,
	157, -1000, -1000, 517, 578, 578, 270, 412, 578, 4658,
	319, -1000, 5423, 517, -1000, 578, 517, 578, 578, -1000,
	-1000, 8195, -1000, -1000, -1000, -1000, 679, -1000, 840, 619,
	620, -1000, -1000, 4913, 517, 594, 145, 886, 8028, 5423,
	4124, 875, 285, -1000, 8362, 8362, 517, -1000, 499, -1000,
	428, 262, 262, -1000, 824, 479, 477, 473, 498, 497,
	262, 262, 443, 496, 591, 429, 422, 406, 468, 495,
	153, 444, 426, 420, 8529, 698, 586, 695, 689, 564,
	556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 613, -1000, -1000, 243, 585, -1000, 624,
	581, -1000, 262, 262, 639, 639, 639, -1000, 8195, -1000,
	-1000, -1000, 553, -23, 683, 521, 8362, -1000, -1000, -1000,
	-1000, 285, -1000, 285, -1000, -1000, -1000, -1000, -1000, -1000,
	308, 741, 710, -1000, 5678, 5678, -1000, -1000, 578, 4658,
	-1000, -1000, 7501, -1000, -1000, 3287, 4658, 3845, -1000, -1000,
	-1000, 79, 442, 79, -140, 634, 294, -1000, 5423, 391,
	-1000, -1000, -1000, -1000, -1000, -1000, 899, 7334, 854, -1000,
	639, -1000, -1000, 727, 7861, 7861, 875, -1000, 285, -1000,
	-1000, 517, 517, 2729, -1000, -1000, 428, 428, -1000, -1000,
	-1000, -1000, -1000, -1000, 493, 491, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7861, 682, 7861,
	7861, 669, 652, -1000, 645, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 490, 388, -1000, 379, 540, 265, 7861, 7861,
	7861, -1000, -1000, -1000, 823, -1000, -1000, -1000, -1000, 5678,
	741, 741, -1000, -1000, -1000, -1000, 124, 517, -1000, 517,
	641, 641, -1000, 641, 643, -1000, 641, 16, 641, 14,
	517, 517, 639, -137, -1000, 285, 5423, 897, 621, 740,
	-1000, -1000, -1000, 846, 6280, 6447, 917, -1000, 639, -1000,
	681, 103, -1000, -1000, -171, 639, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 576, -1000, 641, 7861, 574, 568, 7861,
	7861, 411, -1000, 582, 547, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 563, 563, 563, 519, 741, 3008, -1000, -1000,
	-1000, 114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5678, 517, 488, 285, 895, 880, 7334, 7334, 7334, 7334,
	-1000, 753, 752, -1000, 771, 745, 733, 8195, -1000, 561,
	6280, 130, -1000, 7167, -1000, -1000, 8028, 620, 517, 7861,
	2729, 378, -167, -1000, 7861, -1000, 546, -1000, -1000, 543,
	538, -1000, 539, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 188, -1000, -1000, -1000, 5423, 5423, 740, 707,
	562, -1000, -1000, -1000, -1000, 737, -1000, 729, -1000, -1000,
	-1000, -1000, -1000, 73, 72, 67, -1000, 616, -1000, -1000,
	-1000, -1000, 524, -1000, 394, -1000, -1000, 152, 152, -1000,
	-1000, -1000, 152, 80, 409, 517, 52, -158, 285, 612,
	5423, 5423, -1000, -1000, 639, 639, 639, -167, 2729, 791,
	152, -1000, -1000, -1000, 262, 413, 65, 80, 409, 833,
	833, -1000, -1000, 866, 833, -1000, -1000, 777, -144, -162,
	285, 285, 7861, 7861, 7861, -1000, -1000, 229, 373, -1000,
	-1000, -1000, -1000, -1000, 262, 262, 869, -1000, 775, -1000,
	516, -1000, 516, 516, 639, -1000, 540, 540, -1000, -153,
	-1000, 7861, -1000, -1000, -1000, -1000, -1000, -160, -1000, -163,
	-1000,
}
var yyPgo = [...]int{

	0, 1173, 1170, 1168, 1167, 1164, 1163, 1162, 27, 800,
	1161, 1159, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150,
	1149, 1147, 1146, 1145, 1144, 168, 1143, 1142, 1138, 1137,
	1136, 59, 1135, 83, 1134, 1133, 1132, 36, 142, 31,
	34, 202, 1130, 22, 49, 18, 1129, 1127, 16, 1126,
	1340, 1124, 65, 1123, 1122, 47, 1118, 1117, 1116, 2,
	21, 1115, 1114, 1113, 1111, 60, 798, 1109, 1108, 1106,
	1105, 1104, 1103, 43, 12, 17, 6, 25, 1099, 45,
	19, 1097, 46, 1095, 1094, 1093, 1092, 30, 1091, 55,
	1090, 37, 58, 1089, 41, 15, 42, 134, 69, 1088,
	1085, 1082, 1081, 631, 1079, 385, 397, 1078, 48, 1076,
	35, 0, 94, 3, 39, 1074, 50, 1207, 33, 13,
	1069, 1068, 56, 8, 32, 1067, 26, 1065, 1061, 1059,
	1053, 1043, 1042, 1041, 254, 1040, 1039, 1035, 1034, 1033,
	1032, 1030, 1028, 1027, 1026, 1024, 1023, 1022, 1020, 1016,
	1015, 1014, 1010, 1009, 1008, 1006, 1005, 1004, 1003, 1002,
	1001, 1000, 999, 998, 82, 994, 992, 991, 29, 51,
	11, 52, 990, 989, 988, 61, 24, 986, 983, 982,
	981, 978, 44, 965, 53, 40, 963, 962, 961, 67,
	10, 116, 14, 7, 23, 9, 4, 960, 959, 954,
	953, 951, 950, 1, 949, 948, 57, 945, 943, 54,
	5, 942, 938, 937, 87, 20, 934, 63,
}
var yyR1 = [...]int{

	0, 212, 213, 213, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 125,
	125, 211, 211, 210, 139, 139, 16, 16, 16, 16,
	16, 16, 16, 16, 202, 202, 203, 203, 198, 196,
	196, 194, 194, 200, 200, 192, 192, 197, 197, 195,
	195, 193, 193, 199, 199, 207, 207, 208, 208, 209,
	209, 171, 171, 170, 170, 169, 169, 172, 172, 172,
	19, 185, 187, 187, 188, 188, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 142, 144, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 157, 158, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 161, 161, 162, 162, 163, 163, 145,
	168, 168, 143, 138, 140, 141, 141, 186, 186, 186,
	182, 116, 116, 127, 127, 127, 127, 204, 204, 205,
	205, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 130, 130, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 129, 129, 129, 129, 129, 131, 131, 131,
	131, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 133, 181, 181, 134, 134, 175, 175,
	176, 176, 176, 173, 173, 174, 174, 177, 177, 135,
	135, 135, 135, 135, 30, 29, 29, 29, 101, 101,
	101, 178, 164, 164, 164, 137, 165, 165, 166, 166,
	166, 167, 167, 167, 179, 179, 180, 180, 136, 183,
	183, 183, 183, 183, 183, 184, 184, 191, 191, 190,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	18, 56, 56, 1, 20, 2, 3, 4, 4, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 36, 36, 52, 52, 53, 53,
	54, 54, 55, 55, 55, 24, 22, 23, 23, 23,
	23, 216, 25, 26, 26, 27, 27, 27, 33, 33,
	33, 31, 31, 32, 32, 39, 39, 38, 38, 40,
	40, 40, 40, 115, 115, 115, 114, 114, 42, 42,
	43, 43, 44, 44, 45, 45, 45, 57, 46, 46,
	46, 46, 121, 121, 120, 120, 120, 119, 119, 47,
	47, 47, 47, 48, 48, 48, 48, 49, 49, 51,
	51, 50, 50, 58, 58, 58, 58, 59, 59, 60,
	60, 41, 41, 41, 41, 41, 41, 41, 104, 104,
	62, 62, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 72, 72, 72, 72, 72, 72, 63, 63,
	63, 63, 63, 63, 63, 37, 37, 73, 73, 73,
	79, 74, 74, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 70, 70, 70, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 69, 69, 69, 69, 69,
	69, 69, 69, 217, 217, 71, 71, 71, 71, 34,
	34, 34, 34, 34, 124, 124, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 83,
	83, 35, 35, 81, 81, 82, 84, 84, 80, 80,
	80, 65, 65, 65, 65, 65, 65, 65, 67, 67,
	67, 85, 85, 86, 86, 87, 87, 88, 88, 89,
	90, 90, 90, 91, 91, 91, 91, 92, 92, 92,
	64, 64, 64, 64, 64, 64, 93, 93, 93, 93,
	94, 94, 75, 75, 77, 77, 76, 78, 95, 95,
	96, 97, 97, 98, 98, 100, 100, 100, 99, 99,
	99, 102, 102, 105, 105, 106, 106, 103, 103, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 108,
	108, 108, 109, 109, 201, 201, 112, 112, 113, 113,
	117, 117, 118, 118, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 214, 215, 122, 123, 123, 123,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 0, 2, 2, 10, 12, 8,
	5, 11, 11, 11, 1, 1, 1, 1, 2, 3,
	2, 0, 2, 1, 1, 0, 2, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 1, 2, 4,
	4, 0, 1, 0, 1, 1, 2, 1, 1, 1,
	4, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 1, 1, 3, 3,
	3, 1, 1, 3, 1, 1, 1, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 1, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 5,
	7, 6, 6, 7, 7, 1, 1, 1, 3, 2,
	6, 7, 7, 7, 9, 7, 7, 7, 4, 5,
	4, 1, 3, 3, 3, 2, 2, 3, 4, 2,
	3, 2, 2, 4, 4, 3, 6, 3, 6, 5,
	5, 3, 3, 5, 6, 3, 3, 3, 5, 3,
	3, 3, 3, 3, 0, 3, 0, 2, 0, 1,
	1, 1, 0, 2, 2, 4, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -212, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 37, -19,
	118, 119, 120, 141, 122, 134, 40, 57, 260, 136,
	267, 270, 271, 274, 273, 278, 33, 135, 139, 140,
	-214, 7, 243, 60, -213, 284, -87, 14, -27, 5,
	-25, -216, -25, -25, -25, -25, -185, 60, 235, -201,
	21, 25, 125, 26, -103, 129, 125, 126, 235, 125,
	125, 229, 118, 224, 262, -53, 264, 265, 231, 125,
	266, 227, 263, 226, 63, 39, 125, -117, 63, -111,
	249, 19, 196, 142, 161, 250, 283, 72, 195, 198,
	199, 137, 157, 201, 200, 193, 151, 35, 191, 175,
	268, 254, 233, 190, 152, 21, 176, 180, 275, 203,
	174, 22, 251, 42, 178, 204, 46, 194, 205, 182,
	181, 183, 164, 17, 206, 207, 177, 179, 253, 139,
	208, 45, 187, 269, 231, 192, 166, 155, 156, 141,
	255, 127, 158, 278, 279, 281, 280, 282, -122, -122,
	66, 253, -122, 272, -122, -122, 279, 281, 280, 282,
	283, -122, -122, -122, -122, -8, -91, 16, 15, -11,
	-9, -214, 6, 28, 29, -33, 47, 48, -26, -103,
	-50, -117, 10, -97, -125, -98, 276, 275, -113, -100,
	-112, -110, 165, 162, 277, 63, -111, 78, 30, 32,
	185, 81, 148, 113, 170, 15, 82, 159, 112, 232,
	197, 244, 118, 55, 236, 237, 234, 235, 224, 153,
	36, 9, 33, 135, 29, 106, 120, 85, 86, 262,
	138, 31, 136, 75, 18, 58, 10, 39, 12, 13,
	130, 129, 97, 126, 53, 7, 146, 147, 114, 34,
	94, 49, 27, 51, 95, 16, 238, 239, 38, 173,
	169, 248, 172, 145, 168, 108, 56, 43, 79, 73,
	154, 76, 59, 140, 77, 14, 54, 265, 132, 264,
	150, 96, 121, 243, 52, 6, 247, 37, 134, 144,
	50, 125, 225, 171, 143, 167, 84, 128, 74, 266,
	5, 26, 188, 8, 57, 131, 240, 241, 242, 41,
	163, 160, 263, 252, 83, 11, 189, 256, 261, -186,
	-182, -116, 63, -111, -106, 130, 126, 126, 126, -106,
	125, -105, 130, 63, -105, -50, -50, 228, 125, 235,
	-122, -122, 225, -54, 232, 233, -122, -122, -122, 231,
	-122, -122, -122, -122, -122, -50, -122, 66, -122, -76,
	-214, -76, -122, -50, -122, -215, 62, -92, 18, 38,
	-41, -61, 79, -66, 36, 31, -65, -62, -80, -78,
	-79, 113, 102, 103, 110, 80, 114, -70, -68, -69,
	-71, 65, 64, 66, 67, 68, 69, 73, 74, 75,
	-112, -117, -76, -214, 51, 52, 244, 245, 248, 246,
	82, 41, 234, 242, 241, 240, 238, 239, 236, 237,
	130, 235, 108, 243, 63, -111, -88, -89, -41, -87,
	-8, -25, 43, -31, 29, 71, -51, 34, -50, 37,
	115, -50, 61, -97, 87, -99, -112, 65, 36, 37,
	15, 15, 62, 61, -127, -130, -132, -131, -133, -128,
	-129, 159, 160, 113, 163, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 137, 155, 156, 157, 158,
	176, 177, 178, 179, 180, 181, 182, 183, 142, 161,
	250, 143, 144, 145, 146, 147, 148, 150, 151, 152,
	153, 154, -117, 79, 63, 63, 63, -50, -50, -56,
	-50, 31, 59, -117, -36, 10, -50, -50, -52, 10,
	10, -52, -122, -122, -122, -74, -41, -122, -108, 128,
	30, 8, 97, 78, 77, 94, 61, 17, -41, -63,
	97, 79, 95, 96, 81, 99, 98, 109, 102, 103,
	104, 105, 106, 107, 108, 100, 101, 112, 87, 88,
	89, 90, 91, 92, 93, -104, -214, -79, -214, 116,
	117, -66, -66, -66, -66, -66, -66, -214, 115, -8,
	-214, -214, -214, -214, -214, -214, -214, -83, -41, -214,
	-217, -214, -217, -217, -217, -217, -217, -217, -217, -214,
	-214, -214, -214, 61, -90, 32, 33, -91, -215, -33,
	-67, -112, 66, 69, -32, 50, -64, 37, 41, -8,
	-214, -50, -95, -96, -80, -112, -117, -118, -117, -110,
	162, 165, -60, 11, -98, -41, -165, 112, 258, 259,
	-214, -187, -188, -189, -143, -138, -140, -141, -142, -144,
	-145, -146, -147, -148, -149, -150, -151, -152, -153, -154,
	-155, -156, -157, -158, -159, -160, -161, -162, -163, 72,
	268, -171, 275, 269, 185, 196, 40, 197, 198, 199,
	126, 201, 202, 203, 22, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 36, -182, -183, 132, 26, -184,
	21, 25, 126, 27, -204, -205, -206, -177, -135, -178,
	-179, -180, -136, -30, -137, -166, -167, 73, 79, 36,
	185, 132, 27, 26, 72, 59, 112, 195, 192, -173,
	188, -134, 60, -134, -134, -134, -134, -164, 162, -164,
	-164, -164, 60, -134, -134, -134, -175, 60, -175, -175,
	-176, 60, -176, -207, -208, -209, -171, 31, 59, 59,
	59, -107, 121, 268, 244, 123, 120, 124, 119, 185,
	162, 72, 36, 14, 255, 63, 61, -50, -91, 230,
	-122, -122, -55, 95, 11, -50, -50, -122, 61, -215,
	-50, 45, -41, -41, -72, 73, 79, 74, 75, -41,
	-41, -66, -73, -76, -79, 70, 97, 95, 96, 81,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -124, 63, 65, 63, -65,
	-65, -112, -39, 29, -38, -40, 104, -41, -117, -113,
	-118, -110, -215, -8, -38, -38, -41, -41, -38, -31,
	-81, -82, 83, -112, -215, -38, -39, -38, -38, -89,
	-92, -102, 18, 10, 41, 41, -38, -94, 59, -95,
	-75, -77, -76, -214, -8, -93, -112, -60, 61, 87,
	115, -87, -41, 63, -214, -214, -116, -189, -170, 87,
	-170, 112, -169, 165, 162, -170, -170, -170, -170, -170,
	200, 200, -170, -170, -170, -170, -170, -170, -170, -170,
	-170, -170, -170, -170, -170, 27, -184, 63, 63, -184,
	-184, -206, 73, 65, 66, 67, 73, 234, 27, 27,
	65, 8, -168, 63, 65, 190, 191, 36, 36, 193,
	194, -174, 189, 66, -164, -164, 37, -181, 65, 66,
	66, -209, 112, -169, -50, -50, -50, -122, -108, -109,
	126, 27, 87, 128, 133, 133, 133, -50, -122, 65,
	65, -41, -55, -41, -122, 46, 73, 74, 75, -73,
	-66, -66, -66, -37, 138, 78, -215, -215, -38, 61,
	-115, -114, 30, -112, 65, 115, -214, 115, -215, -215,
	-215, 61, 131, 30, -215, -38, -84, -82, 85, -41,
	-215, -215, -215, -215, -215, -50, -42, 10, 35, -94,
	61, -215, -215, -215, 61, 115, -87, -96, -41, -113,
	-91, -116, -116, -215, 65, -168, -170, -170, 37, 66,
	66, 66, 65, 65, -170, -170, 66, 65, 63, 66,
	66, 66, 66, 36, 65, 36, 191, 190, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 66,
	36, 66, 36, 66, 36, 63, -111, 60, 63, 60,
	60, 63, 63, -29, -101, 234, 238, 239, 62, 63,
	113, 62, 61, 61, 62, 61, -170, -170, -214, -214,
	-214, -50, -122, 63, 162, -185, 63, -182, -37, 78,
	-66, -66, -215, -40, -114, 104, -118, -39, -113, -126,
	113, 159, 137, 157, 153, 174, 164, 187, 155, 188,
	-124, -126, 249, -87, 86, -41, 84, -60, -43, -44,
	-45, -46, -57, -79, -214, -50, 27, -77, 41, -8,
	-214, -112, -112, -91, -215, -215, -123, -214, -113, -168,
	-168, 65, 65, -191, -190, -112, 60, -191, -191, 60,
	60, 60, 65, 66, 66, -203, 63, 36, -172, 63,
	113, 36, -191, -191, -191, 37, -66, 115, -215, -215,
	-134, -134, -134, -176, -134, 147, -134, 147, -215, -215,
	-214, -35, 247, -41, -85, 12, 61, -47, -48, -49,
	49, 53, 55, 50, 51, 52, 56, -121, 30, -43,
	-214, -120, -119, 30, -117, 65, 8, -75, -8, 115,
	-139, 257, -214, 62, 61, -134, -191, 62, 62, -191,
	-191, 62, 66, 62, 62, -215, -215, -215, 63, 104,
	-164, 63, -66, -215, 65, -86, 13, 15, -44, -45,
	-44, -45, 49, 49, 49, 54, 49, 54, 49, -48,
	-117, -215, -58, 57, 129, 58, -119, -95, -215, -112,
	-123, 66, -211, -210, 256, -190, 62, -194, -194, 62,
	62, 62, -194, -192, -195, -34, 97, 252, -41, -74,
	59, 59, 49, 49, 126, 126, 126, 61, -215, 63,
	-194, -200, -196, -198, 22, 72, 131, -192, -195, -193,
	-193, -197, -196, 252, -193, -196, -215, 250, 56, 253,
	-41, -41, -214, -214, -214, -210, -123, 41, -170, 65,
	-202, 258, 20, -199, 38, 19, 24, 46, 251, 254,
	-59, -112, -59, -59, 97, 66, -170, -170, 23, 46,
	-215, 61, -215, -215, -76, -203, -203, 252, -112, 253,
	254,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 565, 0, 351, 351, 351, 351, 351, 0,
	634, 617, 0, 0, 0, 338, 0, 0, 836, 836,
	0, 836, 0, 836, 836, 0, 836, 836, 836, 836,
	0, 33, 34, 834, 1, 3, 573, 0, 0, 355,
	358, 353, 617, 0, 0, 0, 46, 0, 615, 0,
	0, 0, 615, 635, 0, 618, 613, 0, 613, 0,
	0, 0, 0, 836, 836, 0, 836, 836, 836, 0,
	836, 836, 836, 836, 836, 339, 0, 346, 640, 641,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 305, 306,
	836, 0, 309, 836, 311, 312, 0, 0, 836, 0,
	836, 347, 348, 349, 350, 27, 577, 0, 0, 565,
	29, 0, 351, 356, 357, 361, 359, 360, 352, 0,
	0, 411, 0, 37, 0, 601, 39, -2, 0, 0,
	638, 639, -2, 655, 607, 636, 637, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 0, 0, 0,
	167, 0, 171, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 334, 0, 0,
	321, 322, 336, 0, 340, 341, 325, 326, 327, 336,
	329, 330, 331, 332, 333, 836, 307, 836, 310, 836,
	0, 836, 315, 629, 317, 28, 835, 23, 0, 0,
	574, 421, 0, 426, 428, 0, 463, 464, 465, 466,
	467, 0, 0, 0, 0, 0, 0, 489, 490, 491,
	492, 551, 552, 553, 554, 555, 556, 557, 430, 431,
	548, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	539, 0, 513, 513, 513, 513, 513, 513, 513, 513,
	0, 0, 0, 0, -2, -2, 566, 567, 570, 573,
	27, 358, 0, 363, 362, 354, 0, 0, 410, 0,
	0, 419, 0, 38, 0, 266, 608, 609, 610, 606,
	0, 0, -2, 0, 177, 243, 174, 175, 176, 236,
	192, 236, 236, 236, 236, 262, 262, 262, 262, 220,
	221, 222, 223, 224, 0, 207, 236, 236, 236, 211,
	226, 227, 228, 229, 230, 231, 232, 233, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 238, 238, 238,
	240, 240, -2, 0, 0, 0, 0, 90, 0, 298,
	301, 614, 0, 300, 573, 0, 836, 836, 342, 0,
	0, 836, 345, 308, 313, 0, 461, 314, 0, 630,
	631, 578, 0, 0, 0, 0, 0, 0, 424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 449,
	450, 451, 452, 453, 454, 427, 0, 441, 0, 0,
	0, 483, 484, 485, 486, 487, 0, 365, 0, 27,
	0, 0, 0, 0, 0, 0, 361, 0, 540, 0,
	505, 0, 506, 507, 508, 509, 510, 511, 512, 0,
	365, 0, 0, 0, 569, 571, 572, 577, 30, 361,
	0, 558, 0, 0, 0, 364, 590, 0, 0, -2,
	0, 409, 419, 598, 0, 548, 0, 412, 642, 643,
	655, 656, 565, 0, 602, 603, 604, 0, 0, 0,
	0, 91, -2, 94, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 83,
	83, 0, 165, 166, 83, 83, 83, 83, 83, 0,
	0, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 168, 169, 0, 0, 0,
	791, 0, 285, 286, 170, 178, 179, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 247, 0, 0,
	261, 0, 275, 277, 0, 0, 0, 0, 0, 245,
	244, 191, 0, 262, 262, 214, 215, 216, 0, 217,
	218, 219, 0, 208, 209, 210, 202, 0, 203, 204,
	205, 0, 206, 50, -2, 77, 0, 616, 0, 0,
	0, 836, 629, 0, 626, 0, 624, 0, 619, 620,
	621, 622, 623, 625, 627, 628, 0, 299, 836, 0,
	319, 320, 323, 0, 0, 337, 342, 328, 0, 596,
	836, 0, 422, 423, 425, 442, 0, 444, 446, 575,
	576, 432, 433, 457, 458, 459, 0, 0, 0, 0,
	455, 437, 0, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 482, 524, 525, 0, 480,
	481, 488, 0, 0, 366, 367, 369, 373, 0, 549,
	0, -2, 460, 27, 0, 0, 0, 0, 0, 0,
	546, 543, 0, 0, 514, 0, 0, 0, 0, 568,
	24, 0, 611, 612, 559, 560, 378, 31, 0, 590,
	580, 592, 594, 0, 27, 0, 586, 565, 0, 0,
	0, 573, 420, 267, 0, 0, 0, 95, 0, 84,
	0, 83, 83, 85, 0, 0, 0, 0, 0, 0,
	83, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 248, 249, 250, 251, 252, 253, 274, 276,
	278, 0, 265, 160, 161, 268, 269, 270, 271, 272,
	273, 173, 246, 0, 212, 213, 0, 0, 234, 0,
	0, 78, 83, 83, 0, 0, 0, 290, 0, 836,
	632, 633, 0, 0, 0, 0, 0, 302, 318, 335,
	343, 344, 324, 462, 316, 579, 443, 445, 447, 434,
	455, 438, 0, 435, 0, 0, 429, 493, 0, 0,
	370, 374, 0, 376, 377, 0, 365, 0, -2, 496,
	497, 0, 0, 0, 0, 565, 0, 544, 0, 0,
	504, 515, 516, 517, 518, 25, 419, 0, 0, 32,
	0, 595, -2, 0, 0, 0, 573, 599, 600, 549,
	36, 0, 0, 837, 162, 163, 0, 0, 86, 121,
	122, 159, 124, 125, 0, 0, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 0, 0, 0,
	0, 0, 0, 254, 255, 258, 259, 260, 237, 263,
	264, 225, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 291, 292, 293, 0, 295, 296, 297, 436, 0,
	456, 439, 494, 368, 375, 371, 0, 0, 550, 0,
	236, 236, 529, 236, 240, 532, 236, 534, 236, 537,
	0, 0, 0, 541, 503, 547, 0, 561, 379, 380,
	382, 383, 384, 392, 0, 394, 0, 593, 0, -2,
	0, 588, 587, 35, 44, 0, 49, 838, 839, 123,
	164, 126, 127, 0, 287, 236, 0, 0, 0, 0,
	0, 0, 235, 0, 0, 79, 56, 57, 80, 87,
	88, 89, 0, 0, 0, 0, 440, 0, 495, 498,
	526, 262, 530, 531, 533, 535, 536, 538, 500, 499,
	0, 0, 0, 545, 563, 0, 0, 0, 0, 0,
	399, 0, 0, 402, 0, 0, 0, 0, 393, 0,
	0, 413, 395, 0, 397, 398, 0, 583, 27, 0,
	837, 0, 0, 279, 0, 289, 0, 61, 61, 0,
	0, 256, 0, 239, 242, 61, 65, 69, 294, 372,
	527, 528, 519, 502, 542, 26, 0, 0, 381, 388,
	0, 391, 400, 401, 403, 0, 405, 0, 407, 408,
	385, 386, 387, 0, 0, 0, 396, 591, -2, 589,
	47, 45, 0, 41, 0, 288, 61, 281, 282, 65,
	69, 257, 71, 71, 71, 0, 0, 0, 564, 562,
	0, 0, 404, 406, 0, 0, 0, 0, 837, 0,
	280, 62, 63, 64, 83, 0, 0, 283, 284, 51,
	52, 66, 67, 0, 53, 70, 501, 0, 0, 0,
	389, 390, 0, 0, 0, 42, 48, 0, 0, 60,
	58, 54, 55, 72, 83, 83, 0, 520, 0, 523,
	0, 417, 0, 0, 0, 59, 0, 0, 68, 521,
	414, 0, 415, 416, 43, 73, 74, 0, 418, 0,
	522,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	60, 62, 104, 102, 61, 103, 115, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 284,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:974
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1004
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1012
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1016
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1023
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1033
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1049
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1060
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1082
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1088
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1098
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1124
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.optVal = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1150
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.PartitionNum = yyDollar[9].optVal
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1164
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1173
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1186
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 53:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = "hash"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = "btree"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = "default"
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1252
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1285
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1297
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1302
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1306
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1323
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1335
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1355
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1370
		{
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1375
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.str = "character set"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1399
		{
			yyVAL.str = "default"
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.TableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.TableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.TableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.TableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.TableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.TableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.TableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.TableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.TableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.TableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.TableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.TableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.TableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.TableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.TableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.TableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.TableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.TableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.TableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.TableSpec.Options.TableSpace = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1503
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1507
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1517
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1572
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1614
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1729
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1741
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1753
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1788
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1794
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1818
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1862
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1866
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1947
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1978
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2173
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2179
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2195
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2311
		{
			yyVAL.optVal = nil
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2320
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2324
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2332
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2342
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2350
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2416
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2444
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2488
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2533
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, nil),
				Primary: true,
				Unique:  true,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2543
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2553
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2563
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2573
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2583
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2621
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2625
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2630
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2635
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2639
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2643
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2647
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2651
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2657
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2665
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.statement = &Xa{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.statement = &Explain{}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2718
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2742
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2746
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2754
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2764
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2768
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2772
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2788
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2796
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2804
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2829
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2833
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.tableName = TableName{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.str = "full "
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.showFilter = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2882
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.statement = &OtherRead{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.statement = &OtherRead{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			setAllowComments(yylex, true)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.bytes2 = nil
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = UnionStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = UnionAllStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = UnionDistinctStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = SQLCacheStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = DistinctStr
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.str = StraightJoinHint
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.selectExprs = nil
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3002
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3006
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3011
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3031
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3059
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3069
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3086
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3090
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3094
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3099
		{
			yyVAL.empty = struct{}{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.empty = struct{}{}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3108
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3137
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.str = StraightJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.str = LeftJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.str = LeftJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = RightJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.str = RightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = NaturalJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3198
		{
			yyVAL.indexHints = nil
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3202
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3206
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3210
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3220
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3251
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3293
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3297
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3301
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3305
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3309
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3313
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3317
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3321
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.str = IsNullStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.str = IsNotNullStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.str = IsTrueStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.str = IsNotTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = IsFalseStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = IsNotFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3353
		{
			yyVAL.str = EqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.str = LessThanStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.str = GreaterThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.str = LessEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3369
		{
			yyVAL.str = GreaterEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.str = NotEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3386
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3406
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3416
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3446
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3462
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3486
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3490
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3502
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3506
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3514
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3536
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3554
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3558
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3562
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3588
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 501:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3592
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3596
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3600
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3679
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3683
		{
			yyVAL.str = BooleanModeStr
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3687
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3691
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = QueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3701
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3766
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3775
		{
			yyVAL.str = string("")
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3779
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3789
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3795
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3800
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3804
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3810
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3814
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3818
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3824
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3828
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3832
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3836
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3840
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3848
		{
			yyVAL.expr = &NullVal{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3854
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3863
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3867
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3872
		{
			yyVAL.exprs = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3876
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3881
		{
			yyVAL.expr = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3885
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3890
		{
			yyVAL.orderBy = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3894
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3900
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3904
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3910
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3915
		{
			yyVAL.str = AscScr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3919
		{
			yyVAL.str = AscScr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3923
		{
			yyVAL.str = DescScr
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3928
		{
			yyVAL.limit = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3932
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3936
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3940
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3945
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3949
		{
			yyVAL.str = ForUpdateStr
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3953
		{
			yyVAL.str = ShareModeStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3966
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3970
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3974
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3979
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3983
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3987
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3994
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3998
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4002
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4006
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4011
		{
			yyVAL.updateExprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4015
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4021
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4025
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4031
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4035
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4041
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4047
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4057
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4061
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4067
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4073
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4077
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4083
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4087
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4094
		{
			yyVAL.bytes = []byte("charset")
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4101
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4105
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4109
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4118
		{
			yyVAL.byt = 0
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4122
		{
			yyVAL.byt = 1
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4127
		{
			yyVAL.byt = 0
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4131
		{
			yyVAL.byt = 1
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4136
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4140
		{
			yyVAL.str = IgnoreStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4146
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4150
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4154
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4162
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4166
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4170
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4174
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4182
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4187
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4191
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4195
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4201
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4205
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4210
		{
			yyVAL.str = IndexStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4214
		{
			yyVAL.str = UniqueStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4220
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4224
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4231
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4237
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4241
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4248
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4465
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4474
		{
			decNesting(yylex)
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4479
		{
			forceEOF(yylex)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4484
		{
			forceEOF(yylex)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4488
		{
			forceEOF(yylex)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4492
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
