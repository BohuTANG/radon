//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const USING = 57463
const PRIMARY = 57464
const COLUMN = 57465
const DESC = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const SHOW = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const BIT = 57475
const TINYINT = 57476
const SMALLINT = 57477
const MEDIUMINT = 57478
const INT = 57479
const INTEGER = 57480
const BIGINT = 57481
const INTNUM = 57482
const REAL = 57483
const DOUBLE = 57484
const FLOAT_TYPE = 57485
const DECIMAL = 57486
const NUMERIC = 57487
const TIME = 57488
const TIMESTAMP = 57489
const DATETIME = 57490
const YEAR = 57491
const CHAR = 57492
const VARCHAR = 57493
const BOOL = 57494
const CHARACTER = 57495
const VARBINARY = 57496
const NCHAR = 57497
const CHARSET = 57498
const TEXT = 57499
const TINYTEXT = 57500
const MEDIUMTEXT = 57501
const LONGTEXT = 57502
const BLOB = 57503
const TINYBLOB = 57504
const MEDIUMBLOB = 57505
const LONGBLOB = 57506
const JSON = 57507
const ENUM = 57508
const GEOMETRY = 57509
const POINT = 57510
const LINESTRING = 57511
const POLYGON = 57512
const GEOMETRYCOLLECTION = 57513
const MULTIPOINT = 57514
const MULTILINESTRING = 57515
const MULTIPOLYGON = 57516
const NULLX = 57517
const AUTO_INCREMENT = 57518
const APPROXNUM = 57519
const SIGNED = 57520
const UNSIGNED = 57521
const ZEROFILL = 57522
const FIXED = 57523
const DYNAMIC = 57524
const STORAGE = 57525
const DISK = 57526
const MEMORY = 57527
const COLUMN_FORMAT = 57528
const AVG_ROW_LENGTH = 57529
const COMPRESSION = 57530
const CONNECTION = 57531
const DATA = 57532
const DIRECTORY = 57533
const DELAY_KEY_WRITE = 57534
const ENCRYPTION = 57535
const INSERT_METHOD = 57536
const MAX_ROWS = 57537
const MIN_ROWS = 57538
const PACK_KEYS = 57539
const PASSWORD = 57540
const ROW_FORMAT = 57541
const STATS_AUTO_RECALC = 57542
const STATS_PERSISTENT = 57543
const STATS_SAMPLE_PAGES = 57544
const TABLESPACE = 57545
const COMPRESSED = 57546
const REDUNDANT = 57547
const COMPACT = 57548
const TOKUDB_DEFAULT = 57549
const TOKUDB_FAST = 57550
const TOKUDB_SMALL = 57551
const TOKUDB_ZLIB = 57552
const TOKUDB_QUICKLZ = 57553
const TOKUDB_LZMA = 57554
const TOKUDB_SNAPPY = 57555
const TOKUDB_UNCOMPRESSED = 57556
const COLLATION = 57557
const DATABASES = 57558
const TABLES = 57559
const WARNINGS = 57560
const VARIABLES = 57561
const EVENTS = 57562
const BINLOG = 57563
const GTID = 57564
const STATUS = 57565
const COLUMNS = 57566
const FIELDS = 57567
const CURRENT_TIMESTAMP = 57568
const CURRENT_DATE = 57569
const DATABASE = 57570
const SCHEMA = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const PARTITION = 57591
const PARTITIONS = 57592
const LIST = 57593
const XA = 57594
const DISTRIBUTED = 57595
const ENGINES = 57596
const VERSIONS = 57597
const PROCESSLIST = 57598
const QUERYZ = 57599
const TXNZ = 57600
const KILL = 57601
const ENGINE = 57602
const SINGLE = 57603
const BEGIN = 57604
const START = 57605
const TRANSACTION = 57606
const COMMIT = 57607
const ROLLBACK = 57608
const GLOBAL = 57609
const LOCAL = 57610
const SESSION = 57611
const NAMES = 57612
const ISOLATION = 57613
const LEVEL = 57614
const READ = 57615
const WRITE = 57616
const ONLY = 57617
const REPEATABLE = 57618
const COMMITTED = 57619
const UNCOMMITTED = 57620
const SERIALIZABLE = 57621
const RADON = 57622
const ATTACH = 57623
const ATTACHLIST = 57624
const DETACH = 57625
const RESHARD = 57626
const CLEANUP = 57627
const RECOVER = 57628
const REBALANCE = 57629

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4956

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 189,
	5, 28,
	-2, 347,
	-1, 234,
	94, 879,
	-2, 689,
	-1, 240,
	94, 738,
	-2, 667,
	-1, 490,
	122, 719,
	-2, 715,
	-1, 491,
	122, 720,
	-2, 716,
	-1, 524,
	119, 89,
	167, 89,
	170, 89,
	173, 89,
	-2, 101,
	-1, 575,
	1, 82,
	305, 82,
	-2, 89,
	-1, 702,
	5, 28,
	-2, 638,
	-1, 731,
	119, 89,
	167, 89,
	170, 89,
	173, 89,
	-2, 102,
	-1, 789,
	35, 309,
	67, 309,
	70, 309,
	133, 309,
	-2, 876,
	-1, 842,
	1, 83,
	305, 83,
	-2, 89,
	-1, 931,
	122, 722,
	-2, 718,
	-1, 1112,
	5, 29,
	-2, 517,
	-1, 1136,
	5, 29,
	-2, 639,
	-1, 1271,
	5, 28,
	-2, 641,
	-1, 1399,
	5, 29,
	-2, 642,
}

const yyPrivate = 57344

const yyLast = 10603

var yyAct = [...]int{

	491, 1428, 1472, 1402, 1302, 1076, 468, 1434, 605, 1303,
	705, 1346, 984, 1458, 1332, 960, 1295, 1262, 235, 1261,
	1035, 431, 1012, 961, 1195, 710, 58, 1343, 915, 838,
	824, 1241, 925, 239, 444, 1077, 922, 1105, 1097, 111,
	930, 111, 1025, 871, 1078, 68, 706, 374, 210, 469,
	50, 941, 892, 1014, 957, 185, 466, 924, 592, 608,
	1050, 988, 818, 745, 759, 375, 111, 443, 243, 446,
	377, 843, 732, 793, 433, 493, 509, 499, 834, 442,
	1015, 510, 230, 228, 219, 111, 231, 111, 508, 593,
	575, 50, 429, 430, 673, 387, 206, 662, 3, 196,
	50, 198, 199, 57, 207, 208, 1146, 1147, 977, 111,
	215, 976, 1145, 428, 978, 719, 720, 511, 512, 512,
	718, 511, 197, 729, 238, 200, 202, 201, 203, 204,
	1356, 205, 1403, 1494, 1471, 195, 1457, 1493, 1448, 189,
	1080, 1491, 1470, 1254, 1447, 394, 395, 1436, 209, 403,
	404, 405, 1326, 407, 408, 409, 410, 411, 412, 413,
	25, 51, 27, 28, 406, 1028, 1079, 107, 372, 106,
	1029, 1030, 371, 25, 51, 27, 28, 392, 927, 868,
	370, 391, 400, 72, 83, 998, 369, 377, 104, 1459,
	516, 73, 194, 997, 77, 396, 1045, 817, 29, 1372,
	1437, 37, 398, 399, 111, 1041, 1040, 421, 423, 1220,
	825, 1321, 103, 547, 62, 1319, 1115, 1071, 38, 1070,
	1069, 55, 1197, 388, 111, 379, 111, 79, 1394, 1396,
	1068, 243, 617, 616, 55, 1424, 1423, 243, 243, 1422,
	495, 64, 65, 66, 67, 382, 381, 380, 1197, 618,
	422, 422, 416, 420, 385, 384, 987, 108, 424, 86,
	426, 427, 85, 1017, 640, 50, 1353, 88, 1021, 1022,
	1023, 1311, 610, 787, 96, 105, 1024, 464, 465, 31,
	32, 33, 1476, 35, 81, 615, 1116, 238, 1139, 535,
	393, 726, 74, 517, 517, 54, 53, 41, 36, 825,
	1395, 48, 49, 34, 991, 652, 653, 990, 1111, 1109,
	989, 970, 1301, 496, 548, 102, 661, 513, 401, 561,
	564, 565, 566, 567, 568, 569, 418, 570, 571, 572,
	573, 574, 549, 550, 551, 552, 533, 534, 562, 1299,
	536, 1446, 688, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 553, 554, 555, 556, 557, 558, 559,
	560, 1038, 1039, 1042, 1043, 616, 618, 728, 1016, 609,
	1056, 786, 1460, 1066, 101, 89, 610, 100, 98, 577,
	87, 618, 95, 1442, 111, 111, 617, 616, 577, 1300,
	436, 494, 1204, 111, 111, 630, 75, 76, 640, 985,
	1067, 111, 1256, 618, 969, 75, 76, 52, 515, 942,
	578, 899, 402, 90, 99, 93, 94, 97, 991, 111,
	52, 990, 873, 39, 989, 897, 898, 896, 520, 563,
	42, 497, 1020, 43, 44, 501, 46, 45, 1489, 1028,
	1080, 1481, 1205, 689, 1029, 1030, 942, 1436, 1122, 1290,
	55, 47, 600, 1291, 1404, 617, 616, 617, 616, 598,
	895, 768, 1258, 1294, 1293, 596, 1079, 1090, 1091, 1092,
	597, 1065, 618, 609, 618, 603, 378, 604, 586, 607,
	1192, 584, 1190, 1169, 611, 612, 613, 594, 1168, 1167,
	649, 651, 1164, 633, 634, 635, 636, 637, 630, 243,
	1437, 640, 1117, 1036, 111, 1037, 878, 1159, 243, 1158,
	1191, 650, 1189, 872, 1157, 1188, 660, 1054, 691, 663,
	664, 665, 666, 667, 668, 669, 377, 672, 674, 674,
	674, 674, 674, 674, 674, 674, 682, 683, 684, 685,
	707, 885, 887, 888, 690, 1187, 1053, 886, 617, 616,
	1046, 383, 703, 1171, 916, 694, 917, 1490, 419, 1438,
	1478, 1464, 708, 1375, 238, 618, 1292, 1281, 1482, 826,
	827, 828, 727, 781, 675, 676, 677, 678, 679, 680,
	681, 1427, 692, 1170, 1280, 111, 111, 1172, 1165, 1161,
	713, 712, 1160, 1151, 111, 111, 820, 821, 822, 823,
	702, 606, 620, 721, 840, 1083, 783, 1082, 1051, 111,
	1033, 1369, 831, 832, 833, 1013, 1242, 621, 631, 632,
	633, 634, 635, 636, 637, 630, 1222, 879, 640, 1219,
	893, 1297, 1334, 1337, 1338, 1339, 1335, 867, 1336, 1340,
	844, 1244, 1419, 1485, 432, 770, 869, 870, 606, 1080,
	836, 837, 877, 619, 876, 671, 1436, 1246, 1296, 1250,
	243, 1245, 780, 1243, 1365, 1462, 762, 1166, 1248, 617,
	616, 1365, 1430, 243, 979, 1079, 1425, 432, 1247, 918,
	929, 1365, 1406, 432, 932, 581, 618, 580, 1365, 1405,
	1363, 1249, 1251, 894, 724, 931, 944, 579, 757, 1330,
	432, 50, 1365, 432, 243, 1103, 432, 1075, 962, 1437,
	386, 959, 1362, 663, 243, 1074, 921, 1361, 238, 1203,
	946, 968, 934, 935, 1211, 1210, 938, 1134, 377, 943,
	1330, 967, 919, 920, 958, 707, 968, 971, 1207, 1208,
	945, 1209, 947, 948, 1207, 1206, 711, 939, 1138, 432,
	25, 963, 766, 50, 1073, 956, 1103, 708, 878, 432,
	966, 933, 949, 525, 524, 950, 59, 717, 715, 686,
	238, 986, 507, 992, 993, 994, 995, 996, 981, 982,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 980, 974, 882, 883, 973, 889, 890,
	513, 964, 1418, 968, 983, 458, 457, 459, 460, 461,
	462, 55, 760, 55, 463, 1334, 1337, 1338, 1339, 1335,
	1103, 1336, 1340, 761, 763, 764, 765, 1408, 767, 768,
	769, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	1131, 819, 606, 216, 1359, 936, 937, 111, 111, 111,
	839, 1047, 1048, 629, 628, 638, 639, 631, 632, 633,
	634, 635, 636, 637, 630, 494, 1019, 640, 1287, 25,
	1282, 25, 69, 1201, 1026, 835, 830, 1414, 629, 628,
	638, 639, 631, 632, 633, 634, 635, 636, 637, 630,
	972, 1052, 640, 829, 1098, 958, 758, 848, 1103, 847,
	846, 585, 1086, 893, 55, 1062, 1057, 844, 1058, 700,
	1063, 1270, 78, 701, 1055, 1387, 1385, 1483, 698, 23,
	1388, 1386, 1389, 1081, 1338, 1339, 1421, 1420, 243, 1384,
	55, 1383, 55, 1469, 1085, 1089, 1088, 220, 221, 881,
	1100, 500, 1455, 955, 1101, 954, 1080, 434, 1079, 1093,
	1307, 1156, 111, 1155, 498, 1112, 1113, 1114, 1049, 521,
	1118, 505, 780, 1132, 6, 1124, 894, 1125, 1126, 1127,
	1128, 5, 1079, 845, 435, 587, 4, 223, 467, 1110,
	214, 1102, 377, 377, 1107, 1135, 1136, 1137, 1342, 1143,
	217, 218, 1121, 500, 1140, 1268, 1199, 1119, 1032, 1031,
	1153, 1154, 1148, 707, 931, 70, 192, 1152, 1018, 1479,
	1162, 1163, 1194, 190, 1133, 1141, 1468, 109, 191, 187,
	1144, 1080, 953, 211, 1285, 708, 1196, 238, 1284, 1467,
	952, 1378, 523, 1466, 1286, 1415, 522, 1198, 212, 82,
	59, 1377, 1329, 711, 187, 589, 225, 1149, 1150, 1350,
	1034, 614, 1084, 61, 439, 63, 56, 1087, 1, 368,
	1401, 842, 841, 187, 111, 187, 792, 791, 1465, 1212,
	1213, 1200, 377, 71, 111, 1456, 1433, 1202, 1435, 1440,
	1412, 1409, 1411, 731, 730, 373, 782, 187, 798, 797,
	796, 794, 1227, 1228, 629, 628, 638, 639, 631, 632,
	633, 634, 635, 636, 637, 630, 1044, 243, 640, 1214,
	1215, 1216, 243, 816, 1226, 1221, 1298, 803, 802, 1223,
	1218, 1123, 1225, 725, 1234, 756, 755, 754, 929, 1229,
	1240, 753, 111, 1230, 752, 751, 1235, 750, 749, 243,
	243, 962, 606, 931, 1236, 1252, 1255, 1239, 1142, 1253,
	1238, 748, 747, 746, 744, 743, 1259, 742, 1269, 1260,
	741, 740, 739, 1107, 738, 737, 238, 733, 238, 736,
	735, 1276, 1277, 1355, 1278, 1279, 734, 801, 799, 795,
	530, 1266, 187, 528, 963, 529, 527, 1272, 532, 1275,
	531, 526, 1341, 1345, 1104, 1273, 1274, 84, 1072, 193,
	1064, 1265, 187, 849, 187, 40, 80, 648, 951, 1027,
	236, 975, 716, 1196, 714, 243, 243, 243, 227, 226,
	1305, 1306, 965, 1289, 1288, 687, 1231, 492, 1376, 1328,
	1120, 670, 940, 445, 884, 1271, 456, 453, 455, 454,
	693, 699, 622, 437, 1308, 1309, 629, 628, 638, 639,
	631, 632, 633, 634, 635, 636, 637, 630, 1393, 1264,
	640, 1312, 864, 1313, 415, 92, 91, 111, 111, 397,
	502, 1304, 1304, 1304, 1322, 1323, 1317, 962, 1333, 1331,
	1263, 1130, 588, 243, 1325, 1413, 1351, 1357, 243, 697,
	800, 26, 1358, 60, 222, 14, 22, 15, 13, 12,
	30, 1257, 10, 1196, 1324, 1314, 1315, 9, 1316, 8,
	7, 1318, 243, 1320, 1360, 213, 1344, 24, 2, 21,
	963, 20, 50, 19, 1364, 188, 1354, 1367, 1368, 18,
	1240, 111, 111, 111, 111, 17, 1265, 16, 11, 1304,
	784, 785, 111, 1283, 1304, 111, 1371, 1374, 111, 1380,
	1379, 1382, 1381, 0, 243, 1390, 0, 0, 0, 1397,
	243, 1398, 187, 187, 1407, 1392, 243, 1366, 238, 0,
	1352, 187, 591, 0, 1399, 1410, 0, 0, 0, 187,
	1266, 1266, 1266, 1266, 1267, 707, 0, 1417, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 599, 0, 0,
	1265, 1265, 1265, 1265, 0, 0, 0, 708, 1429, 243,
	1400, 0, 0, 1431, 1265, 1432, 1304, 1439, 1443, 1441,
	1444, 0, 1304, 1426, 0, 186, 0, 0, 0, 1454,
	0, 0, 1461, 0, 0, 1445, 0, 1327, 0, 0,
	0, 0, 933, 0, 1173, 0, 0, 0, 0, 1463,
	224, 0, 243, 243, 243, 1474, 1475, 0, 0, 0,
	0, 0, 861, 0, 1480, 1304, 0, 0, 0, 389,
	1477, 390, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 187, 1488, 709, 0, 243, 0, 0, 0,
	0, 860, 0, 414, 1484, 0, 1486, 1487, 0, 0,
	0, 0, 654, 655, 656, 657, 658, 659, 1473, 1473,
	1473, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 0, 422, 859, 628, 638,
	639, 631, 632, 633, 634, 635, 636, 637, 630, 0,
	0, 640, 1492, 0, 0, 0, 0, 0, 0, 810,
	809, 0, 0, 0, 0, 0, 1416, 606, 806, 0,
	0, 0, 0, 187, 187, 0, 0, 0, 0, 0,
	0, 0, 874, 187, 856, 854, 850, 0, 853, 855,
	0, 812, 0, 0, 0, 0, 0, 187, 425, 0,
	0, 0, 0, 0, 811, 804, 0, 1449, 1450, 1175,
	1174, 805, 0, 0, 0, 0, 0, 0, 504, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 0, 813, 0, 0, 0, 0, 928,
	599, 857, 0, 928, 928, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 0,
	0, 928, 928, 928, 928, 0, 638, 639, 631, 632,
	633, 634, 635, 636, 637, 630, 928, 891, 640, 709,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 0, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 862, 0, 815, 0, 0, 814, 624,
	0, 627, 0, 0, 0, 851, 0, 641, 642, 643,
	644, 645, 646, 647, 0, 625, 626, 623, 629, 628,
	638, 639, 631, 632, 633, 634, 635, 636, 637, 630,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 582, 583,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 0, 0, 0, 595, 629, 628, 638, 639,
	631, 632, 633, 634, 635, 636, 637, 630, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 187, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 599,
	0, 0, 1094, 1095, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	866, 0, 0, 0, 157, 0, 113, 0, 0, 875,
	137, 0, 141, 144, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 923, 0, 441, 0, 0, 129,
	440, 0, 0, 0, 0, 477, 147, 0, 0, 165,
	150, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 490, 458, 457,
	459, 460, 461, 462, 0, 0, 119, 463, 464, 465,
	0, 0, 187, 438, 451, 0, 476, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 449, 926, 0,
	0, 0, 488, 0, 450, 0, 0, 447, 452, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 599, 928,
	0, 176, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 163, 0, 174, 115, 0, 0,
	187, 0, 0, 0, 0, 0, 128, 136, 0, 0,
	172, 173, 124, 177, 0, 0, 116, 0, 0, 156,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 143,
	131, 138, 160, 148, 161, 139, 154, 153, 155, 0,
	0, 0, 166, 1232, 1233, 135, 130, 170, 127, 151,
	120, 114, 0, 121, 122, 126, 125, 0, 142, 149,
	152, 158, 159, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 134,
	478, 484, 487, 0, 485, 482, 483, 481, 480, 479,
	489, 472, 473, 475, 0, 474, 112, 117, 146, 0,
	162, 133, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 1060, 1061, 132, 167, 0, 168, 0, 0,
	0, 140, 0, 0, 0, 187, 1348, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 181, 180, 182, 118,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	187, 187, 187, 0, 0, 0, 0, 0, 0, 0,
	1391, 0, 0, 187, 0, 0, 1348, 0, 0, 709,
	0, 0, 0, 0, 0, 0, 1129, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 1373,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 1217, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 1224, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 241, 361, 156, 240, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 229, 0, 0, 234, 232, 233, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 241, 361, 156, 240, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 234, 232, 233, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 241, 361, 156, 240, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 514, 0, 0, 140, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 1370, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 601, 361, 156, 602, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 1237, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 601, 361, 156, 602, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 241, 361, 156, 240, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 601, 361, 156, 602, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 601, 361, 156, 602, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 351, 335, 293,
	354, 269, 284, 366, 286, 287, 323, 252, 303, 157,
	282, 113, 0, 253, 0, 137, 0, 141, 144, 145,
	0, 332, 0, 0, 0, 343, 352, 300, 0, 272,
	245, 279, 246, 297, 129, 268, 337, 306, 285, 0,
	360, 147, 315, 0, 165, 150, 0, 0, 299, 340,
	301, 333, 292, 324, 261, 314, 355, 283, 320, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 317, 349, 281, 319, 322, 244, 316, 0,
	248, 254, 365, 347, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 298, 302, 329, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 313, 0, 0,
	0, 256, 250, 296, 0, 0, 0, 260, 0, 274,
	330, 0, 0, 0, 341, 291, 176, 348, 289, 288,
	356, 326, 0, 270, 271, 280, 338, 123, 278, 163,
	321, 174, 115, 345, 339, 311, 294, 295, 249, 0,
	328, 128, 136, 267, 318, 172, 173, 124, 177, 255,
	362, 116, 601, 361, 156, 602, 171, 346, 312, 308,
	251, 344, 310, 307, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 247, 0, 166, 353, 367,
	135, 130, 170, 127, 151, 120, 114, 258, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 342, 0, 0, 0,
	0, 0, 169, 257, 134, 264, 262, 265, 334, 263,
	304, 305, 357, 358, 359, 331, 259, 0, 0, 336,
	309, 112, 117, 146, 364, 162, 133, 175, 0, 0,
	0, 0, 0, 277, 363, 327, 325, 350, 0, 132,
	167, 0, 168, 0, 0, 157, 140, 113, 0, 0,
	0, 137, 0, 141, 144, 145, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 441, 0, 0,
	129, 440, 0, 0, 0, 0, 477, 147, 0, 0,
	165, 150, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 722, 55, 0, 0, 490, 458,
	457, 459, 460, 461, 462, 0, 0, 119, 463, 464,
	465, 723, 0, 0, 438, 451, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 448, 449, 0,
	0, 0, 0, 488, 0, 450, 0, 0, 447, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 478, 484, 487, 0, 485, 482, 483, 481, 480,
	479, 489, 472, 473, 475, 0, 474, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 167, 0, 168, 0,
	0, 157, 140, 113, 0, 0, 0, 137, 0, 141,
	144, 145, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 441, 0, 0, 129, 440, 0, 0,
	0, 0, 477, 147, 0, 0, 165, 150, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 490, 458, 457, 459, 460, 461,
	462, 0, 0, 119, 463, 464, 465, 0, 0, 0,
	438, 451, 0, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 448, 449, 926, 0, 0, 0, 488,
	0, 450, 0, 0, 447, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 134, 478, 484, 487,
	0, 485, 482, 483, 481, 480, 479, 489, 472, 473,
	475, 0, 474, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 167, 0, 168, 0, 0, 157, 140, 113,
	0, 0, 0, 137, 0, 141, 144, 145, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 441,
	0, 0, 129, 440, 0, 0, 0, 0, 477, 147,
	0, 0, 165, 150, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 432,
	490, 458, 457, 459, 460, 461, 462, 0, 0, 119,
	463, 464, 465, 0, 0, 0, 438, 451, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 448,
	449, 0, 0, 0, 0, 488, 0, 450, 0, 0,
	447, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 478, 484, 487, 0, 485, 482, 483,
	481, 480, 479, 489, 472, 473, 475, 0, 474, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 25, 0, 0, 0, 0, 132, 167, 0,
	168, 0, 0, 157, 140, 113, 0, 0, 0, 137,
	0, 141, 144, 145, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 441, 0, 0, 129, 440,
	0, 0, 0, 0, 477, 147, 0, 0, 165, 150,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 490, 458, 457, 459,
	460, 461, 462, 0, 0, 119, 463, 464, 465, 0,
	0, 0, 438, 451, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 488, 0, 450, 0, 0, 447, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 478,
	484, 487, 0, 485, 482, 483, 481, 480, 479, 489,
	472, 473, 475, 0, 474, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 167, 0, 168, 0, 0, 157,
	140, 113, 0, 0, 0, 137, 0, 141, 144, 145,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 441, 0, 0, 129, 440, 0, 0, 0, 0,
	477, 147, 0, 0, 165, 150, 0, 0, 0, 0,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 490, 458, 457, 459, 460, 461, 462, 0,
	0, 119, 463, 464, 465, 0, 0, 0, 438, 451,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 449, 0, 0, 0, 0, 488, 0, 450,
	0, 0, 447, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 163,
	0, 174, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 136, 0, 0, 172, 173, 124, 177, 0,
	0, 116, 0, 0, 156, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 0, 0, 166, 0, 0,
	135, 130, 170, 127, 151, 120, 114, 0, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 134, 478, 484, 487, 0, 485,
	482, 483, 481, 480, 479, 489, 472, 473, 475, 0,
	474, 112, 117, 146, 0, 162, 133, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	167, 0, 168, 157, 0, 113, 140, 0, 0, 137,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 0, 129, 0,
	0, 0, 0, 0, 477, 147, 0, 0, 165, 150,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 490, 458, 457, 459,
	460, 461, 462, 0, 0, 119, 463, 464, 465, 0,
	0, 0, 0, 451, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 488, 0, 450, 0, 0, 447, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 478,
	484, 487, 0, 485, 482, 483, 481, 480, 479, 489,
	472, 473, 475, 0, 474, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 167, 0, 168, 157, 0, 113,
	140, 0, 0, 137, 0, 141, 144, 145, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 129, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 628, 638, 639, 631,
	632, 633, 634, 635, 636, 637, 630, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 167, 0,
	168, 0, 0, 0, 140, 157, 0, 113, 0, 0,
	0, 137, 0, 141, 144, 145, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 0, 1106, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	165, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
	1108, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 617, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 157, 0, 113,
	0, 0, 790, 789, 0, 141, 144, 145, 0, 0,
	0, 788, 0, 0, 0, 787, 0, 0, 169, 0,
	134, 0, 129, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 0, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	376, 0, 0, 0, 0, 132, 167, 0, 168, 119,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 786, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	25, 142, 149, 152, 158, 159, 164, 0, 0, 0,
	0, 157, 0, 113, 0, 0, 0, 137, 0, 141,
	144, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 55, 0, 0, 110, 0, 0, 132, 167, 0,
	168, 0, 0, 119, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 0, 157, 0, 113, 0, 0, 0,
	137, 0, 141, 144, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 1347, 134, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 165,
	150, 0, 0, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 1349,
	0, 132, 167, 0, 168, 0, 119, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 163, 0, 174, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 136, 0, 0,
	172, 173, 124, 177, 0, 0, 116, 0, 0, 156,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 143,
	131, 138, 160, 148, 161, 139, 154, 153, 155, 0,
	0, 0, 166, 0, 0, 135, 130, 170, 127, 151,
	120, 114, 0, 121, 122, 126, 125, 25, 142, 149,
	152, 158, 159, 164, 0, 0, 0, 0, 157, 0,
	113, 0, 0, 0, 137, 0, 141, 144, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 134,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 165, 150, 0, 112, 117, 146, 0,
	162, 133, 175, 0, 0, 0, 0, 0, 55, 0,
	0, 242, 0, 0, 132, 167, 0, 168, 0, 0,
	119, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 181, 180, 182, 118,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 163, 0,
	174, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 136, 0, 0, 172, 173, 124, 177, 0, 0,
	116, 0, 0, 156, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 143, 131, 138, 160, 148, 161, 139,
	154, 153, 155, 0, 0, 0, 166, 0, 0, 135,
	130, 170, 127, 151, 120, 114, 0, 121, 122, 126,
	125, 0, 142, 149, 152, 158, 159, 164, 0, 0,
	0, 157, 0, 113, 0, 0, 0, 137, 0, 141,
	144, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 134, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 0,
	112, 117, 146, 0, 162, 133, 175, 0, 0, 0,
	0, 0, 0, 0, 242, 0, 0, 695, 132, 167,
	696, 168, 0, 119, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	181, 180, 182, 118, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 157, 0, 113, 0, 0, 0, 137,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 134, 0, 129, 519,
	0, 0, 0, 0, 0, 147, 0, 0, 165, 150,
	0, 0, 0, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 242, 0, 518, 0,
	0, 132, 167, 0, 168, 119, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 157, 0, 113, 0, 0,
	0, 137, 0, 141, 144, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	129, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	165, 150, 0, 0, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 110, 0,
	1349, 0, 0, 132, 167, 0, 168, 119, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 157, 0, 113,
	0, 0, 0, 137, 0, 141, 144, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 0, 129, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 0, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 55, 0, 0,
	110, 0, 0, 0, 0, 132, 167, 0, 168, 119,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 157,
	0, 113, 0, 0, 0, 137, 0, 141, 144, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 129, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 165, 150, 0, 0, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 242, 0, 1108, 0, 0, 132, 167, 0,
	168, 119, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 163,
	0, 174, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 136, 0, 0, 172, 173, 124, 177, 0,
	0, 116, 0, 0, 156, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 0, 0, 166, 0, 0,
	135, 130, 170, 127, 151, 120, 114, 0, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 157, 0, 113, 0, 0, 0, 137, 0, 141,
	144, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 134, 503, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 0,
	0, 112, 117, 146, 0, 162, 133, 175, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 132,
	167, 0, 168, 119, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 157, 0, 113, 0, 0, 0, 137,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 134, 0, 129, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 165, 150,
	0, 0, 0, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 376, 0, 417, 0,
	0, 132, 167, 0, 168, 119, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 157, 0, 113, 0, 0,
	0, 137, 0, 141, 144, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	129, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	165, 150, 0, 0, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 242, 0,
	0, 0, 0, 132, 167, 0, 168, 119, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 157, 0, 113,
	0, 0, 0, 137, 0, 141, 144, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 0, 129, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 0, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	490, 0, 0, 0, 0, 132, 167, 0, 168, 119,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 157,
	0, 113, 0, 0, 0, 137, 0, 141, 144, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 129, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 165, 150, 0, 0, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 132, 167, 0,
	168, 119, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 163,
	0, 174, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 136, 0, 0, 172, 173, 124, 177, 0,
	0, 116, 0, 0, 156, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 0, 0, 166, 0, 0,
	135, 130, 170, 127, 151, 120, 114, 0, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 157, 0, 113, 0, 0, 0, 137, 0, 141,
	144, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 134, 0, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 0,
	0, 112, 117, 146, 0, 162, 133, 175, 0, 0,
	0, 0, 0, 0, 376, 0, 0, 0, 0, 132,
	167, 0, 168, 119, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 157, 0, 113, 0, 0, 0, 137,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 134, 0, 129, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 165, 150,
	0, 0, 0, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 1193, 0, 0, 0,
	0, 132, 167, 0, 168, 119, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 157, 0, 113, 0, 0,
	0, 137, 0, 141, 144, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	129, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	165, 150, 0, 0, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 0, 132, 167, 0, 168, 119, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 167, 0, 168, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184,
}
var yyPact = [...]int{

	154, -1000, -202, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1026, 1048, -1000, -1000, -1000, -1000, -1000,
	805, 160, 91, 151, 130, 127, 142, 125, 9692, -1000,
	9692, 167, -71, -1000, -159, -1000, -1000, -173, -1000, -1000,
	744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1007, 1023,
	837, 954, 883, -1000, 91, 9692, 1036, 2332, -98, 9894,
	88, 114, 113, 112, 88, -1000, -1000, -1000, 123, -1000,
	122, 640, 86, -1000, 9692, -1000, 9692, -56, 45, -1000,
	-1000, -39, 308, -1000, -1000, -1000, -76, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9692, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9086, 204, -1000, -1000,
	-1000, -1000, -1000, 485, -1000, -1000, -1000, -1000, -1000, -1000,
	746, 746, -1000, 9692, -1000, -1000, -190, -1000, -1000, 614,
	929, 6062, 6062, 1026, -1000, 744, -1000, -1000, -1000, 904,
	-1000, -1000, 357, 8884, 917, 9692, 704, -1000, -1000, -171,
	2932, -1000, -1000, -1000, -1000, 314, 8076, 8076, -1000, -1000,
	-1000, 915, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1021, 1017, 695, -1000, 169, -1000, -1000, 10298, 324,
	627, 617, 615, 9692, 9692, 86, 835, 10298, 936, -1000,
	-1000, 1035, 9692, 9692, -1000, -1000, 308, 308, -1000, -1000,
	9692, -1000, -1000, -1000, -1000, -1000, 308, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4732, -1000,
	-1000, -1000, 6062, -1000, -1000, 234, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1043, 181, 585, -1000, 6062, 1633,
	746, 746, -1000, -1000, 182, -1000, -1000, 6326, 6326, 6326,
	6326, 6326, 6326, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 746, 194, -1000, 5796,
	746, 746, 746, 746, 746, 746, 6062, 746, 746, 746,
	746, 746, 746, 746, 746, 746, 746, 746, 746, 746,
	-1000, -1000, 701, -1000, 302, 1007, 614, 883, 7874, 861,
	-1000, -1000, 865, 9692, -1000, 9490, 1032, 2632, -1000, 700,
	699, -169, -176, -1000, -171, 4998, -1000, -1000, -1000, -1000,
	172, -1000, 746, 99, 619, 7060, 1515, 1, -1000, -1000,
	-1000, 774, -1000, 774, 774, 774, 774, 40, 40, 40,
	40, -1000, -1000, -1000, -1000, -1000, 826, 809, -1000, 774,
	774, 774, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	808, 808, 808, 783, 783, 919, -1000, -1000, 934, 834,
	833, 831, -1000, 1448, 9692, 9692, -1000, -1000, 1007, -60,
	-1000, -1000, 411, 9692, 9692, 308, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 690, 373, -1000, 9692, -1000,
	-1000, -1000, -1000, -1000, -1000, 887, 6062, 6062, 461, 6062,
	6062, 265, 6326, 383, 323, 6326, 6326, 6326, 6326, 6326,
	6326, 6326, 6326, 6326, 6326, 6326, 6326, 6326, 6326, 6326,
	484, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 609,
	-1000, 744, 734, 734, 145, 145, 145, 145, 145, 6590,
	1957, 4432, 614, 5796, 5264, 5264, 6062, 6062, 5264, 956,
	319, 373, 9288, -1000, 614, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5264, 5264, 5264, 5264, 6062, -1000, -1000, -1000,
	929, -1000, 956, 1012, -1000, 897, 895, 5264, -1000, 829,
	9490, 746, -1000, 7671, -1000, 735, -1000, 310, -1000, 189,
	1026, 6062, -1000, 3832, -1000, -172, -1000, -167, -182, -1000,
	-1000, -1000, -1000, -1000, 373, -1000, 604, 9894, 746, 746,
	-1000, 619, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 305, 305, 137,
	305, 305, 305, 305, 305, -15, -23, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	-1000, -1000, -1000, 545, 238, 229, -1000, -1000, -1000, -1000,
	976, -1000, 1515, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 352, 196, -1000, 964, -1000,
	963, 538, 1042, 433, 163, 162, -1, -1000, -1000, 477,
	40, 40, -1000, -1000, -1000, 914, -1000, -1000, -1000, 536,
	536, -1000, -1000, -1000, -1000, 473, -1000, -1000, -1000, 444,
	-1000, -1000, 919, -1000, 251, -1000, 9692, 9692, 9692, -1000,
	338, 306, 95, 80, 79, 77, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 686, -1000, 927, -1000, 535, -1000,
	-1000, -1000, 533, 6062, -1000, 308, 1032, -1000, 6062, -1000,
	-1000, 882, 265, 280, -1000, -1000, 387, -1000, -1000, 373,
	373, 989, -1000, -1000, -1000, -1000, 383, 6326, 6326, 6326,
	748, 989, 1681, 1559, 1422, 145, 382, 382, 279, 279,
	279, 279, 279, 509, 509, -1000, -1000, -1000, 614, -1000,
	-1000, -1000, 614, 5264, 688, -1000, -1000, 6858, 187, 746,
	186, -1000, -1000, 614, 637, 637, 148, 464, 637, 5264,
	356, -1000, 6062, 614, -1000, 637, 614, 637, 637, -1000,
	-1000, 9692, -1000, -1000, -1000, -1000, 830, -1000, 921, 668,
	659, -1000, -1000, 5530, 614, 680, 166, 1026, 9490, 6062,
	4432, 1007, 373, -1000, -1000, -1000, -178, -188, -1000, -1000,
	614, 9894, 9894, -1000, 521, -1000, 433, 305, 305, -1000,
	909, 907, 441, 436, 434, 520, 517, 305, 305, 419,
	516, 597, 416, 415, 410, 510, 515, 1401, 472, 439,
	437, 10096, 84, -1000, 545, -1000, 961, 238, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, -1000, -1000,
	-1000, -1000, -1000, -1000, -78, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 650, -1000, -1000, 322,
	676, -1000, 670, 673, 656, -1000, 305, 305, -1000, 746,
	746, 746, -1000, 9692, -1000, -1000, -1000, 559, 39, 805,
	556, 9894, -1000, 9692, -1000, -1000, -1000, 1002, 903, 305,
	305, -1000, -1000, -1000, 373, 411, -1000, 373, -1000, -1000,
	-1000, -1000, -1000, -1000, 748, 989, 1141, -1000, 6326, 6326,
	-1000, -1000, 637, 5264, -1000, -1000, 8682, -1000, -1000, 3532,
	5264, 4132, -1000, -1000, -1000, 496, 484, 496, -116, 752,
	309, -1000, 6062, 371, -1000, -1000, -1000, -1000, -1000, -1000,
	1032, 8480, 960, -1000, 746, -1000, -1000, 863, 9288, 9288,
	1007, -1000, 373, -1000, -1000, -1000, -1000, -1000, -1000, 614,
	614, -1000, -1000, 433, 433, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 512, 495, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 803, -1000, 1004, 801, 84,
	545, 380, -1000, -1000, -1000, -1000, -1000, 494, -1000, 391,
	-1000, 390, 588, 269, 9288, 9288, 9288, -1000, -1000, -1000,
	906, -1000, -1000, -1000, -1000, -1000, -1000, 588, 588, -1000,
	-1000, 6326, 989, 989, -1000, -1000, -1000, -1000, 149, 614,
	-1000, 614, 774, 774, -1000, 774, 783, -1000, 774, 60,
	774, 56, 614, 614, 746, -105, -1000, 373, 6062, 1030,
	662, 759, -1000, -1000, -1000, 950, 7264, 7467, 1041, -1000,
	746, -1000, 744, 144, -1000, -1000, 746, -137, -1000, -1000,
	-1000, -1000, 9288, -1000, -1000, -1000, -1000, 9288, 777, 84,
	-1000, 648, -1000, 643, 621, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 634, -1000, 774, 634, 634, 541, -1000, -1000,
	989, 3232, -1000, -1000, -1000, 129, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6326, 614, 491, 373, 1028, 1016,
	8480, 8480, 8480, 8480, -1000, 875, 873, -1000, 860, 859,
	866, 9692, -1000, 631, 7264, 164, -1000, 8278, -1000, -1000,
	9490, 659, 614, 9288, -134, -1000, 381, 620, 613, 9288,
	760, -1000, -1000, -1000, -1000, 9288, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 773, -1000, -1000, -1000, 6062, 6062, 759,
	736, 576, -1000, -1000, -1000, -1000, 871, -1000, 870, -1000,
	-1000, -1000, -1000, -1000, 106, 103, 102, -1000, 653, -1000,
	-1000, 608, -1000, 511, -1000, -1000, -1000, 603, 9288, 421,
	-1000, 121, 630, 614, 81, -125, 373, 438, 6062, 6062,
	-1000, -1000, 746, 746, 746, -134, -1000, 894, 110, 110,
	-1000, 596, -1000, -1000, -1000, -1000, 305, 489, 1009, -1000,
	-1000, -1000, 988, -1000, -1000, -1000, 880, -119, -130, 373,
	373, 9288, 9288, 9288, -1000, 178, -1000, 305, -1000, 488,
	981, 110, -1000, 368, -1000, -1000, -1000, -1000, 498, -1000,
	864, -1000, 575, -1000, 575, 575, 746, 365, -1000, 487,
	110, -1000, -1000, -121, -1000, 9288, -1000, -1000, -1000, -1000,
	-1000, -126, -1000, -131, -1000,
}
var yyPgo = [...]int{

	0, 13, 24, 1343, 1341, 1340, 22, 1005, 1338, 1337,
	1335, 1329, 1325, 1323, 1321, 1319, 1318, 97, 919, 1317,
	1315, 976, 971, 964, 1310, 1309, 1307, 1302, 1300, 1299,
	1298, 1297, 1296, 1295, 214, 1294, 1293, 1291, 42, 1290,
	77, 1289, 84, 1285, 1284, 1282, 38, 57, 36, 32,
	178, 1281, 27, 19, 17, 1280, 1279, 14, 1278, 1384,
	1270, 1269, 58, 89, 1266, 1265, 43, 1264, 1262, 1259,
	1258, 2, 25, 1243, 67, 1242, 1241, 79, 1054, 1240,
	1239, 1238, 1237, 1236, 1234, 52, 8, 15, 6, 23,
	1233, 69, 34, 1232, 51, 1231, 1230, 1229, 1228, 26,
	1227, 75, 1225, 48, 74, 1222, 54, 10, 46, 1219,
	1218, 86, 83, 88, 81, 1214, 76, 1212, 1211, 190,
	1210, 1209, 1208, 912, 1207, 95, 476, 1206, 1205, 1203,
	1200, 1199, 1198, 1197, 59, 33, 0, 56, 18, 37,
	1194, 65, 978, 40, 11, 1193, 90, 1192, 55, 28,
	82, 31, 1191, 1190, 1188, 1186, 1185, 1183, 1180, 62,
	1179, 1178, 1177, 1176, 1173, 1170, 1169, 1167, 1165, 1164,
	1162, 1161, 1160, 1157, 1155, 1154, 63, 1153, 1152, 1151,
	1138, 1137, 1135, 1134, 1131, 1127, 1126, 1125, 30, 1123,
	1118, 1117, 20, 61, 12, 64, 1116, 1113, 1106, 78,
	29, 1091, 1090, 1089, 1088, 60, 47, 1086, 80, 53,
	45, 1085, 1084, 1083, 72, 9, 4, 1082, 1081, 1080,
	1, 7, 1079, 1078, 1076, 1075, 5, 35, 44, 1073,
	1068, 16, 1067, 1066, 73, 1062, 1061, 71, 3, 1060,
	1059, 1058, 1056, 49, 21, 1055, 94,
}
var yyR1 = [...]int{

	0, 241, 242, 242, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 17, 18, 19, 19,
	20, 20, 21, 21, 37, 37, 22, 23, 24, 24,
	239, 239, 238, 164, 164, 7, 7, 25, 25, 25,
	25, 25, 240, 240, 240, 240, 240, 240, 230, 230,
	231, 231, 223, 221, 221, 218, 218, 224, 224, 217,
	217, 222, 222, 219, 219, 226, 226, 226, 226, 226,
	227, 228, 235, 235, 236, 236, 237, 237, 237, 195,
	195, 194, 194, 193, 193, 193, 196, 196, 196, 28,
	210, 212, 212, 213, 213, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 166,
	168, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 181, 182, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 184,
	184, 185, 185, 186, 186, 187, 187, 169, 192, 192,
	167, 163, 165, 211, 211, 211, 206, 141, 141, 152,
	152, 152, 152, 232, 232, 233, 233, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 155, 155, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 154, 154,
	154, 154, 154, 156, 156, 156, 156, 156, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 158, 158, 158, 158, 158, 158, 158,
	158, 205, 205, 159, 159, 199, 199, 200, 200, 200,
	197, 197, 198, 198, 201, 201, 160, 160, 160, 160,
	160, 160, 39, 38, 38, 38, 121, 121, 121, 202,
	188, 188, 188, 162, 189, 189, 190, 190, 190, 191,
	191, 191, 203, 203, 204, 204, 161, 207, 207, 207,
	207, 6, 6, 225, 225, 225, 225, 220, 220, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 5, 5,
	209, 209, 208, 208, 216, 216, 215, 26, 26, 26,
	26, 26, 26, 26, 26, 127, 127, 132, 132, 132,
	27, 27, 27, 68, 68, 133, 133, 8, 29, 9,
	128, 128, 128, 67, 67, 67, 10, 12, 12, 12,
	12, 11, 131, 131, 131, 13, 14, 14, 14, 14,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 45, 45,
	65, 65, 65, 62, 62, 63, 63, 64, 64, 61,
	61, 66, 66, 66, 33, 31, 32, 32, 245, 34,
	35, 35, 36, 36, 36, 42, 42, 42, 40, 40,
	41, 41, 48, 48, 47, 47, 49, 49, 49, 49,
	140, 140, 140, 139, 139, 51, 51, 52, 52, 53,
	53, 54, 54, 54, 69, 55, 55, 55, 55, 147,
	147, 145, 145, 145, 144, 144, 56, 56, 56, 56,
	57, 57, 57, 57, 58, 58, 60, 60, 59, 59,
	70, 70, 70, 70, 71, 71, 72, 72, 50, 50,
	50, 50, 50, 50, 50, 124, 124, 74, 74, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 84,
	84, 84, 84, 84, 84, 75, 75, 75, 75, 75,
	75, 75, 46, 46, 85, 85, 85, 91, 86, 86,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	82, 82, 82, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 81, 81, 81, 81, 81, 81, 81, 81,
	246, 246, 83, 83, 83, 83, 43, 43, 43, 43,
	43, 149, 149, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 95, 95, 44, 44,
	93, 93, 94, 96, 96, 92, 92, 92, 77, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 97, 97,
	98, 98, 99, 99, 100, 100, 101, 102, 102, 102,
	103, 103, 103, 103, 104, 104, 104, 76, 76, 76,
	76, 76, 76, 105, 105, 105, 105, 106, 106, 87,
	87, 89, 89, 88, 90, 107, 107, 108, 109, 109,
	112, 112, 111, 111, 111, 111, 111, 120, 120, 119,
	119, 119, 110, 110, 113, 113, 117, 117, 116, 118,
	118, 118, 118, 115, 115, 114, 114, 150, 150, 150,
	122, 122, 125, 125, 126, 126, 123, 123, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 134, 134,
	134, 130, 130, 229, 229, 137, 137, 138, 138, 142,
	142, 143, 143, 146, 146, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 243, 244, 148,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 7, 10, 1, 3,
	1, 3, 6, 7, 1, 1, 8, 7, 3, 3,
	1, 3, 5, 0, 2, 1, 1, 3, 5, 11,
	11, 11, 0, 1, 1, 5, 9, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 1, 1, 2, 2,
	3, 3, 0, 1, 1, 2, 4, 4, 2, 0,
	1, 0, 1, 1, 2, 2, 1, 1, 1, 4,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 1, 3, 3, 3, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 3, 4, 1, 1, 1, 1,
	0, 3, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 7, 7, 8,
	9, 0, 1, 3, 1, 2, 3, 0, 2, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 3, 2, 6, 7, 7,
	7, 9, 7, 7, 7, 0, 1, 0, 1, 1,
	6, 6, 4, 1, 3, 0, 1, 3, 3, 2,
	1, 1, 1, 0, 1, 1, 3, 1, 1, 1,
	1, 2, 0, 1, 1, 4, 2, 3, 2, 2,
	4, 4, 3, 6, 3, 3, 4, 4, 4, 6,
	5, 5, 3, 3, 5, 6, 7, 3, 3, 3,
	5, 3, 3, 3, 3, 3, 3, 3, 0, 3,
	1, 1, 1, 0, 2, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 4, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	1, 2, 3, 3, 3, 2, 3, 1, 2, 1,
	1, 1, 2, 3, 2, 2, 0, 2, 3, 2,
	2, 2, 1, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -241, -16, -17, -21, -22, -23, -24, -25, -26,
	-27, -8, -29, -30, -33, -31, -9, -10, -11, -13,
	-14, -15, -32, -18, -19, 6, -37, 8, 9, 44,
	-28, 125, 126, 127, 149, 129, 144, 47, 64, 269,
	-128, 143, 276, 279, 280, 283, 282, 297, 147, 148,
	-243, 7, 253, 142, 141, 67, -242, 305, -99, 14,
	-36, 5, -34, -245, -34, -34, -34, -34, -210, 67,
	-7, -229, 23, 31, 132, 245, 246, 34, -123, 136,
	-127, 133, -7, 33, -133, 132, 132, 238, 125, 233,
	271, -64, -65, 273, 274, 240, 132, 275, 236, 272,
	235, 232, 173, 70, 46, 133, 27, 25, 132, -142,
	70, -136, 259, 19, 204, 150, 169, 260, 302, 79,
	203, 206, 207, 145, 165, 209, 208, 201, 159, 42,
	199, 183, 277, 264, 242, 198, 160, 23, 184, 188,
	284, 25, 211, 182, 26, 27, 261, 49, 186, 212,
	53, 202, 213, 190, 189, 191, 172, 17, 214, 215,
	185, 187, 263, 147, 216, 52, 195, 278, 280, 240,
	200, 174, 163, 164, 149, 265, 134, 166, 297, 298,
	300, 299, 301, 303, 304, -148, -59, -142, -12, -17,
	-22, -21, -23, -131, 263, 206, -148, 281, -148, -148,
	298, 300, 299, 301, 302, 304, 269, -148, -148, -17,
	-103, 16, 15, -20, -18, -243, 6, 36, 37, -42,
	54, 55, -35, -123, -59, 10, -109, -110, -112, 281,
	-150, -111, 285, 286, 284, -138, -120, 287, -137, -135,
	173, 170, 70, -136, 85, 38, 40, 193, 88, 156,
	120, 178, 15, 21, 89, 167, 119, 241, 205, 254,
	125, 62, 244, 247, 243, 245, 233, 161, 43, 9,
	141, 142, 37, 113, 127, 92, 93, 271, 146, 39,
	143, 82, 18, 65, 10, 46, 12, 13, 137, 136,
	104, 133, 60, 7, 154, 155, 121, 41, 101, 56,
	35, 58, 102, 16, 248, 249, 45, 181, 177, 258,
	180, 153, 176, 115, 63, 50, 86, 80, 162, 83,
	66, 148, 84, 14, 61, 274, 139, 273, 158, 103,
	128, 253, 29, 59, 246, 6, 257, 44, 144, 152,
	57, 132, 234, 33, 179, 151, 175, 91, 135, 81,
	275, 5, 34, 196, 8, 64, 138, 250, 251, 252,
	48, 171, 168, 272, 262, 90, 11, 197, -240, 284,
	278, 270, 266, -211, -206, -141, 70, -136, -126, 137,
	133, 133, 133, -126, 132, 132, 70, -125, 137, -59,
	-59, 237, 132, 245, -148, -148, 234, -61, 241, 242,
	-63, 10, 104, -148, -148, -148, 240, -148, -148, -148,
	-148, -148, -148, -148, -59, -67, -141, 72, 122, 73,
	-148, -88, -243, -88, -148, -59, -148, -148, 303, 282,
	283, -244, 69, -104, 18, 45, -50, -73, 86, -78,
	43, 39, -77, -74, -92, -90, -91, 120, 109, 110,
	117, 87, 121, -82, -80, -81, -83, 72, 71, 73,
	74, 75, 76, 80, 81, 82, -137, -142, -88, -243,
	58, 59, 254, 255, 258, 256, 89, 48, 243, 252,
	251, 250, 248, 249, 244, 247, 137, 245, 115, 253,
	70, -136, -100, -101, -50, -99, -17, -34, 50, -40,
	37, 78, -60, 41, -59, 44, -59, 68, -113, -116,
	-114, 288, 290, -111, 281, 94, -119, -137, 72, 43,
	-119, 44, 15, 15, 69, 68, -152, -155, -157, -156,
	-158, -153, -154, 167, 168, 120, 171, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 44, 145, 163,
	164, 165, 166, 184, 185, 186, 187, 188, 189, 190,
	191, 150, 169, 260, 151, 152, 153, 154, 155, 156,
	158, 159, 160, 161, 162, -146, 70, -136, 86, 70,
	70, 70, -59, -59, -125, 66, -146, 39, -45, 10,
	-59, -142, -62, -63, -63, -59, -62, -148, -143, -142,
	-135, 170, 173, -148, -148, -86, -50, -148, -134, 135,
	38, -148, -148, -148, 8, 104, 85, 84, 101, 68,
	17, -50, -75, 104, 86, 102, 103, 88, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	119, 94, 95, 96, 97, 98, 99, 100, -124, -243,
	-91, -243, 123, 124, -78, -78, -78, -78, -78, -78,
	-243, 122, -17, -243, -243, -243, -243, -243, -243, -243,
	-95, -50, -243, -246, -243, -246, -246, -246, -246, -246,
	-246, -246, -243, -243, -243, -243, 68, -102, 40, 141,
	-103, -244, -42, -79, -137, 73, 76, -41, 57, -76,
	44, 48, -17, -243, -59, -107, -108, -92, -137, -142,
	-72, 11, -112, -150, -115, 68, -117, 68, 289, 291,
	292, -113, 66, 83, -50, -189, 119, -243, 268, 24,
	-212, -213, -214, -167, -163, -165, -166, -168, -169, -170,
	-171, -172, -173, -174, -175, -176, -177, -178, -179, -180,
	-181, -182, -183, -184, -185, -186, -187, 79, 277, -195,
	193, 204, 47, 205, 206, 207, 133, 209, 210, 211,
	26, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	43, -206, -207, -208, -5, -4, 133, 35, 31, 23,
	22, -232, -233, -234, -201, -160, -202, -203, -204, -161,
	-39, -162, -190, -191, 80, 86, 43, 193, 139, 35,
	34, 79, 66, 119, 203, 200, -197, 196, -159, 67,
	-159, -159, -159, -159, -188, 170, -188, -188, -188, 67,
	67, -159, -159, -159, -199, 67, -199, -199, -200, 67,
	-200, -235, -236, -237, -195, 39, 66, 66, 66, -129,
	128, 277, 254, 130, 127, 131, 126, 193, 170, 79,
	43, 14, 265, 70, -68, -59, -59, -103, 239, -148,
	-148, -66, 102, 11, -142, -59, -62, -148, 68, -244,
	-59, 52, -50, -50, -84, 80, 86, 81, 82, -50,
	-50, -78, -85, -88, -91, 77, 104, 102, 103, 88,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -149, 70, 72, 70, -77,
	-77, -137, -48, 37, -47, -49, 111, -50, -142, -138,
	-143, -135, -244, -17, -47, -47, -50, -50, -47, -40,
	-93, -94, 90, -137, -244, -47, -48, -47, -47, -101,
	-104, -122, 18, 10, 48, 48, -47, -106, 66, -107,
	-87, -89, -88, -243, -17, -105, -137, -72, 68, 94,
	122, -99, -50, -114, -116, -118, 293, 290, 296, 70,
	-141, -243, -243, -214, -194, 94, -194, 119, -193, 173,
	170, 167, -194, -194, -194, -194, -194, 208, 208, -194,
	-194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -6, 70, -209, -208, 139, 34, 32, -234,
	80, 72, 73, 74, 80, -38, -74, -121, 243, 248,
	249, 35, 35, 72, 8, -192, 70, 72, 198, 199,
	43, 43, 201, 202, -198, 197, 73, -188, -188, 44,
	-205, 72, -205, 73, 73, -237, 119, -193, -176, -59,
	-59, -59, -148, -134, -130, 133, 35, 94, 135, 140,
	140, 140, -132, 68, 29, 21, -226, -227, -228, 45,
	19, -148, 72, 72, -50, -62, -72, -50, -148, 53,
	80, 81, 82, -85, -78, -78, -78, -46, 146, 85,
	-244, -244, -47, 68, -140, -139, 38, -137, 72, 122,
	-243, 122, -244, -244, -244, 68, 138, 38, -244, -47,
	-96, -94, 92, -50, -244, -244, -244, -244, -244, -59,
	-51, 10, 42, -106, 68, -244, -244, -244, 68, 122,
	-99, -108, -50, -138, -103, 290, 294, 295, -244, -141,
	-141, 72, -192, -194, -194, 44, 44, 73, 73, 73,
	72, 72, -194, -194, 73, 72, 70, 73, 73, 73,
	73, 43, 72, 43, 199, 198, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 73, 43, 73,
	43, 73, 43, 70, -136, -2, -1, 138, -6, 35,
	-209, 67, -38, 69, 70, 120, 69, 68, 69, 68,
	69, 68, -194, -194, -243, -243, -243, -59, -148, 70,
	170, -210, 70, -206, -59, -228, -227, -194, -194, -66,
	-46, 85, -78, -78, -244, -49, -139, 111, -143, -48,
	-138, -151, 120, 167, 145, 165, 161, 182, 172, 195,
	163, 196, -149, -151, 259, -99, 93, -50, 91, -72,
	-52, -53, -54, -55, -69, -91, -243, -59, 35, -89,
	48, -17, -243, -137, -137, -103, -244, -244, -192, -192,
	72, 72, 67, -3, 24, 20, 30, 67, -2, -6,
	69, 73, 72, 73, 73, -231, 70, 43, -196, 70,
	120, 43, -216, -215, -137, -216, -216, 44, -231, -231,
	-78, 122, -244, -244, -159, -159, -159, -200, -159, 155,
	-159, 155, -244, -244, -243, -44, 257, -50, -97, 12,
	68, -56, -57, -58, 56, 60, 62, 57, 58, 59,
	63, -147, 38, -52, -243, -145, -144, 38, -142, 72,
	8, -87, -17, 122, -243, -164, 267, -216, -216, 67,
	-2, 69, 69, 69, -244, 68, -159, -244, -244, 70,
	111, -188, 70, -78, -244, 72, -98, 13, 15, -53,
	-54, -53, -54, 56, 56, 56, 61, 56, 61, 56,
	-57, -142, -244, -70, 64, 136, 65, -144, -107, -244,
	-137, -239, -238, 266, 73, 69, 69, -216, 67, -218,
	-215, -217, -219, -43, 104, 262, -50, -86, 66, 66,
	56, 56, 133, 133, 133, 68, -244, 70, -220, -220,
	69, -216, -226, -224, -221, -223, 26, 79, 138, -226,
	-222, -221, 262, -226, -221, -244, 260, 63, 263, -50,
	-50, -243, -243, -243, -238, 48, -225, 26, -1, 79,
	262, -220, 69, -194, 72, -230, 24, 20, 28, 53,
	261, 264, -71, -137, -71, -71, 104, -194, 72, 28,
	-220, 73, 70, 53, -244, 68, -244, -244, -88, 73,
	70, 262, -137, 263, 264,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 622, 0, 408, 408, 408, 408, 408,
	0, 713, 696, 325, 335, 0, 397, 0, 0, 926,
	0, 340, 352, 926, 0, 926, 926, 0, 926, 926,
	0, 34, 35, 341, 342, 924, 1, 3, 630, 0,
	0, 412, 415, 410, 696, 0, 0, 0, 52, 0,
	694, 0, 0, 0, 694, 45, 46, 714, 0, 697,
	0, 0, 692, 326, 0, 336, 0, 0, 0, 926,
	926, 0, 0, 926, 926, 926, 0, 926, 926, 926,
	926, 926, 926, 926, 398, 390, 391, 392, 0, 405,
	719, 720, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 339, 343, 468, 351, -2,
	348, 349, 350, 0, 353, 354, 356, 926, 358, 359,
	0, 0, 926, 0, 926, 926, 0, 406, 407, 28,
	634, 0, 0, 622, 30, 0, 408, 413, 414, 418,
	416, 417, 409, 0, 0, 0, 38, 39, 658, 0,
	0, 660, 687, 688, -2, 0, 0, 0, 717, 718,
	-2, 737, 715, 716, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 47, 53,
	54, 0, 0, 0, 173, 0, 177, 178, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 337,
	338, 388, 0, 0, 372, 373, 393, 0, 399, 400,
	0, 395, 396, 377, 378, 379, 393, 381, 382, 383,
	384, 385, 386, 387, 926, 346, 344, 345, 0, 926,
	357, 926, 0, 926, 362, 708, 364, 365, 926, 926,
	926, 29, 925, 24, 0, 0, 631, 478, 0, 483,
	485, 0, 520, 521, 522, 523, 524, 0, 0, 0,
	0, 0, 0, 546, 547, 548, 549, 608, 609, 610,
	611, 612, 613, 614, 487, 488, 605, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 570, 570,
	570, 570, 570, 570, 570, 570, 0, 0, 0, 0,
	-2, -2, 623, 624, 627, 630, 28, 415, 0, 420,
	419, 411, 0, 0, 467, 0, 476, 0, 672, 683,
	676, 0, 0, 661, 0, 0, 665, 669, 670, 671,
	274, 668, 0, 0, -2, 299, 183, 250, 180, 181,
	182, 243, 198, 243, 243, 243, 243, 270, 270, 270,
	270, 226, 227, 228, 229, 230, 0, 0, 213, 243,
	243, 243, 217, 233, 234, 235, 236, 237, 238, 239,
	240, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	245, 245, 245, 247, 247, -2, 723, 724, 0, 0,
	0, 0, 99, 0, 0, 0, 332, 693, 630, 0,
	926, 926, 401, 0, 0, 393, 926, 404, 469, 721,
	722, 737, 738, 355, 360, 0, 518, 361, 0, 709,
	710, 366, 367, 368, 635, 0, 0, 0, 0, 0,
	0, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 508, 509, 510, 511, 484, 0,
	498, 0, 0, 0, 540, 541, 542, 543, 544, 0,
	422, 0, 28, 0, 0, 0, 0, 0, 0, 418,
	0, 597, 0, 562, 0, 563, 564, 565, 566, 567,
	568, 569, 0, 422, 0, 0, 0, 626, 628, 629,
	634, 31, 418, 0, 615, 0, 0, 0, 421, 647,
	0, 0, -2, 0, 466, 476, 655, 0, 605, 0,
	622, 0, 659, 0, 674, 0, 675, 0, 0, 685,
	686, 673, 662, 663, 664, 666, 0, 0, 0, 0,
	100, -2, 103, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 91, 91, 0,
	91, 91, 91, 91, 91, 0, 0, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	90, 174, 175, 291, 310, 0, 312, 313, 308, -2,
	300, 176, 184, 185, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 254, 0, 0, 269, 0, 283,
	285, 0, 0, 0, 0, 0, 252, 251, 197, 0,
	270, 270, 220, 221, 222, 0, 223, 224, 225, 0,
	0, 214, 215, 216, 208, 0, 209, 210, 211, 0,
	212, 48, -2, 84, 0, 695, 0, 0, 0, 926,
	708, 0, 705, 0, 703, 0, 698, 699, 700, 701,
	702, 704, 706, 707, 327, 333, 75, 926, 0, 370,
	371, 374, 0, 0, 394, 393, 476, 380, 0, 653,
	926, 0, 479, 480, 482, 499, 0, 501, 503, 632,
	633, 489, 490, 514, 515, 516, 0, 0, 0, 0,
	512, 494, 0, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 539, 581, 582, 0, 537,
	538, 545, 0, 0, 423, 424, 426, 430, 0, 606,
	0, -2, 517, 28, 0, 0, 0, 0, 0, 0,
	603, 600, 0, 0, 571, 0, 0, 0, 0, 625,
	25, 0, 690, 691, 616, 617, 435, 32, 0, 647,
	637, 649, 651, 0, 28, 0, 643, 622, 0, 0,
	0, 630, 477, 684, 677, 678, 0, 0, 682, 275,
	0, 0, 0, 104, 0, 92, 0, 91, 91, 93,
	0, 0, 0, 0, 0, 0, 0, 91, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 292, 291, 311, 0, 310, 301, 186,
	255, 256, 257, 258, 259, 260, 261, 263, 266, 267,
	268, 282, 284, 286, 0, 273, 168, 169, 276, 277,
	278, 279, 280, 281, 179, 253, 0, 218, 219, 0,
	0, 241, 0, 0, 0, 85, 91, 91, 88, 0,
	0, 0, 317, 0, 926, 711, 712, 0, 0, 0,
	0, 0, 330, 0, 328, 329, 331, 76, 77, 91,
	91, 369, 389, 402, 403, 401, 375, 519, 363, 636,
	500, 502, 504, 491, 512, 495, 0, 492, 0, 0,
	486, 550, 0, 0, 427, 431, 0, 433, 434, 0,
	422, 0, -2, 553, 554, 0, 0, 0, 0, 622,
	0, 601, 0, 0, 561, 572, 573, 574, 575, 26,
	476, 0, 0, 33, 0, 652, -2, 0, 0, 0,
	630, 656, 657, 606, 37, 679, 680, 681, 55, 0,
	0, 170, 171, 0, 0, 94, 95, 129, 130, 167,
	132, 133, 0, 0, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 0, 304, 0, 0, 303,
	291, 0, 262, 244, 271, 272, 231, 0, 232, 0,
	248, 0, 0, 0, 0, 0, 0, 318, 319, 320,
	0, 322, 323, 324, 334, 78, 79, 0, 0, 376,
	493, 0, 513, 496, 551, 425, 432, 428, 0, 0,
	607, 0, 243, 243, 586, 243, 247, 589, 243, 591,
	243, 594, 0, 0, 0, 598, 560, 604, 0, 618,
	436, 437, 439, 440, 441, 449, 0, 451, 0, 650,
	0, -2, 0, 645, 644, 36, 0, 43, 131, 172,
	134, 135, 0, 302, 305, 306, 307, 0, 0, 303,
	264, 0, 242, 0, 0, 86, 60, 61, 87, 96,
	97, 98, 0, 314, 243, 0, 0, 0, 80, 81,
	497, 0, 552, 555, 583, 270, 587, 588, 590, 592,
	593, 595, 557, 556, 0, 0, 0, 602, 620, 0,
	0, 0, 0, 0, 456, 0, 0, 459, 0, 0,
	0, 0, 450, 0, 0, 470, 452, 0, 454, 455,
	0, 640, 28, 0, 0, 57, 0, 0, 0, 0,
	0, 265, 246, 249, 65, 0, 316, 69, 73, 321,
	429, 584, 585, 576, 559, 599, 27, 0, 0, 438,
	445, 0, 448, 457, 458, 460, 0, 462, 0, 464,
	465, 442, 443, 444, 0, 0, 0, 453, 648, -2,
	646, 0, 40, 0, 44, 297, 297, 0, 0, 75,
	315, 75, 75, 0, 0, 0, 621, 619, 0, 0,
	461, 463, 0, 0, 0, 0, 56, 0, 287, 288,
	297, 0, 49, 66, 67, 68, 91, 0, 0, 50,
	70, 71, 0, 51, 74, 558, 0, 0, 0, 446,
	447, 0, 0, 0, 41, 0, 298, 91, 294, 0,
	0, 289, 297, 0, 64, 62, 58, 59, 0, 577,
	0, 580, 0, 474, 0, 0, 0, 0, 295, 0,
	290, 63, 72, 578, 471, 0, 472, 473, 42, 293,
	296, 0, 475, 0, 579,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 305,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1041
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1047
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1049
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1078
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1123
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1134
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.optVal = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1218
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1225
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = "hash"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = "btree"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.str = "default"
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1493
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1498
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1500
		{
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = "character set"
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = "char set"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = "default"
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1532
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1814
		{
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1830
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2042
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2082
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.optVal = nil
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2508
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.str = yyDollar[3].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2604
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2624
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2649
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2661
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 289:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2675
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2686
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2751
		{
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2754
		{
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2768
		{
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2791
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2800
		{
			// set empty
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2805
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2842
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2847
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.byt = 0
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.byt = 1
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2882
		{
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2890
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2906
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2926
		{
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.statement = &Xa{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2952
		{
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2954
		{
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.showFilter = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.statement = &Explain{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3000
		{
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3002
		{
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3026
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3052
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3056
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3060
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 375:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3094
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3105
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.str = "full "
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.showFilter = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3256
		{
			setAllowComments(yylex, true)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.bytes2 = nil
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3275
		{
			yyVAL.str = UnionStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.str = UnionAllStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.str = UnionDistinctStr
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.str = SQLCacheStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3305
		{
			yyVAL.str = DistinctStr
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.str = StraightJoinHint
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.selectExprs = nil
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3360
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3364
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3380
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3386
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3390
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3400
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3404
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3408
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3444
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3448
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3457
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3461
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3468
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3474
		{
			yyVAL.str = JoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3478
		{
			yyVAL.str = JoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3482
		{
			yyVAL.str = JoinStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3486
		{
			yyVAL.str = StraightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3492
		{
			yyVAL.str = LeftJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3496
		{
			yyVAL.str = LeftJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.str = RightJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3504
		{
			yyVAL.str = RightJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3510
		{
			yyVAL.str = NaturalJoinStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3514
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3524
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3528
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.indexHints = nil
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3561
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3565
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3570
		{
			yyVAL.expr = nil
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3574
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3584
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3596
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3604
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3614
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3630
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3634
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3638
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3642
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3650
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3654
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3658
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3662
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3666
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.str = IsNullStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3676
		{
			yyVAL.str = IsNotNullStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3680
		{
			yyVAL.str = IsTrueStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3684
		{
			yyVAL.str = IsNotTrueStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3688
		{
			yyVAL.str = IsFalseStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3692
		{
			yyVAL.str = IsNotFalseStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3698
		{
			yyVAL.str = EqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.str = LessThanStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.str = GreaterThanStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3710
		{
			yyVAL.str = LessEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3714
		{
			yyVAL.str = GreaterEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3718
		{
			yyVAL.str = NotEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3722
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3727
		{
			yyVAL.expr = nil
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3731
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3741
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3745
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3751
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3757
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3761
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3767
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3771
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3775
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3779
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3783
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3815
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3851
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3859
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3881
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3899
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3903
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3907
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3925
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3929
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3933
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 558:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3937
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 559:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3941
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3945
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3949
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4014
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4024
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4028
		{
			yyVAL.str = BooleanModeStr
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4032
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 579:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4036
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4040
		{
			yyVAL.str = QueryExpansionStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.str = string("")
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4124
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4130
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4145
		{
			yyVAL.expr = nil
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4149
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4155
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4159
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4163
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4169
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4173
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4177
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4181
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4185
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4189
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4193
		{
			yyVAL.expr = &NullVal{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4199
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4208
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4212
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4217
		{
			yyVAL.exprs = nil
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4221
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.orderBy = nil
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4239
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4245
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4249
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4255
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.str = AscScr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4264
		{
			yyVAL.str = AscScr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4268
		{
			yyVAL.str = DescScr
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.limit = nil
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4277
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4281
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4285
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.str = ForUpdateStr
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4298
		{
			yyVAL.str = ShareModeStr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4311
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4315
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4319
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4324
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4328
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4332
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4339
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4343
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4347
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4351
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4356
		{
			yyVAL.updateExprs = nil
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4360
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4366
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4370
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4376
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4386
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4392
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4402
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4412
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4428
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4432
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4439
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4443
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4447
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4451
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4455
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.bytes = []byte("charset")
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4468
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.expr = &Default{}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4482
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4486
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4492
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4496
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4502
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.str = yyDollar[2].str
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4512
		{
			yyVAL.str = yyDollar[3].str
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4518
		{
			yyVAL.str = RepeatableRead
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4522
		{
			yyVAL.str = ReadCommitted
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4526
		{
			yyVAL.str = ReadUncommitted
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4530
		{
			yyVAL.str = Serializable
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4540
		{
			yyVAL.str = yyDollar[2].str
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4546
		{
			yyVAL.str = TxReadWrite
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4550
		{
			yyVAL.str = TxReadOnly
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4556
		{
			yyVAL.str = SessionStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4560
		{
			yyVAL.str = SessionStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4564
		{
			yyVAL.str = GlobalStr
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4573
		{
			yyVAL.byt = 0
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4577
		{
			yyVAL.byt = 1
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4582
		{
			yyVAL.byt = 0
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4586
		{
			yyVAL.byt = 1
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4591
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4595
		{
			yyVAL.str = IgnoreStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4601
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4605
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4609
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4613
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4617
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4621
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4625
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4629
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4633
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4637
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4656
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4660
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4665
		{
			yyVAL.str = IndexStr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4669
		{
			yyVAL.str = UniqueStr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4675
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4679
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4686
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4692
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4696
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4703
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4709
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4713
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4939
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4948
		{
			decNesting(yylex)
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4953
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
