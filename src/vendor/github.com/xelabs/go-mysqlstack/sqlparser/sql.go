//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const INDEXES = 57366
const KEY_BLOCK_SIZE = 57367
const KEYS = 57368
const PARSER = 57369
const RTREE = 57370
const SPATIAL = 57371
const SYMBOL = 57372
const UNIQUE = 57373
const KEY = 57374
const ALL = 57375
const DISTINCT = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const SET = 57384
const LOCK = 57385
const FULL = 57386
const CHECKSUM = 57387
const VALUES = 57388
const LAST_INSERT_ID = 57389
const NEXT = 57390
const VALUE = 57391
const SHARE = 57392
const MODE = 57393
const SQL_NO_CACHE = 57394
const SQL_CACHE = 57395
const JOIN = 57396
const STRAIGHT_JOIN = 57397
const LEFT = 57398
const RIGHT = 57399
const INNER = 57400
const OUTER = 57401
const CROSS = 57402
const NATURAL = 57403
const USE = 57404
const FORCE = 57405
const ON = 57406
const ID = 57407
const HEX = 57408
const STRING = 57409
const INTEGRAL = 57410
const FLOAT = 57411
const HEXNUM = 57412
const VALUE_ARG = 57413
const LIST_ARG = 57414
const COMMENT = 57415
const COMMENT_KEYWORD = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const AND = 57422
const NOT = 57423
const BETWEEN = 57424
const CASE = 57425
const WHEN = 57426
const THEN = 57427
const ELSE = 57428
const END = 57429
const LE = 57430
const GE = 57431
const NE = 57432
const NULL_SAFE_EQUAL = 57433
const IS = 57434
const LIKE = 57435
const REGEXP = 57436
const IN = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const MODIFY = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const USING = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SHOW = 57464
const DESCRIBE = 57465
const EXPLAIN = 57466
const DATE = 57467
const ESCAPE = 57468
const REPAIR = 57469
const OPTIMIZE = 57470
const TRUNCATE = 57471
const BIT = 57472
const TINYINT = 57473
const SMALLINT = 57474
const MEDIUMINT = 57475
const INT = 57476
const INTEGER = 57477
const BIGINT = 57478
const INTNUM = 57479
const REAL = 57480
const DOUBLE = 57481
const FLOAT_TYPE = 57482
const DECIMAL = 57483
const NUMERIC = 57484
const TIME = 57485
const TIMESTAMP = 57486
const DATETIME = 57487
const YEAR = 57488
const CHAR = 57489
const VARCHAR = 57490
const BOOL = 57491
const CHARACTER = 57492
const VARBINARY = 57493
const NCHAR = 57494
const CHARSET = 57495
const TEXT = 57496
const TINYTEXT = 57497
const MEDIUMTEXT = 57498
const LONGTEXT = 57499
const BLOB = 57500
const TINYBLOB = 57501
const MEDIUMBLOB = 57502
const LONGBLOB = 57503
const JSON = 57504
const ENUM = 57505
const GEOMETRY = 57506
const POINT = 57507
const LINESTRING = 57508
const POLYGON = 57509
const GEOMETRYCOLLECTION = 57510
const MULTIPOINT = 57511
const MULTILINESTRING = 57512
const MULTIPOLYGON = 57513
const NULLX = 57514
const AUTO_INCREMENT = 57515
const APPROXNUM = 57516
const SIGNED = 57517
const UNSIGNED = 57518
const ZEROFILL = 57519
const FIXED = 57520
const DYNAMIC = 57521
const STORAGE = 57522
const DISK = 57523
const MEMORY = 57524
const COLUMN_FORMAT = 57525
const AVG_ROW_LENGTH = 57526
const COMPRESSION = 57527
const CONNECTION = 57528
const DATA = 57529
const DIRECTORY = 57530
const DELAY_KEY_WRITE = 57531
const ENCRYPTION = 57532
const INSERT_METHOD = 57533
const MAX_ROWS = 57534
const MIN_ROWS = 57535
const PACK_KEYS = 57536
const PASSWORD = 57537
const ROW_FORMAT = 57538
const STATS_AUTO_RECALC = 57539
const STATS_PERSISTENT = 57540
const STATS_SAMPLE_PAGES = 57541
const TABLESPACE = 57542
const COMPRESSED = 57543
const REDUNDANT = 57544
const COMPACT = 57545
const TOKUDB_DEFAULT = 57546
const TOKUDB_FAST = 57547
const TOKUDB_SMALL = 57548
const TOKUDB_ZLIB = 57549
const TOKUDB_QUICKLZ = 57550
const TOKUDB_LZMA = 57551
const TOKUDB_SNAPPY = 57552
const TOKUDB_UNCOMPRESSED = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const WARNINGS = 57557
const VARIABLES = 57558
const EVENTS = 57559
const BINLOG = 57560
const GTID = 57561
const STATUS = 57562
const COLUMNS = 57563
const FIELDS = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586
const PARTITION = 57587
const PARTITIONS = 57588
const LIST = 57589
const XA = 57590
const DISTRIBUTED = 57591
const ENGINES = 57592
const VERSIONS = 57593
const PROCESSLIST = 57594
const QUERYZ = 57595
const TXNZ = 57596
const KILL = 57597
const ENGINE = 57598
const SINGLE = 57599
const BEGIN = 57600
const START = 57601
const TRANSACTION = 57602
const COMMIT = 57603
const ROLLBACK = 57604
const GLOBAL = 57605
const LOCAL = 57606
const SESSION = 57607
const NAMES = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const RADON = 57618
const ATTACH = 57619
const ATTACHLIST = 57620
const DETACH = 57621
const RESHARD = 57622
const CLEANUP = 57623
const RECOVER = 57624
const REBALANCE = 57625

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4791

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 225,
	92, 849,
	-2, 665,
	-1, 231,
	92, 711,
	-2, 643,
	-1, 473,
	120, 695,
	-2, 691,
	-1, 474,
	120, 696,
	-2, 692,
	-1, 508,
	117, 82,
	167, 82,
	170, 82,
	-2, 93,
	-1, 559,
	1, 76,
	301, 76,
	-2, 82,
	-1, 680,
	5, 27,
	-2, 614,
	-1, 714,
	117, 82,
	167, 82,
	170, 82,
	-2, 94,
	-1, 772,
	32, 301,
	65, 301,
	68, 301,
	131, 301,
	-2, 846,
	-1, 825,
	1, 77,
	301, 77,
	-2, 82,
	-1, 913,
	120, 698,
	-2, 694,
	-1, 1084,
	5, 28,
	-2, 493,
	-1, 1108,
	5, 28,
	-2, 615,
	-1, 1237,
	5, 27,
	-2, 617,
	-1, 1363,
	5, 28,
	-2, 618,
}

const yyPrivate = 57344

const yyLast = 10012

var yyAct = [...]int{

	474, 451, 1261, 1366, 449, 1392, 1439, 1398, 1268, 1396,
	1269, 583, 427, 1310, 683, 1296, 821, 1228, 226, 1227,
	807, 1016, 1422, 1166, 966, 693, 942, 993, 943, 1307,
	1207, 801, 56, 897, 1077, 230, 904, 853, 105, 912,
	1069, 429, 640, 3, 361, 1006, 995, 66, 684, 907,
	452, 50, 200, 362, 939, 923, 874, 586, 575, 970,
	742, 1031, 826, 426, 105, 776, 234, 482, 364, 476,
	229, 416, 493, 715, 425, 906, 817, 222, 996, 221,
	105, 105, 492, 576, 414, 194, 55, 219, 209, 1117,
	494, 412, 413, 199, 959, 1118, 1119, 958, 702, 703,
	960, 50, 495, 105, 496, 496, 701, 495, 185, 205,
	712, 1320, 411, 1367, 188, 190, 189, 191, 192, 359,
	193, 1465, 1438, 358, 1464, 1412, 651, 1421, 183, 1400,
	1462, 357, 1437, 1220, 1411, 1290, 753, 356, 1009, 76,
	77, 379, 1010, 1011, 24, 51, 26, 27, 393, 850,
	70, 378, 763, 383, 500, 979, 745, 71, 978, 73,
	385, 386, 1026, 1002, 1003, 1004, 800, 60, 1037, 1336,
	387, 1005, 447, 448, 1022, 1191, 46, 969, 1285, 1423,
	28, 1401, 808, 36, 182, 1021, 1283, 1051, 740, 998,
	404, 406, 105, 62, 63, 64, 65, 1050, 1168, 1049,
	37, 1358, 1360, 53, 909, 373, 366, 1048, 588, 75,
	1388, 1387, 770, 1386, 105, 369, 368, 105, 972, 1400,
	367, 971, 234, 1317, 371, 102, 229, 972, 234, 234,
	971, 596, 501, 501, 1275, 80, 478, 79, 1168, 405,
	405, 1111, 749, 630, 631, 1083, 1081, 952, 479, 639,
	78, 489, 380, 1175, 618, 388, 50, 1144, 72, 709,
	179, 30, 31, 32, 1087, 34, 1046, 608, 808, 588,
	618, 1401, 1443, 1359, 593, 855, 967, 35, 47, 39,
	595, 594, 48, 49, 33, 1047, 609, 610, 611, 612,
	613, 614, 615, 608, 951, 997, 618, 596, 499, 497,
	180, 743, 184, 1176, 186, 187, 587, 195, 196, 197,
	198, 769, 744, 746, 747, 748, 1222, 750, 751, 752,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 1410,
	1402, 1023, 1024, 1009, 1088, 924, 560, 1010, 1011, 1019,
	1020, 1001, 595, 594, 381, 382, 484, 389, 390, 391,
	392, 711, 394, 395, 396, 397, 398, 399, 400, 596,
	1424, 1458, 1406, 881, 854, 1045, 105, 587, 1450, 68,
	594, 105, 105, 105, 480, 53, 105, 879, 880, 878,
	105, 105, 365, 504, 741, 877, 596, 52, 105, 1368,
	1378, 607, 606, 616, 617, 609, 610, 611, 612, 613,
	614, 615, 608, 38, 372, 618, 419, 477, 1260, 1089,
	40, 1146, 1145, 41, 42, 1259, 44, 43, 607, 606,
	616, 617, 609, 610, 611, 612, 613, 614, 615, 608,
	1140, 45, 618, 1139, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 924, 403, 1094, 1138, 1267,
	1400, 407, 579, 409, 410, 370, 595, 594, 1070, 611,
	612, 613, 614, 615, 608, 1256, 628, 618, 577, 1257,
	1135, 595, 594, 596, 627, 629, 1265, 1130, 1224, 867,
	869, 870, 234, 375, 1129, 868, 672, 105, 596, 1017,
	105, 1018, 234, 686, 1163, 1128, 229, 1062, 1063, 1064,
	638, 685, 1401, 641, 642, 643, 644, 645, 646, 647,
	364, 650, 652, 652, 652, 652, 652, 652, 652, 652,
	660, 661, 662, 663, 1162, 690, 1266, 1035, 680, 688,
	1161, 668, 1159, 898, 1034, 899, 681, 666, 667, 1027,
	402, 1445, 1142, 809, 810, 811, 1379, 1431, 1339, 803,
	804, 805, 806, 1258, 764, 1247, 1208, 710, 1246, 415,
	1160, 1459, 1158, 598, 669, 814, 815, 816, 1143, 670,
	105, 696, 1141, 1136, 1132, 823, 1131, 105, 105, 695,
	1210, 704, 595, 594, 1123, 1055, 1054, 105, 766, 653,
	654, 655, 656, 657, 658, 659, 1212, 1032, 1216, 596,
	1211, 1014, 1209, 875, 422, 1454, 415, 1214, 1263, 1451,
	584, 1391, 597, 1329, 1426, 1329, 1394, 1213, 1389, 415,
	827, 1329, 1370, 1327, 849, 1333, 599, 994, 595, 594,
	1215, 1217, 819, 820, 1193, 1262, 1190, 858, 234, 1329,
	1369, 1326, 903, 876, 229, 596, 1294, 415, 1329, 415,
	101, 234, 100, 1075, 415, 925, 1137, 584, 911, 1182,
	1181, 1325, 580, 581, 649, 582, 961, 585, 861, 900,
	98, 563, 589, 590, 591, 913, 1178, 1179, 1178, 1177,
	50, 944, 234, 686, 915, 562, 948, 1110, 415, 860,
	415, 685, 641, 941, 97, 24, 561, 234, 928, 509,
	508, 229, 374, 1174, 707, 901, 902, 57, 24, 949,
	940, 364, 950, 860, 950, 921, 1106, 1294, 916, 917,
	1180, 1075, 920, 847, 946, 914, 953, 700, 698, 664,
	945, 678, 50, 491, 931, 679, 927, 926, 929, 930,
	932, 441, 440, 442, 443, 444, 445, 53, 1236, 82,
	446, 938, 1372, 802, 53, 1323, 90, 99, 1382, 1075,
	822, 1253, 963, 964, 962, 1103, 968, 53, 973, 974,
	975, 976, 977, 956, 497, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 965, 955,
	694, 1298, 1301, 1302, 1303, 1299, 96, 1300, 1304, 864,
	865, 1383, 871, 872, 1248, 67, 607, 606, 616, 617,
	609, 610, 611, 612, 613, 614, 615, 608, 793, 792,
	618, 1075, 24, 206, 1028, 1029, 1172, 818, 789, 813,
	105, 105, 105, 812, 851, 852, 940, 831, 830, 829,
	859, 1000, 569, 22, 676, 950, 584, 1385, 105, 918,
	919, 795, 74, 1007, 1384, 95, 83, 1351, 94, 92,
	1348, 81, 1352, 89, 794, 787, 1347, 1349, 863, 477,
	1452, 788, 1350, 1436, 1353, 1033, 1302, 1303, 210, 211,
	875, 53, 53, 1061, 1058, 1419, 827, 1038, 1036, 483,
	937, 1043, 936, 84, 93, 87, 88, 91, 1429, 954,
	417, 1273, 204, 481, 796, 1298, 1301, 1302, 1303, 1299,
	234, 1300, 1304, 1127, 1079, 213, 1057, 1197, 1030, 505,
	876, 763, 1428, 488, 791, 418, 1104, 828, 568, 1306,
	207, 208, 483, 1234, 105, 1065, 1170, 607, 606, 616,
	617, 609, 610, 611, 612, 613, 614, 615, 608, 1013,
	1012, 618, 999, 1251, 1446, 686, 1250, 229, 1435, 935,
	201, 1252, 1082, 685, 364, 364, 1434, 934, 1342, 1433,
	507, 1115, 506, 202, 57, 1341, 1293, 790, 1093, 694,
	572, 1074, 1112, 216, 798, 1072, 1314, 797, 913, 1073,
	1124, 1015, 592, 1165, 1125, 1126, 1105, 1091, 59, 1113,
	1084, 1085, 1086, 1133, 1134, 1090, 1116, 61, 54, 1,
	1096, 355, 1097, 1098, 1099, 1100, 1167, 1121, 1122, 1365,
	825, 824, 775, 1169, 774, 1432, 69, 1420, 1397, 1427,
	1107, 1108, 1109, 1399, 1404, 632, 633, 634, 635, 636,
	637, 1376, 1373, 1375, 105, 1171, 1071, 1120, 714, 713,
	360, 765, 364, 781, 780, 779, 777, 1025, 799, 1264,
	1056, 1173, 1183, 1184, 786, 1059, 607, 606, 616, 617,
	609, 610, 611, 612, 613, 614, 615, 608, 785, 234,
	618, 708, 739, 1079, 234, 738, 229, 737, 229, 736,
	1185, 1186, 1187, 1042, 450, 1195, 1194, 1192, 735, 734,
	911, 733, 1206, 732, 105, 731, 730, 1196, 944, 729,
	1053, 234, 234, 1202, 728, 1239, 1240, 913, 727, 1205,
	1219, 1204, 1218, 1060, 1221, 1201, 726, 725, 1225, 1095,
	724, 723, 103, 1226, 722, 1235, 721, 720, 716, 719,
	718, 1319, 717, 784, 782, 1231, 778, 1244, 1245, 514,
	584, 512, 1237, 513, 1232, 511, 1114, 945, 215, 1200,
	1238, 516, 515, 510, 1305, 1241, 1309, 1076, 181, 1044,
	832, 626, 933, 1008, 215, 215, 227, 957, 699, 697,
	218, 217, 947, 665, 475, 1340, 234, 234, 234, 1292,
	1270, 1270, 1270, 1167, 1254, 1271, 1272, 215, 1092, 1255,
	648, 922, 428, 866, 439, 873, 1242, 1243, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 436, 438, 437, 671, 677, 600, 1281,
	420, 1357, 1230, 105, 105, 566, 86, 85, 944, 384,
	1278, 1279, 485, 1280, 1297, 1295, 1282, 1229, 1284, 234,
	1102, 571, 1289, 1270, 234, 1377, 675, 1321, 1270, 783,
	25, 58, 1322, 1315, 212, 14, 21, 15, 13, 12,
	29, 1288, 10, 9, 1231, 8, 234, 7, 1167, 1324,
	229, 1316, 6, 1308, 5, 1233, 215, 945, 4, 50,
	1276, 203, 1277, 1318, 1206, 105, 105, 105, 105, 1223,
	1335, 23, 1330, 1286, 1287, 1189, 105, 2, 215, 105,
	20, 215, 105, 1344, 1343, 1346, 1345, 19, 234, 686,
	1354, 18, 1364, 17, 234, 1361, 16, 685, 1270, 1362,
	234, 11, 1371, 767, 1270, 768, 1231, 1231, 1231, 1231,
	1374, 1249, 0, 0, 0, 1232, 1232, 1232, 1232, 214,
	1231, 915, 0, 1328, 1381, 0, 1331, 1332, 0, 1308,
	0, 0, 0, 0, 0, 376, 377, 0, 0, 0,
	0, 0, 0, 234, 1338, 0, 1393, 1270, 0, 0,
	0, 1395, 0, 1405, 1408, 1403, 1407, 0, 401, 0,
	0, 0, 1356, 1418, 0, 0, 0, 0, 0, 0,
	1425, 1363, 606, 616, 617, 609, 610, 611, 612, 613,
	614, 615, 608, 0, 0, 618, 234, 234, 234, 0,
	1440, 1440, 1440, 1441, 1442, 1430, 0, 0, 0, 1291,
	0, 0, 1447, 0, 0, 0, 0, 1415, 1416, 1417,
	0, 0, 0, 0, 0, 1457, 1444, 0, 0, 0,
	1390, 1460, 1461, 1448, 1449, 234, 0, 0, 0, 1463,
	559, 0, 1409, 0, 0, 215, 215, 215, 0, 0,
	570, 0, 0, 0, 215, 574, 0, 408, 0, 0,
	0, 0, 215, 0, 1066, 1067, 1068, 0, 0, 531,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 487,
	0, 0, 490, 616, 617, 609, 610, 611, 612, 613,
	614, 615, 608, 0, 0, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 1455, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1380, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 687, 689, 0, 0, 1413, 1414, 532,
	0, 0, 0, 0, 545, 548, 549, 550, 551, 552,
	553, 0, 554, 555, 556, 557, 558, 533, 534, 535,
	536, 517, 518, 546, 844, 520, 0, 0, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 537, 538,
	539, 540, 541, 542, 543, 544, 0, 0, 0, 0,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 567, 0,
	0, 0, 0, 0, 215, 573, 0, 0, 846, 0,
	0, 856, 215, 578, 0, 1198, 1199, 842, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 602, 0,
	605, 0, 0, 0, 0, 0, 619, 620, 621, 622,
	623, 624, 625, 547, 603, 604, 601, 607, 606, 616,
	617, 609, 610, 611, 612, 613, 614, 615, 608, 0,
	0, 618, 0, 0, 839, 837, 833, 0, 836, 838,
	0, 0, 0, 910, 689, 0, 0, 910, 910, 0,
	0, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 910, 910, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 0,
	910, 0, 682, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 0, 151, 0, 107, 0, 0, 131, 0, 135,
	138, 139, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 159, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	835, 0, 113, 0, 0, 848, 0, 0, 0, 0,
	0, 845, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 834, 0, 0, 0, 0, 607, 606,
	616, 617, 609, 610, 611, 612, 613, 614, 615, 608,
	0, 0, 618, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 157,
	0, 168, 109, 0, 215, 215, 215, 0, 0, 0,
	0, 122, 130, 0, 0, 166, 167, 118, 171, 0,
	0, 110, 215, 0, 150, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 0, 0, 160, 0, 0,
	129, 124, 164, 121, 145, 114, 108, 0, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 128, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	106, 111, 140, 0, 156, 127, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 689, 126, 161,
	0, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 0, 151, 0, 107,
	0, 0, 131, 0, 135, 138, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	159, 144, 0, 0, 0, 1039, 1040, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	1080, 0, 0, 1052, 0, 0, 0, 113, 215, 0,
	0, 0, 595, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 689, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 117, 0, 157, 0, 168, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 130, 0, 1101,
	166, 167, 118, 171, 0, 0, 110, 0, 0, 150,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 137,
	125, 132, 154, 142, 155, 133, 148, 147, 149, 0,
	0, 0, 160, 0, 0, 129, 124, 164, 121, 145,
	114, 108, 0, 115, 116, 120, 119, 0, 136, 143,
	146, 152, 153, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 111, 140, 0, 156,
	127, 169, 0, 0, 0, 0, 0, 215, 1312, 1188,
	0, 0, 0, 126, 161, 0, 162, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 173, 175, 174, 176, 112, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	215, 215, 215, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 0, 215, 0, 0, 1312, 0, 0, 687,
	338, 323, 283, 341, 259, 274, 353, 276, 277, 313,
	243, 293, 151, 272, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 339, 290, 0, 262,
	236, 269, 237, 260, 287, 123, 258, 325, 296, 275,
	0, 347, 141, 305, 0, 159, 144, 0, 0, 289,
	328, 291, 322, 282, 314, 251, 304, 342, 273, 310,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 307, 336, 271, 309, 312, 235, 306,
	0, 239, 244, 352, 334, 265, 266, 0, 0, 0,
	0, 0, 0, 0, 288, 292, 319, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 303, 0,
	0, 0, 246, 241, 286, 0, 0, 0, 250, 0,
	264, 320, 0, 0, 0, 329, 281, 170, 335, 279,
	278, 343, 316, 0, 326, 261, 270, 117, 268, 157,
	311, 168, 109, 332, 327, 301, 284, 285, 240, 0,
	318, 122, 130, 257, 308, 166, 167, 118, 171, 245,
	349, 110, 232, 348, 150, 231, 165, 333, 302, 298,
	242, 331, 300, 297, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 238, 0, 160, 340, 354,
	129, 124, 164, 121, 145, 114, 108, 248, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 330, 0, 0, 0,
	0, 0, 163, 247, 128, 254, 255, 252, 253, 294,
	295, 344, 345, 346, 321, 249, 0, 0, 324, 299,
	106, 111, 140, 351, 156, 127, 169, 0, 0, 0,
	0, 0, 267, 350, 317, 315, 337, 0, 126, 161,
	0, 162, 220, 0, 0, 225, 223, 224, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 338, 323, 283, 341,
	259, 274, 353, 276, 277, 313, 243, 293, 151, 272,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 339, 290, 0, 262, 236, 269, 237, 260,
	287, 123, 258, 325, 296, 275, 0, 347, 141, 305,
	0, 159, 144, 0, 0, 289, 328, 291, 322, 282,
	314, 251, 304, 342, 273, 310, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 307,
	336, 271, 309, 312, 235, 306, 0, 239, 244, 352,
	334, 265, 266, 0, 0, 0, 0, 0, 0, 0,
	288, 292, 319, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 303, 0, 0, 0, 246, 241,
	286, 0, 0, 0, 250, 0, 264, 320, 0, 0,
	0, 329, 281, 170, 335, 279, 278, 343, 316, 0,
	326, 261, 270, 117, 268, 157, 311, 168, 109, 332,
	327, 301, 284, 285, 240, 0, 318, 122, 130, 257,
	308, 166, 167, 118, 171, 245, 349, 110, 232, 348,
	150, 231, 165, 333, 302, 298, 242, 331, 300, 297,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 238, 0, 160, 340, 354, 129, 124, 164, 121,
	145, 114, 108, 248, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 330, 0, 0, 0, 0, 0, 163, 247,
	128, 254, 255, 252, 253, 294, 295, 344, 345, 346,
	321, 249, 0, 0, 324, 299, 106, 111, 140, 351,
	156, 127, 169, 0, 0, 0, 0, 0, 267, 350,
	317, 315, 337, 0, 126, 161, 0, 162, 0, 0,
	0, 225, 223, 224, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 338, 323, 283, 341, 259, 274, 353, 276,
	277, 313, 243, 293, 151, 272, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 339, 290,
	0, 262, 236, 269, 237, 260, 287, 123, 258, 325,
	296, 275, 0, 347, 141, 305, 0, 159, 144, 0,
	0, 289, 328, 291, 322, 282, 314, 251, 304, 342,
	273, 310, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 307, 336, 271, 309, 312,
	235, 306, 0, 239, 244, 352, 334, 265, 266, 0,
	0, 0, 0, 0, 0, 0, 288, 292, 319, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	303, 0, 0, 0, 246, 241, 286, 0, 0, 0,
	250, 0, 264, 320, 0, 0, 0, 329, 281, 170,
	335, 279, 278, 343, 316, 0, 326, 261, 270, 117,
	268, 157, 311, 168, 109, 332, 327, 301, 284, 285,
	240, 0, 318, 122, 130, 257, 308, 166, 167, 118,
	171, 245, 349, 110, 232, 348, 150, 231, 165, 333,
	302, 298, 242, 331, 300, 297, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 238, 0, 160,
	340, 354, 129, 124, 164, 121, 145, 114, 108, 248,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 330, 0,
	0, 0, 0, 0, 163, 247, 128, 254, 255, 252,
	253, 294, 295, 344, 345, 346, 321, 249, 0, 0,
	324, 299, 106, 111, 140, 351, 156, 127, 169, 0,
	0, 0, 0, 0, 267, 350, 317, 315, 337, 0,
	126, 161, 0, 162, 498, 0, 0, 134, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 338, 323,
	283, 341, 259, 274, 353, 276, 277, 313, 243, 293,
	151, 272, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 339, 290, 0, 262, 236, 269,
	237, 260, 287, 123, 258, 325, 296, 275, 0, 347,
	141, 305, 0, 159, 144, 0, 0, 289, 328, 291,
	322, 282, 314, 251, 304, 342, 273, 310, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 307, 336, 271, 309, 312, 235, 306, 0, 239,
	244, 352, 334, 265, 266, 0, 0, 0, 0, 0,
	0, 0, 288, 292, 319, 280, 0, 0, 0, 0,
	0, 0, 1334, 0, 263, 0, 303, 0, 0, 0,
	246, 241, 286, 0, 0, 0, 250, 0, 264, 320,
	0, 0, 0, 329, 281, 170, 335, 279, 278, 343,
	316, 0, 326, 261, 270, 117, 268, 157, 311, 168,
	109, 332, 327, 301, 284, 285, 240, 0, 318, 122,
	130, 257, 308, 166, 167, 118, 171, 245, 349, 110,
	691, 348, 150, 692, 165, 333, 302, 298, 242, 331,
	300, 297, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 238, 0, 160, 340, 354, 129, 124,
	164, 121, 145, 114, 108, 248, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 330, 0, 0, 0, 0, 0,
	163, 247, 128, 254, 255, 252, 253, 294, 295, 344,
	345, 346, 321, 249, 0, 0, 324, 299, 106, 111,
	140, 351, 156, 127, 169, 0, 0, 0, 0, 0,
	267, 350, 317, 315, 337, 0, 126, 161, 0, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 338, 323, 283, 341, 259, 274,
	353, 276, 277, 313, 243, 293, 151, 272, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	339, 290, 0, 262, 236, 269, 237, 260, 287, 123,
	258, 325, 296, 275, 0, 347, 141, 305, 0, 159,
	144, 0, 0, 289, 328, 291, 322, 282, 314, 251,
	304, 342, 273, 310, 0, 0, 0, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 307, 336, 271,
	309, 312, 235, 306, 0, 239, 244, 352, 334, 265,
	266, 0, 0, 0, 0, 0, 0, 0, 288, 292,
	319, 280, 0, 0, 0, 0, 0, 0, 1203, 0,
	263, 0, 303, 0, 0, 0, 246, 241, 286, 0,
	0, 0, 250, 0, 264, 320, 0, 0, 0, 329,
	281, 170, 335, 279, 278, 343, 316, 0, 326, 261,
	270, 117, 268, 157, 311, 168, 109, 332, 327, 301,
	284, 285, 240, 0, 318, 122, 130, 257, 308, 166,
	167, 118, 171, 245, 349, 110, 691, 348, 150, 692,
	165, 333, 302, 298, 242, 331, 300, 297, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 238,
	0, 160, 340, 354, 129, 124, 164, 121, 145, 114,
	108, 248, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	330, 0, 0, 0, 0, 0, 163, 247, 128, 254,
	255, 252, 253, 294, 295, 344, 345, 346, 321, 249,
	0, 0, 324, 299, 106, 111, 140, 351, 156, 127,
	169, 0, 0, 0, 0, 0, 267, 350, 317, 315,
	337, 0, 126, 161, 0, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	338, 323, 283, 341, 259, 274, 353, 276, 277, 313,
	243, 293, 151, 272, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 339, 290, 0, 262,
	236, 269, 237, 260, 287, 123, 258, 325, 296, 275,
	0, 347, 141, 305, 0, 159, 144, 0, 0, 289,
	328, 291, 322, 282, 314, 251, 304, 342, 273, 310,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 307, 336, 271, 309, 312, 235, 306,
	0, 239, 244, 352, 334, 265, 266, 0, 0, 0,
	0, 0, 0, 0, 288, 292, 319, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 303, 0,
	0, 0, 246, 241, 286, 0, 0, 0, 250, 0,
	264, 320, 0, 0, 0, 329, 281, 170, 335, 279,
	278, 343, 316, 0, 326, 261, 270, 117, 268, 157,
	311, 168, 109, 332, 327, 301, 284, 285, 240, 0,
	318, 122, 130, 257, 308, 166, 167, 118, 171, 245,
	349, 110, 232, 348, 150, 231, 165, 333, 302, 298,
	242, 331, 300, 297, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 238, 0, 160, 340, 354,
	129, 124, 164, 121, 145, 114, 108, 248, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 330, 0, 0, 0,
	0, 0, 163, 247, 128, 254, 255, 252, 253, 294,
	295, 344, 345, 346, 321, 249, 0, 0, 324, 299,
	106, 111, 140, 351, 156, 127, 169, 0, 0, 0,
	0, 0, 267, 350, 317, 315, 337, 0, 126, 161,
	0, 162, 0, 0, 0, 134, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 338, 323, 283, 341,
	259, 274, 353, 276, 277, 313, 243, 293, 151, 272,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 339, 290, 0, 262, 236, 269, 237, 260,
	287, 123, 258, 325, 296, 275, 0, 347, 141, 305,
	0, 159, 144, 0, 0, 289, 328, 291, 322, 282,
	314, 251, 304, 342, 273, 310, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 307,
	336, 271, 309, 312, 235, 306, 0, 239, 244, 352,
	334, 265, 266, 0, 0, 0, 0, 0, 0, 0,
	288, 292, 319, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 303, 0, 0, 0, 246, 241,
	286, 0, 0, 0, 250, 0, 264, 320, 0, 0,
	0, 329, 281, 170, 335, 279, 278, 343, 316, 0,
	326, 261, 270, 117, 268, 157, 311, 168, 109, 332,
	327, 301, 284, 285, 240, 0, 318, 122, 130, 257,
	308, 166, 167, 118, 171, 245, 349, 110, 691, 348,
	150, 692, 165, 333, 302, 298, 242, 331, 300, 297,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 238, 0, 160, 340, 354, 129, 124, 164, 121,
	145, 114, 108, 248, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 330, 0, 0, 0, 0, 0, 163, 247,
	128, 254, 255, 252, 253, 294, 295, 344, 345, 346,
	321, 249, 0, 0, 324, 299, 106, 111, 140, 351,
	156, 127, 169, 0, 0, 0, 0, 0, 267, 350,
	317, 315, 337, 0, 126, 161, 0, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 338, 323, 283, 341, 259, 274, 353, 276,
	277, 313, 243, 293, 151, 272, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 339, 290,
	0, 262, 236, 269, 237, 260, 287, 123, 258, 325,
	296, 275, 0, 347, 141, 305, 0, 159, 144, 0,
	0, 289, 328, 291, 322, 282, 314, 251, 304, 342,
	273, 310, 0, 0, 0, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 307, 336, 271, 309, 312,
	235, 306, 0, 239, 244, 352, 334, 265, 266, 0,
	0, 0, 0, 0, 0, 0, 288, 292, 319, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	303, 0, 0, 0, 246, 241, 286, 0, 0, 0,
	250, 0, 264, 320, 0, 0, 0, 329, 281, 170,
	335, 279, 278, 343, 316, 0, 326, 261, 270, 117,
	268, 157, 311, 168, 109, 332, 327, 301, 284, 285,
	240, 0, 318, 122, 130, 257, 308, 166, 167, 118,
	171, 245, 349, 110, 691, 348, 150, 692, 165, 333,
	302, 298, 242, 331, 300, 297, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 238, 0, 160,
	340, 354, 129, 124, 164, 121, 145, 114, 108, 248,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 330, 0,
	0, 0, 0, 0, 163, 247, 128, 254, 255, 252,
	253, 294, 295, 344, 345, 346, 321, 249, 0, 0,
	324, 299, 106, 111, 140, 351, 156, 127, 169, 0,
	0, 0, 0, 0, 267, 350, 317, 315, 337, 0,
	126, 161, 0, 162, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 338, 323,
	283, 341, 259, 274, 353, 276, 277, 313, 243, 293,
	151, 272, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 339, 290, 0, 262, 236, 269,
	237, 260, 287, 123, 258, 325, 296, 275, 0, 347,
	141, 305, 0, 159, 144, 0, 0, 289, 328, 291,
	322, 282, 314, 251, 304, 342, 273, 310, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 307, 336, 271, 309, 312, 235, 306, 0, 239,
	244, 352, 334, 265, 266, 0, 0, 0, 0, 0,
	0, 0, 288, 292, 319, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 303, 0, 0, 0,
	246, 241, 286, 0, 0, 0, 250, 0, 264, 320,
	0, 0, 0, 329, 281, 170, 335, 279, 278, 343,
	316, 0, 326, 261, 270, 117, 268, 157, 311, 168,
	109, 332, 327, 301, 284, 285, 240, 0, 318, 122,
	130, 257, 308, 166, 167, 118, 171, 245, 349, 110,
	691, 348, 150, 692, 165, 333, 302, 298, 242, 331,
	300, 297, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 238, 0, 160, 340, 354, 129, 124,
	164, 121, 145, 114, 108, 248, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 330, 0, 0, 0, 0, 0,
	163, 247, 128, 254, 255, 252, 253, 294, 295, 344,
	345, 346, 321, 249, 0, 0, 324, 299, 106, 111,
	140, 351, 156, 127, 169, 0, 0, 0, 0, 0,
	267, 350, 317, 315, 337, 0, 126, 161, 0, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 0, 0,
	0, 905, 0, 424, 0, 0, 0, 123, 423, 0,
	0, 0, 0, 460, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 473, 441, 440, 442, 443,
	444, 445, 0, 0, 113, 446, 447, 448, 0, 0,
	0, 421, 434, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 432, 908, 0, 0, 0,
	471, 0, 433, 0, 0, 430, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 469, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 128, 461, 470, 467,
	468, 465, 466, 464, 463, 462, 472, 455, 456, 458,
	0, 457, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 161, 0, 162, 0, 0, 0, 134, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 424, 0,
	0, 0, 123, 423, 0, 0, 0, 0, 460, 141,
	0, 0, 159, 144, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 705, 53, 0, 0,
	473, 441, 440, 442, 443, 444, 445, 0, 0, 113,
	446, 447, 448, 706, 0, 0, 421, 434, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	432, 0, 0, 0, 0, 471, 0, 433, 0, 0,
	430, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 469, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 0,
	136, 143, 146, 152, 153, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 128, 461, 470, 467, 468, 465, 466, 464, 463,
	462, 472, 455, 456, 458, 0, 457, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 161, 0, 162, 0,
	0, 0, 134, 0, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 424, 0, 0, 0, 123, 423, 0,
	0, 0, 0, 460, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 473, 441, 440, 442, 443,
	444, 445, 0, 0, 113, 446, 447, 448, 0, 0,
	0, 421, 434, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 432, 908, 0, 0, 0,
	471, 0, 433, 0, 0, 430, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 469, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 128, 461, 470, 467,
	468, 465, 466, 464, 463, 462, 472, 455, 456, 458,
	0, 457, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 161, 0, 162, 0, 0, 0, 134, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 424, 0,
	0, 0, 123, 423, 0, 0, 0, 0, 460, 141,
	0, 0, 159, 144, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 415,
	473, 441, 440, 442, 443, 444, 445, 0, 0, 113,
	446, 447, 448, 0, 0, 0, 421, 434, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	432, 0, 0, 0, 0, 471, 0, 433, 0, 0,
	430, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 469, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 0,
	136, 143, 146, 152, 153, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 128, 461, 470, 467, 468, 465, 466, 464, 463,
	462, 472, 455, 456, 458, 0, 457, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 126, 161, 0, 162, 0,
	0, 0, 134, 0, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 424, 0, 0, 0, 123, 423, 0,
	0, 0, 0, 460, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 473, 441, 440, 442, 443,
	444, 445, 0, 0, 113, 446, 447, 448, 0, 0,
	0, 421, 434, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 432, 0, 0, 0, 0,
	471, 0, 433, 0, 0, 430, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 469, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 128, 461, 470, 467,
	468, 465, 466, 464, 463, 462, 472, 455, 456, 458,
	0, 457, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 161, 0, 162, 0, 0, 0, 134, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 424, 0,
	0, 0, 123, 423, 0, 0, 0, 0, 460, 141,
	0, 0, 159, 144, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	473, 441, 440, 442, 443, 444, 445, 0, 0, 113,
	446, 447, 448, 0, 0, 0, 421, 434, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	432, 0, 0, 0, 0, 471, 0, 433, 0, 0,
	430, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 469, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 0,
	136, 143, 146, 152, 153, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 128, 461, 470, 467, 468, 465, 466, 464, 463,
	462, 472, 455, 456, 458, 0, 457, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 161, 0, 162, 0,
	0, 151, 134, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 0, 0, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 0, 123, 0, 0, 0, 0, 0,
	460, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 473, 441, 440, 442, 443, 444, 445, 0,
	0, 113, 446, 447, 448, 0, 0, 0, 0, 434,
	0, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 432, 0, 0, 0, 0, 471, 0, 433,
	0, 0, 430, 435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 469,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 128, 461, 470, 467, 468, 465, 466,
	464, 463, 462, 472, 455, 456, 458, 0, 457, 106,
	111, 140, 0, 156, 127, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 161, 0,
	162, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 151, 0, 107, 0, 773,
	772, 0, 135, 138, 139, 0, 0, 771, 0, 0,
	770, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 159, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 769,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 157, 0, 168, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 130, 0, 0, 166, 167,
	118, 171, 0, 0, 110, 0, 0, 150, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 137, 125, 132,
	154, 142, 155, 133, 148, 147, 149, 0, 0, 0,
	160, 0, 0, 129, 124, 164, 121, 145, 114, 108,
	0, 115, 116, 120, 119, 24, 136, 143, 146, 152,
	153, 158, 0, 0, 0, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 128, 0, 123,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 159,
	144, 0, 0, 106, 111, 140, 0, 156, 127, 169,
	0, 0, 0, 0, 53, 0, 0, 104, 0, 0,
	0, 126, 161, 0, 162, 0, 113, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 173, 175, 174, 176, 112, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 0, 163, 123, 128, 0,
	0, 0, 0, 0, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 0, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 104, 0, 1313, 0, 0,
	0, 0, 126, 161, 113, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 24, 136, 143, 146, 152, 153,
	158, 0, 0, 0, 0, 151, 0, 107, 0, 0,
	131, 0, 135, 138, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 128, 0, 123, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 159, 144,
	0, 0, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 53, 0, 0, 233, 0, 0, 0,
	126, 161, 0, 162, 0, 113, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 157, 0, 168, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 130, 0, 0, 166, 167,
	118, 171, 0, 0, 110, 0, 0, 150, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 137, 125, 132,
	154, 142, 155, 133, 148, 147, 149, 0, 0, 0,
	160, 0, 0, 129, 124, 164, 121, 145, 114, 108,
	0, 115, 116, 120, 119, 0, 136, 143, 146, 152,
	153, 158, 0, 151, 0, 107, 0, 0, 131, 0,
	135, 138, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 123, 128, 0, 0,
	0, 0, 0, 141, 0, 0, 159, 144, 0, 0,
	0, 0, 0, 106, 111, 140, 0, 156, 127, 169,
	0, 0, 0, 0, 233, 0, 0, 673, 0, 0,
	674, 126, 161, 113, 162, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 173, 175, 174, 176, 112, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	157, 0, 168, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 130, 0, 0, 166, 167, 118, 171,
	0, 0, 110, 0, 0, 150, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 137, 125, 132, 154, 142,
	155, 133, 148, 147, 149, 0, 0, 0, 160, 0,
	0, 129, 124, 164, 121, 145, 114, 108, 0, 115,
	116, 120, 119, 0, 136, 143, 146, 152, 153, 158,
	0, 0, 0, 151, 0, 107, 0, 0, 131, 0,
	135, 138, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 128, 123, 503, 0, 0,
	0, 0, 0, 141, 0, 0, 159, 144, 0, 0,
	0, 106, 111, 140, 0, 156, 127, 169, 0, 0,
	0, 0, 0, 0, 233, 0, 502, 0, 0, 126,
	161, 0, 162, 113, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	173, 175, 174, 176, 112, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	157, 0, 168, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 130, 0, 0, 166, 167, 118, 171,
	0, 0, 110, 0, 0, 150, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 137, 125, 132, 154, 142,
	155, 133, 148, 147, 149, 0, 0, 0, 160, 0,
	0, 129, 124, 164, 121, 145, 114, 108, 0, 115,
	116, 120, 119, 0, 136, 143, 146, 152, 153, 158,
	0, 151, 0, 107, 0, 0, 131, 0, 135, 138,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 123, 128, 0, 0, 0, 0,
	0, 141, 0, 0, 159, 144, 0, 0, 0, 0,
	0, 106, 111, 140, 0, 156, 127, 169, 0, 0,
	0, 0, 104, 0, 1313, 0, 0, 0, 0, 126,
	161, 113, 162, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	173, 175, 174, 176, 112, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 157, 0,
	168, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 130, 0, 0, 166, 167, 118, 171, 0, 0,
	110, 0, 0, 150, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 137, 125, 132, 154, 142, 155, 133,
	148, 147, 149, 0, 0, 0, 160, 0, 0, 129,
	124, 164, 121, 145, 114, 108, 0, 115, 116, 120,
	119, 0, 136, 143, 146, 152, 153, 158, 0, 151,
	0, 107, 0, 0, 131, 0, 135, 138, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 123, 128, 0, 0, 0, 0, 0, 141,
	0, 0, 159, 144, 0, 0, 0, 0, 0, 106,
	111, 140, 0, 156, 127, 169, 0, 53, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 126, 161, 113,
	162, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 173, 175,
	174, 176, 112, 177, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 157, 0, 168, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 130,
	0, 0, 166, 167, 118, 171, 0, 0, 110, 0,
	0, 150, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 137, 125, 132, 154, 142, 155, 133, 148, 147,
	149, 0, 0, 0, 160, 0, 0, 129, 124, 164,
	121, 145, 114, 108, 0, 115, 116, 120, 119, 0,
	136, 143, 146, 152, 153, 158, 0, 151, 0, 107,
	0, 0, 131, 0, 135, 138, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	123, 128, 0, 0, 0, 0, 0, 141, 0, 0,
	159, 144, 0, 0, 0, 0, 0, 106, 111, 140,
	0, 156, 127, 169, 0, 0, 0, 0, 233, 0,
	1080, 0, 0, 0, 0, 126, 161, 113, 162, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 173, 175, 174, 176,
	112, 177, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 157, 0, 168, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 130, 0, 0,
	166, 167, 118, 171, 0, 0, 110, 0, 0, 150,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 137,
	125, 132, 154, 142, 155, 133, 148, 147, 149, 0,
	0, 0, 160, 0, 0, 129, 124, 164, 121, 145,
	114, 108, 0, 115, 116, 120, 119, 0, 136, 143,
	146, 152, 153, 158, 0, 0, 0, 0, 151, 0,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 128,
	486, 123, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 159, 144, 0, 0, 106, 111, 140, 0, 156,
	127, 169, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 126, 161, 0, 162, 0, 113, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 173, 175, 174, 176, 112, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 157, 0, 168, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 130, 0,
	0, 166, 167, 118, 171, 0, 0, 110, 0, 0,
	150, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 0, 0, 160, 0, 0, 129, 124, 164, 121,
	145, 114, 108, 0, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 151, 0, 107, 0,
	0, 131, 0, 135, 138, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 123,
	128, 0, 0, 0, 0, 0, 141, 0, 0, 159,
	144, 0, 0, 0, 0, 0, 106, 111, 140, 0,
	156, 127, 169, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 126, 161, 113, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 157, 0, 168, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 130, 0, 0, 166,
	167, 118, 171, 0, 0, 110, 0, 0, 150, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 137, 125,
	132, 154, 142, 155, 133, 148, 147, 149, 0, 0,
	0, 160, 0, 0, 129, 124, 164, 121, 145, 114,
	108, 0, 115, 116, 120, 119, 0, 136, 143, 146,
	152, 153, 158, 0, 151, 0, 107, 0, 0, 131,
	0, 135, 138, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 123, 128, 0,
	0, 0, 0, 0, 141, 0, 0, 159, 144, 0,
	0, 0, 0, 0, 106, 111, 140, 0, 156, 127,
	169, 0, 0, 0, 0, 473, 0, 0, 0, 0,
	0, 0, 126, 161, 113, 162, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 173, 175, 174, 176, 112, 177, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 157, 0, 168, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 130, 0, 0, 166, 167, 118,
	171, 0, 0, 110, 0, 0, 150, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 137, 125, 132, 154,
	142, 155, 133, 148, 147, 149, 0, 0, 0, 160,
	0, 0, 129, 124, 164, 121, 145, 114, 108, 0,
	115, 116, 120, 119, 0, 136, 143, 146, 152, 153,
	158, 0, 151, 0, 107, 0, 0, 131, 0, 135,
	138, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 123, 128, 0, 0, 0,
	0, 0, 141, 0, 0, 159, 144, 0, 0, 0,
	0, 0, 106, 111, 140, 0, 156, 127, 169, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	126, 161, 113, 162, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 173, 175, 174, 176, 112, 177, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 157,
	0, 168, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 130, 0, 0, 166, 167, 118, 171, 0,
	0, 110, 0, 0, 150, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 137, 125, 132, 154, 142, 155,
	133, 148, 147, 149, 0, 0, 0, 160, 0, 0,
	129, 124, 164, 121, 145, 114, 108, 0, 115, 116,
	120, 119, 0, 136, 143, 146, 152, 153, 158, 0,
	151, 0, 107, 0, 0, 131, 0, 135, 138, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 123, 128, 0, 0, 0, 0, 0,
	141, 0, 0, 159, 144, 0, 0, 0, 0, 0,
	106, 111, 140, 0, 156, 127, 169, 0, 0, 0,
	0, 363, 0, 0, 0, 0, 0, 0, 126, 161,
	113, 162, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 173,
	175, 174, 176, 112, 177, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 157, 0, 168,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	130, 0, 0, 166, 167, 118, 171, 0, 0, 110,
	0, 0, 150, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 137, 125, 132, 154, 142, 155, 133, 148,
	147, 149, 0, 0, 0, 160, 0, 0, 129, 124,
	164, 121, 145, 114, 108, 0, 115, 116, 120, 119,
	0, 136, 143, 146, 152, 153, 158, 0, 151, 0,
	107, 0, 0, 131, 0, 135, 138, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 123, 128, 0, 0, 0, 0, 0, 141, 0,
	0, 159, 144, 0, 0, 0, 0, 0, 106, 111,
	140, 0, 156, 127, 169, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 126, 161, 113, 162,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 173, 175, 174,
	176, 112, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 157, 0, 168, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 130, 0,
	0, 166, 167, 118, 171, 0, 0, 110, 0, 0,
	150, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	137, 125, 132, 154, 142, 155, 133, 148, 147, 149,
	0, 0, 0, 160, 0, 0, 129, 124, 164, 121,
	145, 114, 108, 0, 115, 116, 120, 119, 0, 136,
	143, 146, 152, 153, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 111, 140, 0,
	156, 127, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 161, 0, 162, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 173, 175, 174, 176, 112,
	177, 178,
}
var yyPact = [...]int{

	138, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 960, 993, -1000, -1000, -1000, -1000, -1000, 740,
	128, 75, 9, 107, 105, 626, 95, 9315, -1000, -1000,
	-75, -1000, -169, -1000, -1000, -180, -1000, -1000, -1000, -1000,
	816, -1000, -1000, -1000, -1000, -1000, 944, 958, 817, 897,
	826, -1000, 75, 9315, 973, 2405, -143, 9513, 71, 89,
	85, 84, 71, -1000, 94, -1000, 70, 634, 70, 9315,
	9315, -83, 11, -1000, -1000, -78, 245, -1000, -1000, -1000,
	-89, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9315, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 469, -1000, -1000, -1000, -1000, -1000, -1000, 682, 682,
	-1000, 9315, -1000, -1000, -187, -1000, -1000, -1000, -1000, 492,
	882, 6382, 6382, 960, -1000, 816, -1000, -1000, -1000, 855,
	-1000, -1000, 270, 8721, 881, 131, 9315, 667, -1000, -1000,
	-182, 2997, -1000, -1000, -1000, -1000, 206, 7926, 7926, -1000,
	-1000, -1000, 877, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 957, 955,
	633, -1000, 1447, -1000, -1000, 9315, 252, 628, 617, 603,
	9315, 9315, 9315, 892, 778, 9315, -1000, -1000, 970, 9315,
	9315, -1000, -1000, 245, 245, -1000, -1000, 9315, -1000, -1000,
	-1000, -1000, -1000, 245, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6382, -1000, -1000, 173, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 984, 172, 546,
	-1000, 6382, 1604, 682, 682, -1000, -1000, 122, -1000, -1000,
	6644, 6644, 6644, 6644, 6644, 6644, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 682,
	129, -1000, 6117, 682, 682, 682, 682, 682, 682, 6382,
	682, 682, 682, 682, 682, 682, 682, 682, 682, 682,
	682, 682, 682, -1000, -1000, 663, -1000, 500, 944, 492,
	826, 7726, 789, -1000, -1000, 689, 9315, -1000, 9117, 4773,
	968, 2701, -1000, 662, 661, -179, -189, -1000, -182, 5322,
	-1000, -1000, -1000, -1000, 142, -1000, 682, 87, 111, 6928,
	787, -27, -1000, -1000, -1000, 688, -1000, 688, 688, 688,
	688, 15, 15, 15, 15, -1000, -1000, -1000, -1000, -1000,
	768, 764, -1000, 688, 688, 688, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 762, 762, 762, 695, 695, 880,
	891, 775, 774, 773, -1000, 1600, 657, -1000, -1000, 9315,
	-1000, 944, -87, -1000, -1000, 264, 9315, 9315, 245, -1000,
	-1000, -1000, -1000, 623, 260, -1000, 9315, -1000, -1000, -1000,
	-1000, -1000, -1000, 818, 6382, 6382, 401, 6382, 6382, 132,
	6644, 310, 277, 6644, 6644, 6644, 6644, 6644, 6644, 6644,
	6644, 6644, 6644, 6644, 6644, 6644, 6644, 6644, 465, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 601, -1000, 816,
	672, 672, 137, 137, 137, 137, 137, 1775, 5057, 4477,
	492, 6117, 5587, 5587, 6382, 6382, 5587, 898, 247, 260,
	8919, -1000, 492, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5587, 5587, 5587, 5587, 6382, -1000, -1000, -1000, 882, -1000,
	898, 949, -1000, 846, 844, 5587, -1000, 772, 9117, 682,
	-1000, 7528, -1000, 779, -1000, 202, -1000, 127, -1000, -1000,
	-1000, -1000, -1000, 960, 6382, -1000, 3885, -1000, -181, -1000,
	-177, -192, -1000, -1000, -1000, -1000, -1000, 260, -1000, 598,
	9513, 682, 682, -1000, 111, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	184, 184, 60, 184, 184, 184, 184, 184, -47, -50,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, -1000, -1000, -1000, 559, 180, 158, -1000,
	-1000, -1000, -1000, 922, -1000, 787, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 263, 93,
	-1000, 918, -1000, 917, 531, 983, 421, 144, 133, -32,
	-1000, -1000, 468, 15, 15, -1000, -1000, -1000, 876, -1000,
	-1000, -1000, 527, 527, -1000, -1000, -1000, -1000, 463, -1000,
	-1000, -1000, 456, -1000, -1000, 880, -1000, 51, -1000, 9315,
	9315, 9315, -1000, 234, 193, 74, 61, 59, 49, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9315, -1000, -1000,
	516, -1000, -1000, -1000, 515, 6382, -1000, 245, 968, -1000,
	6382, -1000, -1000, 832, 132, 287, -1000, -1000, 419, -1000,
	-1000, 260, 260, 703, -1000, -1000, -1000, -1000, 310, 6644,
	6644, 6644, 315, 703, 963, 1398, 1298, 137, 350, 350,
	153, 153, 153, 153, 153, 179, 179, -1000, -1000, -1000,
	492, -1000, -1000, -1000, 492, 5587, 655, -1000, -1000, 2060,
	126, 682, 125, -1000, -1000, 492, 587, 587, 198, 374,
	587, 5587, 357, -1000, 6382, 492, -1000, 587, 492, 587,
	587, -1000, -1000, 9315, -1000, -1000, -1000, -1000, 755, -1000,
	886, 646, 650, -1000, -1000, 5852, 492, 621, 121, 960,
	9117, 6382, 4477, 944, 260, -1000, -1000, -1000, -197, -195,
	-1000, -1000, 492, 9513, 9513, -1000, 514, -1000, 421, 184,
	184, -1000, 871, 424, 413, 406, 506, 504, 184, 184,
	399, 503, 588, 377, 362, 359, 501, 498, 216, 491,
	489, 453, 9711, 62, -1000, 559, -1000, 904, 180, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 761, -1000,
	-1000, -1000, -1000, -1000, -1000, -102, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 636, -1000, -1000,
	185, 612, -1000, 610, 654, 593, -1000, 184, 184, 682,
	682, 682, -1000, 9315, -1000, -1000, -1000, 568, 8, 740,
	566, 9513, -1000, -1000, -1000, -1000, 260, 264, -1000, 260,
	-1000, -1000, -1000, -1000, -1000, -1000, 315, 703, 834, -1000,
	6644, 6644, -1000, -1000, 587, 5587, -1000, -1000, 8520, -1000,
	-1000, 3589, 5587, 4181, -1000, -1000, -1000, 438, 465, 438,
	-122, 693, 225, -1000, 6382, 389, -1000, -1000, -1000, -1000,
	-1000, -1000, 968, 8322, 901, -1000, 682, -1000, -1000, 702,
	8919, 8919, 944, -1000, 260, -1000, -1000, -1000, -1000, -1000,
	-1000, 492, 492, -1000, -1000, 421, 421, -1000, -1000, -1000,
	-1000, -1000, -1000, 488, 485, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 739, -1000, 933, 696,
	62, 559, 398, -1000, -1000, -1000, -1000, -1000, 483, -1000,
	344, -1000, 337, 567, 408, 8919, 8919, 8919, -1000, -1000,
	-1000, 859, -1000, -1000, -1000, -1000, -1000, 6644, 703, 703,
	-1000, -1000, -1000, -1000, 114, 492, -1000, 492, 688, 688,
	-1000, 688, 695, -1000, 688, 34, 688, 26, 492, 492,
	682, -118, -1000, 260, 6382, 964, 651, 851, -1000, -1000,
	-1000, 894, 7129, 7327, 978, -1000, 682, -1000, 816, 103,
	-1000, -1000, 682, -152, -1000, -1000, -1000, -1000, 8919, -1000,
	-1000, -1000, -1000, 8919, 690, 62, -1000, 594, -1000, 574,
	556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 582, -1000,
	688, 582, 582, 557, 703, 3293, -1000, -1000, -1000, 101,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6644, 492,
	478, 260, 962, 953, 8322, 8322, 8322, 8322, -1000, 812,
	806, -1000, 813, 803, 820, 9315, -1000, 580, 7129, 139,
	-1000, 8124, -1000, -1000, 9117, 650, 492, 8919, -149, -1000,
	318, 573, 555, 8919, 687, -1000, -1000, -1000, -1000, 8919,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 288, -1000, -1000,
	-1000, 6382, 6382, 851, 694, 737, -1000, -1000, -1000, -1000,
	800, -1000, 793, -1000, -1000, -1000, -1000, -1000, 82, 80,
	79, -1000, 648, -1000, -1000, 552, -1000, 543, -1000, -1000,
	-1000, 549, 8919, 194, -1000, 104, 425, 492, 73, -134,
	260, 647, 6382, 6382, -1000, -1000, 682, 682, 682, -149,
	-1000, 839, 102, 102, -1000, 547, 879, -1000, -1000, -1000,
	184, 477, 946, 879, -1000, -1000, 931, 879, -1000, -1000,
	822, -125, -138, 260, 260, 8919, 8919, 8919, -1000, 170,
	-1000, 184, -1000, 471, 927, 102, -1000, -1000, 184, 184,
	297, -1000, -1000, -1000, -1000, 541, -1000, 819, -1000, 539,
	-1000, 539, 539, 682, 290, -1000, 493, 102, 567, 567,
	-1000, -1000, -128, -1000, 8919, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -135, -1000, -139, -1000,
}
var yyPgo = [...]int{

	0, 22, 23, 1341, 1335, 1333, 27, 1331, 1326, 1323,
	1321, 1317, 1310, 1307, 42, 843, 1301, 1291, 1288, 1284,
	1282, 1277, 1275, 1273, 1272, 1270, 1269, 1268, 1267, 1266,
	1265, 167, 1264, 1261, 1260, 45, 1259, 67, 1256, 88,
	1255, 1252, 1251, 40, 75, 36, 49, 204, 1250, 29,
	19, 17, 1247, 1245, 15, 1244, 1285, 1242, 1239, 58,
	83, 1237, 1236, 37, 1235, 1232, 1231, 6, 25, 1230,
	63, 1228, 1227, 74, 604, 1226, 1225, 1224, 1223, 1204,
	1203, 56, 11, 26, 1, 28, 1202, 41, 12, 1201,
	55, 1200, 1198, 1189, 1185, 32, 1184, 69, 1183, 52,
	71, 1182, 54, 14, 48, 1181, 1180, 77, 87, 82,
	90, 1179, 72, 1178, 1177, 154, 1176, 1173, 1172, 852,
	1171, 404, 382, 1170, 57, 1169, 1168, 35, 0, 4,
	18, 34, 1167, 53, 1094, 39, 13, 1166, 1164, 260,
	33, 79, 30, 1163, 1162, 1161, 1155, 1153, 1151, 1149,
	31, 1146, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137,
	1136, 1134, 1131, 1130, 1127, 1126, 1118, 1114, 1109, 1106,
	1105, 1103, 1101, 1099, 1098, 1089, 1087, 1085, 1082, 20,
	1081, 1078, 1064, 21, 59, 24, 60, 1059, 1058, 1057,
	76, 16, 1056, 1055, 1054, 1053, 61, 44, 1051, 78,
	46, 47, 1050, 1049, 1048, 73, 10, 8, 1043, 9,
	1042, 1041, 5, 7, 1034, 1033, 1029, 1028, 1027, 1026,
	1025, 2, 1024, 1022, 65, 1021, 1020, 62, 3, 1019,
	1011, 1009, 1008, 50, 84, 1007, 126,
}
var yyR1 = [...]int{

	0, 231, 232, 232, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 229,
	229, 228, 155, 155, 22, 22, 22, 22, 22, 230,
	230, 230, 230, 230, 230, 220, 220, 221, 221, 215,
	213, 213, 210, 210, 217, 217, 208, 208, 214, 214,
	211, 211, 209, 209, 216, 216, 225, 225, 226, 226,
	227, 227, 186, 186, 185, 185, 184, 184, 187, 187,
	187, 25, 201, 203, 203, 204, 204, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 157, 159, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 172, 173, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 175, 175, 176, 176, 177, 177, 178, 178, 160,
	183, 183, 158, 154, 156, 202, 202, 202, 197, 133,
	133, 143, 143, 143, 143, 222, 222, 223, 223, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 146,
	146, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	145, 145, 145, 145, 145, 147, 147, 147, 147, 147,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 149, 149, 149, 149, 149,
	149, 149, 149, 196, 196, 150, 150, 190, 190, 191,
	191, 191, 188, 188, 189, 189, 192, 192, 151, 151,
	151, 151, 151, 151, 36, 35, 35, 35, 117, 117,
	117, 193, 179, 179, 179, 153, 180, 180, 181, 181,
	181, 182, 182, 182, 194, 194, 195, 195, 152, 198,
	198, 198, 198, 6, 6, 218, 218, 218, 218, 212,
	212, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 200, 200, 199, 199, 207, 207, 206, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	64, 64, 7, 26, 8, 9, 126, 126, 126, 10,
	11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 42, 42, 62, 62, 62, 59, 59, 60,
	60, 61, 61, 58, 58, 63, 63, 63, 30, 28,
	29, 29, 29, 29, 235, 31, 32, 32, 33, 33,
	33, 39, 39, 39, 37, 37, 38, 38, 45, 45,
	44, 44, 46, 46, 46, 46, 132, 132, 132, 131,
	131, 48, 48, 49, 49, 50, 50, 51, 51, 51,
	65, 52, 52, 52, 52, 138, 138, 137, 137, 137,
	136, 136, 53, 53, 53, 53, 54, 54, 54, 54,
	55, 55, 57, 57, 56, 56, 66, 66, 66, 66,
	67, 67, 68, 68, 47, 47, 47, 47, 47, 47,
	47, 120, 120, 70, 70, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 80, 80, 80, 80, 80,
	80, 71, 71, 71, 71, 71, 71, 71, 43, 43,
	81, 81, 81, 87, 82, 82, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 78, 78, 78, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 77, 77, 77, 77, 236, 236, 79, 79,
	79, 79, 40, 40, 40, 40, 40, 140, 140, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 91, 91, 41, 41, 89, 89, 90, 92,
	92, 88, 88, 88, 73, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 93, 93, 94, 94, 95, 95,
	96, 96, 97, 98, 98, 98, 99, 99, 99, 99,
	100, 100, 100, 72, 72, 72, 72, 72, 72, 101,
	101, 101, 101, 102, 102, 83, 83, 85, 85, 84,
	86, 103, 103, 104, 105, 105, 108, 108, 107, 107,
	107, 107, 107, 116, 116, 115, 115, 115, 106, 106,
	109, 109, 113, 113, 112, 114, 114, 114, 114, 111,
	111, 110, 110, 141, 141, 141, 118, 118, 121, 121,
	122, 122, 119, 119, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 124, 125, 125, 219,
	219, 129, 129, 130, 130, 134, 134, 135, 135, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 233, 234, 139,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 0, 1, 1, 4,
	2, 3, 2, 2, 4, 4, 3, 6, 3, 3,
	4, 4, 4, 6, 5, 5, 3, 3, 5, 6,
	7, 3, 3, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 0, 3, 1, 1, 1, 0, 2, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -231, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 42, -25,
	123, 124, 125, 146, 127, 139, 45, 62, 265, 141,
	272, 275, 276, 279, 278, 293, 38, 140, 144, 145,
	-233, 7, 249, 65, -232, 301, -95, 14, -33, 5,
	-31, -235, -31, -31, -31, -31, -201, 65, 241, -219,
	22, 29, 130, 31, -119, 134, 130, 131, 241, 130,
	130, 235, 123, 230, 267, -61, -62, 269, 270, 237,
	130, 271, 233, 268, 232, 229, 170, 68, 44, 131,
	26, 24, 130, -134, 68, -128, 255, 19, 201, 147,
	166, 256, 298, 77, 200, 203, 204, 142, 162, 206,
	205, 198, 156, 40, 196, 180, 273, 260, 239, 195,
	157, 22, 181, 185, 280, 24, 208, 179, 25, 26,
	257, 47, 183, 209, 51, 199, 210, 187, 186, 188,
	169, 17, 211, 212, 182, 184, 259, 144, 213, 50,
	192, 274, 276, 237, 197, 171, 160, 161, 146, 261,
	132, 163, 293, 294, 296, 295, 297, 299, 300, -139,
	-139, -126, 259, 203, -139, 277, -139, -139, 294, 296,
	295, 297, 298, 300, 265, -139, -139, -139, -139, -14,
	-99, 16, 15, -17, -15, -233, 6, 33, 34, -39,
	52, 53, -32, -119, -56, -134, 10, -105, -106, -108,
	277, -141, -107, 281, 282, 280, -130, -116, 283, -129,
	-127, 170, 167, 68, -128, 83, 35, 37, 190, 86,
	153, 118, 175, 15, 87, 164, 117, 238, 202, 250,
	123, 60, 242, 243, 240, 241, 230, 158, 41, 9,
	38, 140, 34, 111, 125, 90, 91, 267, 143, 36,
	141, 80, 18, 63, 10, 44, 12, 13, 135, 134,
	102, 131, 58, 7, 151, 152, 119, 39, 99, 54,
	32, 56, 100, 16, 244, 245, 43, 178, 174, 254,
	177, 150, 173, 113, 61, 48, 84, 78, 159, 81,
	64, 145, 82, 14, 59, 270, 137, 269, 155, 101,
	126, 249, 57, 6, 253, 42, 139, 149, 55, 130,
	231, 176, 148, 172, 89, 133, 79, 271, 5, 31,
	193, 8, 62, 136, 246, 247, 248, 46, 168, 165,
	268, 258, 88, 11, 194, -230, 280, 274, 266, 262,
	-202, -197, -133, 68, -128, -122, 135, 131, 131, 131,
	-122, 130, -121, 135, 68, -121, -56, -56, 234, 130,
	241, -139, -139, 231, -58, 238, 239, -60, 10, 102,
	-139, -139, -139, 237, -139, -139, -139, -139, -139, -139,
	-139, -56, 71, -139, -84, -233, -84, -139, -56, -139,
	-139, 299, 278, 279, -234, 67, -100, 18, 43, -47,
	-69, 84, -74, 41, 36, -73, -70, -88, -86, -87,
	118, 107, 108, 115, 85, 119, -78, -76, -77, -79,
	70, 69, 71, 72, 73, 74, 78, 79, 80, -129,
	-134, -84, -233, 56, 57, 250, 251, 254, 252, 87,
	46, 240, 248, 247, 246, 244, 245, 242, 243, 135,
	241, 113, 249, 68, -128, -96, -97, -47, -95, -14,
	-31, 48, -37, 34, 76, -57, 39, -56, 42, 120,
	-56, 66, -109, -112, -110, 284, 286, -107, 277, 92,
	-115, -129, 70, 41, -115, 42, 15, 15, 67, 66,
	-143, -146, -148, -147, -149, -144, -145, 164, 165, 118,
	168, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 42, 142, 160, 161, 162, 163, 181, 182, 183,
	184, 185, 186, 187, 188, 147, 166, 256, 148, 149,
	150, 151, 152, 153, 155, 156, 157, 158, 159, -134,
	84, 68, 68, 68, -56, -56, -64, -56, 36, 64,
	-134, -42, 10, -56, -134, -59, -60, -60, -56, -59,
	-139, -139, -139, -82, -47, -139, -124, 133, 35, -139,
	-139, -139, 8, 102, 83, 82, 99, 66, 17, -47,
	-71, 102, 84, 100, 101, 86, 104, 103, 114, 107,
	108, 109, 110, 111, 112, 113, 105, 106, 117, 92,
	93, 94, 95, 96, 97, 98, -120, -233, -87, -233,
	121, 122, -74, -74, -74, -74, -74, -74, -233, 120,
	-14, -233, -233, -233, -233, -233, -233, -233, -91, -47,
	-233, -236, -233, -236, -236, -236, -236, -236, -236, -236,
	-233, -233, -233, -233, 66, -98, 37, 38, -99, -234,
	-39, -75, -129, 71, 74, -38, 55, -72, 42, 46,
	-14, -233, -56, -103, -104, -88, -129, -134, -135, -134,
	-127, 167, 170, -68, 11, -108, -141, -111, 66, -113,
	66, 285, 287, 288, -109, 64, 81, -47, -180, 117,
	-233, 264, 23, -203, -204, -205, -158, -154, -156, -157,
	-159, -160, -161, -162, -163, -164, -165, -166, -167, -168,
	-169, -170, -171, -172, -173, -174, -175, -176, -177, -178,
	77, 273, -186, 190, 201, 45, 202, 203, 204, 131,
	206, 207, 208, 25, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 41, -197, -198, -199, -5, -4, 131,
	32, 29, 22, 21, -222, -223, -224, -192, -151, -193,
	-194, -195, -152, -36, -153, -181, -182, 78, 84, 41,
	190, 137, 32, 31, 77, 64, 117, 200, 197, -188,
	193, -150, 65, -150, -150, -150, -150, -179, 167, -179,
	-179, -179, 65, 65, -150, -150, -150, -190, 65, -190,
	-190, -191, 65, -191, -225, -226, -227, -186, 36, 64,
	64, 64, -123, 126, 273, 250, 128, 125, 129, 124,
	190, 167, 77, 41, 14, 261, 68, 66, -56, -99,
	236, -139, -139, -63, 100, 11, -134, -56, -59, -139,
	66, -234, -56, 50, -47, -47, -80, 78, 84, 79,
	80, -47, -47, -74, -81, -84, -87, 75, 102, 100,
	101, 86, -74, -74, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -140, 68, 70,
	68, -73, -73, -129, -45, 34, -44, -46, 109, -47,
	-134, -130, -135, -127, -234, -14, -44, -44, -47, -47,
	-44, -37, -89, -90, 88, -129, -234, -44, -45, -44,
	-44, -97, -100, -118, 18, 10, 46, 46, -44, -102,
	64, -103, -83, -85, -84, -233, -14, -101, -129, -68,
	66, 92, 120, -95, -47, -110, -112, -114, 289, 286,
	292, 68, -133, -233, -233, -205, -185, 92, -185, 117,
	-184, 170, 167, -185, -185, -185, -185, -185, 205, 205,
	-185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
	-185, -185, -185, -6, 68, -200, -199, 137, 31, 30,
	-224, 78, 70, 71, 72, 78, -35, -70, -117, 240,
	244, 245, 32, 32, 70, 8, -183, 68, 70, 195,
	196, 41, 41, 198, 199, -189, 194, 71, -179, -179,
	42, -196, 70, -196, 71, 71, -227, 117, -184, -56,
	-56, -56, -139, -124, -125, 131, 32, 92, 133, 138,
	138, 138, -56, -139, 70, 70, -47, -59, -68, -47,
	-139, 51, 78, 79, 80, -81, -74, -74, -74, -43,
	143, 83, -234, -234, -44, 66, -132, -131, 35, -129,
	70, 120, -233, 120, -234, -234, -234, 66, 136, 35,
	-234, -44, -92, -90, 90, -47, -234, -234, -234, -234,
	-234, -56, -48, 10, 40, -102, 66, -234, -234, -234,
	66, 120, -95, -104, -47, -130, -99, 286, 290, 291,
	-234, -133, -133, 70, -183, -185, -185, 42, 71, 71,
	71, 70, 70, -185, -185, 71, 70, 68, 71, 71,
	71, 71, 41, 70, 41, 196, 195, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 71, 41,
	71, 41, 71, 41, 68, -128, -2, -1, 136, -6,
	32, -200, 65, -35, 67, 68, 118, 67, 66, 67,
	66, 67, 66, -185, -185, -233, -233, -233, -56, -139,
	68, 167, -201, 68, -197, -63, -43, 83, -74, -74,
	-234, -46, -131, 109, -135, -45, -130, -142, 118, 164,
	142, 162, 158, 179, 169, 192, 160, 193, -140, -142,
	255, -95, 91, -47, 89, -68, -49, -50, -51, -52,
	-65, -87, -233, -56, 32, -85, 46, -14, -233, -129,
	-129, -99, -234, -234, -183, -183, 70, 70, 65, -3,
	23, 20, 28, 65, -2, -6, 67, 71, 70, 71,
	71, -221, 68, 41, -187, 68, 118, 41, -207, -206,
	-129, -207, -207, 42, -74, 120, -234, -234, -150, -150,
	-150, -191, -150, 152, -150, 152, -234, -234, -233, -41,
	253, -47, -93, 12, 66, -53, -54, -55, 54, 58,
	60, 55, 56, 57, 61, -138, 35, -49, -233, -137,
	-136, 35, -134, 70, 8, -83, -14, 120, -233, -155,
	263, -207, -207, 65, -2, 67, 67, 67, -234, 66,
	-150, -234, -234, 68, 109, -179, 68, -74, -234, 70,
	-94, 13, 15, -50, -51, -50, -51, 54, 54, 54,
	59, 54, 59, 54, -54, -134, -234, -66, 62, 134,
	63, -136, -103, -234, -129, -229, -228, 262, 71, 67,
	67, -207, 65, -210, -206, -208, -211, -40, 102, 258,
	-47, -82, 64, 64, 54, 54, 131, 131, 131, 66,
	-234, 68, -212, -212, 67, -207, -209, -217, -213, -215,
	25, 77, 136, -209, -214, -213, 258, -209, -213, -234,
	256, 61, 259, -47, -47, -233, -233, -233, -228, 46,
	-218, 25, -1, 77, 258, -212, 67, -216, 43, 19,
	-185, 70, -220, 23, 20, 27, 51, 257, 260, -67,
	-129, -67, -67, 102, -185, 70, 27, -212, -185, -185,
	71, 68, 51, -234, 66, -234, -234, -84, 71, 68,
	-221, -221, 258, -129, 259, 260,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 598, 0, 384, 384, 384, 384, 384, 0,
	689, 672, 0, 0, 0, 371, 0, 0, 896, 896,
	326, 896, 0, 896, 896, 0, 896, 896, 896, 896,
	0, 33, 34, 894, 1, 3, 606, 0, 0, 388,
	391, 386, 672, 0, 0, 0, 49, 0, 670, 0,
	0, 0, 670, 690, 0, 673, 668, 0, 668, 0,
	0, 0, 0, 896, 896, 0, 0, 896, 896, 896,
	0, 896, 896, 896, 896, 896, 896, 896, 372, 364,
	365, 366, 0, 379, 695, 696, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 324,
	325, 0, 327, 328, 330, 896, 332, 333, 0, 0,
	896, 0, 896, 896, 0, 380, 381, 382, 383, 27,
	610, 0, 0, 598, 29, 0, 384, 389, 390, 394,
	392, 393, 385, 0, 0, 444, 0, 37, 38, 634,
	0, 0, 636, 663, 664, -2, 0, 0, 0, 693,
	694, -2, 710, 691, 692, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 44, 50, 51, 0, 0,
	0, 165, 0, 169, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 323, 362, 0,
	0, 346, 347, 367, 0, 373, 374, 0, 369, 370,
	351, 352, 353, 367, 355, 356, 357, 358, 359, 360,
	361, 896, 896, 331, 896, 0, 896, 336, 684, 338,
	339, 896, 896, 896, 28, 895, 23, 0, 0, 607,
	454, 0, 459, 461, 0, 496, 497, 498, 499, 500,
	0, 0, 0, 0, 0, 0, 522, 523, 524, 525,
	584, 585, 586, 587, 588, 589, 590, 463, 464, 581,
	0, 630, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 546, 546, 546, 546, 546, 546, 546, 546, 0,
	0, 0, 0, -2, -2, 599, 600, 603, 606, 27,
	391, 0, 396, 395, 387, 0, 0, 443, 0, 0,
	452, 0, 648, 659, 652, 0, 0, 637, 0, 0,
	641, 645, 646, 647, 266, 644, 0, 0, -2, 291,
	175, 242, 172, 173, 174, 235, 190, 235, 235, 235,
	235, 262, 262, 262, 262, 218, 219, 220, 221, 222,
	0, 0, 205, 235, 235, 235, 209, 225, 226, 227,
	228, 229, 230, 231, 232, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 237, 237, 237, 239, 239, -2,
	0, 0, 0, 0, 91, 0, 317, 320, 669, 0,
	319, 606, 0, 896, 896, 375, 0, 0, 367, 896,
	378, 329, 334, 0, 494, 335, 0, 685, 686, 340,
	341, 342, 611, 0, 0, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	482, 483, 484, 485, 486, 487, 460, 0, 474, 0,
	0, 0, 516, 517, 518, 519, 520, 0, 398, 0,
	27, 0, 0, 0, 0, 0, 0, 394, 0, 573,
	0, 538, 0, 539, 540, 541, 542, 543, 544, 545,
	0, 398, 0, 0, 0, 602, 604, 605, 610, 30,
	394, 0, 591, 0, 0, 0, 397, 623, 0, 0,
	-2, 0, 442, 452, 631, 0, 581, 0, 445, 697,
	698, 710, 711, 598, 0, 635, 0, 650, 0, 651,
	0, 0, 661, 662, 649, 638, 639, 640, 642, 0,
	0, 0, 0, 92, -2, 95, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	84, 84, 0, 84, 84, 84, 84, 84, 0, 0,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 83, 166, 167, 283, 302, 0, 304,
	305, 300, -2, 292, 168, 176, 177, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 246, 0, 0,
	261, 0, 275, 277, 0, 0, 0, 0, 0, 244,
	243, 189, 0, 262, 262, 212, 213, 214, 0, 215,
	216, 217, 0, 0, 206, 207, 208, 200, 0, 201,
	202, 203, 0, 204, 45, -2, 78, 0, 671, 0,
	0, 0, 896, 684, 0, 681, 0, 679, 0, 674,
	675, 676, 677, 678, 680, 682, 683, 0, 318, 896,
	0, 344, 345, 348, 0, 0, 368, 367, 452, 354,
	0, 629, 896, 0, 455, 456, 458, 475, 0, 477,
	479, 608, 609, 465, 466, 490, 491, 492, 0, 0,
	0, 0, 488, 470, 0, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 515, 557, 558,
	0, 513, 514, 521, 0, 0, 399, 400, 402, 406,
	0, 582, 0, -2, 493, 27, 0, 0, 0, 0,
	0, 0, 579, 576, 0, 0, 547, 0, 0, 0,
	0, 601, 24, 0, 666, 667, 592, 593, 411, 31,
	0, 623, 613, 625, 627, 0, 27, 0, 619, 598,
	0, 0, 0, 606, 453, 660, 653, 654, 0, 0,
	658, 267, 0, 0, 0, 96, 0, 85, 0, 84,
	84, 86, 0, 0, 0, 0, 0, 0, 84, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 284, 283, 303, 0, 302, 293,
	178, 247, 248, 249, 250, 251, 252, 253, 255, 258,
	259, 260, 274, 276, 278, 0, 265, 160, 161, 268,
	269, 270, 271, 272, 273, 171, 245, 0, 210, 211,
	0, 0, 233, 0, 0, 0, 79, 84, 84, 0,
	0, 0, 309, 0, 896, 687, 688, 0, 0, 0,
	0, 0, 321, 343, 363, 376, 377, 375, 349, 495,
	337, 612, 476, 478, 480, 467, 488, 471, 0, 468,
	0, 0, 462, 526, 0, 0, 403, 407, 0, 409,
	410, 0, 398, 0, -2, 529, 530, 0, 0, 0,
	0, 598, 0, 577, 0, 0, 537, 548, 549, 550,
	551, 25, 452, 0, 0, 32, 0, 628, -2, 0,
	0, 0, 606, 632, 633, 582, 36, 655, 656, 657,
	52, 0, 0, 162, 163, 0, 0, 87, 121, 122,
	159, 124, 125, 0, 0, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 0, 296, 0, 0,
	295, 283, 0, 254, 236, 263, 264, 223, 0, 224,
	0, 240, 0, 0, 0, 0, 0, 0, 310, 311,
	312, 0, 314, 315, 316, 350, 469, 0, 489, 472,
	527, 401, 408, 404, 0, 0, 583, 0, 235, 235,
	562, 235, 239, 565, 235, 567, 235, 570, 0, 0,
	0, 574, 536, 580, 0, 594, 412, 413, 415, 416,
	417, 425, 0, 427, 0, 626, 0, -2, 0, 621,
	620, 35, 0, 42, 123, 164, 126, 127, 0, 294,
	297, 298, 299, 0, 0, 295, 256, 0, 234, 0,
	0, 80, 57, 58, 81, 88, 89, 90, 0, 306,
	235, 0, 0, 0, 473, 0, 528, 531, 559, 262,
	563, 564, 566, 568, 569, 571, 533, 532, 0, 0,
	0, 578, 596, 0, 0, 0, 0, 0, 432, 0,
	0, 435, 0, 0, 0, 0, 426, 0, 0, 446,
	428, 0, 430, 431, 0, 616, 27, 0, 0, 54,
	0, 0, 0, 0, 0, 257, 238, 241, 62, 0,
	308, 66, 70, 313, 405, 560, 561, 552, 535, 575,
	26, 0, 0, 414, 421, 0, 424, 433, 434, 436,
	0, 438, 0, 440, 441, 418, 419, 420, 0, 0,
	0, 429, 624, -2, 622, 0, 39, 0, 43, 289,
	289, 0, 0, 72, 307, 72, 72, 0, 0, 0,
	597, 595, 0, 0, 437, 439, 0, 0, 0, 0,
	53, 0, 279, 280, 289, 0, 46, 63, 64, 65,
	84, 0, 0, 47, 67, 68, 0, 48, 71, 534,
	0, 0, 0, 422, 423, 0, 0, 0, 40, 0,
	290, 84, 286, 0, 0, 281, 289, 73, 84, 84,
	0, 61, 59, 55, 56, 0, 553, 0, 556, 0,
	450, 0, 0, 0, 0, 287, 0, 282, 0, 0,
	60, 69, 554, 447, 0, 448, 449, 41, 285, 288,
	74, 75, 0, 451, 0, 555,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 112, 104, 3,
	65, 67, 109, 107, 66, 108, 120, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 301,
	93, 92, 94, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	86, 87, 88, 89, 90, 91, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1016
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1024
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1052
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1097
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1108
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1182
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1189
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1408
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1410
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1413
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1415
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1443
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1993
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2419
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2560
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2572
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2586
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2597
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2662
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2668
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2679
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2711
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2753
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2758
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2785
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2793
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2798
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2841
		{
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2843
		{
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2845
		{
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2881
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2935
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2946
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3026
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3046
		{
			yyVAL.str = "full "
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3062
		{
			yyVAL.showFilter = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3076
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3088
		{
			yyVAL.statement = &OtherRead{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3092
		{
			yyVAL.statement = &OtherRead{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3105
		{
			setAllowComments(yylex, true)
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3114
		{
			yyVAL.bytes2 = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.str = UnionStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.str = UnionAllStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.str = UnionDistinctStr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3137
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3141
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.str = SQLCacheStr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3150
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.str = DistinctStr
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3163
		{
			yyVAL.str = StraightJoinHint
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.selectExprs = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3317
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.str = StraightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.str = LeftJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.str = RightJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3359
		{
			yyVAL.str = NaturalJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3363
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3377
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3387
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.indexHints = nil
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3400
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3404
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3433
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3437
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3441
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3445
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3459
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3463
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3469
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3473
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3511
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3521
		{
			yyVAL.str = IsNullStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.str = IsNotNullStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.str = IsTrueStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3533
		{
			yyVAL.str = IsNotTrueStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3537
		{
			yyVAL.str = IsFalseStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3541
		{
			yyVAL.str = IsNotFalseStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.str = EqualStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.str = LessThanStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.str = GreaterThanStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3559
		{
			yyVAL.str = LessEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.str = GreaterEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3567
		{
			yyVAL.str = NotEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3571
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3576
		{
			yyVAL.expr = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3586
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3590
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3594
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3616
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3620
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3628
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3692
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3696
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3700
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3708
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3722
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3726
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3730
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3752
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3756
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3778
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3782
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 534:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3786
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 535:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3790
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3794
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3798
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.str = BooleanModeStr
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3881
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3885
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3889
		{
			yyVAL.str = QueryExpansionStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3899
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3925
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.expr = nil
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3964
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3969
		{
			yyVAL.str = string("")
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3973
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3979
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3983
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3989
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3994
		{
			yyVAL.expr = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3998
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4004
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4008
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4012
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4022
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4030
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4034
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4038
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4042
		{
			yyVAL.expr = &NullVal{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4048
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4066
		{
			yyVAL.exprs = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4070
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4075
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4079
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4084
		{
			yyVAL.orderBy = nil
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4088
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4094
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4098
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4104
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4109
		{
			yyVAL.str = AscScr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4113
		{
			yyVAL.str = AscScr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4117
		{
			yyVAL.str = DescScr
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4122
		{
			yyVAL.limit = nil
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4126
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4130
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4139
		{
			yyVAL.str = ""
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4143
		{
			yyVAL.str = ForUpdateStr
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4147
		{
			yyVAL.str = ShareModeStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4168
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4173
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4177
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4181
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.updateExprs = nil
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4215
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4219
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4225
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4229
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4241
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4251
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4255
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4261
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4267
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4277
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4281
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4288
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4292
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4296
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4300
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4304
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4311
		{
			yyVAL.bytes = []byte("charset")
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4317
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4321
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4325
		{
			yyVAL.expr = &Default{}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4335
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4341
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4345
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4351
		{
			yyVAL.str = ""
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4355
		{
			yyVAL.str = yyDollar[2].str
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.str = yyDollar[3].str
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4367
		{
			yyVAL.str = RepeatableRead
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4371
		{
			yyVAL.str = ReadCommitted
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4375
		{
			yyVAL.str = ReadUncommitted
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4379
		{
			yyVAL.str = Serializable
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4385
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4389
		{
			yyVAL.str = yyDollar[2].str
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4395
		{
			yyVAL.str = TxReadWrite
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4399
		{
			yyVAL.str = TxReadOnly
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.str = SessionStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4409
		{
			yyVAL.str = SessionStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4413
		{
			yyVAL.str = GlobalStr
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.byt = 0
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4426
		{
			yyVAL.byt = 1
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4431
		{
			yyVAL.byt = 0
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4435
		{
			yyVAL.byt = 1
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4440
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.str = IgnoreStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4450
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4454
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4458
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4466
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4470
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4474
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4478
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4482
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4486
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4491
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4495
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4499
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4505
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4509
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4514
		{
			yyVAL.str = IndexStr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4518
		{
			yyVAL.str = UniqueStr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4524
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4528
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4535
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4541
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4545
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4774
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4783
		{
			decNesting(yylex)
		}
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4788
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
