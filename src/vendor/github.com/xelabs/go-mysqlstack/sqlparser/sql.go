//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       IndexOptionList
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const FULLTEXT = 57363
const KEY_BLOCK_SIZE = 57364
const NGRAM = 57365
const PARSER = 57366
const SPATIAL = 57367
const UNIQUE = 57368
const KEY = 57369
const ALL = 57370
const DISTINCT = 57371
const AS = 57372
const EXISTS = 57373
const ASC = 57374
const DESC = 57375
const INTO = 57376
const DUPLICATE = 57377
const DEFAULT = 57378
const SET = 57379
const LOCK = 57380
const FULL = 57381
const CHECKSUM = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const JOIN = 57391
const STRAIGHT_JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const INNER = 57395
const OUTER = 57396
const CROSS = 57397
const NATURAL = 57398
const USE = 57399
const FORCE = 57400
const ON = 57401
const ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const MODIFY = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const USING = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const BIT = 57467
const TINYINT = 57468
const SMALLINT = 57469
const MEDIUMINT = 57470
const INT = 57471
const INTEGER = 57472
const BIGINT = 57473
const INTNUM = 57474
const REAL = 57475
const DOUBLE = 57476
const FLOAT_TYPE = 57477
const DECIMAL = 57478
const NUMERIC = 57479
const TIME = 57480
const TIMESTAMP = 57481
const DATETIME = 57482
const YEAR = 57483
const CHAR = 57484
const VARCHAR = 57485
const BOOL = 57486
const CHARACTER = 57487
const VARBINARY = 57488
const NCHAR = 57489
const CHARSET = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const NULLX = 57501
const AUTO_INCREMENT = 57502
const APPROXNUM = 57503
const SIGNED = 57504
const UNSIGNED = 57505
const ZEROFILL = 57506
const FIXED = 57507
const DYNAMIC = 57508
const STORAGE = 57509
const DISK = 57510
const MEMORY = 57511
const COLUMN_FORMAT = 57512
const AVG_ROW_LENGTH = 57513
const COMPRESSION = 57514
const CONNECTION = 57515
const DATA = 57516
const DIRECTORY = 57517
const DELAY_KEY_WRITE = 57518
const ENCRYPTION = 57519
const INSERT_METHOD = 57520
const MAX_ROWS = 57521
const MIN_ROWS = 57522
const PACK_KEYS = 57523
const PASSWORD = 57524
const ROW_FORMAT = 57525
const STATS_AUTO_RECALC = 57526
const STATS_PERSISTENT = 57527
const STATS_SAMPLE_PAGES = 57528
const TABLESPACE = 57529
const COMPRESSED = 57530
const REDUNDANT = 57531
const COMPACT = 57532
const TOKUDB_DEFAULT = 57533
const TOKUDB_FAST = 57534
const TOKUDB_SMALL = 57535
const TOKUDB_ZLIB = 57536
const TOKUDB_QUICKLZ = 57537
const TOKUDB_LZMA = 57538
const TOKUDB_SNAPPY = 57539
const TOKUDB_UNCOMPRESSED = 57540
const DATABASES = 57541
const TABLES = 57542
const WARNINGS = 57543
const VARIABLES = 57544
const EVENTS = 57545
const BINLOG = 57546
const GTID = 57547
const STATUS = 57548
const COLUMNS = 57549
const FIELDS = 57550
const CURRENT_TIMESTAMP = 57551
const DATABASE = 57552
const CURRENT_DATE = 57553
const CURRENT_TIME = 57554
const LOCALTIME = 57555
const LOCALTIMESTAMP = 57556
const UTC_DATE = 57557
const UTC_TIME = 57558
const UTC_TIMESTAMP = 57559
const REPLACE = 57560
const CONVERT = 57561
const CAST = 57562
const GROUP_CONCAT = 57563
const SEPARATOR = 57564
const MATCH = 57565
const AGAINST = 57566
const BOOLEAN = 57567
const LANGUAGE = 57568
const WITH = 57569
const QUERY = 57570
const EXPANSION = 57571
const UNUSED = 57572
const PARTITION = 57573
const PARTITIONS = 57574
const HASH = 57575
const LIST = 57576
const XA = 57577
const DISTRIBUTED = 57578
const ENGINES = 57579
const VERSIONS = 57580
const PROCESSLIST = 57581
const QUERYZ = 57582
const TXNZ = 57583
const KILL = 57584
const ENGINE = 57585
const SINGLE = 57586
const BEGIN = 57587
const START = 57588
const TRANSACTION = 57589
const COMMIT = 57590
const ROLLBACK = 57591
const GLOBAL = 57592
const SESSION = 57593
const NAMES = 57594
const RADON = 57595
const ATTACH = 57596
const ATTACHLIST = 57597
const DETACH = 57598
const RESHARD = 57599
const CLEANUP = 57600

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"NGRAM",
	"PARSER",
	"SPATIAL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4431

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 198,
	87, 780,
	-2, 40,
	-1, 203,
	87, 645,
	-2, 594,
	-1, 435,
	115, 629,
	-2, 625,
	-1, 436,
	115, 630,
	-2, 626,
	-1, 463,
	112, 81,
	162, 81,
	165, 81,
	-2, 92,
	-1, 502,
	1, 75,
	276, 75,
	-2, 81,
	-1, 619,
	5, 27,
	-2, 570,
	-1, 642,
	112, 81,
	162, 81,
	165, 81,
	-2, 93,
	-1, 754,
	1, 76,
	276, 76,
	-2, 81,
	-1, 841,
	115, 632,
	-2, 628,
	-1, 998,
	5, 28,
	-2, 449,
	-1, 1022,
	5, 28,
	-2, 571,
	-1, 1149,
	5, 27,
	-2, 573,
	-1, 1278,
	5, 28,
	-2, 574,
}

const yyPrivate = 57344

const yyLast = 8557

var yyAct = [...]int{

	436, 1175, 1350, 1156, 1319, 1283, 413, 888, 1312, 1294,
	1164, 1293, 411, 525, 622, 731, 1208, 389, 1287, 1139,
	737, 932, 1222, 837, 871, 870, 632, 825, 1140, 177,
	1219, 1119, 202, 840, 835, 199, 983, 66, 99, 832,
	623, 750, 331, 528, 56, 802, 991, 867, 782, 671,
	851, 706, 892, 579, 3, 755, 378, 438, 444, 518,
	196, 55, 643, 332, 99, 699, 207, 387, 334, 746,
	164, 1231, 186, 167, 169, 168, 170, 171, 201, 328,
	99, 99, 638, 639, 329, 1284, 1370, 391, 1349, 1314,
	161, 1369, 1329, 1367, 1348, 1328, 1132, 99, 1202, 360,
	1342, 1085, 76, 77, 176, 1086, 1087, 414, 50, 349,
	779, 70, 348, 194, 353, 71, 73, 923, 924, 925,
	834, 355, 356, 773, 901, 926, 1296, 546, 545, 555,
	556, 548, 549, 550, 551, 552, 553, 554, 547, 1315,
	900, 557, 938, 942, 730, 772, 1251, 684, 937, 1104,
	738, 60, 1197, 1195, 966, 1314, 952, 530, 50, 965,
	964, 694, 1273, 1275, 343, 676, 182, 590, 336, 75,
	963, 99, 775, 891, 370, 372, 1120, 62, 63, 64,
	65, 771, 1306, 703, 961, 703, 95, 530, 1305, 557,
	1304, 99, 339, 341, 99, 338, 207, 669, 337, 96,
	1122, 207, 381, 439, 78, 1315, 894, 80, 201, 893,
	94, 350, 159, 457, 79, 72, 1124, 1229, 1128, 917,
	1123, 1181, 1121, 894, 535, 440, 893, 1126, 768, 766,
	762, 1187, 765, 767, 1274, 1025, 441, 1125, 569, 570,
	637, 997, 1127, 1129, 995, 738, 880, 578, 1179, 451,
	1163, 680, 160, 1055, 163, 529, 165, 166, 1089, 172,
	173, 174, 175, 547, 1316, 82, 557, 1354, 532, 162,
	889, 770, 89, 1297, 384, 371, 371, 533, 927, 962,
	784, 1327, 702, 960, 702, 529, 769, 879, 455, 1134,
	50, 939, 940, 535, 935, 936, 351, 352, 1180, 357,
	358, 359, 674, 361, 362, 363, 364, 365, 1090, 454,
	852, 1323, 1003, 675, 677, 678, 679, 68, 681, 682,
	683, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	1341, 446, 852, 809, 1008, 442, 99, 503, 1001, 922,
	376, 99, 99, 99, 1314, 764, 99, 807, 808, 806,
	99, 99, 1355, 1241, 534, 533, 774, 1242, 1281, 534,
	533, 534, 533, 83, 783, 93, 91, 342, 81, 763,
	88, 535, 1174, 53, 367, 335, 535, 369, 535, 1339,
	534, 533, 373, 805, 375, 670, 673, 1136, 605, 606,
	1173, 933, 672, 934, 1315, 526, 826, 535, 827, 1057,
	1056, 84, 92, 86, 87, 90, 1051, 538, 1002, 555,
	556, 548, 549, 550, 551, 552, 553, 554, 547, 1050,
	521, 557, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 534, 533, 795, 797, 798, 526, 1049,
	1046, 796, 1041, 1040, 207, 588, 345, 1074, 340, 99,
	535, 1072, 99, 1070, 207, 1039, 611, 950, 949, 723,
	722, 1053, 943, 625, 1254, 334, 201, 368, 624, 719,
	607, 976, 977, 978, 567, 1172, 377, 1073, 1162, 635,
	1291, 1071, 1309, 1069, 629, 627, 1161, 733, 734, 735,
	736, 1052, 725, 566, 568, 1054, 1047, 739, 740, 741,
	1043, 619, 743, 744, 745, 724, 717, 695, 1042, 1034,
	970, 969, 718, 99, 634, 609, 948, 930, 1248, 577,
	99, 99, 580, 581, 582, 583, 584, 585, 586, 99,
	589, 591, 591, 591, 591, 591, 591, 591, 591, 599,
	600, 601, 602, 752, 778, 726, 1106, 803, 1361, 377,
	1244, 1177, 756, 1307, 377, 620, 1103, 792, 793, 1082,
	799, 800, 537, 1234, 1290, 721, 1234, 1289, 748, 749,
	640, 403, 402, 404, 405, 406, 407, 207, 1176, 522,
	408, 523, 1081, 524, 1078, 527, 1234, 1286, 1243, 831,
	207, 201, 592, 593, 594, 595, 596, 597, 598, 1206,
	377, 57, 853, 1048, 526, 918, 536, 846, 847, 1088,
	720, 841, 1234, 377, 839, 1234, 1238, 728, 1234, 1237,
	727, 207, 534, 533, 883, 872, 828, 439, 804, 506,
	625, 505, 869, 876, 843, 624, 504, 829, 830, 535,
	856, 334, 1234, 1233, 788, 849, 989, 377, 989, 877,
	550, 551, 552, 553, 554, 547, 344, 882, 557, 1095,
	1094, 859, 1092, 1091, 860, 1024, 377, 571, 572, 573,
	574, 575, 576, 74, 874, 878, 50, 881, 890, 788,
	377, 1017, 895, 896, 897, 898, 899, 1109, 580, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 844, 845, 886, 887, 848, 546, 545, 555,
	556, 548, 549, 550, 551, 552, 553, 554, 547, 1020,
	855, 557, 857, 858, 464, 463, 873, 24, 50, 780,
	781, 868, 989, 878, 787, 866, 190, 1206, 548, 549,
	550, 551, 552, 553, 554, 547, 884, 885, 557, 633,
	1093, 24, 989, 776, 944, 945, 453, 921, 617, 99,
	99, 99, 618, 985, 916, 603, 919, 920, 1210, 1213,
	1214, 1215, 1211, 53, 1212, 1216, 732, 99, 1301, 183,
	24, 53, 608, 546, 545, 555, 556, 548, 549, 550,
	551, 552, 553, 554, 547, 751, 1171, 557, 1300, 878,
	1170, 1169, 1166, 67, 756, 53, 958, 1080, 971, 953,
	951, 1079, 973, 803, 801, 1148, 1077, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 747, 53, 53, 972, 742, 868, 207, 1210,
	1213, 1214, 1215, 1211, 760, 1212, 1216, 759, 758, 1266,
	993, 512, 979, 1264, 1267, 22, 615, 1268, 1265, 1214,
	1215, 1303, 99, 1302, 1263, 1262, 789, 187, 188, 1359,
	1347, 975, 791, 445, 1337, 379, 1009, 865, 864, 1345,
	1185, 757, 1038, 946, 460, 334, 334, 443, 450, 694,
	1018, 625, 511, 201, 804, 380, 624, 526, 1344, 1036,
	1037, 1007, 1218, 1028, 184, 185, 1146, 445, 1044, 1045,
	929, 1030, 1035, 841, 181, 1076, 1029, 1019, 928, 1027,
	842, 915, 1026, 1346, 1358, 178, 412, 1257, 462, 461,
	179, 57, 854, 545, 555, 556, 548, 549, 550, 551,
	552, 553, 554, 547, 863, 1256, 557, 996, 1031, 1032,
	1205, 633, 862, 519, 988, 520, 515, 193, 1226, 99,
	1096, 1097, 931, 531, 97, 59, 61, 334, 54, 1,
	1005, 1282, 754, 753, 957, 546, 545, 555, 556, 548,
	549, 550, 551, 552, 553, 554, 547, 705, 704, 557,
	192, 968, 1340, 207, 69, 1311, 1343, 1313, 207, 1321,
	642, 641, 1105, 974, 330, 993, 192, 192, 201, 1107,
	201, 696, 947, 711, 710, 984, 709, 1108, 99, 707,
	941, 729, 1178, 192, 1113, 207, 207, 872, 841, 1116,
	1130, 839, 1135, 1118, 207, 1131, 1117, 1151, 1152, 1114,
	716, 715, 636, 1137, 668, 1147, 201, 667, 1138, 666,
	1133, 665, 664, 663, 662, 661, 1153, 660, 1159, 1160,
	659, 658, 1098, 1099, 1100, 657, 656, 655, 654, 1158,
	653, 652, 651, 650, 649, 644, 648, 1149, 207, 647,
	207, 207, 980, 981, 982, 646, 1230, 645, 714, 712,
	1165, 708, 1165, 1165, 467, 468, 466, 192, 470, 207,
	207, 207, 469, 465, 195, 1143, 1217, 1221, 990, 959,
	761, 1165, 1165, 1165, 565, 861, 1084, 192, 200, 456,
	192, 875, 604, 437, 1255, 1144, 1204, 1006, 873, 587,
	850, 1150, 390, 794, 401, 398, 1190, 1191, 400, 1192,
	399, 1157, 1194, 610, 1196, 99, 99, 616, 539, 388,
	382, 1272, 1142, 509, 354, 872, 85, 447, 1209, 1207,
	1203, 1141, 1016, 514, 1201, 1295, 1193, 207, 614, 986,
	207, 207, 1102, 987, 1227, 713, 1083, 25, 58, 1165,
	189, 1235, 1165, 1165, 998, 999, 1000, 14, 207, 1004,
	21, 15, 13, 12, 1010, 29, 1011, 1012, 1013, 1014,
	201, 10, 9, 8, 1228, 7, 6, 99, 99, 99,
	99, 5, 1250, 4, 1021, 1022, 1023, 180, 99, 23,
	2, 99, 20, 1118, 99, 19, 1258, 1033, 1260, 18,
	207, 207, 1143, 1269, 1280, 207, 1259, 17, 1261, 625,
	1200, 1277, 1279, 201, 624, 1285, 1276, 1165, 16, 11,
	0, 0, 1220, 0, 0, 0, 873, 1288, 50, 1110,
	1111, 0, 502, 1232, 1292, 0, 1158, 192, 192, 192,
	0, 1299, 513, 0, 843, 0, 192, 192, 0, 0,
	1298, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 0, 0, 0, 1143, 1143, 1143, 1143, 1320, 1324,
	1318, 1317, 1322, 1325, 0, 1310, 0, 0, 1143, 207,
	0, 0, 1336, 1335, 1144, 1144, 1144, 1144, 0, 0,
	0, 201, 1338, 0, 1330, 1331, 1322, 1325, 1220, 1112,
	1167, 1168, 0, 207, 207, 207, 1352, 1353, 1157, 0,
	0, 0, 0, 0, 1158, 1351, 1351, 1351, 0, 1182,
	1183, 1184, 1356, 1357, 191, 0, 0, 0, 1365, 1366,
	0, 1364, 207, 0, 0, 0, 0, 0, 0, 0,
	346, 347, 1154, 1155, 1368, 192, 0, 626, 628, 0,
	0, 0, 0, 0, 1186, 0, 0, 366, 546, 545,
	555, 556, 548, 549, 550, 551, 552, 553, 554, 547,
	0, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1333, 1334, 0, 1157, 1236, 0, 0,
	1239, 1240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 192, 192, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 1188, 0,
	1189, 374, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 1198, 1199, 0, 0, 1252, 0, 0, 0, 0,
	0, 449, 0, 0, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 628, 0, 0, 838, 838,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1245, 1246, 1247, 838, 838, 838, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 1253, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 544, 0, 0, 0,
	1271, 0, 558, 559, 560, 561, 562, 563, 564, 1278,
	542, 543, 540, 546, 545, 555, 556, 548, 549, 550,
	551, 552, 553, 554, 547, 0, 0, 557, 136, 0,
	101, 0, 124, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 142, 132, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 507, 508, 510, 206, 0, 1326, 0, 0, 0,
	516, 517, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	545, 555, 556, 548, 549, 550, 551, 552, 553, 554,
	547, 0, 0, 557, 0, 192, 192, 192, 0, 0,
	0, 1360, 0, 1362, 1363, 0, 0, 0, 152, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 110, 0,
	140, 0, 150, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 123, 0, 0, 148, 149, 111, 153,
	0, 0, 104, 0, 0, 135, 0, 147, 0, 621,
	0, 0, 0, 0, 0, 127, 118, 0, 0, 0,
	143, 0, 0, 122, 117, 146, 114, 133, 107, 102,
	838, 108, 109, 113, 112, 0, 126, 131, 134, 137,
	138, 141, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 145, 0, 121, 0, 0, 0,
	0, 0, 0, 777, 0, 626, 0, 628, 0, 0,
	785, 786, 100, 0, 129, 0, 139, 120, 151, 790,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 144, 0, 0, 136, 0, 101, 125, 124,
	128, 154, 155, 157, 156, 158, 105, 0, 992, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 142, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 994, 0, 192, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 535, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 628, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 140, 0, 150,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	123, 0, 0, 148, 149, 111, 153, 0, 0, 104,
	0, 0, 135, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 127, 118, 0, 0, 0, 143, 0, 0,
	122, 117, 146, 114, 133, 107, 102, 0, 108, 109,
	113, 112, 0, 126, 131, 134, 137, 138, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 121, 0, 0, 0, 0, 0, 954,
	955, 956, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 129, 0, 139, 120, 151, 0, 967, 0, 0,
	473, 192, 1224, 0, 0, 0, 0, 0, 119, 144,
	0, 0, 0, 0, 0, 125, 0, 0, 154, 155,
	157, 156, 158, 105, 485, 0, 0, 0, 0, 490,
	491, 492, 493, 494, 495, 496, 0, 497, 498, 499,
	500, 501, 486, 487, 488, 489, 471, 472, 0, 0,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 192, 192, 192, 192, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 192, 0, 0,
	1224, 0, 1015, 626, 311, 296, 256, 314, 232, 247,
	326, 249, 250, 286, 216, 266, 136, 245, 101, 0,
	124, 128, 0, 0, 0, 312, 263, 0, 235, 209,
	242, 210, 233, 260, 116, 231, 298, 269, 248, 0,
	320, 130, 278, 0, 142, 132, 0, 0, 262, 301,
	264, 295, 255, 287, 224, 277, 315, 246, 283, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 280, 309, 244, 282, 285, 208, 279, 0,
	212, 217, 325, 307, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 261, 265, 292, 253, 0, 0, 1101,
	0, 0, 0, 0, 0, 236, 0, 276, 0, 0,
	0, 219, 214, 259, 0, 0, 0, 223, 0, 237,
	293, 0, 0, 0, 302, 254, 152, 308, 252, 251,
	316, 289, 0, 299, 234, 243, 110, 241, 140, 284,
	150, 103, 305, 300, 274, 257, 258, 213, 0, 291,
	115, 123, 230, 281, 148, 149, 111, 153, 218, 322,
	104, 204, 321, 135, 203, 147, 306, 275, 271, 215,
	304, 273, 270, 127, 118, 0, 211, 0, 143, 313,
	327, 122, 117, 146, 114, 133, 107, 102, 221, 108,
	109, 113, 112, 0, 126, 131, 134, 137, 138, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 229, 303, 0, 0, 0,
	0, 0, 145, 220, 121, 227, 228, 225, 226, 267,
	268, 317, 318, 319, 294, 222, 0, 0, 297, 272,
	100, 0, 129, 324, 139, 120, 151, 0, 0, 0,
	0, 0, 0, 240, 323, 290, 288, 310, 0, 119,
	144, 0, 0, 0, 0, 0, 198, 197, 205, 154,
	155, 157, 156, 158, 105, 311, 296, 256, 314, 232,
	247, 326, 249, 250, 286, 216, 266, 136, 245, 101,
	0, 124, 128, 0, 0, 0, 312, 263, 0, 235,
	209, 242, 210, 233, 260, 116, 231, 298, 269, 248,
	0, 320, 130, 278, 0, 142, 132, 0, 0, 262,
	301, 264, 295, 255, 287, 224, 277, 315, 246, 283,
	53, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 280, 309, 244, 282, 285, 208, 279,
	0, 212, 217, 325, 307, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 261, 265, 292, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 276, 0,
	0, 0, 219, 214, 259, 0, 0, 0, 223, 0,
	237, 293, 0, 0, 0, 302, 254, 152, 308, 252,
	251, 316, 289, 0, 299, 234, 243, 110, 241, 140,
	284, 150, 103, 305, 300, 274, 257, 258, 213, 0,
	291, 115, 123, 230, 281, 148, 149, 111, 153, 218,
	322, 104, 630, 321, 135, 631, 147, 306, 275, 271,
	215, 304, 273, 270, 127, 118, 0, 211, 0, 143,
	313, 327, 122, 117, 146, 114, 133, 107, 102, 221,
	108, 109, 113, 112, 0, 126, 131, 134, 137, 138,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 303, 0, 0,
	0, 0, 0, 145, 220, 121, 227, 228, 225, 226,
	267, 268, 317, 318, 319, 294, 222, 0, 0, 297,
	272, 100, 0, 129, 324, 139, 120, 151, 0, 0,
	0, 0, 0, 0, 240, 323, 290, 288, 310, 0,
	119, 144, 0, 0, 0, 0, 0, 125, 0, 0,
	154, 155, 157, 156, 158, 105, 311, 296, 256, 314,
	232, 247, 326, 249, 250, 286, 216, 266, 136, 245,
	101, 0, 124, 128, 0, 0, 0, 312, 263, 0,
	235, 209, 242, 210, 233, 260, 116, 231, 298, 269,
	248, 0, 320, 130, 278, 0, 142, 132, 0, 0,
	262, 301, 264, 295, 255, 287, 224, 277, 315, 246,
	283, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 280, 309, 244, 282, 285, 208,
	279, 0, 212, 217, 325, 307, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 261, 265, 292, 253, 0,
	0, 0, 0, 0, 0, 1249, 0, 236, 0, 276,
	0, 0, 0, 219, 214, 259, 0, 0, 0, 223,
	0, 237, 293, 0, 0, 0, 302, 254, 152, 308,
	252, 251, 316, 289, 0, 299, 234, 243, 110, 241,
	140, 284, 150, 103, 305, 300, 274, 257, 258, 213,
	0, 291, 115, 123, 230, 281, 148, 149, 111, 153,
	218, 322, 104, 630, 321, 135, 631, 147, 306, 275,
	271, 215, 304, 273, 270, 127, 118, 0, 211, 0,
	143, 313, 327, 122, 117, 146, 114, 133, 107, 102,
	221, 108, 109, 113, 112, 0, 126, 131, 134, 137,
	138, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 303, 0,
	0, 0, 0, 0, 145, 220, 121, 227, 228, 225,
	226, 267, 268, 317, 318, 319, 294, 222, 0, 0,
	297, 272, 100, 0, 129, 324, 139, 120, 151, 0,
	0, 0, 0, 0, 0, 240, 323, 290, 288, 310,
	0, 119, 144, 0, 0, 0, 0, 0, 125, 0,
	0, 154, 155, 157, 156, 158, 105, 311, 296, 256,
	314, 232, 247, 326, 249, 250, 286, 216, 266, 136,
	245, 101, 0, 124, 128, 0, 0, 0, 312, 263,
	0, 235, 209, 242, 210, 233, 260, 116, 231, 298,
	269, 248, 0, 320, 130, 278, 0, 142, 132, 0,
	0, 262, 301, 264, 295, 255, 287, 224, 277, 315,
	246, 283, 0, 0, 0, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 280, 309, 244, 282, 285,
	208, 279, 0, 212, 217, 325, 307, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 1115, 0, 236, 0,
	276, 0, 0, 0, 219, 214, 259, 0, 0, 0,
	223, 0, 237, 293, 0, 0, 0, 302, 254, 152,
	308, 252, 251, 316, 289, 0, 299, 234, 243, 110,
	241, 140, 284, 150, 103, 305, 300, 274, 257, 258,
	213, 0, 291, 115, 123, 230, 281, 148, 149, 111,
	153, 218, 322, 104, 630, 321, 135, 631, 147, 306,
	275, 271, 215, 304, 273, 270, 127, 118, 0, 211,
	0, 143, 313, 327, 122, 117, 146, 114, 133, 107,
	102, 221, 108, 109, 113, 112, 0, 126, 131, 134,
	137, 138, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 303,
	0, 0, 0, 0, 0, 145, 220, 121, 227, 228,
	225, 226, 267, 268, 317, 318, 319, 294, 222, 0,
	0, 297, 272, 100, 0, 129, 324, 139, 120, 151,
	0, 0, 0, 0, 0, 0, 240, 323, 290, 288,
	310, 0, 119, 144, 0, 0, 0, 0, 0, 125,
	0, 0, 154, 155, 157, 156, 158, 105, 311, 296,
	256, 314, 232, 247, 326, 249, 250, 286, 216, 266,
	136, 245, 101, 0, 124, 128, 0, 0, 0, 312,
	263, 0, 235, 209, 242, 210, 233, 260, 116, 231,
	298, 269, 248, 0, 320, 130, 278, 0, 142, 132,
	0, 0, 262, 301, 264, 295, 255, 287, 224, 277,
	315, 246, 283, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 280, 309, 244, 282,
	285, 208, 279, 0, 212, 217, 325, 307, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 261, 265, 292,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 276, 0, 0, 0, 219, 214, 259, 0, 0,
	0, 223, 0, 237, 293, 0, 0, 0, 302, 254,
	152, 308, 252, 251, 316, 289, 0, 299, 234, 243,
	110, 241, 140, 284, 150, 103, 305, 300, 274, 257,
	258, 213, 0, 291, 115, 123, 230, 281, 148, 149,
	111, 153, 218, 322, 104, 204, 321, 135, 203, 147,
	306, 275, 271, 215, 304, 273, 270, 127, 118, 0,
	211, 0, 143, 313, 327, 122, 117, 146, 114, 133,
	107, 102, 221, 108, 109, 113, 112, 0, 126, 131,
	134, 137, 138, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	303, 0, 0, 0, 0, 0, 145, 220, 121, 227,
	228, 225, 226, 267, 268, 317, 318, 319, 294, 222,
	0, 0, 297, 272, 100, 0, 129, 324, 139, 120,
	151, 0, 0, 0, 0, 0, 0, 240, 323, 290,
	288, 310, 0, 119, 144, 0, 0, 0, 0, 0,
	125, 0, 205, 154, 155, 157, 156, 158, 105, 311,
	296, 256, 314, 232, 247, 326, 249, 250, 286, 216,
	266, 136, 245, 101, 0, 124, 128, 0, 0, 0,
	312, 263, 0, 235, 209, 242, 210, 233, 260, 116,
	231, 298, 269, 248, 0, 320, 130, 278, 0, 142,
	132, 0, 0, 262, 301, 264, 295, 255, 287, 224,
	277, 315, 246, 283, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 280, 309, 244,
	282, 285, 208, 279, 0, 212, 217, 325, 307, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 261, 265,
	292, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 276, 0, 0, 0, 219, 214, 259, 0,
	0, 0, 223, 0, 237, 293, 0, 0, 0, 302,
	254, 152, 308, 252, 251, 316, 289, 0, 299, 234,
	243, 110, 241, 140, 284, 150, 103, 305, 300, 274,
	257, 258, 213, 0, 291, 115, 123, 230, 281, 148,
	149, 111, 153, 218, 322, 104, 630, 321, 135, 631,
	147, 306, 275, 271, 215, 304, 273, 270, 127, 118,
	0, 211, 0, 143, 313, 327, 122, 117, 146, 114,
	133, 107, 102, 221, 108, 109, 113, 112, 0, 126,
	131, 134, 137, 138, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 303, 0, 0, 0, 0, 0, 145, 220, 121,
	227, 228, 225, 226, 267, 268, 317, 318, 319, 294,
	222, 0, 0, 297, 272, 100, 0, 129, 324, 139,
	120, 151, 0, 0, 0, 0, 0, 0, 240, 323,
	290, 288, 310, 0, 119, 144, 0, 0, 0, 0,
	0, 125, 0, 0, 154, 155, 157, 156, 158, 105,
	311, 296, 256, 314, 232, 247, 326, 249, 250, 286,
	216, 266, 136, 245, 101, 0, 124, 128, 0, 0,
	0, 312, 263, 0, 235, 209, 242, 210, 233, 260,
	116, 231, 298, 269, 248, 0, 320, 130, 278, 0,
	142, 132, 0, 0, 262, 301, 264, 295, 255, 287,
	224, 277, 315, 246, 283, 0, 0, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 280, 309,
	244, 282, 285, 208, 279, 0, 212, 217, 325, 307,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 261,
	265, 292, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 276, 0, 0, 0, 219, 214, 259,
	0, 0, 0, 223, 0, 237, 293, 0, 0, 0,
	302, 254, 152, 308, 252, 251, 316, 289, 0, 299,
	234, 243, 110, 241, 140, 284, 150, 103, 305, 300,
	274, 257, 258, 213, 0, 291, 115, 123, 230, 281,
	148, 149, 111, 153, 218, 322, 104, 630, 321, 135,
	631, 147, 306, 275, 271, 215, 304, 273, 270, 127,
	118, 0, 211, 0, 143, 313, 327, 122, 117, 146,
	114, 133, 107, 102, 221, 108, 109, 113, 112, 0,
	126, 131, 134, 137, 138, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 303, 0, 0, 0, 0, 0, 145, 220,
	121, 227, 228, 225, 226, 267, 268, 317, 318, 319,
	294, 222, 0, 0, 297, 272, 100, 0, 129, 324,
	139, 120, 151, 0, 0, 0, 0, 0, 0, 240,
	323, 290, 288, 310, 0, 119, 144, 0, 0, 0,
	0, 0, 125, 0, 0, 154, 155, 157, 156, 158,
	105, 311, 296, 256, 314, 232, 247, 326, 249, 250,
	286, 216, 266, 136, 245, 101, 0, 124, 128, 0,
	0, 0, 312, 263, 0, 235, 209, 242, 210, 233,
	260, 116, 231, 298, 269, 248, 0, 320, 130, 278,
	0, 142, 132, 0, 0, 262, 301, 264, 295, 255,
	287, 224, 277, 315, 246, 283, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 280,
	309, 244, 282, 285, 208, 279, 0, 212, 217, 325,
	307, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	261, 265, 292, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 276, 0, 0, 0, 219, 214,
	259, 0, 0, 0, 223, 0, 237, 293, 0, 0,
	0, 302, 254, 152, 308, 252, 251, 316, 289, 0,
	299, 234, 243, 110, 241, 140, 284, 150, 103, 305,
	300, 274, 257, 258, 213, 0, 291, 115, 123, 230,
	281, 148, 149, 111, 153, 218, 322, 104, 630, 321,
	135, 631, 147, 306, 275, 271, 215, 304, 273, 270,
	127, 118, 0, 211, 0, 143, 313, 327, 122, 117,
	146, 114, 133, 107, 102, 221, 108, 109, 113, 112,
	0, 126, 131, 134, 137, 138, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 303, 0, 0, 0, 0, 0, 145,
	220, 121, 227, 228, 225, 226, 267, 268, 317, 318,
	319, 294, 222, 0, 0, 297, 272, 100, 0, 129,
	324, 139, 120, 151, 0, 0, 0, 0, 0, 0,
	240, 323, 290, 288, 310, 0, 119, 144, 0, 0,
	136, 0, 101, 125, 124, 128, 154, 155, 157, 156,
	158, 105, 833, 0, 386, 0, 0, 0, 116, 385,
	0, 0, 0, 0, 422, 130, 0, 0, 142, 132,
	0, 0, 0, 0, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 435, 403, 402, 404,
	405, 406, 407, 0, 0, 106, 408, 409, 410, 0,
	0, 0, 383, 396, 0, 421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 394, 836, 0, 0,
	0, 433, 0, 395, 0, 0, 392, 397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 431, 0, 0, 0, 0, 0, 0,
	110, 0, 140, 0, 150, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 123, 0, 0, 148, 149,
	111, 153, 0, 0, 104, 0, 0, 135, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 127, 118, 0,
	0, 0, 143, 0, 0, 122, 117, 146, 114, 133,
	107, 102, 0, 108, 109, 113, 112, 0, 126, 131,
	134, 137, 138, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 121, 423,
	432, 429, 430, 427, 428, 426, 425, 424, 434, 417,
	418, 420, 0, 419, 100, 0, 129, 0, 139, 120,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 144, 0, 0, 136, 0, 101,
	125, 124, 128, 154, 155, 157, 156, 158, 105, 0,
	0, 386, 0, 0, 0, 116, 385, 0, 0, 0,
	0, 422, 130, 0, 0, 142, 132, 0, 0, 0,
	0, 415, 416, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 435, 403, 402, 404, 405, 406, 407,
	0, 0, 106, 408, 409, 410, 0, 0, 0, 383,
	396, 0, 421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 394, 836, 0, 0, 0, 433, 0,
	395, 0, 0, 392, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	431, 0, 0, 0, 0, 0, 0, 110, 0, 140,
	0, 150, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 123, 0, 0, 148, 149, 111, 153, 0,
	0, 104, 0, 0, 135, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 127, 118, 0, 0, 0, 143,
	0, 0, 122, 117, 146, 114, 133, 107, 102, 0,
	108, 109, 113, 112, 0, 126, 131, 134, 137, 138,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 121, 423, 432, 429, 430,
	427, 428, 426, 425, 424, 434, 417, 418, 420, 0,
	419, 100, 0, 129, 0, 139, 120, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 144, 0, 0, 136, 0, 101, 125, 124, 128,
	154, 155, 157, 156, 158, 105, 0, 0, 386, 0,
	0, 0, 116, 385, 0, 0, 0, 0, 422, 130,
	0, 0, 142, 132, 0, 0, 0, 0, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 377,
	435, 403, 402, 404, 405, 406, 407, 0, 0, 106,
	408, 409, 410, 0, 0, 0, 383, 396, 0, 421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	394, 0, 0, 0, 0, 433, 0, 395, 0, 0,
	392, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 431, 0, 0,
	0, 0, 0, 0, 110, 0, 140, 0, 150, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 123,
	0, 0, 148, 149, 111, 153, 0, 0, 104, 0,
	0, 135, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 127, 118, 0, 0, 0, 143, 0, 0, 122,
	117, 146, 114, 133, 107, 102, 0, 108, 109, 113,
	112, 0, 126, 131, 134, 137, 138, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 121, 423, 432, 429, 430, 427, 428, 426,
	425, 424, 434, 417, 418, 420, 0, 419, 100, 0,
	129, 0, 139, 120, 151, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 119, 144, 0,
	0, 136, 0, 101, 125, 124, 128, 154, 155, 157,
	156, 158, 105, 0, 0, 386, 0, 0, 0, 116,
	385, 0, 0, 0, 0, 422, 130, 0, 0, 142,
	132, 0, 0, 0, 0, 415, 416, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 435, 403, 402,
	404, 405, 406, 407, 0, 0, 106, 408, 409, 410,
	0, 0, 0, 383, 396, 0, 421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 394, 0, 0,
	0, 0, 433, 0, 395, 0, 0, 392, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 431, 0, 0, 0, 0, 0,
	0, 110, 0, 140, 0, 150, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 123, 0, 0, 148,
	149, 111, 153, 0, 0, 104, 0, 0, 135, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 127, 118,
	0, 0, 0, 143, 0, 0, 122, 117, 146, 114,
	133, 107, 102, 0, 108, 109, 113, 112, 0, 126,
	131, 134, 137, 138, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 121,
	423, 432, 429, 430, 427, 428, 426, 425, 424, 434,
	417, 418, 420, 0, 419, 100, 0, 129, 0, 139,
	120, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 144, 0, 0, 136, 0,
	101, 125, 124, 128, 154, 155, 157, 156, 158, 105,
	0, 0, 386, 0, 0, 0, 116, 385, 0, 0,
	0, 0, 422, 130, 0, 0, 142, 132, 0, 0,
	0, 0, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 435, 403, 402, 404, 405, 406,
	407, 0, 0, 106, 408, 409, 410, 0, 0, 0,
	383, 396, 0, 421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 394, 0, 0, 0, 0, 433,
	0, 395, 0, 0, 392, 397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 431, 0, 0, 0, 0, 0, 0, 110, 0,
	140, 0, 150, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 123, 0, 0, 148, 149, 111, 153,
	0, 0, 104, 0, 0, 135, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 127, 118, 0, 0, 0,
	143, 0, 0, 122, 117, 146, 114, 133, 107, 102,
	0, 108, 109, 113, 112, 0, 126, 131, 134, 137,
	138, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 121, 423, 432, 429,
	430, 427, 428, 426, 425, 424, 434, 417, 418, 420,
	0, 419, 100, 0, 129, 0, 139, 120, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 144, 0, 0, 136, 0, 101, 125, 124,
	128, 154, 155, 157, 156, 158, 105, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 422,
	130, 0, 0, 142, 132, 0, 0, 0, 0, 415,
	416, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 435, 403, 402, 404, 405, 406, 407, 0, 0,
	106, 408, 409, 410, 0, 0, 0, 0, 396, 0,
	421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 394, 0, 0, 0, 0, 433, 0, 395, 0,
	0, 392, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 431, 0,
	0, 0, 0, 0, 0, 110, 0, 140, 0, 150,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	123, 0, 0, 148, 149, 111, 153, 0, 0, 104,
	0, 0, 135, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 127, 118, 0, 0, 0, 143, 0, 0,
	122, 117, 146, 114, 133, 107, 102, 0, 108, 109,
	113, 112, 0, 126, 131, 134, 137, 138, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 121, 423, 432, 429, 430, 427, 428,
	426, 425, 424, 434, 417, 418, 420, 0, 419, 100,
	0, 129, 0, 139, 120, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 144,
	0, 0, 0, 0, 0, 125, 0, 0, 154, 155,
	157, 156, 158, 105, 136, 0, 101, 0, 700, 128,
	0, 0, 701, 698, 703, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 142, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 152, 0, 0, 0, 0, 697,
	0, 0, 0, 0, 110, 0, 140, 0, 150, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 123,
	0, 0, 148, 149, 111, 153, 0, 0, 104, 0,
	0, 135, 24, 147, 0, 0, 0, 0, 0, 0,
	0, 127, 118, 136, 0, 101, 143, 124, 128, 122,
	117, 146, 114, 133, 107, 102, 0, 108, 109, 113,
	112, 116, 126, 131, 134, 137, 138, 141, 130, 0,
	0, 142, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 98,
	145, 0, 121, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	129, 0, 139, 120, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 144, 0,
	0, 0, 0, 0, 125, 0, 0, 154, 155, 157,
	156, 158, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 140, 0, 150, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 123, 0,
	0, 148, 149, 111, 153, 0, 0, 104, 0, 0,
	135, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	127, 118, 136, 0, 101, 143, 124, 128, 122, 117,
	146, 114, 133, 107, 102, 1223, 108, 109, 113, 112,
	116, 126, 131, 134, 137, 138, 141, 130, 0, 0,
	142, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 145,
	1225, 121, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 129,
	0, 139, 120, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 144, 0, 0,
	0, 0, 0, 125, 0, 0, 154, 155, 157, 156,
	158, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 140, 0, 150, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 123, 0, 0,
	148, 149, 111, 153, 0, 0, 104, 0, 0, 135,
	24, 147, 0, 0, 0, 0, 0, 0, 0, 127,
	118, 136, 0, 101, 143, 124, 128, 122, 117, 146,
	114, 133, 107, 102, 0, 108, 109, 113, 112, 116,
	126, 131, 134, 137, 138, 141, 130, 0, 0, 142,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 206, 145, 0,
	121, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 129, 0,
	139, 120, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 144, 0, 0, 0,
	0, 0, 125, 0, 0, 154, 155, 157, 156, 158,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 140, 0, 150, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 123, 0, 0, 148,
	149, 111, 153, 0, 0, 104, 0, 0, 135, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 127, 118,
	0, 0, 0, 143, 0, 0, 122, 117, 146, 114,
	133, 107, 102, 0, 108, 109, 113, 112, 0, 126,
	131, 134, 137, 138, 141, 0, 136, 0, 101, 0,
	124, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 145, 0, 121,
	0, 130, 0, 0, 142, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 129, 0, 139,
	120, 151, 206, 0, 0, 612, 0, 0, 613, 0,
	0, 106, 0, 0, 119, 144, 0, 0, 0, 0,
	0, 125, 0, 0, 154, 155, 157, 156, 158, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 140, 0,
	150, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 123, 0, 0, 148, 149, 111, 153, 0, 0,
	104, 0, 0, 135, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 127, 118, 0, 0, 0, 143, 0,
	0, 122, 117, 146, 114, 133, 107, 102, 0, 108,
	109, 113, 112, 0, 126, 131, 134, 137, 138, 141,
	0, 136, 0, 101, 0, 124, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	459, 0, 145, 0, 121, 0, 130, 0, 0, 142,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 129, 0, 139, 120, 151, 206, 0, 458,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 119,
	144, 0, 0, 0, 0, 0, 125, 0, 0, 154,
	155, 157, 156, 158, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 140, 0, 150, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 123, 0, 0, 148,
	149, 111, 153, 0, 0, 104, 0, 0, 135, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 127, 118,
	136, 0, 101, 143, 124, 128, 122, 117, 146, 114,
	133, 107, 102, 0, 108, 109, 113, 112, 116, 126,
	131, 134, 137, 138, 141, 130, 0, 0, 142, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 145, 1225, 121,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 129, 0, 139,
	120, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 144, 0, 0, 0, 0,
	0, 125, 0, 0, 154, 155, 157, 156, 158, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 140, 0, 150, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 123, 0, 0, 148, 149,
	111, 153, 0, 0, 104, 0, 0, 135, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 127, 118, 136,
	0, 101, 143, 124, 128, 122, 117, 146, 114, 133,
	107, 102, 0, 108, 109, 113, 112, 116, 126, 131,
	134, 137, 138, 141, 130, 0, 0, 142, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 98, 145, 0, 121, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 129, 0, 139, 120,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 144, 0, 0, 0, 0, 0,
	125, 0, 0, 154, 155, 157, 156, 158, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 140, 0, 150, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 123, 0, 0, 148, 149, 111,
	153, 0, 0, 104, 0, 0, 135, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 127, 118, 136, 0,
	101, 143, 124, 128, 122, 117, 146, 114, 133, 107,
	102, 0, 108, 109, 113, 112, 116, 126, 131, 134,
	137, 138, 141, 130, 0, 0, 142, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 145, 994, 121, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 129, 0, 139, 120, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 144, 0, 0, 0, 0, 0, 125,
	0, 0, 154, 155, 157, 156, 158, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	140, 0, 150, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 123, 0, 0, 148, 149, 111, 153,
	0, 0, 104, 0, 0, 135, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 127, 118, 0, 0, 0,
	143, 0, 0, 122, 117, 146, 114, 133, 107, 102,
	0, 108, 109, 113, 112, 0, 126, 131, 134, 137,
	138, 141, 0, 136, 0, 101, 0, 124, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 116, 0, 0, 145, 0, 121, 0, 130, 0,
	0, 142, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 129, 0, 139, 120, 151, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 119, 144, 0, 0, 0, 0, 0, 125, 0,
	0, 154, 155, 157, 156, 158, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 140, 0, 150, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 123, 0,
	0, 148, 149, 111, 153, 0, 0, 104, 0, 0,
	135, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	127, 118, 136, 0, 101, 143, 124, 128, 122, 117,
	146, 114, 133, 107, 102, 0, 108, 109, 113, 112,
	116, 126, 131, 134, 137, 138, 141, 130, 0, 0,
	142, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 145,
	0, 121, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 129,
	0, 139, 120, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 144, 0, 0,
	0, 0, 0, 125, 0, 0, 154, 155, 157, 156,
	158, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 140, 0, 150, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 123, 0, 0,
	148, 149, 111, 153, 0, 0, 104, 0, 0, 135,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 127,
	118, 136, 0, 101, 143, 124, 128, 122, 117, 146,
	114, 133, 107, 102, 0, 108, 109, 113, 112, 116,
	126, 131, 134, 137, 138, 141, 130, 0, 0, 142,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 145, 0,
	121, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 129, 0,
	139, 120, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 144, 0, 0, 0,
	0, 0, 125, 0, 0, 154, 155, 157, 156, 158,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 140, 0, 150, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 123, 0, 0, 148,
	149, 111, 153, 0, 0, 104, 0, 0, 135, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 127, 118,
	136, 0, 101, 143, 124, 128, 122, 117, 146, 114,
	133, 107, 102, 0, 108, 109, 113, 112, 116, 126,
	131, 134, 137, 138, 141, 130, 0, 0, 142, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 145, 0, 121,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 129, 0, 139,
	120, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 144, 0, 0, 0, 0,
	0, 125, 0, 0, 154, 155, 157, 156, 158, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 140, 0, 150, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 123, 0, 0, 148, 149,
	111, 153, 0, 0, 104, 0, 0, 135, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 127, 118, 136,
	0, 101, 143, 124, 128, 122, 117, 146, 114, 133,
	107, 102, 0, 108, 109, 113, 112, 116, 126, 131,
	134, 137, 138, 141, 130, 0, 0, 142, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 145, 0, 121, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 129, 0, 139, 120,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 144, 0, 0, 0, 0, 0,
	125, 0, 0, 154, 155, 157, 156, 158, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 140, 0, 150, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 123, 0, 0, 148, 149, 111,
	153, 0, 0, 104, 0, 0, 135, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 127, 118, 136, 0,
	101, 143, 124, 128, 122, 117, 146, 114, 133, 107,
	102, 0, 108, 109, 113, 112, 116, 126, 131, 134,
	137, 138, 141, 130, 0, 0, 142, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 145, 0, 121, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 129, 0, 139, 120, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 144, 0, 0, 0, 0, 0, 125,
	0, 0, 154, 155, 157, 156, 158, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	140, 0, 150, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 123, 0, 0, 148, 149, 111, 153,
	0, 0, 104, 0, 0, 135, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 127, 118, 0, 0, 0,
	143, 0, 0, 122, 117, 146, 114, 133, 107, 102,
	0, 108, 109, 113, 112, 0, 126, 131, 134, 137,
	138, 141, 24, 51, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 121, 0, 0, 46,
	0, 0, 0, 28, 0, 0, 36, 0, 0, 0,
	0, 0, 100, 0, 129, 0, 139, 120, 151, 0,
	0, 0, 0, 37, 0, 0, 53, 0, 0, 0,
	0, 119, 144, 0, 0, 0, 0, 0, 125, 0,
	0, 154, 155, 157, 156, 158, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 32, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 47, 39, 0, 0, 48, 49, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 41, 42,
	0, 44, 43, 0, 0, 0, 45,
}
var yyPact = [...]int{

	8286, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 917, 960, -1000, -1000, -1000, -1000, -1000, 743,
	90, 40, -23, 89, 82, 147, 74, 7773, -1000, -1000,
	24, -1000, -194, -1000, -1000, -198, -1000, -1000, -1000, -1000,
	745, -1000, -1000, -1000, -1000, -1000, 909, 915, 773, 876,
	820, -1000, 40, 7773, 947, 2149, -169, 7932, 38, 72,
	69, 66, 38, -1000, 68, -1000, 34, 593, 34, 7773,
	7773, -108, -16, -1000, -1000, -103, -1000, -1000, -1000, -124,
	-1000, -1000, -1000, -1000, -1000, -1000, 7773, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 401, -1000, -1000, -1000, -1000, 713, 713, -1000,
	7773, -1000, -1000, -1000, -1000, -1000, 414, 857, 5281, 5281,
	917, -1000, 745, -1000, -1000, -1000, 844, -1000, -1000, 260,
	7296, 851, 134, 7773, 695, 3233, -1000, -1000, -1000, 201,
	6634, -1000, -1000, -1000, 847, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 914, 913,
	663, -1000, 1957, -1000, -1000, 7773, 258, 573, 568, 566,
	7773, 7773, 7773, 861, 792, 7773, -1000, -1000, 946, 7773,
	7773, -1000, -1000, 943, 945, -1000, -1000, -1000, -1000, -1000,
	943, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5281, -1000, -1000, 127, -1000, -1000, -1000, -1000, 955,
	171, 545, -1000, 5281, 1475, 713, 713, -1000, -1000, 122,
	-1000, -1000, 5528, 5528, 5528, 5528, 5528, 5528, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 713, 132, -1000, 5034, 713, 713, 713, 713, 713,
	713, 5281, 713, 713, 713, 713, 713, 713, 713, 713,
	713, 713, 713, 713, 713, -1000, -1000, 704, -1000, 356,
	909, 414, 820, 6449, 806, -1000, -1000, 721, 7773, -1000,
	7614, 4046, 940, 3233, 695, 5281, 128, -1000, -1000, -1000,
	-1000, -168, 713, 125, 5787, 433, -36, -1000, -1000, 716,
	-1000, 716, 716, 716, 716, -12, -12, -12, -12, -1000,
	-1000, -1000, -1000, -1000, 776, -1000, 716, 716, 716, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 772, 772, 772,
	735, 735, 853, 850, 789, 788, 785, -1000, 109, 692,
	-1000, -1000, 7773, -1000, 909, -112, -1000, -1000, 269, 7773,
	7773, -1000, -1000, -1000, -1000, 618, 284, -1000, 7773, -1000,
	-1000, -1000, 827, 5281, 5281, 362, 5281, 5281, 130, 5528,
	313, 252, 5528, 5528, 5528, 5528, 5528, 5528, 5528, 5528,
	5528, 5528, 5528, 5528, 5528, 5528, 5528, 333, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 563, -1000, 745, 507,
	507, 77, 77, 77, 77, 77, 1571, 4293, 3775, 414,
	5034, 4540, 4540, 5281, 5281, 4540, 878, 227, 284, 7455,
	-1000, 414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4540,
	4540, 4540, 4540, 5281, -1000, -1000, -1000, 857, -1000, 878,
	934, -1000, 837, 836, 4540, -1000, 778, 7614, 713, -1000,
	6264, -1000, 738, -1000, 200, -1000, 131, -1000, -1000, -1000,
	-1000, -1000, 917, 5281, -1000, 284, -1000, 561, 713, 713,
	7932, -1000, 125, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 183,
	183, 61, -1000, -1000, 183, 183, 183, 183, 183, -52,
	-68, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, -1000, -1000, -1000, 894, 156, 542,
	158, 158, -1000, -1000, -1000, 433, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 266, 52,
	-1000, 891, -1000, 883, 452, 954, 328, 112, 106, -38,
	-1000, -1000, 396, -12, -12, -1000, -1000, -1000, 846, -1000,
	-1000, -1000, 451, -1000, -1000, -1000, -1000, 392, -1000, -1000,
	-1000, 391, -1000, -1000, 853, -1000, 44, -1000, 7773, 7773,
	7773, -1000, 157, 192, 42, 27, 26, 21, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7773, -1000, -1000, 446,
	-1000, -1000, -1000, 445, 5281, -1000, 269, -1000, 5281, -1000,
	-1000, 825, 130, 199, -1000, -1000, 398, -1000, -1000, 284,
	284, 1290, -1000, -1000, -1000, -1000, 313, 5528, 5528, 5528,
	877, 1290, 685, 309, 834, 77, 546, 546, 154, 154,
	154, 154, 154, 636, 636, -1000, -1000, -1000, 414, -1000,
	-1000, -1000, 414, 4540, 691, -1000, -1000, 1818, 129, 713,
	126, -1000, -1000, 414, 585, 585, 277, 282, 585, 4540,
	249, -1000, 5281, 414, -1000, 585, 414, 585, 585, -1000,
	-1000, 7773, -1000, -1000, -1000, -1000, 671, -1000, 855, 672,
	658, -1000, -1000, 4787, 414, 604, 120, 917, 7614, 5281,
	3775, 909, 284, -1000, 7932, 7932, 414, -1000, 444, -1000,
	328, 183, 183, -1000, 845, 389, 377, 376, 443, 435,
	183, 183, 374, 431, 540, 373, 353, 340, 425, 430,
	217, 417, 415, 411, 8091, 756, 521, 751, 747, 519,
	496, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 547, -1000, -1000, 195, 601, -1000, 689,
	598, -1000, 183, 183, 713, 713, 713, -1000, 7773, -1000,
	-1000, -1000, 493, -13, 743, 483, 7932, -1000, -1000, -1000,
	-1000, 284, -1000, 284, -1000, -1000, -1000, -1000, -1000, -1000,
	877, 1290, 609, -1000, 5528, 5528, -1000, -1000, 585, 4540,
	-1000, -1000, 7111, -1000, -1000, 2962, 4540, 3504, -1000, -1000,
	-1000, 63, 333, 63, -145, 587, 203, -1000, 5281, 303,
	-1000, -1000, -1000, -1000, -1000, -1000, 940, 6952, 879, -1000,
	713, -1000, -1000, 774, 7455, 7455, 909, -1000, 284, -1000,
	-1000, 414, 414, 2420, -1000, -1000, 328, 328, -1000, -1000,
	-1000, -1000, -1000, -1000, 421, 413, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7455, 742, 7455,
	7455, 741, 740, -1000, 736, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 410, 324, -1000, 306, 515, 185, 7455, 7455,
	7455, -1000, -1000, -1000, 843, -1000, -1000, -1000, -1000, 5528,
	1290, 1290, -1000, -1000, -1000, -1000, 116, 414, -1000, 414,
	716, 716, -1000, 716, 735, -1000, 716, 6, 716, 5,
	414, 414, 713, -141, -1000, 284, 5281, 938, 676, 790,
	-1000, -1000, -1000, 872, 5946, 6105, 950, -1000, 713, -1000,
	745, 102, -1000, -1000, -178, 713, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 581, -1000, 716, 7455, 557, 554, 7455,
	7455, 291, -1000, 526, 488, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 551, 551, 551, 455, 1290, 2691, -1000, -1000,
	-1000, 83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5528, 414, 399, 284, 932, 912, 6952, 6952, 6952, 6952,
	-1000, 816, 815, -1000, 804, 800, 808, 7773, -1000, 538,
	5946, 105, -1000, 6793, -1000, -1000, 7614, 658, 414, 7455,
	2420, 292, -163, -1000, 7455, -1000, 525, -1000, -1000, 505,
	502, -1000, 418, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 29, -1000, -1000, -1000, 5281, 5281, 790, 739,
	719, -1000, -1000, -1000, -1000, 814, -1000, 812, -1000, -1000,
	-1000, -1000, -1000, 64, 62, 56, -1000, 614, -1000, -1000,
	-1000, -1000, 492, -1000, 419, -1000, -1000, 133, 133, -1000,
	-1000, -1000, 133, 67, 322, 414, 39, -153, 284, 583,
	5281, 5281, -1000, -1000, 713, 713, 713, -163, 2420, 833,
	133, -1000, -1000, -1000, 183, 314, 80, 67, 322, 860,
	860, -1000, -1000, 899, 860, -1000, -1000, 824, -149, -158,
	284, 284, 7455, 7455, 7455, -1000, -1000, 170, 286, -1000,
	-1000, -1000, -1000, -1000, 183, 183, 901, -1000, 823, -1000,
	487, -1000, 487, 487, 713, -1000, 515, 515, -1000, -151,
	-1000, 7455, -1000, -1000, -1000, -1000, -1000, -154, -1000, -160,
	-1000,
}
var yyPgo = [...]int{

	0, 1249, 1248, 1237, 1229, 1225, 1222, 1220, 53, 855,
	1219, 1217, 1213, 1211, 1206, 1205, 1203, 1202, 1201, 1195,
	1193, 1192, 1191, 1190, 1187, 151, 1180, 1178, 1177, 1176,
	1175, 58, 1168, 72, 1165, 1164, 1163, 36, 120, 39,
	34, 23, 1162, 30, 19, 28, 1161, 1159, 16, 1158,
	1290, 1157, 59, 1156, 1154, 48, 1153, 1152, 1151, 2,
	26, 1150, 1149, 1148, 1147, 67, 274, 1143, 1140, 1138,
	1135, 1134, 1133, 45, 13, 25, 6, 24, 1132, 87,
	17, 1130, 50, 1129, 1127, 1126, 1124, 44, 1123, 57,
	1122, 29, 56, 1121, 47, 14, 40, 113, 60, 1119,
	1118, 1116, 1115, 673, 1114, 367, 375, 1110, 43, 1109,
	32, 0, 12, 35, 46, 1108, 63, 926, 33, 22,
	1107, 1106, 212, 3, 27, 1104, 31, 1103, 1102, 1098,
	1096, 1095, 1094, 15, 1091, 1089, 1088, 1087, 1086, 1085,
	1079, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1068, 1067,
	1066, 1065, 1061, 1060, 1057, 1055, 1054, 1053, 1052, 1051,
	1049, 1047, 1044, 20, 1042, 1041, 1040, 21, 52, 7,
	49, 1022, 1021, 1020, 69, 41, 1019, 1016, 1014, 1013,
	1012, 42, 1011, 65, 37, 1004, 1001, 1000, 62, 10,
	250, 11, 4, 18, 9, 8, 999, 997, 996, 995,
	994, 992, 1, 988, 987, 51, 973, 972, 55, 5,
	971, 969, 968, 107, 340, 966, 167,
}
var yyR1 = [...]int{

	0, 211, 212, 212, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 125,
	125, 210, 210, 209, 138, 138, 16, 16, 16, 16,
	16, 16, 16, 16, 201, 201, 202, 202, 197, 195,
	195, 193, 193, 199, 199, 191, 191, 196, 196, 194,
	194, 192, 192, 198, 198, 206, 206, 207, 207, 208,
	208, 170, 170, 169, 169, 168, 168, 171, 171, 171,
	19, 184, 186, 186, 187, 187, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 141, 143, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 156, 157, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 159, 159, 160, 160, 161, 161, 162, 162, 144,
	167, 167, 142, 137, 139, 140, 140, 185, 185, 185,
	181, 116, 116, 127, 127, 127, 203, 203, 204, 204,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	130, 130, 128, 128, 128, 128, 128, 128, 128, 129,
	129, 129, 129, 129, 131, 131, 131, 131, 131, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 180, 180, 133, 133, 174, 174, 175,
	175, 175, 172, 172, 173, 173, 176, 176, 134, 134,
	134, 134, 134, 30, 29, 29, 29, 101, 101, 101,
	177, 163, 163, 163, 136, 164, 164, 165, 165, 165,
	166, 166, 166, 178, 178, 179, 179, 135, 182, 182,
	182, 182, 182, 182, 183, 183, 190, 190, 189, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 18,
	56, 56, 1, 20, 2, 3, 4, 4, 5, 5,
	5, 5, 6, 6, 6, 6, 6, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 36, 36, 52, 52, 53, 53, 54,
	54, 55, 55, 55, 24, 22, 23, 23, 23, 23,
	215, 25, 26, 26, 27, 27, 27, 33, 33, 33,
	31, 31, 32, 32, 39, 39, 38, 38, 40, 40,
	40, 40, 115, 115, 115, 114, 114, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 57, 46, 46, 46,
	46, 121, 121, 120, 120, 120, 119, 119, 47, 47,
	47, 47, 48, 48, 48, 48, 49, 49, 51, 51,
	50, 50, 58, 58, 58, 58, 59, 59, 60, 60,
	41, 41, 41, 41, 41, 41, 41, 104, 104, 62,
	62, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 72, 72, 72, 72, 72, 72, 63, 63, 63,
	63, 63, 63, 63, 37, 37, 73, 73, 73, 79,
	74, 74, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 70, 70, 70, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 69, 69, 69, 69, 69, 69,
	69, 69, 216, 216, 71, 71, 71, 71, 34, 34,
	34, 34, 34, 124, 124, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 83, 83,
	35, 35, 81, 81, 82, 84, 84, 80, 80, 80,
	65, 65, 65, 65, 65, 65, 65, 67, 67, 67,
	85, 85, 86, 86, 87, 87, 88, 88, 89, 90,
	90, 90, 91, 91, 91, 91, 92, 92, 92, 64,
	64, 64, 64, 64, 64, 93, 93, 93, 93, 94,
	94, 75, 75, 77, 77, 76, 78, 95, 95, 96,
	97, 97, 98, 98, 100, 100, 100, 99, 99, 99,
	102, 102, 105, 105, 106, 106, 103, 103, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	108, 109, 109, 200, 200, 112, 112, 113, 113, 117,
	117, 118, 118, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 213, 214, 122, 123, 123, 123,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 0, 2, 2, 10, 12, 8,
	5, 11, 11, 11, 1, 1, 1, 1, 2, 3,
	2, 0, 2, 1, 1, 0, 2, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 1, 2, 4,
	4, 0, 1, 0, 1, 1, 2, 1, 1, 1,
	4, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 1, 1, 3, 3,
	3, 1, 1, 3, 1, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 3, 1, 3, 4, 1, 1, 1,
	1, 0, 3, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 5, 7,
	6, 6, 7, 7, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 6, 5, 5,
	3, 3, 5, 6, 3, 3, 3, 5, 3, 3,
	3, 3, 3, 0, 3, 0, 2, 0, 1, 1,
	1, 0, 2, 2, 4, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -211, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 37, -19,
	118, 119, 120, 141, 122, 134, 40, 57, 252, 136,
	259, 262, 263, 266, 265, 270, 33, 135, 139, 140,
	-213, 7, 235, 60, -212, 276, -87, 14, -27, 5,
	-25, -215, -25, -25, -25, -25, -184, 60, 227, -200,
	21, 25, 125, 26, -103, 129, 125, 126, 227, 125,
	125, 221, 118, 216, 254, -53, 256, 257, 223, 125,
	258, 219, 255, 218, 63, 39, 125, -117, 63, -111,
	241, 19, 188, 142, 161, 275, 72, 187, 190, 191,
	137, 157, 193, 192, 185, 151, 35, 183, 175, 260,
	246, 225, 182, 152, 21, 267, 195, 174, 22, 243,
	42, 196, 46, 186, 197, 164, 17, 198, 199, 245,
	139, 200, 45, 179, 261, 223, 184, 166, 155, 156,
	141, 247, 127, 158, 270, 271, 273, 272, 274, -122,
	-122, 66, 245, -122, 264, -122, -122, 271, 273, 272,
	274, 275, -122, -122, -122, -122, -8, -91, 16, 15,
	-11, -9, -213, 6, 28, 29, -33, 47, 48, -26,
	-103, -50, -117, 10, -97, -125, -98, 268, 267, -113,
	-100, -112, -110, 165, 162, 269, 63, -111, 78, 30,
	32, 177, 81, 148, 113, 170, 15, 82, 159, 112,
	224, 189, 236, 118, 55, 228, 229, 226, 227, 216,
	153, 36, 9, 33, 135, 29, 106, 120, 85, 86,
	254, 138, 31, 136, 75, 18, 58, 10, 39, 12,
	13, 130, 129, 97, 126, 53, 7, 146, 147, 114,
	34, 94, 49, 27, 51, 95, 16, 230, 231, 38,
	173, 169, 240, 172, 145, 168, 108, 56, 43, 79,
	73, 154, 76, 59, 140, 77, 14, 54, 257, 132,
	256, 150, 96, 121, 235, 52, 6, 239, 37, 134,
	144, 50, 125, 217, 171, 143, 167, 84, 128, 74,
	258, 5, 26, 180, 8, 57, 131, 232, 233, 234,
	41, 163, 160, 255, 244, 83, 11, 181, 248, 253,
	-185, -181, -116, 63, -111, -106, 130, 126, 126, 126,
	-106, 125, -105, 130, 63, -105, -50, -50, 220, 125,
	227, -122, -122, 217, -54, 224, 225, -122, -122, -122,
	223, -122, -122, -122, -122, -122, -50, -122, 66, -122,
	-76, -213, -76, -122, -50, -122, -214, 62, -92, 18,
	38, -41, -61, 79, -66, 36, 31, -65, -62, -80,
	-78, -79, 113, 102, 103, 110, 80, 114, -70, -68,
	-69, -71, 65, 64, 66, 67, 68, 69, 73, 74,
	75, -112, -117, -76, -213, 51, 52, 236, 237, 240,
	238, 82, 41, 226, 234, 233, 232, 230, 231, 228,
	229, 130, 227, 108, 235, 63, -111, -88, -89, -41,
	-87, -8, -25, 43, -31, 29, 71, -51, 34, -50,
	37, 115, -50, 61, -97, 87, -99, -112, 65, 36,
	37, 15, 15, 62, 61, -127, -130, -132, -131, -128,
	-129, 159, 160, 113, 163, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 137, 155, 156, 157, 158,
	142, 143, 144, 145, 146, 147, 148, 150, 151, 152,
	153, 154, -117, 79, 63, 63, 63, -50, -50, -56,
	-50, 31, 59, -117, -36, 10, -50, -50, -52, 10,
	10, -52, -122, -122, -122, -74, -41, -122, -108, 128,
	30, 8, 97, 78, 77, 94, 61, 17, -41, -63,
	97, 79, 95, 96, 81, 99, 98, 109, 102, 103,
	104, 105, 106, 107, 108, 100, 101, 112, 87, 88,
	89, 90, 91, 92, 93, -104, -213, -79, -213, 116,
	117, -66, -66, -66, -66, -66, -66, -213, 115, -8,
	-213, -213, -213, -213, -213, -213, -213, -83, -41, -213,
	-216, -213, -216, -216, -216, -216, -216, -216, -216, -213,
	-213, -213, -213, 61, -90, 32, 33, -91, -214, -33,
	-67, -112, 66, 69, -32, 50, -64, 37, 41, -8,
	-213, -50, -95, -96, -80, -112, -117, -118, -117, -110,
	162, 165, -60, 11, -98, -41, -164, 112, 250, 251,
	-213, -186, -187, -188, -142, -137, -139, -140, -141, -143,
	-144, -145, -146, -147, -148, -149, -150, -151, -152, -153,
	-154, -155, -156, -157, -158, -159, -160, -161, -162, 72,
	260, -170, 267, 261, 177, 188, 40, 189, 190, 191,
	126, 193, 194, 195, 22, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 36, -181, -182, 132, 26, -183,
	21, 25, 126, 27, -203, -204, -205, -176, -134, -177,
	-178, -179, -135, -30, -136, -165, -166, 73, 79, 36,
	177, 132, 27, 26, 72, 59, 112, 187, 184, -172,
	180, -133, 60, -133, -133, -133, -133, -163, 162, -163,
	-163, -163, 60, -133, -133, -133, -174, 60, -174, -174,
	-175, 60, -175, -206, -207, -208, -170, 31, 59, 59,
	59, -107, 121, 260, 236, 123, 120, 124, 119, 177,
	162, 72, 36, 14, 247, 63, 61, -50, -91, 222,
	-122, -122, -55, 95, 11, -50, -50, -122, 61, -214,
	-50, 45, -41, -41, -72, 73, 79, 74, 75, -41,
	-41, -66, -73, -76, -79, 70, 97, 95, 96, 81,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -124, 63, 65, 63, -65,
	-65, -112, -39, 29, -38, -40, 104, -41, -117, -113,
	-118, -110, -214, -8, -38, -38, -41, -41, -38, -31,
	-81, -82, 83, -112, -214, -38, -39, -38, -38, -89,
	-92, -102, 18, 10, 41, 41, -38, -94, 59, -95,
	-75, -77, -76, -213, -8, -93, -112, -60, 61, 87,
	115, -87, -41, 63, -213, -213, -116, -188, -169, 87,
	-169, 112, -168, 165, 162, -169, -169, -169, -169, -169,
	192, 192, -169, -169, -169, -169, -169, -169, -169, -169,
	-169, -169, -169, -169, -169, 27, -183, 63, 63, -183,
	-183, -205, 73, 65, 66, 67, 73, 226, 27, 27,
	65, 8, -167, 63, 65, 182, 183, 36, 36, 185,
	186, -173, 181, 66, -163, -163, 37, -180, 65, 66,
	66, -208, 112, -168, -50, -50, -50, -122, -108, -109,
	126, 27, 87, 128, 133, 133, 133, -50, -122, 65,
	65, -41, -55, -41, -122, 46, 73, 74, 75, -73,
	-66, -66, -66, -37, 138, 78, -214, -214, -38, 61,
	-115, -114, 30, -112, 65, 115, -213, 115, -214, -214,
	-214, 61, 131, 30, -214, -38, -84, -82, 85, -41,
	-214, -214, -214, -214, -214, -50, -42, 10, 35, -94,
	61, -214, -214, -214, 61, 115, -87, -96, -41, -113,
	-91, -116, -116, -214, 65, -167, -169, -169, 37, 66,
	66, 66, 65, 65, -169, -169, 66, 65, 63, 66,
	66, 66, 66, 36, 65, 36, 183, 182, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 66,
	36, 66, 36, 66, 36, 63, -111, 60, 63, 60,
	60, 63, 63, -29, -101, 226, 230, 231, 62, 63,
	113, 62, 61, 61, 62, 61, -169, -169, -213, -213,
	-213, -50, -122, 63, 162, -184, 63, -181, -37, 78,
	-66, -66, -214, -40, -114, 104, -118, -39, -113, -126,
	113, 159, 137, 157, 153, 174, 164, 179, 155, 180,
	-124, -126, 241, -87, 86, -41, 84, -60, -43, -44,
	-45, -46, -57, -79, -213, -50, 27, -77, 41, -8,
	-213, -112, -112, -91, -214, -214, -123, -213, -113, -167,
	-167, 65, 65, -190, -189, -112, 60, -190, -190, 60,
	60, 60, 65, 66, 66, -202, 63, 36, -171, 63,
	113, 36, -190, -190, -190, 37, -66, 115, -214, -214,
	-133, -133, -133, -175, -133, 147, -133, 147, -214, -214,
	-213, -35, 239, -41, -85, 12, 61, -47, -48, -49,
	49, 53, 55, 50, 51, 52, 56, -121, 30, -43,
	-213, -120, -119, 30, -117, 65, 8, -75, -8, 115,
	-138, 249, -213, 62, 61, -133, -190, 62, 62, -190,
	-190, 62, 66, 62, 62, -214, -214, -214, 63, 104,
	-163, 63, -66, -214, 65, -86, 13, 15, -44, -45,
	-44, -45, 49, 49, 49, 54, 49, 54, 49, -48,
	-117, -214, -58, 57, 129, 58, -119, -95, -214, -112,
	-123, 66, -210, -209, 248, -189, 62, -193, -193, 62,
	62, 62, -193, -191, -194, -34, 97, 244, -41, -74,
	59, 59, 49, 49, 126, 126, 126, 61, -214, 63,
	-193, -199, -195, -197, 22, 72, 131, -191, -194, -192,
	-192, -196, -195, 244, -192, -195, -214, 242, 56, 245,
	-41, -41, -213, -213, -213, -209, -123, 41, -169, 65,
	-201, 250, 20, -198, 38, 19, 24, 46, 243, 246,
	-59, -112, -59, -59, 97, 66, -169, -169, 23, 46,
	-214, 61, -214, -214, -76, -202, -202, 244, -112, 245,
	246,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 554, 0, 340, 340, 340, 340, 340, 0,
	623, 606, 0, 0, 0, 327, 0, 0, 816, 816,
	0, 816, 0, 816, 816, 0, 816, 816, 816, 816,
	0, 33, 34, 814, 1, 3, 562, 0, 0, 344,
	347, 342, 606, 0, 0, 0, 46, 0, 604, 0,
	0, 0, 604, 624, 0, 607, 602, 0, 602, 0,
	0, 0, 0, 816, 816, 0, 816, 816, 816, 0,
	816, 816, 816, 816, 816, 328, 0, 335, 629, 630,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 294,
	295, 816, 0, 298, 816, 300, 301, 0, 0, 816,
	0, 816, 336, 337, 338, 339, 27, 566, 0, 0,
	554, 29, 0, 340, 345, 346, 350, 348, 349, 341,
	0, 0, 400, 0, 37, 0, 590, 39, -2, 0,
	0, 627, 628, -2, 644, 596, 625, 626, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 0, 0,
	0, 167, 0, 171, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 323, 0,
	0, 310, 311, 325, 0, 329, 330, 314, 315, 316,
	325, 318, 319, 320, 321, 322, 816, 296, 816, 299,
	816, 0, 816, 304, 618, 306, 28, 815, 23, 0,
	0, 563, 410, 0, 415, 417, 0, 452, 453, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 478, 479,
	480, 481, 540, 541, 542, 543, 544, 545, 546, 419,
	420, 537, 0, 586, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 502, 502, 502, 502, 502, 502, 502,
	502, 0, 0, 0, 0, -2, -2, 555, 556, 559,
	562, 27, 347, 0, 352, 351, 343, 0, 0, 399,
	0, 0, 408, 0, 38, 0, 255, 597, 598, 599,
	595, 0, 0, -2, 0, 176, 232, 174, 175, 225,
	191, 225, 225, 225, 225, 251, 251, 251, 251, 217,
	218, 219, 220, 221, 0, 204, 225, 225, 225, 208,
	192, 193, 194, 195, 196, 197, 198, 227, 227, 227,
	229, 229, -2, 0, 0, 0, 0, 90, 0, 287,
	290, 603, 0, 289, 562, 0, 816, 816, 331, 0,
	0, 816, 334, 297, 302, 0, 450, 303, 0, 619,
	620, 567, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 437, 438,
	439, 440, 441, 442, 443, 416, 0, 430, 0, 0,
	0, 472, 473, 474, 475, 476, 0, 354, 0, 27,
	0, 0, 0, 0, 0, 0, 350, 0, 529, 0,
	494, 0, 495, 496, 497, 498, 499, 500, 501, 0,
	354, 0, 0, 0, 558, 560, 561, 566, 30, 350,
	0, 547, 0, 0, 0, 353, 579, 0, 0, -2,
	0, 398, 408, 587, 0, 537, 0, 401, 631, 632,
	644, 645, 554, 0, 591, 592, 593, 0, 0, 0,
	0, 91, -2, 94, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 83,
	83, 0, 165, 166, 83, 83, 83, 83, 83, 0,
	0, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 168, 169, 0, 0, 0,
	779, 0, 274, 275, 170, 177, 178, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 236, 0, 0,
	250, 0, 264, 266, 0, 0, 0, 0, 0, 234,
	233, 190, 0, 251, 251, 211, 212, 213, 0, 214,
	215, 216, 0, 205, 206, 207, 199, 0, 200, 201,
	202, 0, 203, 50, -2, 77, 0, 605, 0, 0,
	0, 816, 618, 0, 615, 0, 613, 0, 608, 609,
	610, 611, 612, 614, 616, 617, 0, 288, 816, 0,
	308, 309, 312, 0, 0, 326, 331, 317, 0, 585,
	816, 0, 411, 412, 414, 431, 0, 433, 435, 564,
	565, 421, 422, 446, 447, 448, 0, 0, 0, 0,
	444, 426, 0, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 471, 513, 514, 0, 469,
	470, 477, 0, 0, 355, 356, 358, 362, 0, 538,
	0, -2, 449, 27, 0, 0, 0, 0, 0, 0,
	535, 532, 0, 0, 503, 0, 0, 0, 0, 557,
	24, 0, 600, 601, 548, 549, 367, 31, 0, 579,
	569, 581, 583, 0, 27, 0, 575, 554, 0, 0,
	0, 562, 409, 256, 0, 0, 0, 95, 0, 84,
	0, 83, 83, 85, 0, 0, 0, 0, 0, 0,
	83, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 237, 238, 239, 240, 241, 242, 263, 265,
	267, 0, 254, 160, 161, 257, 258, 259, 260, 261,
	262, 173, 235, 0, 209, 210, 0, 0, 223, 0,
	0, 78, 83, 83, 0, 0, 0, 279, 0, 816,
	621, 622, 0, 0, 0, 0, 0, 291, 307, 324,
	332, 333, 313, 451, 305, 568, 432, 434, 436, 423,
	444, 427, 0, 424, 0, 0, 418, 482, 0, 0,
	359, 363, 0, 365, 366, 0, 354, 0, -2, 485,
	486, 0, 0, 0, 0, 554, 0, 533, 0, 0,
	493, 504, 505, 506, 507, 25, 408, 0, 0, 32,
	0, 584, -2, 0, 0, 0, 562, 588, 589, 538,
	36, 0, 0, 817, 162, 163, 0, 0, 86, 121,
	122, 159, 124, 125, 0, 0, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 0, 0, 0,
	0, 0, 0, 243, 244, 247, 248, 249, 226, 252,
	253, 222, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 280, 281, 282, 0, 284, 285, 286, 425, 0,
	445, 428, 483, 357, 364, 360, 0, 0, 539, 0,
	225, 225, 518, 225, 229, 521, 225, 523, 225, 526,
	0, 0, 0, 530, 492, 536, 0, 550, 368, 369,
	371, 372, 373, 381, 0, 383, 0, 582, 0, -2,
	0, 577, 576, 35, 44, 0, 49, 818, 819, 123,
	164, 126, 127, 0, 276, 225, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 79, 56, 57, 80, 87,
	88, 89, 0, 0, 0, 0, 429, 0, 484, 487,
	515, 251, 519, 520, 522, 524, 525, 527, 489, 488,
	0, 0, 0, 534, 552, 0, 0, 0, 0, 0,
	388, 0, 0, 391, 0, 0, 0, 0, 382, 0,
	0, 402, 384, 0, 386, 387, 0, 572, 27, 0,
	817, 0, 0, 268, 0, 278, 0, 61, 61, 0,
	0, 245, 0, 228, 231, 61, 65, 69, 283, 361,
	516, 517, 508, 491, 531, 26, 0, 0, 370, 377,
	0, 380, 389, 390, 392, 0, 394, 0, 396, 397,
	374, 375, 376, 0, 0, 0, 385, 580, -2, 578,
	47, 45, 0, 41, 0, 277, 61, 270, 271, 65,
	69, 246, 71, 71, 71, 0, 0, 0, 553, 551,
	0, 0, 393, 395, 0, 0, 0, 0, 817, 0,
	269, 62, 63, 64, 83, 0, 0, 272, 273, 51,
	52, 66, 67, 0, 53, 70, 490, 0, 0, 0,
	378, 379, 0, 0, 0, 42, 48, 0, 0, 60,
	58, 54, 55, 72, 83, 83, 0, 509, 0, 512,
	0, 406, 0, 0, 0, 59, 0, 0, 68, 510,
	403, 0, 404, 405, 43, 73, 74, 0, 407, 0,
	511,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	60, 62, 104, 102, 61, 103, 115, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 276,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:958
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:964
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:994
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1039
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1050
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.optVal = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1134
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1140
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.PartitionNum = yyDollar[9].optVal
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1154
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1163
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1176
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 53:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = "hash"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = "btree"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = "default"
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1313
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1360
		{
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1365
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1367
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = "character set"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.str = "default"
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1395
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.TableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.TableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.TableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.TableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.TableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.TableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.TableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.TableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.TableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.TableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.TableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.TableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.TableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.TableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.TableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.TableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.TableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.TableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.TableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.TableSpec.Options.TableSpace = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1690
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1759
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1911
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1916
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.optVal = nil
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.str = yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2453
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, nil),
				Primary: true,
				Unique:  true,
			}
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2570
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2575
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2602
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2610
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2615
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.statement = &Xa{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.statement = &Explain{}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.tableName = TableName{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.str = "full "
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.showFilter = nil
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.statement = &OtherRead{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.statement = &OtherRead{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2856
		{
			setAllowComments(yylex, true)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.bytes2 = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.str = UnionStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.str = UnionAllStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.str = UnionDistinctStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.str = SQLCacheStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.str = DistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.str = StraightJoinHint
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.selectExprs = nil
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3061
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.str = StraightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3092
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.str = NaturalJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3114
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3143
		{
			yyVAL.indexHints = nil
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3204
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.str = IsNullStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.str = IsNotNullStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.str = IsTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.str = IsNotTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.str = IsFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.str = IsNotFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.str = EqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.str = LessThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.str = GreaterThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.str = LessEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.str = GreaterEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.str = NotEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.expr = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3447
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3451
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3459
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3473
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3477
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3481
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3521
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3533
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 490:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3537
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3541
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3545
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3628
		{
			yyVAL.str = BooleanModeStr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3640
		{
			yyVAL.str = QueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3711
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3715
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.str = string("")
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3730
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3734
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3740
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3745
		{
			yyVAL.expr = nil
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3749
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3755
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3759
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3763
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3769
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3773
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3777
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3781
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3785
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3789
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3793
		{
			yyVAL.expr = &NullVal{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3799
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3817
		{
			yyVAL.exprs = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3821
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3826
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3835
		{
			yyVAL.orderBy = nil
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3839
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3845
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3849
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3855
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3864
		{
			yyVAL.str = AscScr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3868
		{
			yyVAL.str = DescScr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.limit = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3881
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3885
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3890
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3894
		{
			yyVAL.str = ForUpdateStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3898
		{
			yyVAL.str = ShareModeStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3911
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3915
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3919
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3924
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3928
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3932
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3956
		{
			yyVAL.updateExprs = nil
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3976
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3980
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3992
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4002
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4012
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4022
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4028
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4032
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.bytes = []byte("charset")
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4046
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4050
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4054
		{
			yyVAL.expr = &Default{}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4063
		{
			yyVAL.byt = 0
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4067
		{
			yyVAL.byt = 1
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4072
		{
			yyVAL.byt = 0
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4076
		{
			yyVAL.byt = 1
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4085
		{
			yyVAL.str = IgnoreStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4099
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4103
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4107
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4115
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4119
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4123
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4127
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4146
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4155
		{
			yyVAL.str = IndexStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4159
		{
			yyVAL.str = UniqueStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4165
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4169
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4176
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4182
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4186
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4193
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4401
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4410
		{
			decNesting(yylex)
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4415
		{
			forceEOF(yylex)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4420
		{
			forceEOF(yylex)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4424
		{
			forceEOF(yylex)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4428
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
