//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const USING = 57463
const PRIMARY = 57464
const COLUMN = 57465
const DESC = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const SHOW = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const BIT = 57475
const TINYINT = 57476
const SMALLINT = 57477
const MEDIUMINT = 57478
const INT = 57479
const INTEGER = 57480
const BIGINT = 57481
const INTNUM = 57482
const REAL = 57483
const DOUBLE = 57484
const FLOAT_TYPE = 57485
const DECIMAL = 57486
const NUMERIC = 57487
const TIME = 57488
const TIMESTAMP = 57489
const DATETIME = 57490
const YEAR = 57491
const CHAR = 57492
const VARCHAR = 57493
const BOOL = 57494
const CHARACTER = 57495
const VARBINARY = 57496
const NCHAR = 57497
const CHARSET = 57498
const TEXT = 57499
const TINYTEXT = 57500
const MEDIUMTEXT = 57501
const LONGTEXT = 57502
const BLOB = 57503
const TINYBLOB = 57504
const MEDIUMBLOB = 57505
const LONGBLOB = 57506
const JSON = 57507
const ENUM = 57508
const GEOMETRY = 57509
const POINT = 57510
const LINESTRING = 57511
const POLYGON = 57512
const GEOMETRYCOLLECTION = 57513
const MULTIPOINT = 57514
const MULTILINESTRING = 57515
const MULTIPOLYGON = 57516
const NULLX = 57517
const AUTO_INCREMENT = 57518
const APPROXNUM = 57519
const SIGNED = 57520
const UNSIGNED = 57521
const ZEROFILL = 57522
const FIXED = 57523
const DYNAMIC = 57524
const STORAGE = 57525
const DISK = 57526
const MEMORY = 57527
const COLUMN_FORMAT = 57528
const AVG_ROW_LENGTH = 57529
const COMPRESSION = 57530
const CONNECTION = 57531
const DATA = 57532
const DIRECTORY = 57533
const DELAY_KEY_WRITE = 57534
const ENCRYPTION = 57535
const INSERT_METHOD = 57536
const MAX_ROWS = 57537
const MIN_ROWS = 57538
const PACK_KEYS = 57539
const PASSWORD = 57540
const ROW_FORMAT = 57541
const STATS_AUTO_RECALC = 57542
const STATS_PERSISTENT = 57543
const STATS_SAMPLE_PAGES = 57544
const TABLESPACE = 57545
const COMPRESSED = 57546
const REDUNDANT = 57547
const COMPACT = 57548
const TOKUDB_DEFAULT = 57549
const TOKUDB_FAST = 57550
const TOKUDB_SMALL = 57551
const TOKUDB_ZLIB = 57552
const TOKUDB_QUICKLZ = 57553
const TOKUDB_LZMA = 57554
const TOKUDB_SNAPPY = 57555
const TOKUDB_UNCOMPRESSED = 57556
const COLLATION = 57557
const DATABASES = 57558
const TABLES = 57559
const WARNINGS = 57560
const VARIABLES = 57561
const EVENTS = 57562
const BINLOG = 57563
const GTID = 57564
const STATUS = 57565
const COLUMNS = 57566
const FIELDS = 57567
const CURRENT_TIMESTAMP = 57568
const CURRENT_DATE = 57569
const DATABASE = 57570
const SCHEMA = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const FORMAT = 57591
const TREE = 57592
const TRADITIONAL = 57593
const EXTENDED = 57594
const PARTITION = 57595
const PARTITIONS = 57596
const LIST = 57597
const XA = 57598
const DISTRIBUTED = 57599
const ENGINES = 57600
const VERSIONS = 57601
const PROCESSLIST = 57602
const QUERYZ = 57603
const TXNZ = 57604
const KILL = 57605
const ENGINE = 57606
const SINGLE = 57607
const BEGIN = 57608
const START = 57609
const TRANSACTION = 57610
const COMMIT = 57611
const ROLLBACK = 57612
const GLOBAL = 57613
const LOCAL = 57614
const SESSION = 57615
const NAMES = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const RADON = 57626
const ATTACH = 57627
const ATTACHLIST = 57628
const DETACH = 57629
const RESHARD = 57630
const CLEANUP = 57631
const RECOVER = 57632
const REBALANCE = 57633

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5005

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 195,
	6, 355,
	7, 355,
	8, 355,
	9, 355,
	18, 355,
	67, 355,
	253, 355,
	-2, 881,
	-1, 238,
	94, 890,
	-2, 698,
	-1, 244,
	94, 747,
	-2, 676,
	-1, 424,
	5, 28,
	-2, 347,
	-1, 503,
	122, 728,
	-2, 724,
	-1, 504,
	122, 729,
	-2, 725,
	-1, 537,
	119, 89,
	167, 89,
	170, 89,
	173, 89,
	-2, 101,
	-1, 588,
	1, 82,
	309, 82,
	-2, 89,
	-1, 720,
	5, 28,
	-2, 647,
	-1, 749,
	119, 89,
	167, 89,
	170, 89,
	173, 89,
	-2, 102,
	-1, 807,
	35, 309,
	67, 309,
	70, 309,
	133, 309,
	-2, 887,
	-1, 860,
	1, 83,
	309, 83,
	-2, 89,
	-1, 951,
	122, 731,
	-2, 727,
	-1, 1133,
	5, 29,
	-2, 526,
	-1, 1157,
	5, 29,
	-2, 648,
	-1, 1292,
	5, 28,
	-2, 650,
	-1, 1420,
	5, 29,
	-2, 651,
}

const yyPrivate = 57344

const yyLast = 10818

var yyAct = [...]int{

	504, 481, 1493, 1423, 1096, 623, 1324, 1282, 1449, 1353,
	842, 1455, 457, 980, 1367, 1283, 479, 723, 1323, 1479,
	1316, 1216, 1055, 239, 214, 981, 1032, 856, 1262, 1364,
	424, 3, 728, 935, 58, 243, 1004, 1126, 945, 111,
	942, 111, 950, 1118, 889, 1098, 1097, 836, 1045, 68,
	724, 977, 961, 1034, 378, 422, 459, 189, 912, 626,
	605, 1008, 777, 379, 1070, 861, 111, 763, 247, 456,
	381, 811, 523, 446, 506, 522, 606, 944, 512, 455,
	213, 1035, 235, 588, 242, 111, 852, 111, 482, 49,
	750, 521, 234, 391, 223, 232, 210, 442, 443, 57,
	200, 1166, 202, 203, 444, 211, 212, 997, 525, 111,
	996, 736, 524, 998, 1167, 1168, 737, 738, 441, 524,
	201, 525, 1377, 1424, 618, 204, 206, 205, 207, 208,
	747, 209, 376, 897, 1515, 691, 375, 1478, 49, 25,
	50, 27, 28, 1492, 374, 199, 1514, 398, 399, 219,
	373, 407, 408, 409, 1469, 411, 412, 413, 414, 415,
	416, 417, 788, 25, 50, 27, 28, 1512, 1491, 404,
	1275, 1100, 1347, 25, 50, 27, 28, 1468, 1457, 798,
	410, 1048, 396, 780, 886, 423, 1049, 1050, 83, 395,
	1480, 381, 529, 1018, 1017, 611, 1065, 1099, 835, 1061,
	55, 29, 198, 1241, 37, 843, 434, 436, 111, 619,
	620, 107, 400, 106, 1393, 775, 947, 1007, 1342, 402,
	403, 38, 1340, 1091, 55, 1060, 1090, 1089, 111, 1037,
	111, 1458, 104, 1218, 55, 247, 1041, 1042, 1043, 392,
	383, 247, 247, 79, 1044, 477, 478, 62, 428, 1218,
	509, 242, 508, 1088, 420, 1445, 103, 530, 530, 433,
	25, 50, 27, 28, 437, 1011, 439, 440, 1010, 784,
	1444, 1009, 1415, 1417, 64, 65, 66, 67, 1443, 805,
	49, 49, 31, 32, 33, 1076, 35, 1086, 81, 1497,
	628, 386, 385, 435, 435, 397, 628, 389, 54, 53,
	52, 36, 72, 384, 47, 48, 34, 388, 49, 108,
	73, 88, 86, 77, 843, 85, 1374, 526, 96, 105,
	1332, 55, 651, 652, 653, 654, 655, 648, 1160, 778,
	658, 1132, 1130, 1011, 1036, 990, 1010, 670, 671, 1009,
	779, 781, 782, 783, 1416, 785, 786, 787, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 1062, 1063, 102,
	1435, 647, 646, 656, 657, 649, 650, 651, 652, 653,
	654, 655, 648, 1481, 1467, 658, 786, 804, 746, 679,
	1058, 1059, 430, 590, 658, 1085, 51, 627, 111, 111,
	744, 648, 590, 627, 658, 633, 891, 111, 111, 429,
	75, 76, 636, 1005, 1087, 111, 989, 1048, 635, 634,
	51, 74, 1049, 1050, 1463, 405, 612, 776, 101, 89,
	51, 100, 98, 634, 87, 636, 95, 1225, 528, 431,
	39, 111, 449, 507, 533, 706, 1277, 41, 962, 636,
	42, 43, 1322, 45, 44, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 591, 46, 658,
	514, 90, 99, 93, 94, 97, 615, 1100, 510, 1320,
	962, 609, 1143, 613, 1457, 599, 610, 1226, 607, 635,
	634, 1136, 1040, 597, 1100, 55, 1119, 890, 1510, 919,
	621, 1457, 622, 1099, 625, 915, 636, 635, 634, 629,
	630, 631, 1194, 917, 918, 916, 1138, 51, 1502, 406,
	1099, 668, 247, 680, 636, 635, 634, 111, 1436, 1321,
	1213, 247, 1279, 1425, 75, 76, 382, 1458, 712, 1211,
	1311, 725, 636, 708, 1312, 726, 707, 242, 1499, 381,
	1209, 1485, 667, 669, 1458, 1315, 720, 1111, 1112, 1113,
	1212, 1137, 635, 634, 905, 907, 908, 1314, 1190, 1210,
	906, 1189, 844, 845, 846, 1056, 1188, 1057, 678, 636,
	1208, 681, 682, 683, 684, 685, 686, 687, 1185, 690,
	692, 692, 692, 692, 692, 692, 692, 692, 700, 701,
	702, 703, 1192, 799, 838, 839, 840, 841, 111, 111,
	936, 387, 937, 1459, 721, 710, 1180, 111, 111, 638,
	849, 850, 851, 731, 709, 858, 730, 1179, 1178, 739,
	801, 1074, 1191, 1073, 745, 1066, 885, 111, 693, 694,
	695, 696, 697, 698, 699, 649, 650, 651, 652, 653,
	654, 655, 648, 913, 896, 658, 432, 1396, 1313, 1302,
	1301, 862, 624, 1193, 1186, 1182, 1181, 1196, 1195, 1172,
	637, 887, 888, 1103, 445, 1102, 1071, 895, 639, 894,
	1053, 854, 855, 1511, 1318, 1503, 635, 634, 247, 1448,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 247, 1390, 636, 941, 1033, 242, 1243, 914, 624,
	680, 1317, 1240, 949, 1506, 445, 689, 963, 1386, 1483,
	1386, 1451, 953, 1446, 445, 951, 1386, 1427, 1386, 1426,
	1384, 982, 247, 1187, 1263, 1351, 445, 1383, 899, 1386,
	445, 725, 247, 1124, 445, 726, 979, 999, 986, 1232,
	1231, 1382, 966, 1228, 1229, 742, 381, 1095, 242, 1265,
	939, 940, 984, 1228, 1227, 1094, 987, 938, 49, 594,
	954, 955, 593, 991, 958, 1267, 959, 1271, 592, 1266,
	681, 1264, 1159, 445, 898, 445, 1269, 390, 965, 969,
	967, 968, 970, 879, 59, 952, 1268, 471, 470, 472,
	473, 474, 475, 976, 1093, 1152, 476, 964, 1224, 1270,
	1272, 538, 537, 25, 729, 978, 993, 988, 983, 1000,
	49, 994, 878, 1006, 526, 1012, 1013, 1014, 1015, 1016,
	898, 988, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1001, 1002, 1439, 1124, 881,
	1003, 718, 25, 1155, 1351, 719, 1230, 1124, 877, 1067,
	1068, 902, 903, 1124, 909, 910, 1355, 1358, 1359, 1360,
	1356, 988, 1357, 1361, 55, 111, 111, 111, 25, 647,
	646, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 735, 1039, 658, 1291, 733, 704, 520, 55, 220,
	1429, 837, 1380, 857, 1046, 874, 872, 868, 624, 871,
	873, 956, 957, 55, 1308, 1355, 1358, 1359, 1360, 1356,
	480, 1357, 1361, 1072, 1303, 1440, 78, 69, 913, 1222,
	853, 507, 848, 862, 1077, 1082, 1075, 1106, 1083, 55,
	1078, 847, 978, 866, 865, 864, 598, 1408, 23, 876,
	1406, 1442, 1409, 1101, 716, 1407, 992, 1441, 247, 109,
	55, 193, 1405, 1107, 1105, 1404, 1504, 1410, 1109, 1359,
	1360, 1490, 875, 1110, 1128, 224, 225, 901, 1476, 513,
	975, 974, 111, 914, 1100, 1114, 193, 447, 1099, 1328,
	1177, 227, 511, 1176, 1069, 534, 49, 518, 798, 1153,
	863, 600, 1363, 221, 222, 193, 70, 193, 513, 218,
	1099, 725, 381, 381, 448, 726, 1289, 242, 1220, 1052,
	1051, 1038, 1500, 1142, 1164, 1489, 1165, 1100, 452, 193,
	1488, 1123, 1161, 870, 1487, 973, 951, 215, 1399, 1173,
	82, 1154, 1215, 972, 880, 536, 1306, 1140, 1131, 1162,
	1305, 535, 216, 1121, 1174, 1175, 1307, 1122, 59, 1398,
	869, 1350, 1217, 729, 1183, 1184, 602, 229, 1133, 1134,
	1135, 1219, 1371, 1139, 1054, 1170, 1171, 632, 1145, 61,
	1146, 1147, 1148, 1149, 656, 657, 649, 650, 651, 652,
	653, 654, 655, 648, 111, 63, 658, 56, 1156, 1157,
	1158, 1221, 381, 1, 111, 427, 6, 425, 5, 426,
	4, 372, 1422, 1223, 860, 1169, 859, 810, 1104, 809,
	1486, 71, 1477, 1233, 1234, 1108, 1454, 1456, 193, 1461,
	1433, 1430, 1432, 749, 748, 377, 800, 816, 247, 815,
	814, 812, 1064, 247, 834, 1319, 1248, 1249, 193, 1242,
	193, 821, 1239, 1246, 1128, 1247, 1244, 242, 820, 242,
	1250, 743, 774, 111, 949, 773, 1261, 982, 772, 1251,
	247, 247, 771, 1256, 1288, 1257, 951, 1274, 1235, 1236,
	1237, 1273, 1260, 1259, 770, 1276, 1294, 1295, 769, 1144,
	768, 1290, 1281, 767, 1280, 766, 1296, 765, 764, 1292,
	1252, 762, 761, 760, 759, 758, 757, 1299, 1300, 756,
	624, 755, 751, 754, 753, 190, 1163, 1376, 752, 1286,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 819, 817, 658, 813, 543, 541, 1255, 542,
	228, 540, 545, 544, 539, 1362, 247, 247, 247, 1366,
	1217, 1287, 1309, 1125, 983, 84, 1092, 1293, 1310, 393,
	197, 394, 1325, 1325, 1325, 1326, 1327, 1084, 646, 656,
	657, 649, 650, 651, 652, 653, 654, 655, 648, 1329,
	1330, 658, 867, 418, 40, 1297, 1298, 80, 666, 971,
	1047, 240, 995, 734, 732, 231, 230, 985, 111, 111,
	705, 505, 1397, 982, 1349, 1338, 1141, 688, 193, 193,
	960, 458, 904, 469, 247, 1372, 466, 193, 604, 247,
	468, 1335, 1336, 467, 1337, 193, 711, 1339, 680, 1341,
	1325, 717, 1378, 640, 1373, 1325, 450, 1379, 1414, 1285,
	1217, 882, 1381, 247, 191, 419, 92, 91, 401, 515,
	1354, 614, 1352, 1284, 1286, 1151, 601, 1392, 1346, 242,
	1434, 715, 111, 111, 111, 111, 1261, 818, 26, 1400,
	1278, 1402, 60, 111, 1345, 1333, 111, 1334, 1401, 111,
	1403, 1411, 438, 1387, 226, 247, 1365, 14, 1343, 1344,
	983, 247, 49, 1418, 725, 22, 1375, 247, 726, 1419,
	15, 1421, 517, 1431, 519, 13, 953, 1325, 12, 1428,
	30, 10, 9, 1325, 8, 1438, 7, 217, 1286, 1286,
	1286, 1286, 24, 2, 21, 20, 19, 18, 17, 16,
	11, 802, 1286, 803, 1304, 0, 0, 193, 1385, 727,
	247, 1388, 1389, 0, 0, 1453, 1450, 1460, 1464, 0,
	1287, 1287, 1287, 1287, 1462, 1465, 1325, 0, 1452, 0,
	1475, 1395, 0, 0, 1365, 0, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 0, 247, 247, 247, 1495, 1496, 1420, 672,
	673, 674, 675, 676, 677, 0, 0, 0, 0, 1494,
	1494, 1494, 1501, 0, 1484, 0, 1348, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 247, 193, 193,
	0, 0, 0, 0, 0, 1498, 0, 892, 193, 0,
	1120, 0, 0, 1513, 0, 0, 0, 1447, 0, 0,
	0, 0, 1472, 1473, 1474, 0, 0, 193, 0, 1466,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 595, 596, 658, 0, 0, 0, 0, 0,
	0, 603, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 0, 828, 827, 0, 560, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 435, 0, 0, 948,
	614, 0, 0, 948, 948, 0, 0, 948, 1505, 0,
	1507, 1508, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 948, 948, 948, 948, 1437, 624, 0, 829, 822,
	0, 0, 0, 0, 0, 823, 948, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 0, 0, 0, 1470, 1471, 831, 911,
	0, 0, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 561, 826, 0,
	0, 722, 574, 577, 578, 579, 580, 581, 582, 0,
	583, 584, 585, 586, 587, 562, 563, 564, 565, 546,
	547, 575, 0, 549, 0, 0, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 566, 567, 568, 569,
	570, 571, 572, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 193, 193, 193, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 645, 0, 0,
	0, 900, 576, 659, 660, 661, 662, 663, 664, 665,
	0, 643, 644, 641, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 0, 0, 658, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 113, 0, 0, 0, 139, 0, 143, 146, 147,
	0, 0, 0, 0, 0, 0, 1115, 1116, 1117, 943,
	0, 454, 0, 0, 129, 453, 0, 0, 0, 0,
	490, 149, 0, 0, 167, 152, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 503, 471, 470, 472, 473, 474, 475, 0,
	0, 119, 476, 477, 478, 0, 0, 0, 451, 464,
	0, 489, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 461, 462, 946, 0, 0, 0, 501, 0, 463,
	0, 0, 460, 465, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 0, 0, 0, 948, 180, 0, 0, 499,
	0, 614, 948, 0, 0, 0, 0, 123, 0, 165,
	0, 178, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 138, 193, 0, 174, 175, 124, 181, 0,
	0, 116, 0, 0, 158, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 145, 131, 140, 162, 150, 163,
	141, 156, 155, 157, 0, 0, 0, 168, 0, 0,
	137, 130, 172, 127, 153, 120, 114, 0, 121, 122,
	126, 125, 0, 144, 151, 154, 160, 161, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 0, 1253, 1254,
	0, 0, 171, 0, 136, 491, 497, 500, 0, 498,
	495, 496, 494, 493, 492, 502, 485, 486, 488, 0,
	487, 112, 117, 148, 0, 164, 134, 179, 135, 177,
	176, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 169, 0, 170, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 193, 1369,
	0, 0, 0, 182, 183, 185, 184, 186, 118, 187,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1238, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1245, 0,
	0, 0, 193, 193, 193, 193, 0, 0, 0, 0,
	0, 1331, 0, 1412, 0, 0, 193, 0, 0, 1369,
	0, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 339, 297, 358, 273, 288, 370, 290, 291,
	327, 256, 307, 159, 286, 113, 0, 257, 0, 139,
	0, 143, 146, 147, 0, 336, 0, 0, 0, 347,
	356, 304, 0, 276, 249, 283, 250, 301, 129, 272,
	341, 310, 289, 0, 364, 149, 319, 0, 167, 152,
	0, 0, 303, 344, 305, 337, 296, 328, 265, 318,
	359, 287, 324, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 1394, 119, 321, 353, 285, 323,
	326, 248, 320, 0, 252, 258, 369, 351, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 302, 306, 333,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 317, 0, 0, 0, 260, 254, 300, 0, 0,
	0, 264, 0, 278, 334, 0, 0, 0, 345, 295,
	180, 352, 293, 292, 360, 330, 0, 274, 275, 284,
	342, 123, 282, 165, 325, 178, 115, 349, 343, 315,
	298, 299, 253, 0, 332, 128, 138, 271, 322, 174,
	175, 124, 181, 259, 366, 116, 245, 365, 158, 244,
	173, 350, 316, 312, 255, 348, 314, 311, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 251,
	0, 168, 357, 371, 137, 130, 172, 127, 153, 120,
	114, 262, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	346, 0, 0, 0, 0, 0, 171, 261, 136, 268,
	266, 269, 338, 267, 308, 309, 361, 362, 363, 335,
	263, 0, 0, 340, 313, 112, 117, 148, 368, 164,
	134, 179, 135, 177, 176, 133, 0, 0, 0, 0,
	0, 281, 367, 331, 329, 354, 0, 132, 169, 0,
	170, 233, 0, 0, 238, 236, 237, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 355, 339, 297, 358, 273,
	288, 370, 290, 291, 327, 256, 307, 159, 286, 113,
	0, 257, 0, 139, 0, 143, 146, 147, 0, 336,
	0, 0, 0, 347, 356, 304, 0, 276, 249, 283,
	250, 301, 129, 272, 341, 310, 289, 0, 364, 149,
	319, 0, 167, 152, 0, 0, 303, 344, 305, 337,
	296, 328, 265, 318, 359, 287, 324, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	321, 353, 285, 323, 326, 248, 320, 0, 252, 258,
	369, 351, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 302, 306, 333, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 317, 0, 0, 0, 260,
	254, 300, 0, 0, 0, 264, 0, 278, 334, 0,
	0, 0, 345, 295, 180, 352, 293, 292, 360, 330,
	0, 274, 275, 284, 342, 123, 282, 165, 325, 178,
	115, 349, 343, 315, 298, 299, 253, 0, 332, 128,
	138, 271, 322, 174, 175, 124, 181, 259, 366, 116,
	245, 365, 158, 244, 173, 350, 316, 312, 255, 348,
	314, 311, 145, 131, 140, 162, 150, 163, 141, 156,
	155, 157, 0, 251, 0, 168, 357, 371, 137, 130,
	172, 127, 153, 120, 114, 262, 121, 122, 126, 125,
	0, 144, 151, 154, 160, 161, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 346, 0, 0, 0, 0, 0,
	171, 261, 136, 268, 266, 269, 338, 267, 308, 309,
	361, 362, 363, 335, 263, 0, 0, 340, 313, 112,
	117, 148, 368, 164, 134, 179, 135, 177, 176, 133,
	0, 0, 0, 0, 0, 281, 367, 331, 329, 354,
	0, 132, 169, 0, 170, 0, 0, 0, 238, 236,
	237, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 185, 184, 186, 118, 187, 188, 355,
	339, 297, 358, 273, 288, 370, 290, 291, 327, 256,
	307, 159, 286, 113, 0, 257, 0, 139, 0, 143,
	146, 147, 0, 336, 0, 0, 0, 347, 356, 304,
	0, 276, 249, 283, 250, 301, 129, 272, 341, 310,
	289, 0, 364, 149, 319, 0, 167, 152, 0, 0,
	303, 344, 305, 337, 296, 328, 265, 318, 359, 287,
	324, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 321, 353, 285, 323, 326, 248,
	320, 0, 252, 258, 369, 351, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 302, 306, 333, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 317,
	0, 0, 0, 260, 254, 300, 0, 0, 0, 264,
	0, 278, 334, 0, 0, 0, 345, 295, 180, 352,
	293, 292, 360, 330, 0, 274, 275, 284, 342, 123,
	282, 165, 325, 178, 115, 349, 343, 315, 298, 299,
	253, 0, 332, 128, 138, 271, 322, 174, 175, 124,
	181, 259, 366, 116, 245, 365, 158, 244, 173, 350,
	316, 312, 255, 348, 314, 311, 145, 131, 140, 162,
	150, 163, 141, 156, 155, 157, 0, 251, 0, 168,
	357, 371, 137, 130, 172, 127, 153, 120, 114, 262,
	121, 122, 126, 125, 0, 144, 151, 154, 160, 161,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 346, 0,
	0, 0, 0, 0, 171, 261, 136, 268, 266, 269,
	338, 267, 308, 309, 361, 362, 363, 335, 263, 0,
	0, 340, 313, 112, 117, 148, 368, 164, 134, 179,
	135, 177, 176, 133, 0, 0, 0, 0, 0, 281,
	367, 331, 329, 354, 0, 132, 169, 0, 170, 527,
	0, 0, 142, 0, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 185, 184, 186,
	118, 187, 188, 355, 339, 297, 358, 273, 288, 370,
	290, 291, 327, 256, 307, 159, 286, 113, 0, 257,
	0, 139, 0, 143, 146, 147, 0, 336, 0, 0,
	0, 347, 356, 304, 0, 276, 249, 283, 250, 301,
	129, 272, 341, 310, 289, 0, 364, 149, 319, 0,
	167, 152, 0, 0, 303, 344, 305, 337, 296, 328,
	265, 318, 359, 287, 324, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 321, 353,
	285, 323, 326, 248, 320, 0, 252, 258, 369, 351,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 302,
	306, 333, 294, 0, 0, 0, 0, 0, 0, 1391,
	0, 277, 0, 317, 0, 0, 0, 260, 254, 300,
	0, 0, 0, 264, 0, 278, 334, 0, 0, 0,
	345, 295, 180, 352, 293, 292, 360, 330, 0, 274,
	275, 284, 342, 123, 282, 165, 325, 178, 115, 349,
	343, 315, 298, 299, 253, 0, 332, 128, 138, 271,
	322, 174, 175, 124, 181, 259, 366, 116, 616, 365,
	158, 617, 173, 350, 316, 312, 255, 348, 314, 311,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 251, 0, 168, 357, 371, 137, 130, 172, 127,
	153, 120, 114, 262, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 346, 0, 0, 0, 0, 0, 171, 261,
	136, 268, 266, 269, 338, 267, 308, 309, 361, 362,
	363, 335, 263, 0, 0, 340, 313, 112, 117, 148,
	368, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 281, 367, 331, 329, 354, 0, 132,
	169, 0, 170, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 355, 339, 297,
	358, 273, 288, 370, 290, 291, 327, 256, 307, 159,
	286, 113, 0, 257, 0, 139, 0, 143, 146, 147,
	0, 336, 0, 0, 0, 347, 356, 304, 0, 276,
	249, 283, 250, 301, 129, 272, 341, 310, 289, 0,
	364, 149, 319, 0, 167, 152, 0, 0, 303, 344,
	305, 337, 296, 328, 265, 318, 359, 287, 324, 0,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 321, 353, 285, 323, 326, 248, 320, 0,
	252, 258, 369, 351, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 302, 306, 333, 294, 0, 0, 0,
	0, 0, 0, 1258, 0, 277, 0, 317, 0, 0,
	0, 260, 254, 300, 0, 0, 0, 264, 0, 278,
	334, 0, 0, 0, 345, 295, 180, 352, 293, 292,
	360, 330, 0, 274, 275, 284, 342, 123, 282, 165,
	325, 178, 115, 349, 343, 315, 298, 299, 253, 0,
	332, 128, 138, 271, 322, 174, 175, 124, 181, 259,
	366, 116, 616, 365, 158, 617, 173, 350, 316, 312,
	255, 348, 314, 311, 145, 131, 140, 162, 150, 163,
	141, 156, 155, 157, 0, 251, 0, 168, 357, 371,
	137, 130, 172, 127, 153, 120, 114, 262, 121, 122,
	126, 125, 0, 144, 151, 154, 160, 161, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 346, 0, 0, 0,
	0, 0, 171, 261, 136, 268, 266, 269, 338, 267,
	308, 309, 361, 362, 363, 335, 263, 0, 0, 340,
	313, 112, 117, 148, 368, 164, 134, 179, 135, 177,
	176, 133, 0, 0, 0, 0, 0, 281, 367, 331,
	329, 354, 0, 132, 169, 0, 170, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 185, 184, 186, 118, 187,
	188, 355, 339, 297, 358, 273, 288, 370, 290, 291,
	327, 256, 307, 159, 286, 113, 0, 257, 0, 139,
	0, 143, 146, 147, 0, 336, 0, 0, 0, 347,
	356, 304, 0, 276, 249, 283, 250, 301, 129, 272,
	341, 310, 289, 0, 364, 149, 319, 0, 167, 152,
	0, 0, 303, 344, 305, 337, 296, 328, 265, 318,
	359, 287, 324, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 321, 353, 285, 323,
	326, 248, 320, 0, 252, 258, 369, 351, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 302, 306, 333,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 317, 0, 0, 0, 260, 254, 300, 0, 0,
	0, 264, 0, 278, 334, 0, 0, 0, 345, 295,
	180, 352, 293, 292, 360, 330, 0, 274, 275, 284,
	342, 123, 282, 165, 325, 178, 115, 349, 343, 315,
	298, 299, 253, 0, 332, 128, 138, 271, 322, 174,
	175, 124, 181, 259, 366, 116, 245, 365, 158, 244,
	173, 350, 316, 312, 255, 348, 314, 311, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 251,
	0, 168, 357, 371, 137, 130, 172, 127, 153, 120,
	114, 262, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	346, 0, 0, 0, 0, 0, 171, 261, 136, 268,
	266, 269, 338, 267, 308, 309, 361, 362, 363, 335,
	263, 0, 0, 340, 313, 112, 117, 148, 368, 164,
	134, 179, 135, 177, 176, 133, 0, 0, 0, 0,
	0, 281, 367, 331, 329, 354, 0, 132, 169, 0,
	170, 0, 0, 0, 142, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 355, 339, 297, 358, 273,
	288, 370, 290, 291, 327, 256, 307, 159, 286, 113,
	0, 257, 0, 139, 0, 143, 146, 147, 0, 336,
	0, 0, 0, 347, 356, 304, 0, 276, 249, 283,
	250, 301, 129, 272, 341, 310, 289, 0, 364, 149,
	319, 0, 167, 152, 0, 0, 303, 344, 305, 337,
	296, 328, 265, 318, 359, 287, 324, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	321, 353, 285, 323, 326, 248, 320, 0, 252, 258,
	369, 351, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 302, 306, 333, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 317, 0, 0, 0, 260,
	254, 300, 0, 0, 0, 264, 0, 278, 334, 0,
	0, 0, 345, 295, 180, 352, 293, 292, 360, 330,
	0, 274, 275, 284, 342, 123, 282, 165, 325, 178,
	115, 349, 343, 315, 298, 299, 253, 0, 332, 128,
	138, 271, 322, 174, 175, 124, 181, 259, 366, 116,
	616, 365, 158, 617, 173, 350, 316, 312, 255, 348,
	314, 311, 145, 131, 140, 162, 150, 163, 141, 156,
	155, 157, 0, 251, 0, 168, 357, 371, 137, 130,
	172, 127, 153, 120, 114, 262, 121, 122, 126, 125,
	0, 144, 151, 154, 160, 161, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 346, 0, 0, 0, 0, 0,
	171, 261, 136, 268, 266, 269, 338, 267, 308, 309,
	361, 362, 363, 335, 263, 0, 0, 340, 313, 112,
	117, 148, 368, 164, 134, 179, 135, 177, 176, 133,
	0, 0, 0, 0, 0, 281, 367, 331, 329, 354,
	0, 132, 169, 0, 170, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 185, 184, 186, 118, 187, 188, 355,
	339, 297, 358, 273, 288, 370, 290, 291, 327, 256,
	307, 159, 286, 113, 0, 257, 0, 139, 0, 143,
	146, 147, 0, 336, 0, 0, 0, 347, 356, 304,
	0, 276, 249, 283, 250, 301, 129, 272, 341, 310,
	289, 0, 364, 149, 319, 0, 167, 152, 0, 0,
	303, 344, 305, 337, 296, 328, 265, 318, 359, 287,
	324, 0, 0, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 321, 353, 285, 323, 326, 248,
	320, 0, 252, 258, 369, 351, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 302, 306, 333, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 317,
	0, 0, 0, 260, 254, 300, 0, 0, 0, 264,
	0, 278, 334, 0, 0, 0, 345, 295, 180, 352,
	293, 292, 360, 330, 0, 274, 275, 284, 342, 123,
	282, 165, 325, 178, 115, 349, 343, 315, 298, 299,
	253, 0, 332, 128, 138, 271, 322, 174, 175, 124,
	181, 259, 366, 116, 616, 365, 158, 617, 173, 350,
	316, 312, 255, 348, 314, 311, 145, 131, 140, 162,
	150, 163, 141, 156, 155, 157, 0, 251, 0, 168,
	357, 371, 137, 130, 172, 127, 153, 120, 114, 262,
	121, 122, 126, 125, 0, 144, 151, 154, 160, 161,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 346, 0,
	0, 0, 0, 0, 171, 261, 136, 268, 266, 269,
	338, 267, 308, 309, 361, 362, 363, 335, 263, 0,
	0, 340, 313, 112, 117, 148, 368, 164, 134, 179,
	135, 177, 176, 133, 0, 0, 0, 0, 0, 281,
	367, 331, 329, 354, 0, 132, 169, 0, 170, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 185, 184, 186,
	118, 187, 188, 355, 339, 297, 358, 273, 288, 370,
	290, 291, 327, 256, 307, 159, 286, 113, 0, 257,
	0, 139, 0, 143, 146, 147, 0, 336, 0, 0,
	0, 347, 356, 304, 0, 276, 249, 283, 250, 301,
	129, 272, 341, 310, 289, 0, 364, 149, 319, 0,
	167, 152, 0, 0, 303, 344, 305, 337, 296, 328,
	265, 318, 359, 287, 324, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 321, 353,
	285, 323, 326, 248, 320, 0, 252, 258, 369, 351,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 302,
	306, 333, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 317, 0, 0, 0, 260, 254, 300,
	0, 0, 0, 264, 0, 278, 334, 0, 0, 0,
	345, 295, 180, 352, 293, 292, 360, 330, 0, 274,
	275, 284, 342, 123, 282, 165, 325, 178, 115, 349,
	343, 315, 298, 299, 253, 0, 332, 128, 138, 271,
	322, 174, 175, 124, 181, 259, 366, 116, 616, 365,
	158, 617, 173, 350, 316, 312, 255, 348, 314, 311,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 251, 0, 168, 357, 371, 137, 130, 172, 127,
	153, 120, 114, 262, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 346, 0, 0, 0, 0, 0, 171, 261,
	136, 268, 266, 269, 338, 267, 308, 309, 361, 362,
	363, 335, 263, 0, 0, 340, 313, 112, 117, 148,
	368, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 281, 367, 331, 329, 354, 0, 132,
	169, 0, 170, 0, 0, 159, 142, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 454, 0, 0,
	129, 453, 0, 0, 0, 0, 490, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 740, 55, 0, 0, 503, 471,
	470, 472, 473, 474, 475, 0, 0, 119, 476, 477,
	478, 741, 0, 0, 451, 464, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 501, 0, 463, 0, 0, 460, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 491, 497, 500, 0, 498, 495, 496, 494, 493,
	492, 502, 485, 486, 488, 0, 487, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	169, 0, 170, 0, 0, 159, 142, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 454, 0, 0,
	129, 453, 0, 0, 0, 0, 490, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 503, 471,
	470, 472, 473, 474, 475, 0, 0, 119, 476, 477,
	478, 0, 0, 0, 451, 464, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 462, 946,
	0, 0, 0, 501, 0, 463, 0, 0, 460, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 491, 497, 500, 0, 498, 495, 496, 494, 493,
	492, 502, 485, 486, 488, 0, 487, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	169, 0, 170, 0, 0, 159, 142, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 454, 0, 0,
	129, 453, 0, 0, 0, 0, 490, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 445, 503, 471,
	470, 472, 473, 474, 475, 0, 0, 119, 476, 477,
	478, 0, 0, 0, 451, 464, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 501, 0, 463, 0, 0, 460, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 491, 497, 500, 0, 498, 495, 496, 494, 493,
	492, 502, 485, 486, 488, 0, 487, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 0, 25, 0, 0, 0, 0, 132,
	169, 0, 170, 0, 0, 159, 142, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 454, 0, 0,
	129, 453, 0, 0, 0, 0, 490, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 503, 471,
	470, 472, 473, 474, 475, 0, 0, 119, 476, 477,
	478, 0, 0, 0, 451, 464, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 501, 0, 463, 0, 0, 460, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 491, 497, 500, 0, 498, 495, 496, 494, 493,
	492, 502, 485, 486, 488, 0, 487, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	169, 0, 170, 0, 0, 159, 142, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 454, 0, 0,
	129, 453, 0, 0, 0, 0, 490, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 503, 471,
	470, 472, 473, 474, 475, 0, 0, 119, 476, 477,
	478, 0, 0, 0, 451, 464, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 501, 0, 463, 0, 0, 460, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 491, 497, 500, 0, 498, 495, 496, 494, 493,
	492, 502, 485, 486, 488, 0, 487, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	169, 0, 170, 159, 0, 113, 142, 0, 0, 139,
	0, 143, 146, 147, 0, 0, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 0, 129, 0,
	0, 0, 0, 0, 490, 149, 0, 0, 167, 152,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 503, 471, 470, 472,
	473, 474, 475, 0, 0, 119, 476, 477, 478, 0,
	0, 0, 0, 464, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 501, 0, 463, 0, 0, 460, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 165, 0, 178, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 138, 0, 0, 174,
	175, 124, 181, 0, 0, 116, 0, 0, 158, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 0,
	0, 168, 0, 0, 137, 130, 172, 127, 153, 120,
	114, 0, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 136, 491,
	497, 500, 0, 498, 495, 496, 494, 493, 492, 502,
	485, 486, 488, 0, 487, 112, 117, 148, 0, 164,
	134, 179, 135, 177, 176, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 169, 0,
	170, 159, 0, 113, 142, 0, 0, 139, 0, 143,
	146, 147, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 0, 129, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 167, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	646, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 0, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 165, 0, 178, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 138, 0, 0, 174, 175, 124,
	181, 0, 0, 116, 0, 0, 158, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 145, 131, 140, 162,
	150, 163, 141, 156, 155, 157, 0, 0, 0, 168,
	0, 0, 137, 130, 172, 127, 153, 120, 114, 0,
	121, 122, 126, 125, 0, 144, 151, 154, 160, 161,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 117, 148, 0, 164, 134, 179,
	135, 177, 176, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 169, 0, 170, 0,
	0, 0, 142, 159, 0, 113, 0, 0, 0, 139,
	0, 143, 146, 147, 0, 182, 183, 185, 184, 186,
	118, 187, 188, 0, 1127, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 167, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 1129, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	635, 634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 165, 0, 178, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 138, 0, 0, 174,
	175, 124, 181, 0, 0, 116, 0, 0, 158, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 0,
	0, 168, 0, 0, 137, 130, 172, 127, 153, 120,
	114, 0, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 159, 0, 113, 0, 0, 808,
	807, 0, 143, 146, 147, 0, 0, 0, 806, 0,
	0, 0, 805, 0, 0, 0, 171, 0, 136, 129,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 167,
	152, 0, 0, 0, 0, 112, 117, 148, 0, 164,
	134, 179, 135, 177, 176, 133, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 132, 169, 0,
	170, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 165, 0, 178, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 138, 0, 0,
	174, 175, 124, 181, 0, 0, 116, 0, 0, 158,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 145,
	131, 140, 162, 150, 163, 141, 156, 155, 157, 0,
	0, 0, 168, 0, 0, 137, 130, 172, 127, 153,
	120, 114, 0, 121, 122, 126, 125, 25, 144, 151,
	154, 160, 161, 166, 0, 0, 0, 0, 159, 0,
	113, 0, 0, 0, 139, 0, 143, 146, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 136,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 167, 152, 0, 112, 117, 148, 0,
	164, 134, 179, 135, 177, 176, 133, 0, 55, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 132, 169,
	119, 170, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	185, 184, 186, 118, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 165, 0,
	178, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 138, 0, 0, 174, 175, 124, 181, 0, 0,
	116, 0, 0, 158, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 145, 131, 140, 162, 150, 163, 141,
	156, 155, 157, 0, 0, 0, 168, 0, 0, 137,
	130, 172, 127, 153, 120, 114, 0, 121, 122, 126,
	125, 0, 144, 151, 154, 160, 161, 166, 0, 159,
	0, 113, 0, 0, 0, 139, 0, 143, 146, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1368, 171, 0, 136, 129, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 167, 152, 0, 0, 0, 0,
	112, 117, 148, 0, 164, 134, 179, 135, 177, 176,
	133, 0, 110, 0, 1370, 0, 0, 0, 0, 0,
	0, 119, 132, 169, 0, 170, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 185, 184, 186, 118, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 165,
	0, 178, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 138, 0, 0, 174, 175, 124, 181, 0,
	0, 116, 0, 0, 158, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 145, 131, 140, 162, 150, 163,
	141, 156, 155, 157, 0, 0, 0, 168, 0, 0,
	137, 130, 172, 127, 153, 120, 114, 0, 121, 122,
	126, 125, 25, 144, 151, 154, 160, 161, 166, 0,
	0, 0, 0, 159, 0, 113, 0, 0, 0, 139,
	0, 143, 146, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 136, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 167, 152,
	0, 112, 117, 148, 0, 164, 134, 179, 135, 177,
	176, 133, 0, 55, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 132, 169, 119, 170, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 185, 184, 186, 118, 187,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 165, 0, 178, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 138, 0, 0, 174,
	175, 124, 181, 0, 0, 116, 0, 0, 158, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 0,
	0, 168, 0, 0, 137, 130, 172, 127, 153, 120,
	114, 0, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 159, 0, 113, 0, 0, 0,
	139, 0, 143, 146, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 136, 129,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 167,
	152, 0, 0, 0, 0, 112, 117, 148, 0, 164,
	134, 179, 135, 177, 176, 133, 0, 246, 0, 0,
	713, 0, 0, 714, 0, 0, 119, 132, 169, 0,
	170, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 165, 0, 178, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 138, 0, 0,
	174, 175, 124, 181, 0, 0, 116, 0, 0, 158,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 145,
	131, 140, 162, 150, 163, 141, 156, 155, 157, 0,
	0, 0, 168, 0, 0, 137, 130, 172, 127, 153,
	120, 114, 0, 121, 122, 126, 125, 0, 144, 151,
	154, 160, 161, 166, 0, 159, 0, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 136,
	129, 532, 0, 0, 0, 0, 0, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 112, 117, 148, 0,
	164, 134, 179, 135, 177, 176, 133, 0, 246, 0,
	531, 0, 0, 0, 0, 0, 0, 119, 132, 169,
	0, 170, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	185, 184, 186, 118, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 159, 0, 113, 0,
	0, 0, 139, 0, 143, 146, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 129, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 167, 152, 0, 0, 0, 0, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 132,
	169, 0, 170, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 165, 0, 178, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 138,
	0, 0, 174, 175, 124, 181, 0, 0, 116, 0,
	0, 158, 0, 173, 0, 0, 0, 0, 0, 0,
	0, 145, 131, 140, 162, 150, 163, 141, 156, 155,
	157, 0, 0, 0, 168, 0, 0, 137, 130, 172,
	127, 153, 120, 114, 0, 121, 122, 126, 125, 0,
	144, 151, 154, 160, 161, 166, 0, 0, 0, 0,
	159, 0, 113, 0, 0, 0, 139, 0, 143, 146,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 136, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 167, 152, 0, 112, 117,
	148, 0, 164, 134, 179, 194, 177, 176, 195, 0,
	196, 0, 0, 110, 0, 1370, 0, 0, 0, 0,
	132, 169, 119, 170, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 185, 184, 186, 118, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	165, 0, 178, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 138, 0, 0, 174, 175, 124, 181,
	0, 0, 116, 0, 0, 158, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 145, 131, 140, 162, 150,
	163, 141, 156, 155, 157, 0, 0, 0, 168, 0,
	0, 137, 130, 172, 127, 153, 120, 114, 0, 121,
	122, 126, 125, 0, 144, 151, 154, 160, 161, 166,
	0, 0, 0, 0, 159, 0, 113, 0, 0, 0,
	139, 0, 143, 146, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 136, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 167,
	152, 0, 112, 117, 148, 0, 164, 134, 179, 135,
	177, 176, 133, 0, 55, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 132, 169, 119, 170, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 185, 184, 186, 118,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 165, 0, 178, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 138, 0, 0,
	174, 175, 124, 181, 0, 0, 116, 0, 0, 158,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 145,
	131, 140, 162, 150, 163, 141, 156, 155, 157, 0,
	0, 0, 168, 0, 0, 137, 130, 172, 127, 153,
	120, 114, 0, 121, 122, 126, 125, 0, 144, 151,
	154, 160, 161, 166, 0, 159, 0, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 136,
	129, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 112, 117, 148, 0,
	164, 134, 179, 135, 177, 176, 133, 0, 246, 0,
	1129, 0, 0, 0, 0, 0, 0, 119, 132, 169,
	0, 170, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	185, 184, 186, 118, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 0, 0, 0, 159,
	0, 113, 0, 0, 0, 139, 0, 143, 146, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 0, 0, 516, 129, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 167, 152, 0, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 132,
	169, 119, 170, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 165,
	0, 178, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 138, 0, 0, 174, 175, 124, 181, 0,
	0, 116, 0, 0, 158, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 145, 131, 140, 162, 150, 163,
	141, 156, 155, 157, 0, 0, 0, 168, 0, 0,
	137, 130, 172, 127, 153, 120, 114, 0, 121, 122,
	126, 125, 0, 144, 151, 154, 160, 161, 166, 0,
	159, 0, 113, 0, 0, 0, 139, 0, 143, 146,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 136, 129, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 167, 152, 0, 0, 0,
	0, 112, 117, 148, 0, 164, 134, 179, 135, 177,
	176, 133, 0, 380, 0, 421, 0, 0, 0, 0,
	0, 0, 119, 132, 169, 0, 170, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 185, 184, 186, 118, 187,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	165, 0, 178, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 138, 0, 0, 174, 175, 124, 181,
	0, 0, 116, 0, 0, 158, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 145, 131, 140, 162, 150,
	163, 141, 156, 155, 157, 0, 0, 0, 168, 0,
	0, 137, 130, 172, 127, 153, 120, 114, 0, 121,
	122, 126, 125, 0, 144, 151, 154, 160, 161, 166,
	0, 159, 0, 113, 0, 0, 0, 139, 0, 143,
	146, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 136, 129, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 167, 152, 0, 0,
	0, 0, 112, 117, 148, 0, 164, 134, 179, 135,
	177, 176, 133, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 132, 169, 0, 170, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 185, 184, 186, 118,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 165, 0, 178, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 138, 0, 0, 174, 175, 124,
	181, 0, 0, 116, 0, 0, 158, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 145, 131, 140, 162,
	150, 163, 141, 156, 155, 157, 0, 0, 0, 168,
	0, 0, 137, 130, 172, 127, 153, 120, 114, 0,
	121, 122, 126, 125, 0, 144, 151, 154, 160, 161,
	166, 0, 159, 0, 113, 0, 0, 0, 139, 0,
	143, 146, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 136, 129, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 167, 152, 0,
	0, 0, 0, 112, 117, 148, 0, 164, 134, 179,
	135, 177, 176, 133, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 132, 169, 0, 170, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 185, 184, 186,
	118, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 165, 0, 178, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 138, 0, 0, 174, 175,
	124, 181, 0, 0, 116, 0, 0, 158, 0, 173,
	0, 0, 0, 0, 0, 0, 0, 145, 131, 140,
	162, 150, 163, 141, 156, 155, 157, 0, 0, 0,
	168, 0, 0, 137, 130, 172, 127, 153, 120, 114,
	0, 121, 122, 126, 125, 0, 144, 151, 154, 160,
	161, 166, 0, 159, 0, 113, 0, 0, 0, 139,
	0, 143, 146, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 136, 129, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 167, 152,
	0, 0, 0, 0, 112, 117, 148, 0, 164, 134,
	179, 135, 177, 176, 133, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 132, 169, 0, 170,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 185, 184,
	186, 118, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 165, 0, 178, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 138, 0, 0, 174,
	175, 124, 181, 0, 0, 116, 0, 0, 158, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 145, 131,
	140, 162, 150, 163, 141, 156, 155, 157, 0, 0,
	0, 168, 0, 0, 137, 130, 172, 127, 153, 120,
	114, 0, 121, 122, 126, 125, 0, 144, 151, 154,
	160, 161, 166, 0, 159, 0, 113, 0, 0, 0,
	139, 0, 143, 146, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 136, 129,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 167,
	152, 0, 0, 0, 0, 112, 117, 148, 0, 164,
	134, 179, 135, 177, 176, 133, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 132, 169, 0,
	170, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 185,
	184, 186, 118, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 165, 0, 178, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 138, 0, 0,
	174, 175, 124, 181, 0, 0, 116, 0, 0, 158,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 145,
	131, 140, 162, 150, 163, 141, 156, 155, 157, 0,
	0, 0, 168, 0, 0, 137, 130, 172, 127, 153,
	120, 114, 0, 121, 122, 126, 125, 0, 144, 151,
	154, 160, 161, 166, 0, 159, 0, 113, 0, 0,
	0, 139, 0, 143, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 136,
	129, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	167, 152, 0, 0, 0, 0, 112, 117, 148, 0,
	164, 134, 179, 135, 177, 176, 133, 0, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 132, 169,
	0, 170, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	185, 184, 186, 118, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 165, 0, 178, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 138, 0,
	0, 174, 175, 124, 181, 0, 0, 116, 0, 0,
	158, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	145, 131, 140, 162, 150, 163, 141, 156, 155, 157,
	0, 0, 0, 168, 0, 0, 137, 130, 172, 127,
	153, 120, 114, 0, 121, 122, 126, 125, 0, 144,
	151, 154, 160, 161, 166, 0, 159, 0, 113, 0,
	0, 0, 139, 0, 143, 146, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	136, 129, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 167, 152, 0, 0, 0, 0, 112, 117, 148,
	0, 164, 134, 179, 135, 177, 176, 133, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 132,
	169, 0, 170, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 185, 184, 186, 118, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 165, 0, 178, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 138,
	0, 0, 174, 175, 124, 181, 0, 0, 116, 0,
	0, 158, 0, 173, 0, 0, 0, 0, 0, 0,
	0, 145, 131, 140, 162, 150, 163, 141, 156, 155,
	157, 0, 0, 0, 168, 0, 0, 137, 130, 172,
	127, 153, 120, 114, 0, 121, 122, 126, 125, 0,
	144, 151, 154, 160, 161, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	148, 0, 164, 134, 179, 135, 177, 176, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 169, 0, 170, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 185, 184, 186, 118, 187, 188,
}
var yyPact = [...]int{

	157, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1034, 1064, -1000, -1000, -1000, -1000, -1000,
	850, 279, 107, 155, 183, 180, 186, 177, 9906, -1000,
	8289, -61, -1000, -165, -1000, -1000, -177, -1000, -1000, 862,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1011, 1027,
	883, 957, 911, -1000, 107, 9906, 1047, 2286, -138, 10107,
	103, 170, 159, 158, 103, -1000, -1000, -1000, 175, -1000,
	165, 707, 102, -1000, 9906, -1000, 9906, -48, 50, -1000,
	-1000, -22, 405, -1000, -1000, -1000, -60, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9906, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9303, 167, 133, 260, 335, -1000, -1000, 573, -1000, -1000,
	-1000, -1000, -1000, -1000, 821, 821, -1000, 9906, -1000, -1000,
	-189, -1000, -1000, 595, 959, 6068, 6068, 1034, -1000, 862,
	-1000, -1000, -1000, 932, -1000, -1000, 382, 9102, 943, 9906,
	819, -1000, -1000, -173, 2894, -1000, -1000, -1000, -1000, 334,
	8088, 8088, -1000, -1000, -1000, 941, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1026, 1020, 733, -1000, 1532,
	-1000, -1000, 10509, 371, 698, 692, 689, 9906, 9906, 102,
	870, 10509, 952, -1000, -1000, 1046, 9906, 9906, -1000, -1000,
	405, 405, -1000, -1000, 9906, -1000, -1000, -1000, -1000, -1000,
	405, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -11, -1000, -1000, -1000, -1000, -1000, 322,
	4718, -58, -1000, -1000, -1000, 6068, -1000, -1000, 258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1059, 291, 592,
	-1000, 6068, 1699, 821, 821, -1000, -1000, 214, -1000, -1000,
	6336, 6336, 6336, 6336, 6336, 6336, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 821,
	257, -1000, 5798, 821, 821, 821, 821, 821, 821, 6068,
	821, 821, 821, 821, 821, 821, 821, 821, 821, 821,
	821, 821, 821, -1000, -1000, 818, -1000, 395, 1011, 595,
	911, 7887, 887, -1000, -1000, 797, 9906, -1000, 9705, 1042,
	2590, -1000, 817, 813, -182, -179, -1000, -173, 4988, -1000,
	-1000, -1000, -1000, 271, -1000, 821, 106, 136, 7077, 1539,
	2, -1000, -1000, -1000, 824, -1000, 824, 824, 824, 824,
	35, 35, 35, 35, -1000, -1000, -1000, -1000, -1000, 864,
	855, -1000, 824, 824, 824, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 853, 853, 853, 826, 826, 945, -1000,
	-1000, 951, 869, 868, 867, -1000, 769, 9906, 9906, -1000,
	-1000, 1011, -55, -1000, -1000, 385, 9906, 9906, 405, -1000,
	-1000, 571, -134, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 706, 324, -1000, 9906, -1000, -1000, -1000,
	-1000, -1000, -1000, 915, 6068, 6068, 474, 6068, 6068, 301,
	6336, 418, 401, 6336, 6336, 6336, 6336, 6336, 6336, 6336,
	6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 530, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 687, -1000, 862,
	716, 716, 265, 265, 265, 265, 265, 6604, 1902, 4414,
	595, 5798, 5258, 5258, 6068, 6068, 5258, 961, 348, 324,
	9504, -1000, 595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5258, 5258, 5258, 5258, 6068, -1000, -1000, -1000, 959, -1000,
	961, 1015, -1000, 923, 922, 5258, -1000, 866, 9705, 821,
	-1000, 7686, -1000, 793, -1000, 312, -1000, 213, 1034, 6068,
	-1000, 3806, -1000, -186, -1000, -180, -187, -1000, -1000, -1000,
	-1000, -1000, 324, -1000, 667, 10107, 821, 821, -1000, 136,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 309, 309, 98, 309, 309,
	309, 309, 309, -14, -15, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, -1000, -1000,
	-1000, 625, 244, 195, -1000, -1000, -1000, -1000, 979, -1000,
	1539, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 402, 164, -1000, 975, -1000, 974, 598,
	1056, 495, 182, 156, -1, -1000, -1000, 552, 35, 35,
	-1000, -1000, -1000, 940, -1000, -1000, -1000, 594, 594, -1000,
	-1000, -1000, -1000, 550, -1000, -1000, -1000, 548, -1000, -1000,
	945, -1000, 166, -1000, 9906, 9906, 9906, -1000, 252, 310,
	118, 87, 86, 83, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 726, -1000, 955, -1000, 593, -1000, -1000, -1000,
	591, 6068, -1000, 405, 1042, -1000, -1000, 254, 6068, -1000,
	-1000, 910, 301, 338, -1000, -1000, 467, -1000, -1000, 324,
	324, 764, -1000, -1000, -1000, -1000, 418, 6336, 6336, 6336,
	340, 764, 1435, 967, 1152, 265, 211, 211, 275, 275,
	275, 275, 275, 526, 526, -1000, -1000, -1000, 595, -1000,
	-1000, -1000, 595, 5258, 779, -1000, -1000, 6876, 210, 821,
	209, -1000, -1000, 595, 665, 665, 413, 468, 665, 5258,
	380, -1000, 6068, 595, -1000, 665, 595, 665, 665, -1000,
	-1000, 9906, -1000, -1000, -1000, -1000, 785, -1000, 947, 739,
	775, -1000, -1000, 5528, 595, 704, 206, 1034, 9705, 6068,
	4414, 1011, 324, -1000, -1000, -1000, -193, -184, -1000, -1000,
	595, 10107, 10107, -1000, 587, -1000, 495, 309, 309, -1000,
	939, 936, 545, 544, 533, 584, 583, 309, 309, 505,
	582, 653, 493, 488, 485, 549, 581, 459, 497, 486,
	477, 10308, 95, -1000, 625, -1000, 973, 244, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 852, -1000, -1000,
	-1000, -1000, -1000, -1000, -62, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 729, -1000, -1000, 357,
	685, -1000, 675, 778, 671, -1000, 309, 309, -1000, 821,
	821, 821, -1000, 9906, -1000, -1000, -1000, 632, 33, 850,
	627, 10107, -1000, 9906, -1000, -1000, -1000, 998, 933, 309,
	309, -1000, -1000, -1000, 324, 385, -1000, -1000, 324, -1000,
	-1000, -1000, -1000, -1000, -1000, 340, 764, 1105, -1000, 6336,
	6336, -1000, -1000, 665, 5258, -1000, -1000, 8898, -1000, -1000,
	3502, 5258, 4110, -1000, -1000, -1000, 604, 530, 604, -89,
	770, 343, -1000, 6068, 431, -1000, -1000, -1000, -1000, -1000,
	-1000, 1042, 8697, 971, -1000, 821, -1000, -1000, 836, 9504,
	9504, 1011, -1000, 324, -1000, -1000, -1000, -1000, -1000, -1000,
	595, 595, -1000, -1000, 495, 495, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 578, 577, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 847, -1000, 1016, 837,
	95, 625, 461, -1000, -1000, -1000, -1000, -1000, 576, -1000,
	484, -1000, 472, 631, 399, 9504, 9504, 9504, -1000, -1000,
	-1000, 935, -1000, -1000, -1000, -1000, -1000, -1000, 631, 631,
	-1000, -1000, 6336, 764, 764, -1000, -1000, -1000, -1000, 198,
	595, -1000, 595, 824, 824, -1000, 824, 826, -1000, 824,
	67, 824, 63, 595, 595, 821, -85, -1000, 324, 6068,
	1039, 776, 800, -1000, -1000, -1000, 954, 7281, 7482, 1054,
	-1000, 821, -1000, 862, 194, -1000, -1000, 821, -149, -1000,
	-1000, -1000, -1000, 9504, -1000, -1000, -1000, -1000, 9504, 825,
	95, -1000, 672, -1000, 658, 651, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, -1000, 824, 661, 661, 622, -1000,
	-1000, 764, 3198, -1000, -1000, -1000, 144, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6336, 595, 575, 324, 1036,
	1013, 8697, 8697, 8697, 8697, -1000, 899, 896, -1000, 884,
	881, 901, 9906, -1000, 657, 7281, 208, -1000, 8493, -1000,
	-1000, 9705, 775, 595, 9504, -147, -1000, 450, 650, 648,
	9504, 823, -1000, -1000, -1000, -1000, 9504, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 256, -1000, -1000, -1000, 6068, 6068,
	800, 771, 849, -1000, -1000, -1000, -1000, 891, -1000, 885,
	-1000, -1000, -1000, -1000, -1000, 145, 137, 122, -1000, 753,
	-1000, -1000, 645, -1000, 609, -1000, -1000, -1000, 642, 9504,
	465, -1000, 152, 448, 595, 114, -109, 324, 752, 6068,
	6068, -1000, -1000, 821, 821, 821, -147, -1000, 920, 111,
	111, -1000, 640, -1000, -1000, -1000, -1000, 309, 469, 1000,
	-1000, -1000, -1000, 987, -1000, -1000, -1000, 908, -93, -121,
	324, 324, 9504, 9504, 9504, -1000, 185, -1000, 309, -1000,
	466, 984, 111, -1000, 435, -1000, -1000, -1000, -1000, 605,
	-1000, 903, -1000, 636, -1000, 636, 636, 821, 415, -1000,
	603, 111, -1000, -1000, -95, -1000, 9504, -1000, -1000, -1000,
	-1000, -1000, -117, -1000, -130, -1000,
}
var yyPgo = [...]int{

	0, 19, 21, 1424, 1423, 1421, 26, 996, 1420, 1419,
	1418, 1417, 55, 1416, 1415, 1414, 1413, 30, 938, 1412,
	1407, 1099, 1097, 1095, 1406, 1404, 1402, 1401, 1400, 1398,
	1395, 1390, 1385, 1377, 247, 1374, 1362, 1358, 48, 1357,
	78, 1351, 94, 1350, 1348, 1346, 43, 77, 40, 38,
	216, 1345, 29, 7, 15, 1343, 1342, 9, 1340, 1164,
	1339, 1338, 60, 76, 1337, 1336, 44, 1335, 1334, 1331,
	1329, 1328, 2, 32, 1326, 69, 1323, 1321, 79, 1018,
	1316, 1313, 1310, 1306, 1303, 1302, 58, 5, 13, 1,
	25, 1301, 56, 12, 1300, 52, 1297, 1296, 1294, 1292,
	34, 1291, 74, 1290, 24, 73, 1287, 51, 17, 50,
	1286, 1285, 82, 95, 91, 72, 1284, 75, 1283, 1282,
	192, 1281, 1280, 1279, 916, 1278, 93, 526, 1277, 1274,
	1272, 1257, 1250, 1246, 1245, 59, 35, 0, 16, 23,
	37, 1243, 63, 910, 42, 14, 1239, 83, 1235, 57,
	33, 92, 28, 1234, 1233, 1232, 1231, 1229, 1227, 1226,
	47, 1225, 1223, 1222, 1208, 1207, 1204, 1203, 1202, 1201,
	1199, 1196, 1195, 1194, 1193, 1192, 1191, 67, 1188, 1187,
	1185, 1183, 1180, 1178, 1174, 1162, 1158, 1155, 1152, 10,
	1151, 1148, 1141, 22, 61, 36, 62, 1135, 1134, 1132,
	86, 27, 1131, 1130, 1129, 1127, 64, 54, 1126, 81,
	53, 49, 1125, 1124, 1123, 90, 6, 18, 1122, 1121,
	1120, 8, 11, 1119, 1117, 1116, 1112, 4, 46, 45,
	1111, 1110, 20, 1109, 1107, 71, 1106, 1104, 65, 3,
	1102, 1101, 1093, 1087, 88, 104, 1085, 135,
}
var yyR1 = [...]int{

	0, 242, 243, 243, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 17, 18, 19, 19,
	20, 20, 21, 21, 37, 37, 22, 23, 24, 24,
	240, 240, 239, 165, 165, 7, 7, 25, 25, 25,
	25, 25, 241, 241, 241, 241, 241, 241, 231, 231,
	232, 232, 224, 222, 222, 219, 219, 225, 225, 218,
	218, 223, 223, 220, 220, 227, 227, 227, 227, 227,
	228, 229, 236, 236, 237, 237, 238, 238, 238, 196,
	196, 195, 195, 194, 194, 194, 197, 197, 197, 28,
	211, 213, 213, 214, 214, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 167,
	169, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 182, 183, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 185,
	185, 186, 186, 187, 187, 188, 188, 170, 193, 193,
	168, 164, 166, 212, 212, 212, 207, 142, 142, 153,
	153, 153, 153, 233, 233, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 156, 156, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 155, 155,
	155, 155, 155, 157, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
	159, 206, 206, 160, 160, 200, 200, 201, 201, 201,
	198, 198, 199, 199, 202, 202, 161, 161, 161, 161,
	161, 161, 39, 38, 38, 38, 122, 122, 122, 203,
	189, 189, 189, 163, 190, 190, 191, 191, 191, 192,
	192, 192, 204, 204, 205, 205, 162, 208, 208, 208,
	208, 6, 6, 226, 226, 226, 226, 221, 221, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 5, 5,
	210, 210, 209, 209, 217, 217, 216, 26, 26, 26,
	26, 26, 26, 26, 26, 128, 128, 133, 133, 133,
	27, 27, 27, 69, 69, 134, 134, 8, 29, 9,
	129, 129, 129, 67, 67, 67, 10, 12, 12, 12,
	12, 68, 68, 68, 68, 68, 68, 11, 11, 11,
	11, 132, 132, 132, 13, 14, 14, 14, 14, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 45, 45, 65,
	65, 65, 62, 62, 63, 63, 64, 64, 61, 61,
	66, 66, 66, 33, 31, 32, 32, 246, 34, 35,
	35, 36, 36, 36, 42, 42, 42, 40, 40, 41,
	41, 48, 48, 47, 47, 49, 49, 49, 49, 141,
	141, 141, 140, 140, 51, 51, 52, 52, 53, 53,
	54, 54, 54, 70, 55, 55, 55, 55, 148, 148,
	146, 146, 146, 145, 145, 56, 56, 56, 56, 57,
	57, 57, 57, 58, 58, 60, 60, 59, 59, 71,
	71, 71, 71, 72, 72, 73, 73, 50, 50, 50,
	50, 50, 50, 50, 125, 125, 75, 75, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 85, 85,
	85, 85, 85, 85, 76, 76, 76, 76, 76, 76,
	76, 46, 46, 86, 86, 86, 92, 87, 87, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 83,
	83, 83, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 82, 82, 82, 82, 82, 82, 82, 82, 247,
	247, 84, 84, 84, 84, 43, 43, 43, 43, 43,
	150, 150, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 96, 96, 44, 44, 94,
	94, 95, 97, 97, 93, 93, 93, 78, 78, 78,
	78, 78, 78, 78, 80, 80, 80, 98, 98, 99,
	99, 100, 100, 101, 101, 102, 103, 103, 103, 104,
	104, 104, 104, 105, 105, 105, 77, 77, 77, 77,
	77, 77, 106, 106, 106, 106, 107, 107, 88, 88,
	90, 90, 89, 91, 108, 108, 109, 110, 110, 113,
	113, 112, 112, 112, 112, 112, 121, 121, 120, 120,
	120, 111, 111, 114, 114, 118, 118, 117, 119, 119,
	119, 119, 116, 116, 115, 115, 151, 151, 151, 123,
	123, 126, 126, 127, 127, 124, 124, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 135, 135, 135,
	131, 131, 230, 230, 138, 138, 139, 139, 143, 143,
	144, 144, 147, 147, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 244, 245, 149,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 7, 10, 1, 3,
	1, 3, 6, 7, 1, 1, 8, 7, 3, 3,
	1, 3, 5, 0, 2, 1, 1, 3, 5, 11,
	11, 11, 0, 1, 1, 5, 9, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 1, 1, 2, 2,
	3, 3, 0, 1, 1, 2, 4, 4, 2, 0,
	1, 0, 1, 1, 2, 2, 1, 1, 1, 4,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 1, 3, 3, 3, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 3, 4, 1, 1, 1, 1,
	0, 3, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 7, 7, 8,
	9, 0, 1, 3, 1, 2, 3, 0, 2, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 3, 2, 6, 7, 7,
	7, 9, 7, 7, 7, 0, 1, 0, 1, 1,
	6, 6, 4, 1, 3, 0, 1, 3, 3, 2,
	1, 1, 1, 0, 1, 1, 3, 1, 1, 1,
	1, 0, 3, 3, 3, 1, 1, 3, 5, 3,
	6, 0, 1, 1, 4, 2, 3, 2, 2, 4,
	4, 3, 6, 3, 3, 4, 4, 4, 6, 5,
	5, 3, 3, 5, 6, 7, 3, 3, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 0, 3, 1,
	1, 1, 0, 2, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 4, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 1,
	2, 3, 3, 3, 2, 3, 1, 2, 1, 1,
	1, 2, 3, 2, 2, 0, 2, 3, 2, 2,
	2, 1, 0, 2, 2, 2, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -242, -16, -17, -21, -22, -23, -24, -25, -26,
	-27, -8, -29, -30, -33, -31, -9, -10, -11, -13,
	-14, -15, -32, -18, -19, 6, -37, 8, 9, 44,
	-28, 125, 126, 127, 149, 129, 144, 47, 64, 273,
	-129, 280, 283, 284, 287, 286, 301, 147, 148, -244,
	7, 253, 143, 142, 141, 67, -243, 309, -100, 14,
	-36, 5, -34, -246, -34, -34, -34, -34, -211, 67,
	-7, -230, 23, 31, 132, 245, 246, 34, -124, 136,
	-128, 133, -7, 33, -134, 132, 132, 238, 125, 233,
	275, -64, -65, 277, 278, 240, 132, 279, 236, 276,
	235, 232, 173, 70, 46, 133, 27, 25, 132, -143,
	70, -137, 259, 19, 204, 150, 169, 260, 306, 79,
	203, 206, 207, 145, 165, 209, 208, 201, 159, 42,
	199, 183, 281, 269, 264, 266, 242, 198, 160, 23,
	184, 188, 288, 25, 211, 182, 26, 27, 261, 49,
	186, 212, 53, 202, 213, 190, 189, 191, 172, 17,
	214, 215, 185, 187, 263, 147, 216, 52, 195, 282,
	284, 240, 200, 174, 163, 164, 268, 267, 149, 265,
	134, 166, 301, 302, 304, 303, 305, 307, 308, -149,
	-59, -68, 129, -143, 266, 269, 271, -132, 263, 206,
	-149, 285, -149, -149, 302, 304, 303, 305, 306, 308,
	273, -149, -149, -17, -104, 16, 15, -20, -18, -244,
	6, 36, 37, -42, 54, 55, -35, -124, -59, 10,
	-110, -111, -113, 285, -151, -112, 289, 290, 288, -139,
	-121, 291, -138, -136, 173, 170, 70, -137, 85, 38,
	40, 193, 88, 156, 120, 178, 15, 21, 89, 167,
	119, 241, 205, 254, 125, 62, 244, 247, 243, 245,
	233, 161, 43, 9, 141, 142, 37, 113, 127, 92,
	93, 275, 146, 39, 143, 82, 18, 65, 10, 46,
	12, 13, 137, 136, 104, 133, 60, 7, 154, 155,
	121, 41, 101, 56, 35, 58, 102, 16, 248, 249,
	45, 181, 177, 258, 180, 153, 176, 115, 63, 50,
	86, 80, 162, 83, 66, 148, 84, 14, 61, 278,
	139, 277, 158, 103, 128, 253, 29, 59, 246, 6,
	257, 44, 144, 152, 57, 132, 234, 33, 179, 151,
	175, 91, 135, 81, 279, 5, 34, 196, 8, 64,
	138, 250, 251, 252, 48, 171, 168, 276, 262, 90,
	11, 197, -241, 288, 282, 274, 270, -212, -207, -142,
	70, -137, -127, 137, 133, 133, 133, -127, 132, 132,
	70, -126, 137, -59, -59, 237, 132, 245, -149, -149,
	234, -61, 241, 242, -63, 10, 104, -149, -149, -149,
	240, -149, -149, -149, -149, -149, -149, -149, -59, -67,
	-142, 72, -12, 18, -17, -22, -21, -23, -12, 266,
	122, 94, 73, -149, -89, -244, -89, -149, -59, -149,
	-149, 307, 286, 287, -245, 69, -105, 18, 45, -50,
	-74, 86, -79, 43, 39, -78, -75, -93, -91, -92,
	120, 109, 110, 117, 87, 121, -83, -81, -82, -84,
	72, 71, 73, 74, 75, 76, 80, 81, 82, -138,
	-143, -89, -244, 58, 59, 254, 255, 258, 256, 89,
	48, 243, 252, 251, 250, 248, 249, 244, 247, 137,
	245, 115, 253, 70, -137, -101, -102, -50, -100, -17,
	-34, 50, -40, 37, 78, -60, 41, -59, 44, -59,
	68, -114, -117, -115, 292, 294, -112, 285, 94, -120,
	-138, 72, 43, -120, 44, 15, 15, 69, 68, -153,
	-156, -158, -157, -159, -154, -155, 167, 168, 120, 171,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	44, 145, 163, 164, 165, 166, 184, 185, 186, 187,
	188, 189, 190, 191, 150, 169, 260, 151, 152, 153,
	154, 155, 156, 158, 159, 160, 161, 162, -147, 70,
	-137, 86, 70, 70, 70, -59, -59, -126, 66, -147,
	39, -45, 10, -59, -143, -62, -63, -63, -59, -62,
	-149, 206, 94, -144, -143, -136, 170, 173, 182, 267,
	268, -149, -149, -87, -50, -149, -135, 135, 38, -149,
	-149, -149, 8, 104, 85, 84, 101, 68, 17, -50,
	-76, 104, 86, 102, 103, 88, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 119, 94,
	95, 96, 97, 98, 99, 100, -125, -244, -92, -244,
	123, 124, -79, -79, -79, -79, -79, -79, -244, 122,
	-17, -244, -244, -244, -244, -244, -244, -244, -96, -50,
	-244, -247, -244, -247, -247, -247, -247, -247, -247, -247,
	-244, -244, -244, -244, 68, -103, 40, 141, -104, -245,
	-42, -80, -138, 73, 76, -41, 57, -77, 44, 48,
	-17, -244, -59, -108, -109, -93, -138, -143, -73, 11,
	-113, -151, -116, 68, -118, 68, 293, 295, 296, -114,
	66, 83, -50, -190, 119, -244, 272, 24, -213, -214,
	-215, -168, -164, -166, -167, -169, -170, -171, -172, -173,
	-174, -175, -176, -177, -178, -179, -180, -181, -182, -183,
	-184, -185, -186, -187, -188, 79, 281, -196, 193, 204,
	47, 205, 206, 207, 133, 209, 210, 211, 26, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 43, -207,
	-208, -209, -5, -4, 133, 35, 31, 23, 22, -233,
	-234, -235, -202, -161, -203, -204, -205, -162, -39, -163,
	-191, -192, 80, 86, 43, 193, 139, 35, 34, 79,
	66, 119, 203, 200, -198, 196, -160, 67, -160, -160,
	-160, -160, -189, 170, -189, -189, -189, 67, 67, -160,
	-160, -160, -200, 67, -200, -200, -201, 67, -201, -236,
	-237, -238, -196, 39, 66, 66, 66, -130, 128, 281,
	254, 130, 127, 131, 126, 193, 170, 79, 43, 14,
	265, 70, -69, -59, -59, -104, 239, -149, -149, -66,
	102, 11, -143, -59, -62, -149, 73, 267, 68, -245,
	-59, 52, -50, -50, -85, 80, 86, 81, 82, -50,
	-50, -79, -86, -89, -92, 77, 104, 102, 103, 88,
	-79, -79, -79, -79, -79, -79, -79, -79, -79, -79,
	-79, -79, -79, -79, -79, -150, 70, 72, 70, -78,
	-78, -138, -48, 37, -47, -49, 111, -50, -143, -139,
	-144, -136, -245, -17, -47, -47, -50, -50, -47, -40,
	-94, -95, 90, -138, -245, -47, -48, -47, -47, -102,
	-105, -123, 18, 10, 48, 48, -47, -107, 66, -108,
	-88, -90, -89, -244, -17, -106, -138, -73, 68, 94,
	122, -100, -50, -115, -117, -119, 297, 294, 300, 70,
	-142, -244, -244, -215, -195, 94, -195, 119, -194, 173,
	170, 167, -195, -195, -195, -195, -195, 208, 208, -195,
	-195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
	-195, -195, -6, 70, -210, -209, 139, 34, 32, -235,
	80, 72, 73, 74, 80, -38, -75, -122, 243, 248,
	249, 35, 35, 72, 8, -193, 70, 72, 198, 199,
	43, 43, 201, 202, -199, 197, 73, -189, -189, 44,
	-206, 72, -206, 73, 73, -238, 119, -194, -177, -59,
	-59, -59, -149, -135, -131, 133, 35, 94, 135, 140,
	140, 140, -133, 68, 29, 21, -227, -228, -229, 45,
	19, -149, 72, 72, -50, -62, -73, -12, -50, -149,
	53, 80, 81, 82, -86, -79, -79, -79, -46, 146,
	85, -245, -245, -47, 68, -141, -140, 38, -138, 72,
	122, -244, 122, -245, -245, -245, 68, 138, 38, -245,
	-47, -97, -95, 92, -50, -245, -245, -245, -245, -245,
	-59, -51, 10, 42, -107, 68, -245, -245, -245, 68,
	122, -100, -109, -50, -139, -104, 294, 298, 299, -245,
	-142, -142, 72, -193, -195, -195, 44, 44, 73, 73,
	73, 72, 72, -195, -195, 73, 72, 70, 73, 73,
	73, 73, 43, 72, 43, 199, 198, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 73, 43,
	73, 43, 73, 43, 70, -137, -2, -1, 138, -6,
	35, -210, 67, -38, 69, 70, 120, 69, 68, 69,
	68, 69, 68, -195, -195, -244, -244, -244, -59, -149,
	70, 170, -211, 70, -207, -59, -229, -228, -195, -195,
	-66, -46, 85, -79, -79, -245, -49, -140, 111, -144,
	-48, -139, -152, 120, 167, 145, 165, 161, 182, 172,
	195, 163, 196, -150, -152, 259, -100, 93, -50, 91,
	-73, -52, -53, -54, -55, -70, -92, -244, -59, 35,
	-90, 48, -17, -244, -138, -138, -104, -245, -245, -193,
	-193, 72, 72, 67, -3, 24, 20, 30, 67, -2,
	-6, 69, 73, 72, 73, 73, -232, 70, 43, -197,
	70, 120, 43, -217, -216, -138, -217, -217, 44, -232,
	-232, -79, 122, -245, -245, -160, -160, -160, -201, -160,
	155, -160, 155, -245, -245, -244, -44, 257, -50, -98,
	12, 68, -56, -57, -58, 56, 60, 62, 57, 58,
	59, 63, -148, 38, -52, -244, -146, -145, 38, -143,
	72, 8, -88, -17, 122, -244, -165, 271, -217, -217,
	67, -2, 69, 69, 69, -245, 68, -160, -245, -245,
	70, 111, -189, 70, -79, -245, 72, -99, 13, 15,
	-53, -54, -53, -54, 56, 56, 56, 61, 56, 61,
	56, -57, -143, -245, -71, 64, 136, 65, -145, -108,
	-245, -138, -240, -239, 270, 73, 69, 69, -217, 67,
	-219, -216, -218, -220, -43, 104, 262, -50, -87, 66,
	66, 56, 56, 133, 133, 133, 68, -245, 70, -221,
	-221, 69, -217, -227, -225, -222, -224, 26, 79, 138,
	-227, -223, -222, 262, -227, -222, -245, 260, 63, 263,
	-50, -50, -244, -244, -244, -239, 48, -226, 26, -1,
	79, 262, -221, 69, -195, 72, -231, 24, 20, 28,
	53, 261, 264, -72, -138, -72, -72, 104, -195, 72,
	28, -221, 73, 70, 53, -245, 68, -245, -245, -89,
	73, 70, 262, -138, 263, 264,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 631, 0, 417, 417, 417, 417, 417,
	0, 722, 705, 325, 335, 0, 406, 0, 0, 939,
	351, 361, 939, 0, 939, 939, 0, 939, 939, 0,
	34, 35, 340, 341, 342, 937, 1, 3, 639, 0,
	0, 421, 424, 419, 705, 0, 0, 0, 52, 0,
	703, 0, 0, 0, 703, 45, 46, 723, 0, 706,
	0, 0, 701, 326, 0, 336, 0, 0, 0, 939,
	939, 0, 0, 939, 939, 939, 0, 939, 939, 939,
	939, 939, 939, 939, 407, 399, 400, 401, 0, 414,
	728, 729, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 339,
	343, 0, 0, 477, 883, -2, 356, 0, 362, 363,
	365, 939, 367, 368, 0, 0, 939, 0, 939, 939,
	0, 415, 416, 28, 643, 0, 0, 631, 30, 0,
	417, 422, 423, 427, 425, 426, 418, 0, 0, 0,
	38, 39, 667, 0, 0, 669, 696, 697, -2, 0,
	0, 0, 726, 727, -2, 746, 724, 725, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 47, 53, 54, 0, 0, 0, 173, 0,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 337, 338, 397, 0, 0, 381, 382,
	402, 0, 408, 409, 0, 404, 405, 386, 387, 388,
	402, 390, 391, 392, 393, 394, 395, 396, 939, 346,
	344, 345, 357, 0, -2, 348, 349, 350, 359, 0,
	0, 0, 939, 366, 939, 0, 939, 371, 717, 373,
	374, 939, 939, 939, 29, 938, 24, 0, 0, 640,
	487, 0, 492, 494, 0, 529, 530, 531, 532, 533,
	0, 0, 0, 0, 0, 0, 555, 556, 557, 558,
	617, 618, 619, 620, 621, 622, 623, 496, 497, 614,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 579, 579, 579, 579, 579, 579, 579, 579, 0,
	0, 0, 0, -2, -2, 632, 633, 636, 639, 28,
	424, 0, 429, 428, 420, 0, 0, 476, 0, 485,
	0, 681, 692, 685, 0, 0, 670, 0, 0, 674,
	678, 679, 680, 274, 677, 0, 0, -2, 299, 183,
	250, 180, 181, 182, 243, 198, 243, 243, 243, 243,
	270, 270, 270, 270, 226, 227, 228, 229, 230, 0,
	0, 213, 243, 243, 243, 217, 233, 234, 235, 236,
	237, 238, 239, 240, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 245, 245, 245, 247, 247, -2, 732,
	733, 0, 0, 0, 0, 99, 0, 0, 0, 332,
	702, 639, 0, 939, 939, 410, 0, 0, 402, 939,
	413, 0, 0, 478, 730, 731, 746, 747, 352, 353,
	354, 364, 369, 0, 527, 370, 0, 718, 719, 375,
	376, 377, 644, 0, 0, 0, 0, 0, 0, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	515, 516, 517, 518, 519, 520, 493, 0, 507, 0,
	0, 0, 549, 550, 551, 552, 553, 0, 431, 0,
	28, 0, 0, 0, 0, 0, 0, 427, 0, 606,
	0, 571, 0, 572, 573, 574, 575, 576, 577, 578,
	0, 431, 0, 0, 0, 635, 637, 638, 643, 31,
	427, 0, 624, 0, 0, 0, 430, 656, 0, 0,
	-2, 0, 475, 485, 664, 0, 614, 0, 631, 0,
	668, 0, 683, 0, 684, 0, 0, 694, 695, 682,
	671, 672, 673, 675, 0, 0, 0, 0, 100, -2,
	103, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 91, 91, 0, 91, 91,
	91, 91, 91, 0, 0, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 90, 174,
	175, 291, 310, 0, 312, 313, 308, -2, 300, 176,
	184, 185, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 254, 0, 0, 269, 0, 283, 285, 0,
	0, 0, 0, 0, 252, 251, 197, 0, 270, 270,
	220, 221, 222, 0, 223, 224, 225, 0, 0, 214,
	215, 216, 208, 0, 209, 210, 211, 0, 212, 48,
	-2, 84, 0, 704, 0, 0, 0, 939, 717, 0,
	714, 0, 712, 0, 707, 708, 709, 710, 711, 713,
	715, 716, 327, 333, 75, 939, 0, 379, 380, 383,
	0, 0, 403, 402, 485, 389, 358, 0, 0, 662,
	939, 0, 488, 489, 491, 508, 0, 510, 512, 641,
	642, 498, 499, 523, 524, 525, 0, 0, 0, 0,
	521, 503, 0, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 548, 590, 591, 0, 546,
	547, 554, 0, 0, 432, 433, 435, 439, 0, 615,
	0, -2, 526, 28, 0, 0, 0, 0, 0, 0,
	612, 609, 0, 0, 580, 0, 0, 0, 0, 634,
	25, 0, 699, 700, 625, 626, 444, 32, 0, 656,
	646, 658, 660, 0, 28, 0, 652, 631, 0, 0,
	0, 639, 486, 693, 686, 687, 0, 0, 691, 275,
	0, 0, 0, 104, 0, 92, 0, 91, 91, 93,
	0, 0, 0, 0, 0, 0, 0, 91, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 292, 291, 311, 0, 310, 301, 186,
	255, 256, 257, 258, 259, 260, 261, 263, 266, 267,
	268, 282, 284, 286, 0, 273, 168, 169, 276, 277,
	278, 279, 280, 281, 179, 253, 0, 218, 219, 0,
	0, 241, 0, 0, 0, 85, 91, 91, 88, 0,
	0, 0, 317, 0, 939, 720, 721, 0, 0, 0,
	0, 0, 330, 0, 328, 329, 331, 76, 77, 91,
	91, 378, 398, 411, 412, 410, 384, 360, 528, 372,
	645, 509, 511, 513, 500, 521, 504, 0, 501, 0,
	0, 495, 559, 0, 0, 436, 440, 0, 442, 443,
	0, 431, 0, -2, 562, 563, 0, 0, 0, 0,
	631, 0, 610, 0, 0, 570, 581, 582, 583, 584,
	26, 485, 0, 0, 33, 0, 661, -2, 0, 0,
	0, 639, 665, 666, 615, 37, 688, 689, 690, 55,
	0, 0, 170, 171, 0, 0, 94, 95, 129, 130,
	167, 132, 133, 0, 0, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 0, 304, 0, 0,
	303, 291, 0, 262, 244, 271, 272, 231, 0, 232,
	0, 248, 0, 0, 0, 0, 0, 0, 318, 319,
	320, 0, 322, 323, 324, 334, 78, 79, 0, 0,
	385, 502, 0, 522, 505, 560, 434, 441, 437, 0,
	0, 616, 0, 243, 243, 595, 243, 247, 598, 243,
	600, 243, 603, 0, 0, 0, 607, 569, 613, 0,
	627, 445, 446, 448, 449, 450, 458, 0, 460, 0,
	659, 0, -2, 0, 654, 653, 36, 0, 43, 131,
	172, 134, 135, 0, 302, 305, 306, 307, 0, 0,
	303, 264, 0, 242, 0, 0, 86, 60, 61, 87,
	96, 97, 98, 0, 314, 243, 0, 0, 0, 80,
	81, 506, 0, 561, 564, 592, 270, 596, 597, 599,
	601, 602, 604, 566, 565, 0, 0, 0, 611, 629,
	0, 0, 0, 0, 0, 465, 0, 0, 468, 0,
	0, 0, 0, 459, 0, 0, 479, 461, 0, 463,
	464, 0, 649, 28, 0, 0, 57, 0, 0, 0,
	0, 0, 265, 246, 249, 65, 0, 316, 69, 73,
	321, 438, 593, 594, 585, 568, 608, 27, 0, 0,
	447, 454, 0, 457, 466, 467, 469, 0, 471, 0,
	473, 474, 451, 452, 453, 0, 0, 0, 462, 657,
	-2, 655, 0, 40, 0, 44, 297, 297, 0, 0,
	75, 315, 75, 75, 0, 0, 0, 630, 628, 0,
	0, 470, 472, 0, 0, 0, 0, 56, 0, 287,
	288, 297, 0, 49, 66, 67, 68, 91, 0, 0,
	50, 70, 71, 0, 51, 74, 567, 0, 0, 0,
	455, 456, 0, 0, 0, 41, 0, 298, 91, 294,
	0, 0, 289, 297, 0, 64, 62, 58, 59, 0,
	586, 0, 589, 0, 483, 0, 0, 0, 0, 295,
	0, 290, 63, 72, 587, 480, 0, 481, 482, 42,
	293, 296, 0, 484, 0, 588,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 309,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1048
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1054
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1085
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1130
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1141
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.optVal = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1205
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1225
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1232
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.str = "hash"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.str = "btree"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = "default"
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1438
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1500
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1505
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.str = "character set"
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = "char set"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = "default"
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1539
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1821
		{
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1837
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1874
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2044
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.optVal = nil
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.str = yyDollar[3].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2611
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2656
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2668
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 289:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2682
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2693
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2758
		{
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2775
		{
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2807
		{
			// set empty
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2849
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2854
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.byt = 0
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.byt = 1
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2889
		{
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2897
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2913
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2933
		{
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.statement = &Xa{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2957
		{
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2959
		{
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2961
		{
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.showFilter = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3031
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3045
		{
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3047
		{
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3049
		{
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3071
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3139
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3150
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3169
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3173
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3177
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3246
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.str = "full "
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.showFilter = nil
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3301
		{
			setAllowComments(yylex, true)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.bytes2 = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.str = UnionStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.str = UnionAllStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.str = UnionDistinctStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.str = SQLCacheStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.str = DistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3355
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3359
		{
			yyVAL.str = StraightJoinHint
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3364
		{
			yyVAL.selectExprs = nil
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3368
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3374
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3378
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3384
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3409
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3416
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3445
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3459
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3472
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3476
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3484
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3489
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3493
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3498
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3502
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3513
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3519
		{
			yyVAL.str = JoinStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3523
		{
			yyVAL.str = JoinStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3527
		{
			yyVAL.str = JoinStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3531
		{
			yyVAL.str = StraightJoinStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3537
		{
			yyVAL.str = LeftJoinStr
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3541
		{
			yyVAL.str = LeftJoinStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3545
		{
			yyVAL.str = RightJoinStr
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.str = RightJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.str = NaturalJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3559
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3569
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3573
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3583
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.indexHints = nil
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3596
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3615
		{
			yyVAL.expr = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3619
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3625
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3641
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3645
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3649
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3665
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3669
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3675
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3679
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3683
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3687
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3691
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3695
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 506:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3707
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3711
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3717
		{
			yyVAL.str = IsNullStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3721
		{
			yyVAL.str = IsNotNullStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3725
		{
			yyVAL.str = IsTrueStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3729
		{
			yyVAL.str = IsNotTrueStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3733
		{
			yyVAL.str = IsFalseStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.str = IsNotFalseStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3743
		{
			yyVAL.str = EqualStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3747
		{
			yyVAL.str = LessThanStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3751
		{
			yyVAL.str = GreaterThanStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3755
		{
			yyVAL.str = LessEqualStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3759
		{
			yyVAL.str = GreaterEqualStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3763
		{
			yyVAL.str = NotEqualStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3767
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3772
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3776
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3782
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3786
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3790
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3802
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3806
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3824
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3828
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3832
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3836
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3840
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3844
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3848
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3852
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3856
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3864
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3868
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3872
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3876
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3880
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3884
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3888
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3892
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3896
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3904
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3918
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3922
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3926
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3944
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3948
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3952
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3974
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3978
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 567:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3982
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 568:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3990
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3994
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4004
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4016
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4036
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4051
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4073
		{
			yyVAL.str = BooleanModeStr
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4077
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4085
		{
			yyVAL.str = QueryExpansionStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4139
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4143
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4156
		{
			yyVAL.expr = nil
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4165
		{
			yyVAL.str = string("")
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4169
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4175
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4179
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4185
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4190
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4194
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4204
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4208
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4214
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4218
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4234
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4238
		{
			yyVAL.expr = &NullVal{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4244
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4253
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4257
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4262
		{
			yyVAL.exprs = nil
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4266
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.expr = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4280
		{
			yyVAL.orderBy = nil
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4284
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4300
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4305
		{
			yyVAL.str = AscScr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4309
		{
			yyVAL.str = AscScr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4313
		{
			yyVAL.str = DescScr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.limit = nil
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4326
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4330
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4335
		{
			yyVAL.str = ""
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4339
		{
			yyVAL.str = ForUpdateStr
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4343
		{
			yyVAL.str = ShareModeStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4356
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4360
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4364
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4369
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4373
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4377
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4384
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4392
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4396
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.updateExprs = nil
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4411
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4415
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4421
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4425
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4431
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4437
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4447
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4451
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4457
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4473
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4477
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4484
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4492
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4496
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4500
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4507
		{
			yyVAL.bytes = []byte("charset")
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4513
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4517
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.expr = &Default{}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4527
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4531
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4537
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4541
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4547
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4551
		{
			yyVAL.str = yyDollar[2].str
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4557
		{
			yyVAL.str = yyDollar[3].str
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4563
		{
			yyVAL.str = RepeatableRead
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4567
		{
			yyVAL.str = ReadCommitted
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4571
		{
			yyVAL.str = ReadUncommitted
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4575
		{
			yyVAL.str = Serializable
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4581
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.str = yyDollar[2].str
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4591
		{
			yyVAL.str = TxReadWrite
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4595
		{
			yyVAL.str = TxReadOnly
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4601
		{
			yyVAL.str = SessionStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4605
		{
			yyVAL.str = SessionStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4609
		{
			yyVAL.str = GlobalStr
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4618
		{
			yyVAL.byt = 0
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.byt = 1
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4627
		{
			yyVAL.byt = 0
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4631
		{
			yyVAL.byt = 1
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4636
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4640
		{
			yyVAL.str = IgnoreStr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4654
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4658
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4662
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4666
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4670
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4674
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4678
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4682
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4687
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4691
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4695
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4705
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4710
		{
			yyVAL.str = IndexStr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4714
		{
			yyVAL.str = UniqueStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4720
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4724
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4731
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4737
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4741
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4748
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4754
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4758
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4988
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4997
		{
			decNesting(yylex)
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5002
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
