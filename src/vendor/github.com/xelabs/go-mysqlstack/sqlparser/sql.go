//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const DO = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALGORITHM = 57362
const BTREE = 57363
const CASCADE = 57364
const CONSTRAINT = 57365
const FULLTEXT = 57366
const HASH = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHECKSUM = 57390
const VALUES = 57391
const LAST_INSERT_ID = 57392
const NEXT = 57393
const VALUE = 57394
const SHARE = 57395
const MODE = 57396
const SQL_NO_CACHE = 57397
const SQL_CACHE = 57398
const JOIN = 57399
const STRAIGHT_JOIN = 57400
const LEFT = 57401
const RIGHT = 57402
const INNER = 57403
const OUTER = 57404
const CROSS = 57405
const NATURAL = 57406
const USE = 57407
const FORCE = 57408
const ON = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const NULL = 57420
const TRUE = 57421
const FALSE = 57422
const OFF = 57423
const OR = 57424
const AND = 57425
const NOT = 57426
const BETWEEN = 57427
const CASE = 57428
const WHEN = 57429
const THEN = 57430
const ELSE = 57431
const END = 57432
const LE = 57433
const GE = 57434
const NE = 57435
const NULL_SAFE_EQUAL = 57436
const IS = 57437
const LIKE = 57438
const REGEXP = 57439
const IN = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const MODIFY = 57457
const COLUMN = 57458
const IF = 57459
const IGNORE = 57460
const INDEX = 57461
const PRIMARY = 57462
const QUICK = 57463
const TABLE = 57464
const TO = 57465
const VIEW = 57466
const USING = 57467
const DESC = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const SHOW = 57471
const DATE = 57472
const ESCAPE = 57473
const HELP = 57474
const REPAIR = 57475
const TRUNCATE = 57476
const OPTIMIZE = 57477
const BIT = 57478
const TINYINT = 57479
const SMALLINT = 57480
const MEDIUMINT = 57481
const INT = 57482
const INTEGER = 57483
const BIGINT = 57484
const INTNUM = 57485
const REAL = 57486
const DOUBLE = 57487
const FLOAT_TYPE = 57488
const DECIMAL = 57489
const NUMERIC = 57490
const TIME = 57491
const TIMESTAMP = 57492
const DATETIME = 57493
const YEAR = 57494
const CHAR = 57495
const VARCHAR = 57496
const BOOL = 57497
const CHARACTER = 57498
const VARBINARY = 57499
const NCHAR = 57500
const CHARSET = 57501
const TEXT = 57502
const TINYTEXT = 57503
const MEDIUMTEXT = 57504
const LONGTEXT = 57505
const BLOB = 57506
const TINYBLOB = 57507
const MEDIUMBLOB = 57508
const LONGBLOB = 57509
const JSON = 57510
const ENUM = 57511
const GEOMETRY = 57512
const POINT = 57513
const LINESTRING = 57514
const POLYGON = 57515
const GEOMETRYCOLLECTION = 57516
const MULTIPOINT = 57517
const MULTILINESTRING = 57518
const MULTIPOLYGON = 57519
const NULLX = 57520
const AUTO_INCREMENT = 57521
const APPROXNUM = 57522
const SIGNED = 57523
const UNSIGNED = 57524
const ZEROFILL = 57525
const FIXED = 57526
const DYNAMIC = 57527
const STORAGE = 57528
const DISK = 57529
const MEMORY = 57530
const COLUMN_FORMAT = 57531
const AVG_ROW_LENGTH = 57532
const COMPRESSION = 57533
const CONNECTION = 57534
const DATA = 57535
const DIRECTORY = 57536
const DELAY_KEY_WRITE = 57537
const ENCRYPTION = 57538
const INSERT_METHOD = 57539
const MAX_ROWS = 57540
const MIN_ROWS = 57541
const PACK_KEYS = 57542
const PASSWORD = 57543
const ROW_FORMAT = 57544
const STATS_AUTO_RECALC = 57545
const STATS_PERSISTENT = 57546
const STATS_SAMPLE_PAGES = 57547
const TABLESPACE = 57548
const DELAYED = 57549
const LOW_PRIORITY = 57550
const HIGH_PRIORITY = 57551
const COMPRESSED = 57552
const REDUNDANT = 57553
const COMPACT = 57554
const TOKUDB_DEFAULT = 57555
const TOKUDB_FAST = 57556
const TOKUDB_SMALL = 57557
const TOKUDB_ZLIB = 57558
const TOKUDB_QUICKLZ = 57559
const TOKUDB_LZMA = 57560
const TOKUDB_SNAPPY = 57561
const TOKUDB_UNCOMPRESSED = 57562
const COLLATION = 57563
const DATABASES = 57564
const TABLES = 57565
const WARNINGS = 57566
const VARIABLES = 57567
const EVENTS = 57568
const BINLOG = 57569
const GTID = 57570
const STATUS = 57571
const COLUMNS = 57572
const FIELDS = 57573
const CURRENT_TIMESTAMP = 57574
const CURRENT_DATE = 57575
const DATABASE = 57576
const SCHEMA = 57577
const CURRENT_TIME = 57578
const LOCALTIME = 57579
const LOCALTIMESTAMP = 57580
const UTC_DATE = 57581
const UTC_TIME = 57582
const UTC_TIMESTAMP = 57583
const REPLACE = 57584
const CONVERT = 57585
const CAST = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const FORMAT = 57597
const TREE = 57598
const TRADITIONAL = 57599
const EXTENDED = 57600
const PARTITION = 57601
const PARTITIONS = 57602
const LIST = 57603
const XA = 57604
const DISTRIBUTED = 57605
const ENGINES = 57606
const VERSIONS = 57607
const PROCESSLIST = 57608
const QUERYZ = 57609
const TXNZ = 57610
const KILL = 57611
const ENGINE = 57612
const SINGLE = 57613
const BEGIN = 57614
const START = 57615
const TRANSACTION = 57616
const COMMIT = 57617
const ROLLBACK = 57618
const GLOBAL = 57619
const LOCAL = 57620
const SESSION = 57621
const NAMES = 57622
const ISOLATION = 57623
const LEVEL = 57624
const READ = 57625
const WRITE = 57626
const ONLY = 57627
const REPEATABLE = 57628
const COMMITTED = 57629
const UNCOMMITTED = 57630
const SERIALIZABLE = 57631
const RADON = 57632
const ATTACH = 57633
const ATTACHLIST = 57634
const DETACH = 57635
const RESHARD = 57636
const CLEANUP = 57637
const RECOVER = 57638
const REBALANCE = 57639

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"DO",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5196

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 203,
	6, 377,
	7, 377,
	8, 377,
	9, 377,
	19, 377,
	68, 377,
	259, 377,
	-2, 918,
	-1, 410,
	123, 761,
	-2, 757,
	-1, 411,
	123, 762,
	-2, 758,
	-1, 443,
	95, 926,
	-2, 731,
	-1, 449,
	95, 780,
	-2, 709,
	-1, 470,
	1, 97,
	315, 97,
	-2, 107,
	-1, 510,
	5, 31,
	-2, 368,
	-1, 638,
	120, 107,
	170, 107,
	173, 107,
	176, 107,
	-2, 119,
	-1, 689,
	1, 97,
	315, 97,
	-2, 107,
	-1, 697,
	1, 98,
	315, 98,
	-2, 107,
	-1, 784,
	123, 764,
	-2, 760,
	-1, 850,
	120, 107,
	170, 107,
	173, 107,
	176, 107,
	-2, 120,
	-1, 907,
	36, 327,
	68, 327,
	71, 327,
	136, 327,
	-2, 923,
	-1, 1027,
	5, 32,
	-2, 559,
	-1, 1214,
	5, 31,
	-2, 680,
	-1, 1414,
	5, 32,
	-2, 681,
	-1, 1464,
	5, 31,
	-2, 683,
	-1, 1527,
	5, 32,
	-2, 684,
}

const yyPrivate = 57344

const yyLast = 11271

var yyAct = [...]int{

	411, 388, 1545, 1470, 1344, 1406, 577, 389, 55, 1501,
	460, 364, 824, 1165, 1375, 386, 1507, 1345, 444, 1124,
	1392, 1341, 413, 993, 1101, 829, 1299, 1533, 1374, 1403,
	1335, 1166, 73, 1076, 1272, 942, 459, 1167, 1114, 1103,
	448, 956, 62, 119, 825, 119, 209, 1334, 1211, 1189,
	778, 768, 1012, 775, 508, 730, 710, 1139, 1020, 363,
	911, 355, 783, 55, 981, 623, 624, 699, 851, 366,
	440, 119, 418, 452, 1055, 462, 603, 608, 795, 745,
	503, 698, 864, 696, 1104, 473, 208, 439, 447, 952,
	936, 119, 437, 119, 622, 422, 820, 614, 362, 471,
	476, 630, 66, 711, 83, 529, 530, 601, 61, 986,
	889, 588, 352, 510, 3, 119, 1069, 701, 625, 1068,
	626, 1224, 1070, 1225, 1226, 626, 528, 701, 837, 197,
	625, 881, 68, 69, 70, 71, 72, 838, 839, 780,
	343, 346, 348, 347, 349, 350, 457, 351, 1422, 1471,
	456, 715, 1056, 1003, 1566, 1520, 341, 1564, 455, 1484,
	1556, 1519, 777, 876, 454, 113, 848, 112, 1202, 412,
	724, 1330, 1483, 481, 89, 495, 990, 342, 85, 344,
	345, 480, 353, 354, 1117, 485, 110, 115, 1087, 1118,
	1119, 1086, 487, 488, 356, 28, 29, 31, 32, 462,
	719, 1532, 489, 428, 427, 429, 1169, 55, 55, 506,
	109, 432, 431, 1509, 1129, 1130, 340, 1134, 935, 885,
	717, 28, 29, 31, 32, 483, 484, 1295, 1384, 492,
	493, 494, 1168, 496, 497, 498, 499, 500, 501, 502,
	943, 1437, 543, 542, 552, 553, 545, 546, 547, 548,
	549, 550, 551, 544, 1534, 515, 554, 59, 725, 726,
	1325, 1323, 1274, 1153, 732, 94, 1510, 28, 29, 31,
	32, 980, 1079, 77, 469, 111, 87, 92, 102, 879,
	509, 78, 91, 59, 82, 482, 1151, 1106, 116, 732,
	880, 882, 883, 884, 84, 886, 887, 888, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 1169, 1493, 1492,
	1110, 1111, 1112, 1491, 1509, 108, 1274, 467, 1113, 384,
	385, 985, 985, 1030, 984, 984, 466, 983, 983, 59,
	943, 465, 905, 1168, 85, 477, 464, 1156, 1155, 533,
	532, 1154, 566, 567, 1497, 1417, 1315, 1062, 521, 523,
	119, 1026, 1024, 575, 522, 522, 534, 718, 1457, 1459,
	1305, 517, 554, 544, 887, 731, 554, 1510, 563, 565,
	877, 1127, 1128, 700, 1482, 1131, 1132, 107, 95, 845,
	106, 104, 490, 93, 1281, 101, 1150, 1303, 79, 1105,
	731, 80, 81, 1549, 574, 804, 1031, 578, 579, 580,
	581, 582, 583, 584, 1438, 587, 589, 589, 589, 589,
	589, 589, 589, 589, 597, 598, 599, 600, 995, 847,
	96, 105, 99, 100, 103, 532, 55, 534, 1458, 1511,
	1077, 564, 904, 1152, 1282, 119, 752, 1304, 1061, 720,
	452, 534, 1535, 629, 809, 518, 452, 452, 30, 1204,
	750, 751, 749, 796, 1515, 447, 796, 806, 1037, 610,
	690, 631, 631, 1562, 473, 1109, 114, 533, 532, 119,
	119, 616, 1554, 520, 30, 1369, 491, 473, 524, 1370,
	526, 527, 119, 119, 534, 463, 1117, 516, 533, 532,
	119, 1118, 1119, 740, 742, 743, 59, 1472, 535, 741,
	80, 81, 1551, 576, 1032, 534, 748, 1308, 805, 994,
	627, 590, 591, 592, 593, 594, 595, 596, 119, 1373,
	30, 1169, 612, 1190, 533, 532, 533, 532, 1509, 356,
	1372, 617, 611, 1206, 1269, 618, 586, 1307, 1125, 746,
	1126, 534, 1246, 534, 1245, 1244, 810, 1168, 634, 1192,
	533, 532, 714, 474, 606, 609, 1241, 1236, 723, 1005,
	1006, 1007, 1267, 689, 1268, 468, 1194, 534, 1198, 1265,
	1193, 1235, 1191, 55, 452, 702, 704, 1196, 1234, 1143,
	721, 1510, 769, 1142, 770, 1248, 578, 1195, 452, 774,
	712, 447, 1266, 1135, 782, 1002, 928, 927, 519, 1264,
	1197, 1199, 1539, 797, 1387, 924, 1371, 747, 378, 377,
	379, 380, 381, 382, 452, 1247, 784, 383, 119, 119,
	1360, 1359, 452, 1249, 1242, 1238, 1237, 1230, 930, 815,
	1172, 826, 1171, 811, 1301, 827, 1140, 447, 1122, 1563,
	462, 929, 922, 1555, 846, 1558, 602, 602, 923, 727,
	1500, 728, 800, 729, 1431, 1537, 1429, 387, 733, 734,
	735, 1300, 356, 1431, 1503, 772, 773, 1498, 602, 1431,
	1474, 736, 737, 738, 1431, 1473, 899, 1250, 1435, 576,
	1102, 931, 793, 1297, 785, 786, 1390, 602, 944, 945,
	946, 1294, 787, 1431, 602, 1428, 976, 798, 926, 1243,
	117, 1071, 201, 119, 119, 771, 878, 693, 813, 832,
	1418, 602, 119, 119, 831, 823, 119, 692, 356, 812,
	691, 790, 791, 840, 901, 975, 1416, 602, 201, 989,
	958, 119, 1288, 1287, 1284, 1285, 1284, 1283, 938, 939,
	940, 941, 788, 789, 1018, 602, 792, 475, 201, 1427,
	201, 746, 978, 1280, 949, 950, 951, 925, 1164, 1060,
	799, 974, 801, 802, 933, 1412, 1163, 932, 28, 843,
	998, 531, 201, 959, 63, 954, 955, 531, 602, 979,
	28, 452, 982, 987, 547, 548, 549, 550, 551, 544,
	1025, 1210, 554, 639, 638, 830, 1022, 545, 546, 547,
	548, 549, 550, 551, 544, 715, 1390, 554, 971, 969,
	965, 1463, 968, 970, 1394, 1397, 1398, 1399, 1395, 747,
	1396, 1400, 119, 1342, 1488, 1060, 819, 1286, 1018, 1008,
	59, 419, 28, 452, 1252, 1251, 1018, 28, 991, 992,
	836, 834, 59, 59, 999, 807, 1001, 462, 447, 1018,
	1059, 621, 1060, 1476, 973, 1073, 1074, 1072, 937, 1425,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1218, 1063, 1036, 1366, 1213, 1212, 972, 1361, 1015,
	1213, 957, 74, 1016, 1278, 1047, 953, 948, 1048, 947,
	1487, 1342, 26, 59, 59, 1027, 1028, 1029, 1058, 59,
	1033, 1065, 1066, 627, 963, 1039, 962, 1040, 1041, 1042,
	1043, 1078, 961, 1081, 1082, 1083, 1084, 1085, 878, 1075,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 703, 1490, 1450, 1038, 1544, 1489, 1017,
	1451, 967, 1447, 1080, 1448, 1045, 1046, 609, 1452, 1449,
	1398, 1399, 977, 1446, 423, 424, 1034, 417, 1518, 1207,
	1044, 1530, 119, 119, 119, 1053, 1052, 1168, 966, 1379,
	1064, 1108, 615, 1169, 1136, 1137, 1394, 1397, 1398, 1399,
	1395, 1054, 1396, 1400, 1115, 613, 543, 542, 552, 553,
	545, 546, 547, 548, 549, 550, 551, 544, 604, 1168,
	554, 1160, 1159, 1138, 635, 619, 1141, 201, 1410, 960,
	705, 55, 1402, 615, 1157, 1158, 1107, 420, 421, 75,
	1161, 1148, 452, 1461, 1175, 605, 1276, 452, 1013, 1121,
	1120, 1364, 1552, 1543, 1542, 1363, 1169, 1022, 1541, 1051,
	447, 1365, 447, 782, 414, 1188, 1441, 1050, 637, 636,
	119, 415, 63, 1440, 1174, 1389, 830, 88, 1176, 707,
	434, 1494, 1178, 1215, 1216, 784, 1215, 1123, 803, 1183,
	65, 67, 826, 60, 462, 462, 827, 1203, 447, 1187,
	1184, 1222, 1201, 1200, 1228, 1229, 1223, 1186, 514, 7,
	511, 6, 201, 1, 1147, 513, 5, 453, 1231, 512,
	4, 1271, 1219, 784, 1469, 1220, 697, 1217, 910, 909,
	1540, 76, 1531, 1232, 1233, 1506, 1508, 1513, 1480, 1170,
	1239, 1240, 1477, 1479, 850, 1182, 201, 201, 1275, 1273,
	849, 458, 900, 916, 1177, 1173, 915, 914, 912, 201,
	709, 1133, 934, 1302, 205, 1306, 1277, 201, 921, 119,
	920, 844, 1289, 1290, 1291, 875, 874, 462, 873, 872,
	871, 870, 1279, 869, 868, 867, 866, 865, 863, 1214,
	862, 861, 1214, 860, 859, 722, 858, 1205, 857, 856,
	1227, 852, 855, 854, 1421, 853, 919, 1296, 917, 913,
	644, 642, 359, 1298, 643, 641, 646, 645, 1313, 1310,
	640, 1221, 1311, 1312, 1309, 1401, 470, 1405, 1019, 90,
	1328, 119, 1162, 339, 1149, 1346, 462, 462, 1339, 964,
	44, 1347, 86, 55, 826, 1343, 1350, 1352, 827, 562,
	826, 1353, 781, 722, 827, 1332, 1321, 781, 781, 1179,
	1333, 781, 1354, 1049, 1116, 445, 1067, 835, 833, 436,
	435, 1351, 1357, 1358, 1349, 781, 781, 781, 781, 543,
	542, 552, 553, 545, 546, 547, 548, 549, 550, 551,
	544, 808, 607, 554, 1439, 201, 201, 828, 1388, 1293,
	1338, 1318, 1319, 1035, 1320, 585, 794, 1322, 365, 1324,
	452, 452, 452, 739, 376, 1316, 373, 1317, 375, 374,
	814, 536, 1368, 357, 1273, 1376, 1376, 1376, 1326, 1327,
	1456, 1367, 1337, 1340, 716, 199, 452, 505, 98, 1377,
	1378, 97, 486, 1393, 1391, 1336, 1209, 706, 1329, 1348,
	1436, 447, 818, 430, 1188, 426, 1355, 1356, 1380, 1381,
	119, 119, 918, 64, 425, 15, 1331, 1404, 24, 16,
	14, 13, 34, 11, 10, 1383, 9, 25, 198, 8,
	201, 201, 452, 1420, 416, 1411, 27, 452, 2, 996,
	201, 22, 23, 201, 21, 20, 19, 1376, 18, 17,
	12, 902, 1376, 903, 433, 1362, 0, 0, 201, 0,
	1423, 119, 119, 119, 119, 1424, 1273, 0, 1339, 1339,
	1339, 1339, 119, 1426, 478, 119, 479, 0, 119, 1338,
	0, 0, 1404, 1460, 1346, 0, 0, 462, 452, 462,
	1347, 1453, 1443, 1465, 1445, 0, 452, 1466, 504, 1468,
	1462, 0, 452, 1467, 781, 0, 0, 1386, 1442, 0,
	1444, 1376, 0, 0, 0, 0, 1478, 1376, 1486, 0,
	0, 781, 0, 576, 1475, 1413, 1414, 1415, 0, 1419,
	1338, 1338, 1338, 1338, 0, 1346, 0, 1432, 1495, 0,
	0, 1347, 0, 55, 1338, 0, 781, 452, 0, 201,
	0, 0, 1430, 0, 1502, 1433, 1434, 356, 0, 0,
	0, 1505, 1376, 1512, 1516, 0, 1514, 1517, 462, 1523,
	1524, 1525, 1529, 0, 0, 1504, 826, 1526, 1528, 0,
	827, 1455, 0, 1536, 0, 0, 0, 0, 787, 0,
	0, 0, 0, 0, 452, 452, 452, 1547, 1548, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1546,
	1546, 1546, 0, 1538, 1481, 0, 0, 1553, 0, 0,
	0, 1561, 0, 0, 0, 0, 0, 522, 0, 452,
	568, 569, 570, 571, 572, 573, 1550, 1014, 0, 0,
	0, 0, 0, 0, 1565, 0, 0, 1499, 0, 1496,
	1485, 356, 0, 0, 0, 0, 0, 543, 542, 552,
	553, 545, 546, 547, 548, 549, 550, 551, 544, 0,
	0, 554, 0, 0, 1527, 542, 552, 553, 545, 546,
	547, 548, 549, 550, 551, 544, 0, 0, 554, 201,
	201, 201, 0, 0, 0, 0, 0, 1521, 1522, 543,
	542, 552, 553, 545, 546, 547, 548, 549, 550, 551,
	544, 0, 0, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1557, 0, 1559, 1560, 0, 0, 0,
	0, 0, 0, 525, 167, 0, 121, 0, 0, 0,
	147, 0, 151, 154, 155, 0, 781, 0, 0, 0,
	0, 0, 722, 781, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 175,
	160, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 451, 828, 0,
	722, 0, 0, 0, 0, 0, 127, 0, 0, 744,
	0, 0, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 0, 620, 0,
	0, 0, 543, 542, 552, 553, 545, 546, 547, 548,
	549, 550, 551, 544, 0, 0, 554, 552, 553, 545,
	546, 547, 548, 549, 550, 551, 544, 0, 0, 554,
	0, 0, 694, 695, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 131, 0, 708, 173, 186, 0, 123,
	0, 0, 0, 713, 0, 0, 201, 0, 136, 145,
	0, 0, 182, 183, 132, 189, 0, 0, 124, 0,
	0, 166, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 153, 139, 148, 170, 158, 171, 149, 164, 163,
	165, 0, 0, 0, 176, 0, 0, 144, 138, 180,
	135, 161, 128, 122, 0, 129, 130, 134, 133, 0,
	152, 159, 162, 168, 169, 174, 0, 0, 201, 0,
	828, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 125, 156, 0, 172, 141, 187, 146, 185,
	184, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 822, 140, 177, 0, 178, 0, 0, 0,
	150, 0, 0, 1009, 1010, 1011, 0, 0, 0, 0,
	0, 0, 0, 190, 191, 193, 192, 194, 126, 195,
	196, 538, 0, 541, 0, 0, 0, 0, 0, 555,
	556, 557, 558, 559, 560, 561, 0, 539, 540, 537,
	543, 542, 552, 553, 545, 546, 547, 548, 549, 550,
	551, 544, 0, 0, 554, 0, 0, 201, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 504, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 201, 201,
	201, 201, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 201, 0, 167, 1408, 121, 0, 0, 0,
	147, 0, 151, 154, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 137,
	360, 0, 0, 0, 0, 397, 157, 0, 0, 175,
	160, 0, 0, 0, 0, 390, 391, 0, 0, 0,
	0, 0, 0, 841, 59, 0, 0, 410, 378, 377,
	379, 380, 381, 382, 0, 0, 127, 383, 384, 385,
	842, 0, 0, 358, 371, 1057, 396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 368, 369, 0, 0,
	0, 0, 408, 0, 370, 0, 0, 367, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 131, 0, 0, 173, 186, 0, 123,
	0, 0, 0, 0, 0, 0, 1180, 1181, 136, 145,
	0, 0, 182, 183, 132, 189, 0, 0, 124, 0,
	0, 166, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 153, 139, 148, 170, 158, 171, 149, 164, 163,
	165, 0, 0, 0, 176, 0, 0, 144, 138, 180,
	135, 161, 128, 122, 0, 129, 130, 134, 133, 0,
	152, 159, 162, 168, 169, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 1145, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 143, 398, 404, 407, 0, 405,
	402, 403, 401, 400, 399, 409, 392, 393, 395, 0,
	394, 120, 125, 156, 0, 172, 141, 187, 146, 185,
	184, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 177, 0, 178, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 191, 193, 192, 194, 126, 195,
	196, 0, 0, 1208, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 1292, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 1385, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 450, 332, 166, 449, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 438,
	0, 0, 443, 441, 442, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 450, 332, 166, 449, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 443, 441, 442, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 450, 332, 166, 449, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 628,
	0, 0, 150, 0, 0, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	1382, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	1185, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 450, 332, 166, 449, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 206,
	0, 207, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 322, 306, 263, 325, 237, 242, 253,
	337, 255, 256, 293, 218, 273, 167, 251, 121, 0,
	219, 0, 147, 0, 151, 154, 155, 0, 303, 0,
	0, 0, 314, 323, 270, 0, 240, 211, 248, 212,
	267, 137, 236, 308, 276, 254, 0, 331, 157, 285,
	0, 175, 160, 0, 0, 269, 311, 271, 304, 262,
	294, 229, 284, 326, 252, 290, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 287,
	320, 250, 289, 292, 210, 286, 0, 214, 220, 336,
	318, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	268, 272, 300, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 283, 0, 0, 0, 224, 216,
	266, 0, 0, 0, 228, 0, 243, 301, 0, 0,
	0, 0, 258, 259, 261, 297, 296, 312, 319, 188,
	327, 238, 239, 249, 309, 131, 247, 257, 173, 186,
	291, 123, 316, 310, 281, 264, 265, 215, 0, 299,
	136, 145, 235, 288, 182, 183, 132, 189, 221, 333,
	124, 222, 332, 166, 223, 181, 317, 282, 278, 217,
	315, 280, 277, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 213, 0, 176, 324, 338, 144,
	138, 180, 135, 161, 128, 122, 226, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 313, 0,
	0, 0, 0, 0, 179, 225, 143, 232, 230, 233,
	305, 231, 274, 275, 328, 329, 330, 302, 227, 0,
	0, 307, 279, 120, 125, 156, 335, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 246,
	334, 298, 295, 321, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 167, 0, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 776, 0, 361, 0, 0, 137, 360,
	0, 0, 0, 0, 397, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 390, 391, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 410, 378, 377, 379,
	380, 381, 382, 0, 0, 127, 383, 384, 385, 0,
	0, 0, 358, 371, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 779, 0, 0,
	0, 408, 0, 370, 0, 0, 367, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 143, 398, 404, 407, 0, 405, 402,
	403, 401, 400, 399, 409, 392, 393, 395, 0, 394,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 177, 0, 178, 0, 0, 167, 150,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	361, 0, 0, 137, 360, 0, 0, 0, 0, 397,
	157, 0, 0, 175, 160, 0, 0, 0, 0, 390,
	391, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	602, 410, 378, 377, 379, 380, 381, 382, 0, 0,
	127, 383, 384, 385, 0, 0, 0, 358, 371, 0,
	396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 408, 0, 370, 0,
	0, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 398,
	404, 407, 0, 405, 402, 403, 401, 400, 399, 409,
	392, 393, 395, 0, 394, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 177, 0,
	178, 0, 0, 167, 150, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 361, 0, 0, 137, 360,
	0, 0, 0, 0, 397, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 390, 391, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 410, 378, 377, 379,
	380, 381, 382, 0, 0, 127, 383, 384, 385, 0,
	0, 0, 358, 371, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 779, 0, 0,
	0, 408, 0, 370, 0, 0, 367, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 143, 398, 404, 407, 0, 405, 402,
	403, 401, 400, 399, 409, 392, 393, 395, 0, 394,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 0, 0, 0, 0, 28, 0, 0, 0,
	0, 0, 140, 177, 0, 178, 0, 0, 167, 150,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	361, 0, 0, 137, 360, 0, 0, 0, 0, 397,
	157, 0, 0, 175, 160, 0, 0, 0, 0, 390,
	391, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 410, 378, 377, 379, 380, 381, 382, 0, 0,
	127, 383, 384, 385, 0, 0, 0, 358, 371, 0,
	396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 408, 0, 370, 0,
	0, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 398,
	404, 407, 0, 405, 402, 403, 401, 400, 399, 409,
	392, 393, 395, 0, 394, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 177, 0,
	178, 0, 0, 167, 150, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 361, 0, 0, 137, 360,
	0, 0, 0, 0, 397, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 390, 391, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 410, 378, 377, 379,
	380, 381, 382, 0, 0, 127, 383, 384, 385, 0,
	0, 0, 358, 371, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 0, 0, 0,
	0, 408, 0, 370, 0, 0, 367, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 143, 398, 404, 407, 0, 405, 402,
	403, 401, 400, 399, 409, 392, 393, 395, 0, 394,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 177, 0, 178, 167, 0, 121, 150,
	0, 0, 147, 0, 151, 154, 155, 0, 0, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	0, 137, 0, 0, 0, 0, 0, 397, 157, 0,
	0, 175, 160, 0, 0, 0, 0, 390, 391, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 410,
	378, 377, 379, 380, 381, 382, 0, 0, 127, 383,
	384, 385, 0, 0, 0, 0, 371, 0, 396, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	0, 0, 0, 0, 408, 0, 370, 0, 0, 367,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 406, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 131, 0, 0, 173, 186,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 145, 0, 0, 182, 183, 132, 189, 0, 0,
	124, 0, 0, 166, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 0, 0, 176, 0, 0, 144,
	138, 180, 135, 161, 128, 122, 0, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 143, 398, 404, 407,
	0, 405, 402, 403, 401, 400, 399, 409, 392, 393,
	395, 0, 394, 120, 125, 156, 0, 172, 141, 187,
	146, 185, 184, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 177, 0, 178, 0,
	0, 0, 150, 167, 0, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 0, 1021, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 1023, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	533, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 167,
	0, 121, 0, 0, 908, 907, 0, 151, 154, 155,
	0, 0, 0, 906, 0, 0, 0, 905, 0, 0,
	0, 179, 0, 143, 137, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 175, 160, 0, 0, 0, 0,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 140, 177, 0, 178, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 29,
	31, 32, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 131, 0,
	0, 173, 186, 0, 123, 0, 0, 33, 0, 0,
	41, 0, 0, 136, 145, 0, 0, 182, 183, 132,
	189, 0, 0, 124, 0, 0, 166, 42, 181, 0,
	59, 0, 0, 0, 0, 0, 153, 139, 148, 170,
	158, 171, 149, 164, 163, 165, 0, 0, 0, 176,
	0, 0, 144, 138, 180, 135, 161, 128, 122, 0,
	129, 130, 134, 133, 0, 152, 159, 162, 168, 169,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 36,
	37, 0, 39, 0, 0, 0, 0, 179, 0, 143,
	0, 0, 0, 0, 0, 58, 57, 56, 40, 0,
	0, 45, 52, 38, 53, 0, 120, 125, 156, 0,
	172, 141, 187, 146, 185, 184, 142, 0, 0, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 140, 177,
	0, 178, 167, 0, 121, 150, 0, 0, 147, 0,
	151, 154, 155, 0, 0, 0, 0, 0, 190, 191,
	193, 192, 194, 126, 195, 196, 0, 137, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 175, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 47, 48, 0, 50, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 51,
	0, 131, 0, 0, 173, 186, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 145, 0, 0,
	182, 183, 132, 189, 0, 0, 124, 0, 0, 166,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 153,
	139, 148, 170, 158, 171, 149, 164, 163, 165, 0,
	0, 0, 176, 0, 0, 144, 138, 180, 135, 161,
	128, 122, 0, 129, 130, 134, 133, 0, 152, 159,
	162, 168, 169, 174, 0, 0, 0, 0, 167, 0,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1407,
	179, 0, 143, 137, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 175, 160, 0, 0, 0, 0, 120,
	125, 156, 0, 172, 141, 187, 146, 185, 184, 142,
	0, 118, 0, 1409, 0, 0, 0, 0, 0, 0,
	127, 140, 177, 0, 178, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 191, 193, 192, 194, 126, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 661,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 0, 0, 28,
	0, 0, 0, 0, 0, 0, 0, 140, 177, 0,
	178, 167, 0, 121, 150, 0, 0, 147, 0, 151,
	154, 155, 0, 0, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 0, 137, 0, 0, 0,
	0, 0, 0, 157, 0, 649, 175, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 461, 0, 0, 0, 0, 0,
	0, 662, 0, 127, 0, 0, 0, 675, 678, 679,
	680, 681, 682, 683, 0, 684, 685, 686, 687, 688,
	663, 664, 665, 666, 647, 648, 676, 0, 650, 0,
	0, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 667, 668, 669, 670, 671, 672, 673, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	131, 0, 0, 173, 186, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 145, 0, 0, 182,
	183, 132, 189, 0, 0, 124, 0, 0, 166, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 153, 139,
	148, 170, 158, 171, 149, 164, 163, 165, 0, 0,
	677, 176, 0, 0, 144, 138, 180, 135, 161, 128,
	122, 0, 129, 130, 134, 133, 0, 152, 159, 162,
	168, 169, 174, 0, 0, 0, 0, 167, 0, 121,
	0, 0, 0, 147, 0, 151, 154, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 143, 137, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 175, 160, 0, 0, 0, 0, 120, 125,
	156, 0, 172, 141, 187, 146, 185, 184, 142, 0,
	451, 0, 0, 816, 0, 0, 817, 0, 0, 127,
	140, 177, 0, 178, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 191, 193, 192, 194, 126, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 131, 0, 0, 173,
	186, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 145, 0, 0, 182, 183, 132, 189, 0,
	0, 124, 0, 0, 166, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 153, 139, 148, 170, 158, 171,
	149, 164, 163, 165, 0, 0, 0, 176, 0, 0,
	144, 138, 180, 135, 161, 128, 122, 0, 129, 130,
	134, 133, 0, 152, 159, 162, 168, 169, 174, 0,
	0, 0, 0, 167, 0, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 143, 137, 633,
	0, 0, 0, 0, 0, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 120, 125, 156, 0, 172, 141,
	187, 146, 185, 184, 142, 0, 451, 0, 632, 0,
	0, 0, 0, 0, 0, 127, 140, 177, 0, 178,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 191, 193, 192,
	194, 126, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 167,
	0, 121, 0, 0, 0, 147, 0, 151, 154, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 143, 137, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 175, 160, 0, 0, 0, 0,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 140, 177, 0, 178, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 131, 0,
	0, 173, 186, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 145, 0, 0, 182, 183, 132,
	189, 0, 0, 124, 0, 0, 166, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 153, 139, 148, 170,
	158, 171, 149, 164, 163, 165, 0, 0, 0, 176,
	0, 0, 144, 138, 180, 135, 161, 128, 122, 0,
	129, 130, 134, 133, 0, 152, 159, 162, 168, 169,
	174, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 143,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 175, 160, 0, 120, 125, 156, 0,
	172, 141, 187, 202, 185, 184, 203, 0, 204, 0,
	0, 118, 0, 1409, 0, 0, 0, 0, 140, 177,
	127, 178, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 191,
	193, 192, 194, 126, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 121,
	0, 0, 0, 147, 0, 151, 154, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 175, 160, 0, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 59, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 140, 177, 127,
	178, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 131, 0, 0, 173,
	186, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 145, 0, 0, 182, 183, 132, 189, 0,
	0, 124, 0, 0, 166, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 153, 139, 148, 170, 158, 171,
	149, 164, 163, 165, 0, 0, 0, 176, 0, 0,
	144, 138, 180, 135, 161, 128, 122, 0, 129, 130,
	134, 133, 0, 152, 159, 162, 168, 169, 174, 0,
	0, 0, 0, 167, 0, 121, 0, 0, 0, 147,
	0, 151, 154, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 143, 137, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 175, 160,
	0, 0, 0, 0, 120, 125, 156, 0, 172, 141,
	187, 146, 185, 184, 142, 0, 451, 0, 1023, 0,
	0, 0, 0, 0, 0, 127, 140, 177, 0, 178,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 191, 193, 192,
	194, 126, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 131, 0, 0, 173, 186, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 145, 0,
	0, 182, 183, 132, 189, 0, 0, 124, 0, 0,
	166, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	153, 139, 148, 170, 158, 171, 149, 164, 163, 165,
	0, 0, 0, 176, 0, 0, 144, 138, 180, 135,
	161, 128, 122, 0, 129, 130, 134, 133, 0, 152,
	159, 162, 168, 169, 174, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 121, 0, 0, 0, 147, 0,
	151, 154, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 143, 0, 0, 821, 137, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 175, 160, 0,
	120, 125, 156, 0, 172, 141, 187, 146, 185, 184,
	142, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 140, 177, 127, 178, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 191, 193, 192, 194, 126, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 131, 0, 0, 173, 186, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 145, 0, 0,
	182, 183, 132, 189, 0, 0, 124, 0, 0, 166,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 153,
	139, 148, 170, 158, 171, 149, 164, 163, 165, 0,
	0, 0, 176, 0, 0, 144, 138, 180, 135, 161,
	128, 122, 0, 129, 130, 134, 133, 0, 152, 159,
	162, 168, 169, 174, 0, 0, 0, 0, 167, 0,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 143, 137, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 175, 160, 0, 0, 0, 0, 120,
	125, 156, 0, 172, 141, 187, 146, 185, 184, 142,
	0, 461, 0, 507, 0, 0, 0, 0, 0, 0,
	127, 140, 177, 0, 178, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 191, 193, 192, 194, 126, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 167, 0, 121, 0, 0, 0,
	147, 0, 151, 154, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 137,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 175,
	160, 0, 0, 0, 0, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 140, 177, 0,
	178, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 131, 0, 0, 173, 186, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 145,
	0, 0, 182, 183, 132, 189, 0, 0, 124, 0,
	0, 166, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 153, 139, 148, 170, 158, 171, 149, 164, 163,
	165, 0, 0, 0, 176, 0, 0, 144, 138, 180,
	135, 161, 128, 122, 0, 129, 130, 134, 133, 0,
	152, 159, 162, 168, 169, 174, 0, 0, 0, 0,
	167, 0, 121, 0, 0, 0, 147, 0, 151, 154,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 143, 137, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 175, 160, 0, 0, 0,
	0, 120, 125, 156, 0, 172, 141, 187, 146, 185,
	184, 142, 0, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 140, 177, 0, 178, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 191, 193, 192, 194, 126, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 131,
	0, 0, 173, 186, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 145, 0, 0, 182, 183,
	132, 189, 0, 0, 124, 0, 0, 166, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 153, 139, 148,
	170, 158, 171, 149, 164, 163, 165, 0, 0, 0,
	176, 0, 0, 144, 138, 180, 135, 161, 128, 122,
	0, 129, 130, 134, 133, 0, 152, 159, 162, 168,
	169, 174, 0, 0, 0, 0, 167, 0, 121, 0,
	0, 0, 147, 0, 151, 154, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	143, 137, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 175, 160, 0, 0, 0, 0, 120, 125, 156,
	0, 172, 141, 187, 146, 185, 184, 142, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 140,
	177, 0, 178, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	191, 193, 192, 194, 126, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 131, 0, 0, 173, 186,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 145, 0, 0, 182, 183, 132, 189, 0, 0,
	124, 0, 0, 166, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 153, 139, 148, 170, 158, 171, 149,
	164, 163, 165, 0, 0, 0, 176, 0, 0, 144,
	138, 180, 135, 161, 128, 122, 0, 129, 130, 134,
	133, 0, 152, 159, 162, 168, 169, 174, 0, 0,
	0, 0, 167, 0, 121, 0, 0, 0, 147, 0,
	151, 154, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 143, 137, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 175, 160, 0,
	0, 0, 0, 120, 125, 156, 0, 172, 141, 187,
	146, 185, 184, 142, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 140, 177, 0, 178, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 191, 193, 192, 194,
	126, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 131, 0, 0, 173, 186, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 145, 0, 0,
	182, 183, 132, 189, 0, 0, 124, 0, 0, 166,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 153,
	139, 148, 170, 158, 171, 149, 164, 163, 165, 0,
	0, 0, 176, 0, 0, 144, 138, 180, 135, 161,
	128, 122, 0, 129, 130, 134, 133, 0, 152, 159,
	162, 168, 169, 174, 0, 0, 0, 0, 167, 0,
	121, 0, 0, 0, 147, 0, 151, 154, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 143, 137, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 175, 160, 0, 0, 0, 0, 120,
	125, 156, 0, 172, 141, 187, 146, 185, 184, 142,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 140, 177, 0, 178, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 191, 193, 192, 194, 126, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 131, 0, 0,
	173, 186, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 145, 0, 0, 182, 183, 132, 189,
	0, 0, 124, 0, 0, 166, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 153, 139, 148, 170, 158,
	171, 149, 164, 163, 165, 0, 0, 0, 176, 0,
	0, 144, 138, 180, 135, 161, 128, 122, 0, 129,
	130, 134, 133, 0, 152, 159, 162, 168, 169, 174,
	0, 0, 0, 0, 167, 0, 121, 0, 0, 0,
	147, 0, 151, 154, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 143, 137,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 175,
	160, 0, 0, 0, 0, 120, 125, 156, 0, 172,
	141, 187, 146, 185, 184, 142, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 140, 177, 0,
	178, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 191, 193,
	192, 194, 126, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 131, 0, 0, 173, 186, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 145,
	0, 0, 182, 183, 132, 189, 0, 0, 124, 0,
	0, 166, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 153, 139, 148, 170, 158, 171, 149, 164, 163,
	165, 0, 0, 0, 176, 0, 0, 144, 138, 180,
	135, 161, 128, 122, 0, 129, 130, 134, 133, 0,
	152, 159, 162, 168, 169, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 125, 156, 0, 172, 141, 187, 146, 185,
	184, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 177, 0, 178, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 191, 193, 192, 194, 126, 195,
	196,
}
var yyPact = [...]int{

	7422, -1000, -207, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1037, 1065, -1000, -1000,
	-1000, -1000, -1000, -1000, 814, 249, 43, 140, 143, 138,
	139, 48, 10544, -1000, 8681, 4248, -53, -1000, -151, -1000,
	-1000, -167, -1000, -1000, 6555, 774, -1000, -1000, -1000, -1000,
	-1000, -1000, 1027, 1035, 825, 980, 899, -1000, -21, -13,
	10544, 1049, 2388, -130, 10132, 202, 195, 190, 181, 202,
	-1000, -1000, -1000, 135, 10956, -1000, 48, 676, 201, -1000,
	10544, -1000, 10544, -62, 34, -1000, -1000, -55, 371, -1000,
	-1000, -1000, -71, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10544, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9720, 261,
	215, 238, 350, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 524,
	-1000, -1000, -1000, -1000, -1000, -1000, 775, 775, -1000, 10544,
	-1000, -1000, -187, -1000, -1000, 702, 382, -1000, 6555, 1874,
	775, 775, -1000, -1000, 218, -1000, -1000, 6828, 6828, 6828,
	6828, 6828, 6828, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 775, 230, -1000, 6280,
	775, 775, 775, 775, 775, 775, 6555, 775, 775, 775,
	775, 775, 775, 775, 775, 775, 775, 775, 775, 775,
	-1000, -1000, 577, 979, 6555, 6555, 1037, -1000, 774, -1000,
	-1000, -1000, 934, -1000, -1000, 392, 199, -1000, -1000, -1000,
	199, -1000, -1000, 960, 10544, 782, -1000, -1000, -180, 3008,
	-1000, -1000, -1000, -1000, 348, 8475, 8475, -1000, -1000, -1000,
	959, -1000, -1000, -1000, -1000, -1000, 1033, 1032, 724, -1000,
	7994, -1000, -1000, 10956, 373, 649, 646, 636, 10544, 10544,
	73, -1000, -1000, -1000, 201, 866, 10956, 970, -1000, -1000,
	1048, 10544, 10544, -1000, -1000, 371, 371, -1000, -1000, 10544,
	-1000, -1000, -1000, -1000, -1000, 371, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 82, -1000, -1000, -1000, -1000, -1000, -9,
	-1000, -1000, -1000, -1000, -1000, -1000, 344, 5178, -15, -1000,
	-1000, -1000, 6555, -1000, -1000, 225, -1000, -1000, -1000, -1000,
	-1000, 6555, 6555, 6555, 412, 325, 6828, 428, 347, 6828,
	6828, 6828, 6828, 6828, 6828, 6828, 6828, 6828, 6828, 6828,
	6828, 6828, 6828, 6828, 511, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 634, -1000, 774, 536, 536, 242, 242,
	242, 242, 242, 1646, 5455, 4558, 577, 708, 6280, 6005,
	6005, 6555, 6555, 6005, 975, 362, 382, 9926, -1000, 577,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6005, 6005, 6005,
	6005, -1000, -1000, -1000, 1060, 290, 439, 776, -1000, 403,
	1027, 577, 899, 8269, 768, -1000, -1000, 9514, 9514, 10338,
	1044, 2698, -1000, 772, 771, -171, -164, -1000, -180, 2046,
	-1000, -1000, -1000, -1000, 259, -1000, 775, 141, 83, 7311,
	561, 19, -1000, -1000, -1000, 790, -1000, 790, 790, 790,
	790, 67, 67, 67, 67, -1000, -1000, -1000, -1000, -1000,
	821, 819, -1000, 790, 790, 790, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 818, 818, 818, 813, 813, 73,
	969, 845, 839, 837, -1000, 681, -1000, 73, -1000, 151,
	-193, -1000, 10544, 10544, -1000, -1000, 1027, -69, -1000, -1000,
	406, 10544, 10544, 371, -1000, 10544, -1000, -1000, -1000, 521,
	-120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10544, -1000, -1000, -1000, -1000, -1000, 382, 325, 339, -1000,
	-1000, 478, -1000, -1000, 1523, -1000, -1000, -1000, -1000, 428,
	6828, 6828, 6828, 880, 1523, 1481, 1659, 1498, 242, 672,
	672, 246, 246, 246, 246, 246, 687, 687, -1000, -1000,
	-1000, 577, -1000, -1000, -1000, 577, 6005, 767, -1000, -1000,
	7105, 229, 775, 228, -1000, -1000, -1000, 577, 675, 675,
	254, 465, 675, 6005, 365, -1000, 6555, 577, -1000, 675,
	577, 675, 675, -1000, 907, 6555, 6555, 6555, -1000, -1000,
	-1000, 979, -1000, 975, 1028, -1000, 917, 916, 6005, -1000,
	-124, 10544, -1000, -124, 783, -1000, 343, -1000, 224, 1037,
	6555, -1000, 3938, -1000, -175, -1000, -168, -184, -1000, -1000,
	-1000, -1000, -1000, 382, -1000, 630, 10132, 775, 775, -1000,
	83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 335, 335, 152, 335,
	335, 335, 335, 335, -20, -23, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, -1000,
	-1000, 609, 296, 252, -1000, -1000, -1000, -1000, 983, -1000,
	561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 384, 237, -1000, 994, -1000, 993, 565,
	1059, 467, 170, 171, 17, -1000, -1000, 519, 67, 67,
	-1000, -1000, -1000, 958, -1000, -1000, -1000, 563, 563, -1000,
	-1000, -1000, -1000, 509, -1000, -1000, -1000, 505, -1000, -1000,
	-1000, 10544, 10544, 10544, -1000, 250, 338, 123, 208, 205,
	204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	335, 335, -1000, -1000, 957, 956, 335, 736, 953, -1000,
	559, -1000, -1000, -1000, 557, 6555, -1000, 371, 1044, -1000,
	-1000, -1000, -1000, 189, -1000, -1000, -1000, -1000, -1000, 880,
	1523, 1153, -1000, 6828, 6828, -1000, -1000, 675, 6005, -1000,
	-1000, 9305, -1000, -1000, 3628, 6005, 4868, -1000, -1000, -1000,
	402, 511, 402, -97, 759, 355, -1000, 6555, 441, -1000,
	-1000, -1000, -1000, -1000, 905, 382, 382, -1000, -1000, 10544,
	-1000, -1000, -1000, -1000, 780, 831, 775, -1000, 826, 1037,
	10338, 6555, 4558, 1027, 382, -1000, -1000, -1000, -179, -181,
	-1000, -1000, 577, 10132, 10132, -1000, 554, -1000, 467, 335,
	335, 504, 497, 483, 553, 552, 335, 335, 482, 551,
	628, 471, 470, 468, 541, 550, 633, 525, 518, 490,
	10750, 120, -1000, 609, -1000, 990, 296, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 816, -1000, -1000, -1000,
	-1000, -1000, -1000, -65, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 683, -1000, -1000, 313, 667,
	-1000, 665, 758, 663, 775, 775, 775, -1000, 10544, -1000,
	-1000, -1000, 620, 54, 814, 612, 10132, 590, 316, -1000,
	-1000, 463, -1000, -1000, -1000, -1000, 1016, 921, 335, 335,
	-1000, -1000, -1000, 382, 406, -1000, -1000, -1000, -1000, 6828,
	1523, 1523, -1000, -1000, -1000, -1000, 223, 577, -1000, 577,
	790, 790, -1000, 790, 813, -1000, 790, 103, 790, 102,
	577, 577, 775, -92, -1000, 382, 6555, -1000, -1000, 1044,
	9099, 824, 10338, 775, -1000, 8063, 10132, -1000, 10338, 1027,
	-1000, 382, -1000, -1000, -1000, -1000, -1000, -1000, 577, 577,
	-1000, -1000, 467, 467, -1000, -1000, -1000, -1000, -1000, 548,
	547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 810, -1000, 1010, 806, 120, 609, 405, -1000,
	-1000, -1000, -1000, -1000, 533, -1000, 456, -1000, 445, 9926,
	9926, 9926, -1000, -1000, -1000, 924, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 590, 590, -1000, 1523, 3318, -1000, -1000, -1000, 157,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6828, 577,
	531, 382, 1042, 737, 919, -1000, -1000, -1000, 973, 7584,
	7790, -1000, 965, 756, 696, -1000, -1000, 5730, 577, 657,
	222, 641, -1000, 690, -1000, 775, -129, -1000, -1000, -1000,
	-1000, 9926, -1000, -1000, -1000, -1000, 9926, 791, 120, -1000,
	679, -1000, 625, 586, 624, -1000, 790, 624, 624, 607,
	-1000, -1000, -1000, -1000, -1000, 136, -1000, -1000, 1039, 1030,
	9099, 9099, 9099, 9099, -1000, 896, 885, -1000, 887, 878,
	891, 10544, -1000, 617, 7584, 293, -1000, 8890, -1000, -1000,
	987, -1000, 775, -1000, -1000, 762, 10132, 9926, 10132, -1000,
	-127, -1000, 423, 605, 600, 9926, 785, -1000, -1000, -1000,
	-1000, 9926, -1000, -1000, -1000, -1000, 577, 108, -110, -1000,
	6555, 6555, 919, 823, 757, -1000, -1000, -1000, -1000, 881,
	-1000, 877, -1000, -1000, -1000, -1000, -1000, 177, 173, 172,
	-1000, 1053, -1000, 775, -1000, 774, 221, -1000, -1000, 598,
	-1000, 579, -1000, -1000, -1000, 594, 9926, 287, -1000, 186,
	501, -1000, 904, -106, -115, 382, 702, 6555, 6555, -1000,
	-1000, 775, 775, 775, 10338, 696, 577, 10132, -127, -1000,
	912, 174, 174, -1000, 585, -1000, -1000, -1000, -1000, 335,
	529, 1013, -1000, -1000, -1000, 1004, -1000, -1000, -1000, 883,
	-1000, 382, 382, 9926, 9926, 9926, 690, -1000, -1000, -1000,
	288, -1000, 335, -1000, 429, 1003, 174, -1000, 398, -1000,
	-1000, -1000, -1000, 572, -108, 576, -1000, 576, 576, 775,
	389, -1000, 568, 174, -1000, -1000, -112, -1000, 9926, -1000,
	-1000, -1000, -1000, -1000, -116, -1000, -1000,
}
var yyPgo = [...]int{

	0, 27, 34, 1385, 1383, 1381, 24, 1019, 1380, 1379,
	1378, 1376, 54, 1375, 1374, 1372, 1371, 1368, 113, 892,
	1366, 1364, 1099, 1095, 1090, 1088, 1359, 1357, 1356, 1354,
	1353, 1352, 1351, 1350, 1349, 1348, 1345, 102, 1344, 1343,
	38, 1342, 1335, 1333, 97, 1332, 95, 1330, 1328, 1327,
	52, 162, 53, 50, 139, 1326, 29, 47, 30, 1325,
	1324, 20, 1323, 1313, 96, 1322, 56, 103, 1321, 1318,
	23, 1317, 1315, 1314, 80, 1312, 1310, 2, 25, 1303,
	59, 1301, 48, 98, 1192, 1300, 1299, 1298, 1296, 1294,
	1293, 79, 6, 4, 1, 17, 1288, 69, 11, 1286,
	78, 1285, 1283, 1278, 1274, 42, 1272, 77, 1271, 22,
	76, 1254, 74, 1251, 21, 12, 44, 1250, 1249, 70,
	92, 94, 66, 1248, 65, 1247, 1246, 101, 1245, 1244,
	1243, 104, 1229, 100, 485, 1222, 1220, 1219, 1214, 1213,
	1212, 1209, 466, 55, 40, 0, 15, 18, 58, 1208,
	10, 657, 62, 5, 1207, 99, 1206, 1205, 129, 51,
	87, 49, 1200, 1197, 1196, 1195, 1194, 1191, 1190, 90,
	1189, 1188, 1186, 1185, 1184, 1183, 1182, 1181, 1179, 1178,
	1176, 1174, 1173, 1171, 1170, 1168, 82, 1167, 1166, 1165,
	1164, 1163, 1161, 1160, 1159, 1158, 1156, 1155, 35, 1151,
	1150, 1148, 1145, 19, 1144, 64, 33, 67, 1143, 1142,
	1141, 89, 41, 1138, 1137, 1136, 1133, 57, 36, 1132,
	84, 39, 32, 1131, 1130, 1124, 68, 14, 28, 1123,
	1122, 1118, 9, 16, 1117, 1116, 1115, 1112, 13, 31,
	37, 1111, 1110, 26, 1109, 1108, 60, 83, 1106, 81,
	3, 1104, 1097, 1093, 1073, 7, 107, 1071, 111,
}
var yyR1 = [...]int{

	0, 253, 254, 254, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 18,
	19, 20, 20, 21, 21, 22, 22, 23, 23, 42,
	42, 42, 42, 43, 43, 43, 113, 113, 112, 112,
	24, 25, 27, 26, 26, 251, 251, 250, 174, 174,
	7, 7, 28, 28, 28, 28, 28, 252, 252, 252,
	252, 252, 252, 242, 242, 243, 243, 235, 233, 233,
	230, 230, 236, 236, 229, 229, 234, 234, 231, 231,
	238, 238, 238, 238, 238, 239, 240, 247, 247, 248,
	248, 202, 202, 249, 249, 249, 249, 207, 207, 206,
	206, 205, 205, 205, 208, 208, 208, 31, 222, 224,
	224, 225, 225, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 176, 178, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 191, 192, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 194, 194, 195,
	195, 196, 196, 197, 197, 179, 203, 203, 177, 173,
	175, 223, 223, 223, 218, 150, 150, 162, 162, 162,
	162, 244, 244, 245, 245, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 165, 165, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 164, 164, 164, 164,
	164, 166, 166, 166, 166, 166, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 168, 168, 168, 168, 168, 168, 168, 168, 217,
	217, 169, 169, 211, 211, 212, 212, 212, 209, 209,
	210, 210, 213, 213, 170, 170, 170, 170, 170, 170,
	41, 40, 40, 40, 129, 129, 129, 214, 198, 198,
	198, 172, 199, 199, 200, 200, 200, 201, 201, 201,
	215, 215, 216, 216, 171, 219, 219, 219, 219, 6,
	6, 237, 237, 237, 237, 232, 232, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 5, 5, 221, 221,
	220, 220, 228, 228, 227, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 156, 156, 135, 135, 140, 140,
	140, 30, 30, 30, 74, 74, 141, 141, 8, 32,
	9, 136, 136, 136, 71, 71, 71, 10, 12, 12,
	12, 12, 12, 72, 72, 72, 72, 72, 72, 11,
	11, 11, 11, 204, 204, 204, 204, 204, 13, 139,
	139, 139, 14, 16, 16, 16, 16, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 49, 49, 69, 69, 69,
	66, 66, 67, 67, 68, 68, 65, 65, 70, 70,
	70, 73, 73, 73, 36, 142, 142, 34, 35, 35,
	257, 37, 38, 38, 39, 39, 39, 46, 46, 46,
	44, 44, 45, 45, 52, 52, 51, 51, 53, 53,
	53, 53, 149, 149, 149, 148, 148, 55, 55, 56,
	56, 57, 57, 58, 58, 58, 75, 59, 59, 59,
	59, 157, 157, 154, 154, 154, 153, 153, 60, 60,
	60, 60, 61, 61, 61, 61, 62, 62, 64, 64,
	63, 63, 76, 76, 76, 76, 77, 77, 78, 78,
	54, 54, 54, 54, 54, 54, 54, 132, 132, 80,
	80, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 90, 90, 90, 90, 90, 90, 81, 81, 81,
	81, 81, 81, 81, 50, 50, 91, 91, 91, 97,
	92, 92, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 88, 88, 88, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 87, 87, 87, 87, 87, 87,
	87, 87, 258, 258, 89, 89, 89, 89, 47, 47,
	47, 47, 47, 159, 159, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 101, 101,
	48, 48, 99, 99, 100, 102, 102, 98, 98, 98,
	83, 83, 83, 83, 83, 83, 83, 85, 85, 85,
	103, 103, 104, 104, 105, 105, 106, 106, 107, 108,
	108, 108, 109, 109, 109, 109, 110, 110, 110, 82,
	82, 82, 82, 82, 82, 111, 111, 111, 111, 114,
	114, 93, 93, 95, 95, 94, 96, 115, 115, 116,
	117, 117, 120, 120, 119, 119, 119, 119, 119, 128,
	128, 127, 127, 127, 118, 118, 121, 121, 125, 125,
	124, 126, 126, 126, 126, 123, 123, 122, 122, 160,
	160, 160, 130, 130, 133, 133, 134, 134, 131, 131,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	143, 143, 143, 138, 138, 241, 241, 146, 146, 147,
	147, 151, 151, 152, 152, 155, 155, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 255, 256, 158,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 8, 9, 7, 8, 0,
	1, 1, 1, 0, 1, 1, 1, 3, 0, 4,
	8, 7, 2, 3, 3, 1, 3, 5, 0, 2,
	1, 1, 3, 5, 11, 11, 11, 0, 1, 1,
	5, 9, 7, 1, 1, 1, 1, 2, 3, 2,
	0, 2, 1, 1, 0, 2, 1, 3, 0, 2,
	0, 1, 1, 2, 2, 3, 3, 0, 1, 1,
	2, 1, 1, 4, 4, 2, 4, 0, 1, 0,
	1, 1, 2, 2, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 4,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 3, 3,
	4, 1, 3, 3, 3, 1, 1, 3, 1, 1,
	1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 3, 4, 1, 1, 1, 1, 0, 3,
	3, 2, 0, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 7, 7, 8, 9, 0,
	1, 3, 1, 2, 3, 0, 2, 0, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 3, 2, 6, 7, 7, 7, 9,
	7, 7, 7, 4, 0, 1, 0, 1, 0, 1,
	1, 6, 6, 4, 1, 3, 0, 1, 3, 3,
	2, 1, 1, 1, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 3, 3, 3, 1, 1, 3,
	5, 3, 6, 0, 1, 1, 1, 1, 2, 0,
	1, 1, 4, 2, 3, 2, 2, 4, 4, 3,
	6, 3, 3, 4, 4, 4, 6, 5, 5, 3,
	3, 5, 6, 7, 3, 3, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 0, 3, 1, 1, 1,
	0, 2, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 1, 1, 5, 1, 1, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 1, 2, 3, 3, 3, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 2, 2, 0, 2,
	3, 2, 2, 2, 1, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -253, -17, -18, -22, -23, -24, -25, -26, -28,
	-29, -30, -8, -32, -33, -36, -34, -9, -10, -11,
	-13, -14, -16, -15, -35, -27, -19, -20, 6, 7,
	259, 8, 9, 45, -31, 126, 127, 128, 151, 130,
	146, 48, 65, 279, -136, 149, 286, 289, 290, 293,
	292, 307, 150, 152, 10, -255, 145, 144, 143, 68,
	-254, 315, -105, 15, -39, 5, -37, -257, -37, -37,
	-37, -37, -37, -222, 68, -7, -241, 24, 32, 139,
	251, 252, 35, -131, 251, 135, -135, 136, -7, 34,
	-141, 139, 139, 244, 126, 239, 281, -68, -69, 283,
	284, 246, 139, 285, 242, 282, 241, 238, 176, 71,
	47, 136, 28, 26, -142, 139, 240, -151, 71, -145,
	265, 20, 207, 153, 172, 266, 312, 80, 206, 209,
	210, 147, 168, 212, 211, 204, 162, 43, 202, 186,
	287, 270, 275, 248, 201, 163, 272, 24, 187, 191,
	294, 26, 214, 185, 27, 28, 267, 50, 189, 215,
	54, 205, 216, 193, 192, 194, 175, 18, 217, 218,
	188, 190, 269, 150, 219, 53, 198, 288, 290, 246,
	203, 177, 166, 167, 274, 273, 151, 271, 141, 169,
	307, 308, 310, 309, 311, 313, 314, -158, -63, -72,
	130, -151, 272, 275, 277, -204, 71, 73, -144, -145,
	86, 39, 41, 196, 89, 159, 121, 181, 16, 22,
	90, 170, 173, 176, 120, 247, 208, 260, 126, 63,
	250, 253, 249, 251, 239, 164, 44, 9, 143, 144,
	38, 114, 10, 128, 93, 94, 281, 148, 40, 145,
	83, 19, 66, 11, 47, 13, 14, 149, 134, 135,
	105, 136, 61, 7, 157, 158, 122, 42, 102, 57,
	36, 59, 103, 17, 254, 255, 46, 184, 180, 264,
	183, 156, 179, 116, 64, 51, 87, 81, 165, 84,
	67, 152, 85, 15, 62, 284, 138, 137, 283, 161,
	104, 129, 259, 30, 60, 252, 6, 263, 45, 146,
	155, 58, 139, 240, 34, 182, 154, 178, 92, 140,
	82, 285, 5, 35, 199, 8, 65, 142, 256, 257,
	258, 49, 174, 171, 282, 268, 91, 12, 200, -139,
	269, 209, -158, 291, -158, -158, 308, 310, 309, 311,
	312, 314, 279, -158, -158, -92, -54, -79, 87, -84,
	44, 40, -83, -80, -98, -96, -97, 121, 110, 111,
	118, 88, 122, -88, -86, -87, -89, 73, 72, 74,
	75, 76, 77, 81, 82, 83, -146, -151, -94, -255,
	59, 60, 260, 261, 264, 262, 90, 49, 249, 258,
	257, 256, 254, 255, 250, 253, 134, 251, 116, 259,
	71, -145, -18, -109, 17, 16, -21, -19, -255, 6,
	37, 38, -46, 55, 56, -38, -42, 225, 224, 226,
	-43, 225, 224, -63, 11, -117, -118, -120, 291, -160,
	-119, 295, 296, 294, -147, -128, 297, -146, -144, 176,
	173, 71, -145, -252, 294, 288, 280, 276, -223, -218,
	-150, 71, -145, -134, 134, 136, 136, 136, -134, 139,
	-156, -155, 71, -145, -142, 71, -133, 134, -63, -63,
	243, 139, 251, -158, -158, 240, -65, 247, 248, -67,
	11, 105, -158, -158, -158, 246, -158, -158, -158, -158,
	-158, -158, -158, -74, -63, -71, -150, 73, -12, 19,
	-18, -24, -22, -23, -25, -12, 272, 123, 95, 74,
	-158, -94, -255, -94, -158, -63, -158, -158, 313, 292,
	293, 69, 86, 85, 102, -54, -81, 105, 87, 103,
	104, 89, 107, 106, 117, 110, 111, 112, 113, 114,
	115, 116, 108, 109, 120, 95, 96, 97, 98, 99,
	100, 101, -132, -255, -97, -255, 124, 125, -84, -84,
	-84, -84, -84, -84, -255, 123, -18, -92, -255, -255,
	-255, -255, -255, -255, -255, -101, -54, -255, -258, -255,
	-258, -258, -258, -258, -258, -258, -258, -255, -255, -255,
	-255, -256, 70, -110, 19, 46, -54, -106, -107, -54,
	-105, -18, -37, 51, -44, 38, 79, -131, -131, 45,
	-63, 69, -121, -124, -122, 298, 300, -119, 291, 95,
	-127, -146, 73, 44, -127, 45, 16, 16, 70, 69,
	-162, -165, -167, -166, -168, -163, -164, 170, 171, 121,
	174, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 45, 147, 166, 167, 168, 169, 187, 188, 189,
	190, 191, 192, 193, 194, 153, 172, 266, 154, 155,
	156, 157, 158, 159, 161, 162, 163, 164, 165, -155,
	87, 71, 71, 71, -63, -63, -247, -248, -249, -207,
	300, 44, -133, 67, -155, 40, -49, 11, -63, -151,
	-66, -67, -67, -63, -66, 69, -73, 138, 275, 209,
	95, -152, -151, -144, 185, 273, 274, -158, -158, -158,
	-143, 140, 39, -158, -158, -158, -54, -54, -54, -90,
	81, 87, 82, 83, -84, -91, -94, -97, 78, 105,
	103, 104, 89, -84, -84, -84, -84, -84, -84, -84,
	-84, -84, -84, -84, -84, -84, -84, -84, -159, 71,
	73, 71, -83, -83, -146, -52, 38, -51, -53, 112,
	-54, -151, -147, -152, -144, -256, -256, -18, -51, -51,
	-54, -54, -51, -44, -99, -100, 91, -146, -256, -51,
	-52, -51, -51, 8, 105, 69, 18, 69, -108, 41,
	143, -109, -256, -46, -85, -146, 74, 77, -45, 58,
	-64, 42, -63, -64, -115, -116, -98, -146, -151, -78,
	12, -120, -160, -123, 69, -125, 69, 299, 301, 302,
	-121, 67, 84, -54, -199, 120, -255, 278, 25, -224,
	-225, -226, -177, -173, -175, -176, -178, -179, -180, -181,
	-182, -183, -184, -185, -186, -187, -188, -189, -190, -191,
	-192, -193, -194, -195, -196, -197, 80, 287, -207, 196,
	207, 48, 208, 209, 210, 136, 212, 213, 214, 27,
	215, 216, 217, 218, 219, 220, 221, 222, 223, -218,
	-219, -220, -5, -4, 136, 36, 32, 24, 23, -244,
	-245, -246, -213, -170, -214, -215, -216, -171, -41, -172,
	-200, -201, 81, 87, 44, 196, 137, 36, 35, 80,
	67, 120, 206, 203, -209, 199, -169, 68, -169, -169,
	-169, -169, -198, 173, -198, -198, -198, 68, 68, -169,
	-169, -169, -211, 68, -211, -211, -212, 68, -212, -247,
	40, 67, 67, 67, -137, 129, 287, 260, 131, 128,
	132, 127, 196, 173, 80, 44, 15, 271, 71, -249,
	120, -205, -186, 176, 173, 170, 302, -74, -63, -109,
	245, -158, -158, -70, 103, 12, -151, -63, -66, -158,
	-63, -158, 74, 273, -63, 81, 82, 83, -91, -84,
	-84, -84, -50, 148, 86, -256, -256, -51, 69, -149,
	-148, 39, -146, 73, 123, -255, 123, -256, -256, -256,
	69, 142, 39, -256, -51, -102, -100, 93, -54, -256,
	-256, -256, -256, -256, 53, -54, -54, -107, -110, -130,
	19, 11, 49, 49, -51, -112, 276, -63, -112, -78,
	69, 95, 123, -105, -54, -122, -124, -126, 303, 300,
	306, 71, -150, -255, -255, -226, -206, 95, -206, 120,
	-205, -206, -206, -206, -206, -206, 211, 211, -206, -206,
	-206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
	-206, -6, 71, -221, -220, 137, 35, 33, -246, 81,
	73, 74, 75, 81, -40, -80, -129, 249, 254, 255,
	36, 36, 73, 8, -203, 71, 73, 201, 202, 44,
	44, 204, 205, -210, 200, 74, -198, -198, 45, -217,
	73, -217, 74, 74, -63, -63, -63, -158, -143, -138,
	136, 36, 95, 140, 133, 133, 133, -206, -206, 45,
	45, -206, -140, 30, 22, -238, -239, -240, 46, 20,
	-158, 73, 73, -54, -66, -78, -12, -158, -50, 86,
	-84, -84, -256, -53, -148, 112, -152, -52, -147, -161,
	121, 170, 147, 168, 164, 185, 175, 198, 166, 199,
	-159, -161, 265, -105, 94, -54, 92, 54, -63, -55,
	11, -82, 45, 49, -18, -255, -255, -82, 45, -105,
	-116, -54, -147, -109, 300, 304, 305, -256, -150, -150,
	73, -203, -206, -206, 74, 74, 74, 73, 73, -206,
	-206, 74, 73, 71, 74, 74, 74, 74, 44, 73,
	44, 202, 201, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 74, 44, 74, 44, 74, 44,
	71, -145, -2, -1, 142, -6, 36, -221, 68, -40,
	70, 71, 121, 70, 69, 70, 69, 70, 69, -255,
	-255, -255, -63, -158, 71, 173, -222, 71, -218, -243,
	71, 44, -208, 71, 121, 44, -202, 74, 44, -240,
	-239, -206, -206, -70, -84, 123, -256, -256, -169, -169,
	-169, -212, -169, 158, -169, 158, -256, -256, -255, -48,
	263, -54, -78, -56, -57, -58, -59, -75, -97, -255,
	-63, -114, 67, -115, -93, -95, -94, -255, -18, -111,
	-150, -113, -150, -115, -109, -256, -256, -203, -203, 73,
	73, 68, -3, 25, 21, 31, 68, -2, -6, 70,
	74, 73, 74, 74, -228, -227, -146, -228, -228, 45,
	-243, -243, 112, -198, 71, -84, -256, 73, -103, 13,
	69, -60, -61, -62, 57, 61, 63, 58, 59, 60,
	64, -157, 39, -56, -255, -154, -153, 39, -151, 73,
	43, -114, 69, -256, -256, -256, 69, 123, 69, -256,
	-255, -174, 277, -228, -228, 68, -2, 70, 70, 70,
	-256, 69, -169, -256, -256, 71, -47, 105, 268, -104,
	14, 16, -57, -58, -57, -58, 57, 57, 57, 62,
	57, 62, 57, -61, -151, -256, -76, 65, 135, 66,
	-153, 36, -95, 49, -18, -255, -150, -146, -150, -251,
	-250, 276, 74, 70, 70, -228, 68, -230, -227, -229,
	-231, -256, 266, 64, 269, -54, -92, 67, 67, 57,
	57, 136, 136, 136, 8, -93, -18, 123, 69, -256,
	71, -232, -232, 70, -228, -238, -236, -233, -235, 27,
	80, 142, -238, -234, -233, 268, -238, -233, 54, 267,
	270, -54, -54, -255, -255, -255, -115, -256, -150, -250,
	49, -237, 27, -1, 80, 268, -232, 70, -206, 73,
	-242, 25, 21, 29, 54, -77, -146, -77, -77, 105,
	-206, 73, 29, -232, 74, 71, 268, -256, 69, -256,
	-256, -94, 74, 71, 269, -146, 270,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 664, 0, 450, 450,
	450, 450, 450, 450, 0, 755, 738, 346, 356, 0,
	434, 0, 0, 975, 373, 383, 389, 975, 0, 975,
	975, 0, 975, 975, 0, 0, 361, 362, 363, 973,
	1, 3, 672, 0, 0, 454, 457, 452, 39, 43,
	0, 0, 0, 67, 0, 736, 0, 0, 0, 736,
	60, 61, 756, 0, 344, 739, 0, 0, 734, 347,
	0, 357, 0, 0, 0, 975, 975, 0, 0, 975,
	975, 975, 0, 975, 975, 975, 975, 975, 975, 975,
	435, 427, 428, 429, 0, 445, 446, 447, 761, 762,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 360, 364, 0,
	0, 510, 922, -2, 378, 388, 384, 385, 386, 387,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 0,
	390, 391, 393, 975, 395, 396, 0, 0, 975, 0,
	975, 975, 0, 448, 449, 52, 560, 520, 0, 525,
	527, 0, 562, 563, 564, 565, 566, 0, 0, 0,
	0, 0, 0, 588, 589, 590, 591, 650, 651, 652,
	653, 654, 655, 656, 529, 530, 647, 0, 696, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 612, 612,
	612, 612, 612, 612, 612, 612, 0, 0, 0, 0,
	-2, -2, 31, 676, 0, 0, 664, 33, 0, 450,
	455, 456, 460, 458, 459, 451, 738, 40, 41, 42,
	738, 44, 45, 0, 0, 53, 54, 700, 0, 0,
	702, 729, 730, -2, 0, 0, 0, 759, 760, -2,
	779, 757, 758, 62, 68, 69, 0, 0, 0, 191,
	0, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	-2, 345, 765, 766, 734, 0, 0, 0, 358, 359,
	425, 0, 0, 409, 410, 430, 0, 436, 437, 0,
	432, 433, 414, 415, 416, 430, 418, 419, 420, 421,
	422, 423, 424, 441, 354, 367, 365, 366, 379, 0,
	-2, 369, 370, 371, 372, 381, 0, 0, 0, 975,
	394, 975, 0, 975, 399, 750, 401, 402, 975, 975,
	975, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 548, 549, 550, 551,
	552, 553, 526, 0, 540, 0, 0, 0, 582, 583,
	584, 585, 586, 0, 464, 0, 31, 0, 0, 0,
	0, 0, 0, 0, 460, 0, 639, 0, 604, 0,
	605, 606, 607, 608, 609, 610, 611, 0, 464, 0,
	0, 32, 974, 27, 0, 0, 673, 665, 666, 669,
	672, 31, 457, 0, 462, 461, 453, 0, 0, 0,
	518, 0, 714, 725, 718, 0, 0, 703, 0, 0,
	707, 711, 712, 713, 292, 710, 0, 0, -2, 317,
	201, 268, 198, 199, 200, 261, 216, 261, 261, 261,
	261, 288, 288, 288, 288, 244, 245, 246, 247, 248,
	0, 0, 231, 261, 261, 261, 235, 251, 252, 253,
	254, 255, 256, 257, 258, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 263, 263, 263, 265, 265, -2,
	0, 0, 0, 0, 117, 0, 343, -2, 99, 0,
	0, 108, 0, 0, 353, 735, 672, 0, 975, 975,
	438, 0, 0, 430, 975, 0, 975, 442, 443, 0,
	0, 511, 763, 764, 374, 375, 376, 392, 397, 398,
	0, 751, 752, 403, 404, 405, 561, 521, 522, 524,
	541, 0, 543, 545, 531, 532, 556, 557, 558, 0,
	0, 0, 0, 554, 536, 0, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 581, 623,
	624, 0, 579, 580, 587, 0, 0, 465, 466, 468,
	472, 0, 648, 0, -2, 559, 695, 31, 0, 0,
	0, 0, 0, 0, 645, 642, 0, 0, 613, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 668, 670,
	671, 676, 34, 460, 0, 657, 0, 0, 0, 463,
	48, 0, 509, 48, 518, 697, 0, 647, 0, 664,
	0, 701, 0, 716, 0, 717, 0, 0, 727, 728,
	715, 704, 705, 706, 708, 0, 0, 0, 0, 118,
	-2, 121, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 109, 109, 0, 109,
	109, 109, 109, 109, 0, 0, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 192,
	193, 309, 328, 0, 330, 331, 326, -2, 318, 194,
	202, 203, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 272, 0, 0, 287, 0, 301, 303, 0,
	0, 0, 0, 0, 270, 269, 215, 0, 288, 288,
	238, 239, 240, 0, 241, 242, 243, 0, 0, 232,
	233, 234, 226, 0, 227, 228, 229, 0, 230, 63,
	737, 0, 0, 0, 975, 750, 0, 747, 0, 745,
	0, 740, 741, 742, 743, 744, 746, 748, 749, 100,
	109, 109, 105, 111, 0, 0, 109, 348, 90, 975,
	0, 407, 408, 411, 0, 0, 431, 430, 518, 417,
	355, 444, 380, 0, 975, 542, 544, 546, 533, 554,
	537, 0, 534, 0, 0, 528, 592, 0, 0, 469,
	473, 0, 475, 476, 0, 464, 0, -2, 595, 596,
	0, 0, 0, 0, 664, 0, 643, 0, 0, 603,
	614, 615, 616, 617, 0, 674, 675, 667, 28, 0,
	732, 733, 658, 659, 477, 0, 0, 508, 0, 664,
	0, 0, 0, 672, 519, 726, 719, 720, 0, 0,
	724, 293, 0, 0, 0, 122, 0, 110, 0, 109,
	109, 0, 0, 0, 0, 0, 109, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 310, 309, 329, 0, 328, 319, 204, 273,
	274, 275, 276, 277, 278, 279, 281, 284, 285, 286,
	300, 302, 304, 0, 291, 186, 187, 294, 295, 296,
	297, 298, 299, 197, 271, 0, 236, 237, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 335, 0, 975,
	753, 754, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 0, 351, 349, 350, 352, 91, 92, 109, 109,
	406, 426, 439, 440, 438, 412, 382, 400, 535, 0,
	555, 538, 593, 467, 474, 470, 0, 0, 649, 0,
	261, 261, 628, 261, 265, 631, 261, 633, 261, 636,
	0, 0, 0, 640, 602, 646, 0, 678, 29, 518,
	0, 689, 0, 0, -2, 0, 0, 37, 0, 672,
	698, 699, 648, 51, 721, 722, 723, 70, 0, 0,
	188, 189, 0, 0, 147, 148, 185, 150, 151, 0,
	0, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 0, 322, 0, 0, 321, 309, 0, 280,
	262, 289, 290, 249, 0, 250, 0, 266, 0, 0,
	0, 0, 336, 337, 338, 0, 340, 341, 342, 103,
	75, 76, 104, 114, 115, 116, 106, 101, 102, 93,
	94, 0, 0, 413, 539, 0, 594, 597, 625, 288,
	629, 630, 632, 634, 635, 637, 599, 598, 0, 0,
	0, 644, 660, 478, 479, 481, 482, 483, 491, 0,
	493, 35, 0, 689, 679, 691, 693, 0, 31, 0,
	685, 0, 46, 38, 50, 0, 58, 149, 190, 152,
	153, 0, 320, 323, 324, 325, 0, 0, 321, 282,
	0, 260, 0, 0, 0, 332, 261, 0, 0, 0,
	95, 96, 471, 626, 627, 618, 601, 641, 662, 0,
	0, 0, 0, 0, 498, 0, 0, 501, 0, 0,
	0, 0, 492, 0, 0, 512, 494, 0, 496, 497,
	0, 36, 0, 694, -2, 0, 0, 0, 0, 49,
	0, 72, 0, 0, 0, 0, 0, 283, 264, 267,
	80, 0, 334, 84, 88, 339, 0, 0, 0, 30,
	0, 0, 480, 487, 0, 490, 499, 500, 502, 0,
	504, 0, 506, 507, 484, 485, 486, 0, 0, 0,
	495, 0, 692, 0, -2, 0, 687, 686, 47, 0,
	55, 0, 59, 315, 315, 0, 0, 90, 333, 90,
	90, 600, 0, 0, 0, 663, 661, 0, 0, 503,
	505, 0, 0, 0, 0, 682, 31, 0, 0, 71,
	0, 305, 306, 315, 0, 64, 81, 82, 83, 109,
	0, 0, 65, 85, 86, 0, 66, 89, 619, 0,
	622, 488, 489, 0, 0, 0, 690, -2, 688, 56,
	0, 316, 109, 312, 0, 0, 307, 315, 0, 79,
	77, 73, 74, 0, 620, 0, 516, 0, 0, 0,
	0, 313, 0, 308, 78, 87, 0, 513, 0, 514,
	515, 57, 311, 314, 0, 517, 621,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 3, 3, 115, 107, 3,
	68, 70, 112, 110, 69, 111, 123, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 315,
	96, 95, 97, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 89, 90, 91, 92, 93, 94, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1074
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1080
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1082
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1114
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1159
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1172
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1184
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1196
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.str = ""
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1224
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.statement = &Do{Exprs: yyDollar[2].exprs}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.optVal = nil
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1332
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 66:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.str = "hash"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.str = "btree"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.str = "default"
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1538
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.str = "default"
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1623
		{
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1628
		{
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.str = "character set"
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.str = "char set"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = "default"
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1662
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1944
		{
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1960
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2212
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.optVal = nil
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2638
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.str = yyDollar[3].str
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2734
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2744
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2754
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2779
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2791
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2805
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 308:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2816
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2881
		{
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2887
		{
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2898
		{
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2930
		{
			// set empty
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.str = yyDollar[1].str
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2952
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2972
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2977
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.byt = 0
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.byt = 1
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3025
		{
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3029
		{
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3033
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3045
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3049
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3069
		{
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3071
		{
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3075
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.statement = &Xa{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3095
		{
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3097
		{
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.showFilter = nil
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3114
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3141
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3153
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3167
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3171
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.optVal = nil
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3189
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3194
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3214
		{
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3216
		{
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3218
		{
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3246
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3308
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3319
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3326
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3330
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3334
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3338
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3342
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3354
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3358
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3399
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3415
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.str = "full "
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.showFilter = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3448
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3452
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3456
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3468
		{
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3470
		{
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3474
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3484
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3489
		{
			setAllowComments(yylex, true)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3492
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3498
		{
			yyVAL.bytes2 = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3502
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3508
		{
			yyVAL.str = UnionStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3512
		{
			yyVAL.str = UnionAllStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3516
		{
			yyVAL.str = UnionDistinctStr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3521
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.str = SQLCacheStr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.str = DistinctStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.str = StraightJoinHint
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3552
		{
			yyVAL.selectExprs = nil
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3562
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3566
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3572
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3576
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3584
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3589
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3593
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3597
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3604
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3609
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3613
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3619
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3623
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3641
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3664
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3668
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3686
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3701
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3707
		{
			yyVAL.str = JoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3711
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3715
		{
			yyVAL.str = JoinStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3719
		{
			yyVAL.str = StraightJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3725
		{
			yyVAL.str = LeftJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3729
		{
			yyVAL.str = LeftJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3733
		{
			yyVAL.str = RightJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.str = RightJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3743
		{
			yyVAL.str = NaturalJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3747
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3757
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3761
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3767
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3771
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3776
		{
			yyVAL.indexHints = nil
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3780
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3784
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3794
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3798
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3803
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3807
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3813
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3817
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3821
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3829
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3833
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3837
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.str = ""
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3853
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3863
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3867
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3871
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3875
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3879
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3883
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3891
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3895
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3899
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.str = IsNullStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.str = IsNotNullStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.str = IsTrueStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.str = IsNotTrueStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.str = IsFalseStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3925
		{
			yyVAL.str = IsNotFalseStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3931
		{
			yyVAL.str = EqualStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3935
		{
			yyVAL.str = LessThanStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.str = GreaterThanStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.str = LessEqualStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.str = GreaterEqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.str = NotEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3964
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3974
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3978
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3984
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3990
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3994
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4000
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4004
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4008
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4016
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4020
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4024
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4028
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4032
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4036
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4040
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4044
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4048
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4052
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4056
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4060
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4064
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4068
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4072
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4076
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4080
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4084
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4092
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4110
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4114
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4154
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4158
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4162
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4166
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 600:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4170
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 601:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4174
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4178
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4182
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4204
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4224
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4239
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4247
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4257
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4261
		{
			yyVAL.str = BooleanModeStr
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 621:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.str = QueryExpansionStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4279
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4283
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4315
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4339
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4353
		{
			yyVAL.str = string("")
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4357
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4363
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4367
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4373
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4378
		{
			yyVAL.expr = nil
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4382
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4392
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4396
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4402
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4414
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4426
		{
			yyVAL.expr = &NullVal{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4432
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4441
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4445
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4450
		{
			yyVAL.exprs = nil
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4454
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.expr = nil
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4468
		{
			yyVAL.orderBy = nil
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4478
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4482
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.str = AscScr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.str = AscScr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.str = DescScr
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.limit = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4514
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4518
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4523
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4527
		{
			yyVAL.str = ForUpdateStr
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4531
		{
			yyVAL.str = ShareModeStr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4544
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4552
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4557
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4561
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4565
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4572
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4576
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4580
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4584
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4589
		{
			yyVAL.updateExprs = nil
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4593
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4599
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4603
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4609
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4613
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4619
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4625
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4635
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4639
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4645
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4651
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4655
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4661
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4665
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4672
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4676
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4680
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4684
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4688
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4695
		{
			yyVAL.bytes = []byte("charset")
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4705
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4709
		{
			yyVAL.expr = &Default{}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4715
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4719
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4725
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4729
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4735
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4739
		{
			yyVAL.str = yyDollar[2].str
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4745
		{
			yyVAL.str = yyDollar[3].str
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4751
		{
			yyVAL.str = RepeatableRead
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4755
		{
			yyVAL.str = ReadCommitted
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4759
		{
			yyVAL.str = ReadUncommitted
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4763
		{
			yyVAL.str = Serializable
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4769
		{
			yyVAL.str = ""
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4773
		{
			yyVAL.str = yyDollar[2].str
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4779
		{
			yyVAL.str = TxReadWrite
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4783
		{
			yyVAL.str = TxReadOnly
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4789
		{
			yyVAL.str = SessionStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4793
		{
			yyVAL.str = SessionStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4797
		{
			yyVAL.str = GlobalStr
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4806
		{
			yyVAL.byt = 0
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4810
		{
			yyVAL.byt = 1
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4815
		{
			yyVAL.byt = 0
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4819
		{
			yyVAL.byt = 1
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4824
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4828
		{
			yyVAL.str = IgnoreStr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4834
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4838
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4842
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4846
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4850
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4854
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4858
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4862
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4866
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4870
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4875
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4879
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4883
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4889
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4893
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4898
		{
			yyVAL.str = IndexStr
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4902
		{
			yyVAL.str = UniqueStr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4908
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4919
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4925
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4929
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4936
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4942
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4946
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5179
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5188
		{
			decNesting(yylex)
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5193
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
