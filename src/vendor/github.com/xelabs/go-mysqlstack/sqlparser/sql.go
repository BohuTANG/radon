//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
	checkOptionEnum       CheckOptionEnum
	checkOptionList       CheckOptionList
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const DO = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALGORITHM = 57362
const BTREE = 57363
const CASCADE = 57364
const CONSTRAINT = 57365
const FULLTEXT = 57366
const HASH = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHANGED = 57390
const CHECK = 57391
const CHECKSUM = 57392
const FAST = 57393
const MEDIUM = 57394
const UPGRADE = 57395
const VALUES = 57396
const LAST_INSERT_ID = 57397
const NEXT = 57398
const VALUE = 57399
const SHARE = 57400
const MODE = 57401
const SQL_NO_CACHE = 57402
const SQL_CACHE = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const ID = 57415
const HEX = 57416
const STRING = 57417
const INTEGRAL = 57418
const FLOAT = 57419
const HEXNUM = 57420
const VALUE_ARG = 57421
const LIST_ARG = 57422
const COMMENT = 57423
const COMMENT_KEYWORD = 57424
const NULL = 57425
const TRUE = 57426
const FALSE = 57427
const OFF = 57428
const OR = 57429
const AND = 57430
const NOT = 57431
const BETWEEN = 57432
const CASE = 57433
const WHEN = 57434
const THEN = 57435
const ELSE = 57436
const END = 57437
const LE = 57438
const GE = 57439
const NE = 57440
const NULL_SAFE_EQUAL = 57441
const IS = 57442
const LIKE = 57443
const REGEXP = 57444
const IN = 57445
const SHIFT_LEFT = 57446
const SHIFT_RIGHT = 57447
const DIV = 57448
const MOD = 57449
const UNARY = 57450
const COLLATE = 57451
const BINARY = 57452
const INTERVAL = 57453
const JSON_EXTRACT_OP = 57454
const JSON_UNQUOTE_EXTRACT_OP = 57455
const CREATE = 57456
const ALTER = 57457
const DROP = 57458
const RENAME = 57459
const ANALYZE = 57460
const ADD = 57461
const MODIFY = 57462
const COLUMN = 57463
const IF = 57464
const IGNORE = 57465
const INDEX = 57466
const PRIMARY = 57467
const QUICK = 57468
const TABLE = 57469
const TO = 57470
const VIEW = 57471
const USING = 57472
const DESC = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const SHOW = 57476
const DATE = 57477
const ESCAPE = 57478
const HELP = 57479
const REPAIR = 57480
const TRUNCATE = 57481
const OPTIMIZE = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const CHARSET = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const FIXED = 57531
const DYNAMIC = 57532
const STORAGE = 57533
const DISK = 57534
const MEMORY = 57535
const COLUMN_FORMAT = 57536
const AVG_ROW_LENGTH = 57537
const COMPRESSION = 57538
const CONNECTION = 57539
const DATA = 57540
const DIRECTORY = 57541
const DELAY_KEY_WRITE = 57542
const ENCRYPTION = 57543
const INSERT_METHOD = 57544
const MAX_ROWS = 57545
const MIN_ROWS = 57546
const PACK_KEYS = 57547
const PASSWORD = 57548
const ROW_FORMAT = 57549
const STATS_AUTO_RECALC = 57550
const STATS_PERSISTENT = 57551
const STATS_SAMPLE_PAGES = 57552
const TABLESPACE = 57553
const DELAYED = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const COMPRESSED = 57557
const REDUNDANT = 57558
const COMPACT = 57559
const TOKUDB_DEFAULT = 57560
const TOKUDB_FAST = 57561
const TOKUDB_SMALL = 57562
const TOKUDB_ZLIB = 57563
const TOKUDB_QUICKLZ = 57564
const TOKUDB_LZMA = 57565
const TOKUDB_SNAPPY = 57566
const TOKUDB_UNCOMPRESSED = 57567
const COLLATION = 57568
const DATABASES = 57569
const TABLES = 57570
const WARNINGS = 57571
const VARIABLES = 57572
const EVENTS = 57573
const BINLOG = 57574
const GTID = 57575
const STATUS = 57576
const COLUMNS = 57577
const FIELDS = 57578
const CURRENT_TIMESTAMP = 57579
const CURRENT_DATE = 57580
const DATABASE = 57581
const SCHEMA = 57582
const CURRENT_TIME = 57583
const LOCALTIME = 57584
const LOCALTIMESTAMP = 57585
const UTC_DATE = 57586
const UTC_TIME = 57587
const UTC_TIMESTAMP = 57588
const REPLACE = 57589
const CONVERT = 57590
const CAST = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const MATCH = 57594
const AGAINST = 57595
const BOOLEAN = 57596
const LANGUAGE = 57597
const WITH = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const FORMAT = 57602
const TREE = 57603
const TRADITIONAL = 57604
const EXTENDED = 57605
const PARTITION = 57606
const PARTITIONS = 57607
const LIST = 57608
const XA = 57609
const DISTRIBUTED = 57610
const ENGINES = 57611
const VERSIONS = 57612
const PROCESSLIST = 57613
const QUERYZ = 57614
const TXNZ = 57615
const KILL = 57616
const ENGINE = 57617
const SINGLE = 57618
const BEGIN = 57619
const START = 57620
const TRANSACTION = 57621
const COMMIT = 57622
const ROLLBACK = 57623
const GLOBAL = 57624
const LOCAL = 57625
const SESSION = 57626
const NAMES = 57627
const ISOLATION = 57628
const LEVEL = 57629
const READ = 57630
const WRITE = 57631
const ONLY = 57632
const REPEATABLE = 57633
const COMMITTED = 57634
const UNCOMMITTED = 57635
const SERIALIZABLE = 57636
const NO_WRITE_TO_BINLOG = 57637
const RADON = 57638
const ATTACH = 57639
const ATTACHLIST = 57640
const DETACH = 57641
const RESHARD = 57642
const CLEANUP = 57643
const RECOVER = 57644
const REBALANCE = 57645

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"DO",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHANGED",
	"CHECK",
	"CHECKSUM",
	"FAST",
	"MEDIUM",
	"UPGRADE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5281

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 207,
	6, 379,
	7, 379,
	8, 379,
	9, 379,
	19, 379,
	73, 379,
	264, 379,
	-2, 936,
	-1, 417,
	128, 775,
	-2, 771,
	-1, 418,
	128, 776,
	-2, 772,
	-1, 454,
	100, 944,
	-2, 745,
	-1, 460,
	100, 795,
	-2, 723,
	-1, 481,
	1, 99,
	321, 99,
	-2, 109,
	-1, 521,
	5, 33,
	-2, 370,
	-1, 651,
	125, 109,
	175, 109,
	178, 109,
	181, 109,
	-2, 121,
	-1, 702,
	1, 99,
	321, 99,
	-2, 109,
	-1, 710,
	1, 100,
	321, 100,
	-2, 109,
	-1, 797,
	128, 778,
	-2, 774,
	-1, 865,
	125, 109,
	175, 109,
	178, 109,
	181, 109,
	-2, 122,
	-1, 922,
	36, 329,
	73, 329,
	76, 329,
	141, 329,
	-2, 941,
	-1, 1042,
	5, 34,
	-2, 573,
	-1, 1237,
	5, 33,
	-2, 694,
	-1, 1437,
	5, 34,
	-2, 695,
	-1, 1487,
	5, 33,
	-2, 697,
	-1, 1550,
	5, 34,
	-2, 698,
}

const yyPrivate = 57344

const yyLast = 11883

var yyAct = [...]int{

	418, 1367, 1568, 1493, 1098, 1524, 521, 3, 371, 1530,
	395, 1398, 839, 1187, 588, 393, 1429, 1364, 1358, 1397,
	1556, 471, 1357, 455, 1415, 1322, 1368, 1295, 957, 1146,
	424, 844, 1426, 1008, 1188, 1123, 971, 1189, 470, 76,
	1136, 1125, 840, 373, 1211, 122, 1234, 122, 213, 459,
	796, 65, 781, 788, 791, 1027, 1035, 519, 723, 743,
	1161, 926, 370, 712, 996, 423, 866, 636, 621, 808,
	362, 637, 451, 758, 122, 711, 463, 616, 473, 614,
	709, 967, 1126, 1077, 514, 951, 879, 450, 484, 448,
	635, 458, 627, 433, 122, 835, 122, 212, 369, 482,
	724, 69, 487, 643, 117, 599, 64, 1091, 540, 541,
	1090, 1001, 421, 1092, 1247, 360, 1248, 1249, 122, 170,
	639, 124, 86, 714, 420, 150, 852, 154, 157, 158,
	539, 853, 854, 71, 72, 73, 74, 75, 638, 638,
	639, 396, 58, 351, 140, 354, 356, 355, 357, 358,
	863, 359, 1060, 468, 190, 1445, 160, 467, 1494, 178,
	163, 1078, 422, 737, 1018, 466, 1589, 1543, 1587, 1507,
	1579, 465, 1542, 30, 31, 33, 34, 462, 1224, 728,
	1191, 1065, 1353, 1555, 1062, 1063, 130, 1532, 506, 349,
	492, 1005, 491, 1506, 485, 1109, 30, 31, 33, 34,
	58, 790, 500, 473, 118, 1139, 1190, 443, 442, 429,
	1140, 1141, 554, 553, 563, 564, 556, 557, 558, 559,
	560, 561, 562, 555, 517, 88, 565, 1460, 554, 553,
	563, 564, 556, 557, 558, 559, 560, 561, 562, 555,
	62, 1557, 565, 1108, 732, 1533, 92, 192, 730, 348,
	80, 738, 739, 134, 1156, 950, 176, 189, 81, 126,
	1152, 85, 526, 62, 30, 31, 33, 34, 139, 148,
	1318, 958, 185, 186, 135, 193, 1061, 520, 127, 496,
	1101, 169, 1348, 184, 1407, 1346, 498, 499, 439, 438,
	440, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 1151, 493, 1297, 179, 119, 995, 147, 141, 183,
	138, 164, 131, 125, 1175, 132, 133, 137, 136, 1297,
	155, 162, 165, 171, 172, 177, 745, 480, 95, 1173,
	1000, 62, 745, 999, 1045, 94, 998, 1516, 824, 1480,
	1482, 87, 1515, 1514, 478, 58, 58, 920, 1128, 88,
	544, 543, 182, 90, 146, 477, 1000, 1191, 122, 999,
	476, 488, 998, 475, 1532, 532, 534, 545, 1178, 1177,
	82, 123, 128, 159, 1176, 175, 144, 191, 149, 188,
	187, 145, 1520, 1190, 713, 731, 958, 544, 543, 1440,
	1461, 793, 366, 143, 180, 1505, 181, 577, 578, 902,
	153, 1338, 1084, 587, 545, 1328, 1041, 1046, 862, 1481,
	1039, 586, 575, 1064, 194, 195, 197, 196, 198, 129,
	199, 200, 1533, 122, 528, 1153, 1154, 1304, 565, 1558,
	860, 32, 744, 1538, 1172, 501, 624, 1326, 744, 1572,
	1132, 1133, 1134, 819, 527, 825, 122, 363, 1135, 391,
	392, 463, 919, 555, 32, 1127, 565, 463, 463, 545,
	1099, 544, 543, 1149, 1150, 1174, 458, 1010, 83, 84,
	543, 1226, 644, 644, 1083, 484, 765, 1305, 545, 623,
	122, 122, 83, 84, 1534, 733, 545, 1327, 484, 642,
	763, 764, 762, 122, 122, 529, 533, 533, 809, 809,
	1052, 122, 703, 1131, 544, 543, 629, 613, 474, 574,
	576, 1228, 601, 602, 603, 604, 605, 606, 607, 1585,
	62, 545, 32, 640, 612, 753, 755, 756, 1577, 122,
	761, 754, 625, 1392, 502, 585, 1495, 1393, 589, 590,
	591, 592, 593, 594, 595, 1396, 598, 600, 600, 600,
	600, 600, 600, 600, 600, 608, 609, 610, 611, 759,
	630, 647, 1331, 1009, 631, 727, 1292, 943, 942, 1395,
	1290, 58, 821, 1147, 702, 1148, 939, 1288, 736, 734,
	1020, 1021, 1022, 587, 1269, 463, 1268, 717, 715, 1267,
	991, 479, 760, 1264, 1271, 1259, 800, 1330, 725, 463,
	787, 1291, 458, 1258, 945, 1289, 1257, 1047, 1191, 1165,
	795, 1586, 1287, 122, 810, 1532, 1139, 944, 937, 990,
	1164, 1140, 1141, 782, 938, 783, 1574, 463, 820, 1270,
	1157, 122, 122, 1562, 1190, 463, 797, 1017, 530, 1410,
	1394, 841, 830, 1383, 544, 543, 1324, 1382, 842, 1272,
	458, 993, 1265, 473, 826, 1261, 1260, 946, 544, 543,
	989, 545, 1253, 813, 1194, 1193, 1578, 798, 799, 1162,
	1144, 1581, 615, 1533, 941, 545, 785, 786, 1323, 1523,
	811, 558, 559, 560, 561, 562, 555, 1458, 806, 565,
	1124, 914, 1454, 1560, 959, 960, 961, 816, 1454, 1526,
	1521, 615, 1454, 1497, 827, 1454, 1496, 986, 984, 980,
	1320, 983, 985, 1413, 615, 893, 122, 122, 58, 828,
	1454, 615, 847, 1317, 846, 122, 122, 838, 1266, 122,
	1093, 589, 855, 940, 784, 916, 1441, 615, 973, 706,
	948, 1439, 615, 947, 122, 705, 953, 954, 955, 956,
	1004, 1311, 1310, 988, 1307, 1308, 615, 546, 1307, 1306,
	1033, 615, 964, 965, 966, 704, 30, 579, 580, 581,
	582, 583, 584, 759, 542, 615, 987, 1212, 652, 651,
	969, 970, 486, 974, 1452, 1013, 994, 1451, 363, 1450,
	1186, 861, 801, 802, 463, 597, 805, 1303, 1185, 997,
	1002, 1082, 1365, 1214, 1082, 1241, 760, 1233, 1435, 1037,
	812, 542, 814, 815, 1236, 1413, 1309, 619, 622, 728,
	1216, 30, 1220, 1033, 1215, 845, 1213, 66, 851, 849,
	822, 1218, 634, 62, 62, 1499, 1023, 122, 30, 952,
	982, 1217, 728, 1417, 1420, 1421, 1422, 1418, 463, 1419,
	1423, 992, 1510, 1511, 1219, 1221, 385, 384, 386, 387,
	388, 389, 473, 458, 1030, 390, 430, 981, 1031, 1486,
	1033, 1081, 1417, 1420, 1421, 1422, 1418, 1051, 1419, 1423,
	1042, 1043, 1044, 1094, 1448, 1048, 1033, 1082, 62, 1389,
	1054, 1069, 1055, 1056, 1057, 1058, 1085, 1100, 1384, 1103,
	1104, 1105, 1106, 1107, 1070, 62, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1088,
	640, 1087, 1080, 1513, 972, 363, 77, 1301, 968, 893,
	963, 962, 1097, 62, 749, 750, 751, 1040, 1365, 978,
	757, 977, 976, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 1102, 30,
	716, 554, 553, 563, 564, 556, 557, 558, 559, 560,
	561, 562, 555, 28, 834, 565, 1512, 122, 122, 122,
	1470, 363, 1158, 1159, 803, 804, 1469, 1130, 1473, 1201,
	1471, 1032, 1567, 1474, 1475, 1472, 1421, 1422, 1235, 1541,
	1179, 1180, 1137, 1028, 1095, 1096, 1183, 1236, 1049, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 434, 435, 565, 1163, 1230, 62, 1066, 628, 1553,
	394, 1075, 1074, 1229, 858, 1076, 1191, 463, 1190, 1402,
	1170, 428, 463, 617, 1182, 1197, 626, 1181, 1160, 648,
	632, 1433, 1037, 975, 718, 458, 1425, 458, 431, 432,
	628, 1484, 1190, 795, 1299, 1210, 1143, 1142, 1129, 78,
	618, 1196, 122, 1575, 1566, 120, 1198, 205, 1565, 1191,
	1200, 425, 1564, 1464, 1237, 650, 649, 1237, 1205, 797,
	1208, 841, 1223, 1206, 1209, 1073, 473, 473, 842, 1222,
	458, 1225, 426, 1072, 205, 1463, 1255, 1256, 1245, 91,
	66, 1387, 1204, 1262, 1263, 1386, 1246, 1251, 1252, 1412,
	845, 1388, 720, 1294, 205, 1243, 205, 1240, 445, 1517,
	1254, 1145, 818, 1242, 797, 556, 557, 558, 559, 560,
	561, 562, 555, 68, 1296, 565, 525, 7, 205, 522,
	6, 524, 5, 523, 4, 70, 1024, 1025, 1026, 63,
	58, 1298, 1, 464, 1492, 710, 925, 924, 1563, 79,
	1300, 122, 1554, 1529, 1250, 1531, 1536, 1503, 1500, 473,
	1502, 865, 864, 469, 915, 931, 1302, 930, 929, 927,
	1155, 949, 1325, 209, 1329, 1334, 1335, 936, 935, 859,
	890, 1053, 889, 888, 887, 886, 885, 884, 883, 882,
	881, 880, 1067, 1068, 622, 878, 1319, 1321, 877, 1238,
	1239, 876, 1238, 875, 1333, 874, 1332, 873, 872, 871,
	1336, 867, 870, 869, 122, 1444, 868, 1086, 934, 473,
	473, 932, 928, 657, 841, 1371, 655, 1369, 1366, 1363,
	841, 842, 656, 1344, 1376, 654, 659, 842, 658, 653,
	1373, 1375, 1424, 481, 1355, 1428, 1356, 1034, 93, 1184,
	347, 1171, 979, 1377, 46, 89, 573, 1361, 1071, 1138,
	456, 1089, 850, 848, 447, 1380, 1381, 446, 1374, 1339,
	1372, 1340, 823, 620, 1462, 1411, 202, 1050, 1341, 1342,
	596, 1343, 1349, 1350, 1345, 807, 1347, 372, 1312, 1313,
	1314, 752, 383, 463, 463, 463, 380, 382, 381, 829,
	1296, 547, 364, 444, 1479, 1360, 817, 1390, 1399, 1399,
	1399, 1378, 1379, 1400, 1401, 1059, 1391, 419, 729, 463,
	203, 516, 101, 489, 100, 490, 497, 1416, 1414, 1359,
	1232, 719, 1352, 1459, 458, 833, 441, 437, 933, 67,
	1403, 1404, 1210, 122, 122, 436, 1351, 515, 27, 587,
	26, 1406, 15, 24, 16, 1362, 14, 13, 1370, 36,
	58, 11, 10, 9, 1434, 463, 25, 8, 205, 427,
	463, 29, 2, 22, 23, 21, 20, 19, 18, 17,
	1399, 12, 1195, 917, 1446, 1399, 1361, 918, 1385, 1447,
	0, 0, 1296, 0, 122, 122, 122, 122, 0, 1449,
	0, 1202, 1203, 0, 0, 122, 0, 0, 122, 0,
	0, 122, 1409, 1466, 800, 1468, 1465, 0, 1467, 0,
	473, 463, 473, 0, 1227, 1487, 1369, 1483, 1476, 463,
	1436, 1437, 1438, 205, 1442, 463, 1490, 1361, 1361, 1361,
	1361, 1489, 1485, 1491, 1399, 0, 1501, 0, 1498, 0,
	1399, 1361, 0, 0, 0, 1244, 205, 1453, 0, 1509,
	1456, 1457, 0, 0, 0, 1455, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 1519, 0, 1369, 0, 0,
	463, 0, 0, 1525, 1427, 0, 1478, 0, 0, 0,
	205, 205, 1537, 1540, 1528, 1399, 1535, 1539, 0, 1527,
	1443, 473, 0, 205, 722, 1552, 841, 0, 0, 0,
	1549, 205, 1559, 842, 0, 0, 0, 1561, 0, 1504,
	0, 0, 1551, 0, 0, 0, 0, 463, 463, 463,
	1570, 1571, 0, 0, 0, 1362, 1362, 1362, 1362, 735,
	1573, 0, 1569, 1569, 1569, 0, 1576, 0, 0, 1427,
	0, 0, 1522, 0, 0, 0, 0, 1370, 0, 201,
	1488, 0, 463, 1584, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 1337, 0, 0, 1588, 0, 1550,
	0, 0, 0, 0, 0, 0, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 794, 735, 0, 0,
	1354, 794, 794, 0, 0, 794, 0, 0, 1370, 350,
	58, 352, 353, 0, 361, 0, 0, 0, 0, 794,
	794, 794, 794, 205, 0, 0, 0, 0, 1580, 0,
	1582, 1583, 0, 904, 0, 0, 1546, 1547, 1548, 0,
	0, 205, 205, 843, 30, 31, 33, 34, 55, 0,
	714, 0, 515, 0, 0, 0, 896, 0, 494, 495,
	0, 0, 503, 504, 505, 0, 507, 508, 509, 510,
	511, 512, 513, 0, 0, 633, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 0, 57, 43, 0,
	0, 891, 0, 0, 533, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 0, 0, 565, 44, 707,
	708, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 1408, 0, 205, 205, 0, 0,
	726, 1275, 1274, 0, 0, 1011, 205, 0, 0, 205,
	0, 0, 363, 0, 0, 0, 0, 900, 0, 0,
	0, 116, 0, 115, 205, 0, 0, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 0, 37,
	38, 39, 113, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 60, 59, 42,
	0, 0, 47, 54, 40, 56, 0, 0, 0, 0,
	794, 112, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 895, 897,
	898, 899, 0, 901, 902, 903, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 1508, 363, 0, 0, 0,
	0, 0, 515, 0, 794, 0, 0, 205, 0, 0,
	1029, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	837, 837, 0, 0, 0, 0, 114, 0, 0, 105,
	554, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 1544, 1545, 565, 554, 553, 563, 564, 556,
	557, 558, 559, 560, 561, 562, 555, 0, 892, 565,
	0, 0, 32, 0, 0, 0, 111, 0, 0, 0,
	0, 531, 0, 0, 0, 0, 535, 0, 537, 538,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 49, 50, 0, 52, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 1003, 0, 0, 0,
	0, 53, 0, 0, 0, 1012, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 98,
	0, 109, 107, 1019, 96, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 205,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 99, 108, 102, 103, 106, 0, 0, 1036, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 0, 794, 0, 0, 0, 0, 0,
	735, 794, 0, 0, 0, 462, 0, 1038, 0, 0,
	0, 0, 0, 0, 130, 0, 1079, 0, 0, 544,
	543, 553, 563, 564, 556, 557, 558, 559, 560, 561,
	562, 555, 205, 0, 565, 0, 545, 0, 0, 0,
	740, 0, 741, 843, 742, 735, 0, 0, 0, 746,
	747, 748, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 205, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 674, 0, 1166, 1167, 1168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 843, 0, 0, 123,
	128, 159, 843, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 180, 0, 181, 0, 0, 0, 153, 0,
	0, 1006, 1007, 0, 0, 662, 0, 1014, 0, 1016,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 1231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 0, 0, 688, 691, 692,
	693, 694, 695, 696, 0, 697, 698, 699, 700, 701,
	676, 677, 678, 679, 660, 661, 689, 0, 663, 0,
	0, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 680, 681, 682, 683, 684, 685, 686, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 0,
	552, 0, 0, 205, 1431, 0, 566, 567, 568, 569,
	570, 571, 572, 0, 550, 551, 548, 554, 553, 563,
	564, 556, 557, 558, 559, 560, 561, 562, 555, 0,
	1315, 565, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 205, 0, 0,
	690, 0, 0, 0, 0, 1477, 0, 0, 205, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 314,
	270, 333, 243, 248, 260, 345, 262, 263, 301, 222,
	280, 170, 258, 124, 0, 223, 0, 150, 0, 154,
	157, 158, 0, 311, 0, 0, 0, 322, 331, 277,
	0, 246, 215, 254, 216, 274, 140, 242, 316, 283,
	261, 225, 229, 0, 257, 288, 190, 339, 160, 293,
	0, 178, 163, 0, 0, 276, 319, 278, 312, 269,
	302, 235, 292, 334, 259, 298, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 295,
	328, 256, 297, 300, 214, 294, 0, 218, 224, 344,
	326, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	275, 279, 308, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 291, 0, 0, 0, 230, 220,
	273, 0, 0, 0, 234, 0, 249, 309, 0, 0,
	0, 1316, 265, 266, 268, 305, 304, 320, 327, 192,
	335, 244, 245, 255, 317, 134, 253, 264, 176, 189,
	299, 126, 324, 318, 289, 271, 272, 219, 0, 307,
	139, 148, 241, 296, 185, 186, 135, 193, 226, 341,
	127, 461, 340, 169, 460, 184, 325, 290, 285, 221,
	323, 287, 284, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 217, 0, 179, 332, 346, 147,
	141, 183, 138, 164, 131, 125, 232, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 321, 0,
	0, 0, 0, 0, 182, 231, 146, 238, 236, 239,
	313, 237, 281, 282, 336, 337, 338, 310, 233, 0,
	0, 315, 286, 123, 128, 159, 343, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 0, 252,
	342, 306, 303, 329, 0, 143, 180, 0, 181, 449,
	0, 0, 454, 452, 453, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 330, 314, 270, 333, 243, 248,
	260, 345, 262, 263, 301, 222, 280, 170, 258, 124,
	0, 223, 0, 150, 0, 154, 157, 158, 0, 311,
	0, 0, 0, 322, 331, 277, 0, 246, 215, 254,
	216, 274, 140, 242, 316, 283, 261, 225, 229, 0,
	257, 288, 190, 339, 160, 293, 0, 178, 163, 0,
	0, 276, 319, 278, 312, 269, 302, 235, 292, 334,
	259, 298, 0, 0, 0, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 295, 328, 256, 297, 300,
	214, 294, 0, 218, 224, 344, 326, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 275, 279, 308, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 0,
	291, 0, 0, 0, 230, 220, 273, 0, 0, 0,
	234, 0, 249, 309, 0, 0, 0, 0, 265, 266,
	268, 305, 304, 320, 327, 192, 335, 244, 245, 255,
	317, 134, 253, 264, 176, 189, 299, 126, 324, 318,
	289, 271, 272, 219, 0, 307, 139, 148, 241, 296,
	185, 186, 135, 193, 226, 341, 127, 461, 340, 169,
	460, 184, 325, 290, 285, 221, 323, 287, 284, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	217, 0, 179, 332, 346, 147, 141, 183, 138, 164,
	131, 125, 232, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 240, 321, 0, 0, 0, 0, 0,
	182, 231, 146, 238, 236, 239, 313, 237, 281, 282,
	336, 337, 338, 310, 233, 0, 0, 315, 286, 123,
	128, 159, 343, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 252, 342, 306, 303, 329,
	0, 143, 180, 0, 181, 0, 0, 0, 454, 452,
	453, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	330, 314, 270, 333, 243, 248, 260, 345, 262, 263,
	301, 222, 280, 170, 258, 124, 0, 223, 0, 150,
	0, 154, 157, 158, 0, 311, 0, 0, 0, 322,
	331, 277, 0, 246, 215, 254, 216, 274, 140, 242,
	316, 283, 261, 225, 229, 0, 257, 288, 190, 339,
	160, 293, 0, 178, 163, 0, 0, 276, 319, 278,
	312, 269, 302, 235, 292, 334, 259, 298, 0, 0,
	0, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 295, 328, 256, 297, 300, 214, 294, 0, 218,
	224, 344, 326, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 275, 279, 308, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 0, 291, 0, 0, 0,
	230, 220, 273, 0, 0, 0, 234, 0, 249, 309,
	0, 0, 0, 0, 265, 266, 268, 305, 304, 320,
	327, 192, 335, 244, 245, 255, 317, 134, 253, 264,
	176, 189, 299, 126, 324, 318, 289, 271, 272, 219,
	0, 307, 139, 148, 241, 296, 185, 186, 135, 193,
	226, 341, 127, 461, 340, 169, 460, 184, 325, 290,
	285, 221, 323, 287, 284, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 217, 0, 179, 332,
	346, 147, 141, 183, 138, 164, 131, 125, 232, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	321, 0, 0, 0, 0, 0, 182, 231, 146, 238,
	236, 239, 313, 237, 281, 282, 336, 337, 338, 310,
	233, 0, 0, 315, 286, 123, 128, 159, 343, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	0, 252, 342, 306, 303, 329, 0, 143, 180, 0,
	181, 641, 0, 0, 153, 0, 0, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 330, 314, 270, 333,
	243, 248, 260, 345, 262, 263, 301, 222, 280, 170,
	258, 124, 0, 223, 0, 150, 0, 154, 157, 158,
	0, 311, 0, 0, 0, 322, 331, 277, 0, 246,
	215, 254, 216, 274, 140, 242, 316, 283, 261, 225,
	229, 0, 257, 288, 190, 339, 160, 293, 0, 178,
	163, 0, 0, 276, 319, 278, 312, 269, 302, 235,
	292, 334, 259, 298, 0, 0, 0, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 295, 328, 256,
	297, 300, 214, 294, 0, 218, 224, 344, 326, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 275, 279,
	308, 267, 0, 0, 0, 0, 0, 0, 1405, 0,
	247, 0, 291, 0, 0, 0, 230, 220, 273, 0,
	0, 0, 234, 0, 249, 309, 0, 0, 0, 0,
	265, 266, 268, 305, 304, 320, 327, 192, 335, 244,
	245, 255, 317, 134, 253, 264, 176, 189, 299, 126,
	324, 318, 289, 271, 272, 219, 0, 307, 139, 148,
	241, 296, 185, 186, 135, 193, 226, 341, 127, 227,
	340, 169, 228, 184, 325, 290, 285, 221, 323, 287,
	284, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 217, 0, 179, 332, 346, 147, 141, 183,
	138, 164, 131, 125, 232, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 321, 0, 0, 0,
	0, 0, 182, 231, 146, 238, 236, 239, 313, 237,
	281, 282, 336, 337, 338, 310, 233, 0, 0, 315,
	286, 123, 128, 159, 343, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 0, 0, 252, 342, 306,
	303, 329, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 330, 314, 270, 333, 243, 248, 260, 345,
	262, 263, 301, 222, 280, 170, 258, 124, 0, 223,
	0, 150, 0, 154, 157, 158, 0, 311, 0, 0,
	0, 322, 331, 277, 0, 246, 215, 254, 216, 274,
	140, 242, 316, 283, 261, 225, 229, 0, 257, 288,
	190, 339, 160, 293, 0, 178, 163, 0, 0, 276,
	319, 278, 312, 269, 302, 235, 292, 334, 259, 298,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 295, 328, 256, 297, 300, 214, 294,
	0, 218, 224, 344, 326, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 275, 279, 308, 267, 0, 0,
	0, 0, 0, 0, 1207, 0, 247, 0, 291, 0,
	0, 0, 230, 220, 273, 0, 0, 0, 234, 0,
	249, 309, 0, 0, 0, 0, 265, 266, 268, 305,
	304, 320, 327, 192, 335, 244, 245, 255, 317, 134,
	253, 264, 176, 189, 299, 126, 324, 318, 289, 271,
	272, 219, 0, 307, 139, 148, 241, 296, 185, 186,
	135, 193, 226, 341, 127, 227, 340, 169, 228, 184,
	325, 290, 285, 221, 323, 287, 284, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 217, 0,
	179, 332, 346, 147, 141, 183, 138, 164, 131, 125,
	232, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 240, 321, 0, 0, 0, 0, 0, 182, 231,
	146, 238, 236, 239, 313, 237, 281, 282, 336, 337,
	338, 310, 233, 0, 0, 315, 286, 123, 128, 159,
	343, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 252, 342, 306, 303, 329, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 330, 314,
	270, 333, 243, 248, 260, 345, 262, 263, 301, 222,
	280, 170, 258, 124, 0, 223, 0, 150, 0, 154,
	157, 158, 0, 311, 0, 0, 0, 322, 331, 277,
	0, 246, 215, 254, 216, 274, 140, 242, 316, 283,
	261, 225, 229, 0, 257, 288, 190, 339, 160, 293,
	0, 178, 163, 0, 0, 276, 319, 278, 312, 269,
	302, 235, 292, 334, 259, 298, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 295,
	328, 256, 297, 300, 214, 294, 0, 218, 224, 344,
	326, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	275, 279, 308, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 291, 0, 0, 0, 230, 220,
	273, 0, 0, 0, 234, 0, 249, 309, 0, 0,
	0, 0, 265, 266, 268, 305, 304, 320, 327, 192,
	335, 244, 245, 255, 317, 134, 253, 264, 176, 189,
	299, 126, 324, 318, 289, 271, 272, 219, 0, 307,
	139, 148, 241, 296, 185, 186, 135, 193, 226, 341,
	127, 461, 340, 169, 460, 184, 325, 290, 285, 221,
	323, 287, 284, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 217, 0, 179, 332, 346, 147,
	141, 183, 138, 164, 131, 125, 232, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 321, 0,
	0, 0, 0, 0, 182, 231, 146, 238, 236, 239,
	313, 237, 281, 282, 336, 337, 338, 310, 233, 0,
	0, 315, 286, 123, 128, 159, 343, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 0, 252,
	342, 306, 303, 329, 0, 143, 180, 0, 181, 0,
	0, 0, 153, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 330, 314, 270, 333, 243, 248,
	260, 345, 262, 263, 301, 222, 280, 170, 258, 124,
	0, 223, 0, 150, 0, 154, 157, 158, 0, 311,
	0, 0, 0, 322, 331, 277, 0, 246, 215, 254,
	216, 274, 140, 242, 316, 283, 261, 225, 229, 0,
	257, 288, 190, 339, 160, 293, 0, 178, 163, 0,
	0, 276, 319, 278, 312, 269, 302, 235, 292, 334,
	259, 298, 0, 0, 0, 210, 0, 211, 0, 0,
	0, 0, 0, 0, 130, 295, 328, 256, 297, 300,
	214, 294, 0, 218, 224, 344, 326, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 275, 279, 308, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 0,
	291, 0, 0, 0, 230, 220, 273, 0, 0, 0,
	234, 0, 249, 309, 0, 0, 0, 0, 265, 266,
	268, 305, 304, 320, 327, 192, 335, 244, 245, 255,
	317, 134, 253, 264, 176, 189, 299, 126, 324, 318,
	289, 271, 272, 219, 0, 307, 139, 148, 241, 296,
	185, 186, 135, 193, 226, 341, 127, 227, 340, 169,
	228, 184, 325, 290, 285, 221, 323, 287, 284, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	217, 0, 179, 332, 346, 147, 141, 183, 138, 164,
	131, 125, 232, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 240, 321, 0, 0, 0, 0, 0,
	182, 231, 146, 238, 236, 239, 313, 237, 281, 282,
	336, 337, 338, 310, 233, 0, 0, 315, 286, 123,
	128, 159, 343, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 252, 342, 306, 303, 329,
	0, 143, 180, 0, 181, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	330, 314, 270, 333, 243, 248, 260, 345, 262, 263,
	301, 222, 280, 170, 258, 124, 0, 223, 0, 150,
	0, 154, 157, 158, 0, 311, 0, 0, 0, 322,
	331, 277, 0, 246, 215, 254, 216, 274, 140, 242,
	316, 283, 261, 225, 229, 0, 257, 288, 190, 339,
	160, 293, 0, 178, 163, 0, 0, 276, 319, 278,
	312, 269, 302, 235, 292, 334, 259, 298, 0, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 295, 328, 256, 297, 300, 214, 294, 0, 218,
	224, 344, 326, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 275, 279, 308, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 0, 291, 0, 0, 0,
	230, 220, 273, 0, 0, 0, 234, 0, 249, 309,
	0, 0, 0, 0, 265, 266, 268, 305, 304, 320,
	327, 192, 335, 244, 245, 255, 317, 134, 253, 264,
	176, 189, 299, 126, 324, 318, 289, 271, 272, 219,
	0, 307, 139, 148, 241, 296, 185, 186, 135, 193,
	226, 341, 127, 227, 340, 169, 228, 184, 325, 290,
	285, 221, 323, 287, 284, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 217, 0, 179, 332,
	346, 147, 141, 183, 138, 164, 131, 125, 232, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	321, 0, 0, 0, 0, 0, 182, 231, 146, 238,
	236, 239, 313, 237, 281, 282, 336, 337, 338, 310,
	233, 0, 0, 315, 286, 123, 128, 159, 343, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	0, 252, 342, 306, 303, 329, 0, 143, 180, 0,
	181, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 330, 314, 270, 333,
	243, 248, 260, 345, 262, 263, 301, 222, 280, 170,
	258, 124, 0, 223, 0, 150, 0, 154, 157, 158,
	0, 311, 0, 0, 0, 322, 331, 277, 0, 246,
	215, 254, 216, 274, 140, 242, 316, 283, 261, 225,
	229, 0, 257, 288, 190, 339, 160, 293, 0, 178,
	163, 0, 0, 276, 319, 278, 312, 269, 302, 235,
	292, 334, 259, 298, 0, 0, 0, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 295, 328, 256,
	297, 300, 214, 294, 0, 218, 224, 344, 326, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 275, 279,
	308, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 291, 0, 0, 0, 230, 220, 273, 0,
	0, 0, 234, 0, 249, 309, 0, 0, 0, 0,
	265, 266, 268, 305, 304, 320, 327, 192, 335, 244,
	245, 255, 317, 134, 253, 264, 176, 189, 299, 126,
	324, 318, 289, 271, 272, 219, 0, 307, 139, 148,
	241, 296, 185, 186, 135, 193, 226, 341, 127, 227,
	340, 169, 228, 184, 325, 290, 285, 221, 323, 287,
	284, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 217, 0, 179, 332, 346, 147, 141, 183,
	138, 164, 131, 125, 232, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 321, 0, 0, 0,
	0, 0, 182, 231, 146, 238, 236, 239, 313, 237,
	281, 282, 336, 337, 338, 310, 233, 0, 0, 315,
	286, 123, 128, 159, 343, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 0, 0, 252, 342, 306,
	303, 329, 0, 143, 180, 0, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 330, 314, 270, 333, 243, 248, 260, 345,
	262, 263, 301, 222, 280, 170, 258, 124, 0, 223,
	0, 150, 0, 154, 157, 158, 0, 311, 0, 0,
	0, 322, 331, 277, 0, 246, 215, 254, 216, 274,
	140, 242, 316, 283, 261, 225, 229, 0, 257, 288,
	190, 339, 160, 293, 0, 178, 163, 0, 0, 276,
	319, 278, 312, 269, 302, 235, 292, 334, 259, 298,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 295, 328, 256, 297, 300, 214, 294,
	0, 218, 224, 344, 326, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 275, 279, 308, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 291, 0,
	0, 0, 230, 220, 273, 0, 0, 0, 234, 0,
	249, 309, 0, 0, 0, 0, 265, 266, 268, 305,
	304, 320, 327, 192, 335, 244, 245, 255, 317, 134,
	253, 264, 176, 189, 299, 126, 324, 318, 289, 271,
	272, 219, 0, 307, 139, 148, 241, 296, 185, 186,
	135, 193, 226, 341, 127, 227, 340, 169, 228, 184,
	325, 290, 285, 221, 323, 287, 284, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 217, 0,
	179, 332, 346, 147, 141, 183, 138, 164, 131, 125,
	232, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 240, 321, 0, 0, 0, 0, 0, 182, 231,
	146, 238, 236, 239, 313, 237, 281, 282, 336, 337,
	338, 310, 233, 0, 0, 315, 286, 123, 128, 159,
	343, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 0, 252, 342, 306, 303, 329, 0, 143,
	180, 0, 181, 0, 0, 0, 153, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 368,
	0, 0, 140, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 404, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 397, 398, 0, 0, 0, 0, 0,
	0, 856, 62, 0, 0, 417, 385, 384, 386, 387,
	388, 389, 0, 0, 130, 390, 391, 392, 857, 0,
	0, 365, 378, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 0, 0, 0, 0,
	415, 0, 377, 0, 0, 374, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 146, 405, 411, 414, 0, 412, 409, 410,
	408, 407, 406, 416, 399, 400, 402, 0, 401, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 180, 0, 181, 0, 0, 0, 153, 0,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	789, 0, 368, 0, 0, 140, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 404, 160, 0, 0,
	178, 163, 0, 0, 0, 0, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 417, 385,
	384, 386, 387, 388, 389, 0, 0, 130, 390, 391,
	392, 0, 0, 0, 365, 378, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 376, 792,
	0, 0, 0, 415, 0, 377, 0, 0, 374, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 405, 411, 414, 0,
	412, 409, 410, 408, 407, 406, 416, 399, 400, 402,
	0, 401, 123, 128, 159, 0, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 170, 0, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 0, 368, 0, 0, 140, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 404, 160,
	0, 0, 178, 163, 0, 0, 0, 0, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 615,
	417, 385, 384, 386, 387, 388, 389, 0, 0, 130,
	390, 391, 392, 0, 0, 0, 365, 378, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	376, 0, 0, 0, 0, 415, 0, 377, 0, 0,
	374, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 193, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 146, 405, 411,
	414, 0, 412, 409, 410, 408, 407, 406, 416, 399,
	400, 402, 0, 401, 123, 128, 159, 0, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 180, 0, 181,
	0, 0, 0, 153, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 0, 368, 0, 0, 140,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	404, 160, 0, 0, 178, 163, 0, 0, 0, 0,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 417, 385, 384, 386, 387, 388, 389, 0,
	0, 130, 390, 391, 392, 0, 0, 0, 365, 378,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 792, 0, 0, 0, 415, 0, 377,
	0, 0, 374, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	193, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 146,
	405, 411, 414, 0, 412, 409, 410, 408, 407, 406,
	416, 399, 400, 402, 0, 401, 123, 128, 159, 0,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 0, 0, 0, 30, 0, 0, 0, 143, 180,
	0, 181, 0, 0, 0, 153, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 0, 368, 0,
	0, 140, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 404, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 417, 385, 384, 386, 387, 388,
	389, 0, 0, 130, 390, 391, 392, 0, 0, 0,
	365, 378, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 376, 0, 0, 0, 0, 415,
	0, 377, 0, 0, 374, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 146, 405, 411, 414, 0, 412, 409, 410, 408,
	407, 406, 416, 399, 400, 402, 0, 401, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 180, 0, 181, 0, 0, 0, 153, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 0,
	368, 0, 0, 140, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 404, 160, 0, 0, 178, 163,
	0, 0, 0, 0, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 417, 385, 384, 386,
	387, 388, 389, 0, 0, 130, 390, 391, 392, 0,
	0, 0, 365, 378, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 376, 0, 0, 0,
	0, 415, 0, 377, 0, 0, 374, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 193, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 146, 405, 411, 414, 0, 412, 409,
	410, 408, 407, 406, 416, 399, 400, 402, 0, 401,
	123, 128, 159, 0, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 180, 0, 181, 170, 0, 124, 153,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 404, 160, 0, 0, 178, 163, 0, 0,
	0, 0, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 417, 385, 384, 386, 387, 388,
	389, 0, 0, 130, 390, 391, 392, 0, 0, 0,
	0, 378, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 376, 0, 0, 0, 0, 415,
	0, 377, 0, 0, 374, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 146, 405, 411, 414, 0, 412, 409, 410, 408,
	407, 406, 416, 399, 400, 402, 0, 401, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 180, 0, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 170,
	0, 124, 0, 0, 923, 922, 0, 154, 157, 158,
	0, 0, 0, 921, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 160, 0, 0, 178,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 193, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 128, 159, 0, 175, 144, 191, 149, 188,
	187, 145, 0, 0, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 143, 180, 0, 181, 170, 0, 124,
	153, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	182, 140, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 160, 0, 0, 178, 163, 0, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 121, 0, 1432, 0, 0, 0,
	0, 143, 180, 130, 181, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 30, 0, 0, 0, 0, 0, 0, 0,
	143, 180, 0, 181, 170, 0, 124, 153, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 160, 0, 0, 178, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	193, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 170, 0, 124, 0, 0, 0, 150,
	0, 154, 157, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 140, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	160, 0, 0, 178, 163, 0, 123, 128, 159, 0,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 462, 0, 0, 831, 0, 0, 832, 143, 180,
	130, 181, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 134, 0, 0,
	176, 189, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 148, 0, 0, 185, 186, 135, 193,
	0, 0, 127, 0, 0, 169, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 0, 0, 179, 0,
	0, 147, 141, 183, 138, 164, 131, 125, 0, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 128, 159, 0, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 180, 0,
	181, 170, 0, 124, 153, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 140, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 160, 0,
	0, 178, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 645, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 193, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 140, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 160, 0, 0,
	178, 163, 0, 123, 128, 159, 0, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 143, 180, 130, 181, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 170,
	0, 124, 0, 0, 0, 150, 0, 154, 157, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 140, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 160, 0, 0, 178,
	163, 0, 123, 128, 159, 0, 175, 144, 191, 206,
	188, 187, 207, 0, 208, 0, 0, 121, 0, 1432,
	0, 0, 0, 0, 143, 180, 130, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 134, 0, 0, 176, 189, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 148,
	0, 0, 185, 186, 135, 193, 0, 0, 127, 0,
	0, 169, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 156, 142, 151, 173, 161, 174, 152, 167, 166,
	168, 0, 0, 0, 179, 0, 0, 147, 141, 183,
	138, 164, 131, 125, 0, 132, 133, 137, 136, 0,
	155, 162, 165, 171, 172, 177, 0, 0, 170, 0,
	124, 0, 0, 0, 150, 0, 154, 157, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 140, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 160, 0, 0, 178, 163,
	0, 123, 128, 159, 0, 175, 144, 191, 149, 188,
	187, 145, 0, 62, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 143, 180, 130, 181, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 195, 197, 196, 198, 129,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 134, 0, 0, 176, 189, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 148, 0,
	0, 185, 186, 135, 193, 0, 0, 127, 0, 0,
	169, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	156, 142, 151, 173, 161, 174, 152, 167, 166, 168,
	0, 0, 0, 179, 0, 0, 147, 141, 183, 138,
	164, 131, 125, 0, 132, 133, 137, 136, 0, 155,
	162, 165, 171, 172, 177, 0, 0, 170, 0, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 140, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	123, 128, 159, 0, 175, 144, 191, 149, 188, 187,
	145, 0, 0, 0, 0, 462, 0, 1038, 0, 0,
	0, 0, 143, 180, 130, 181, 0, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 195, 197, 196, 198, 129, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 180, 0, 181, 0, 0, 170, 153, 124,
	0, 0, 0, 150, 0, 154, 157, 158, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 836, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 160, 0, 0, 178, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 134, 0, 0, 176, 189, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 148, 0, 0,
	185, 186, 135, 193, 0, 0, 127, 0, 0, 169,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 156,
	142, 151, 173, 161, 174, 152, 167, 166, 168, 0,
	0, 0, 179, 0, 0, 147, 141, 183, 138, 164,
	131, 125, 0, 132, 133, 137, 136, 0, 155, 162,
	165, 171, 172, 177, 0, 0, 170, 0, 124, 0,
	0, 0, 150, 0, 154, 157, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 140, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 160, 0, 0, 178, 163, 0, 123,
	128, 159, 0, 175, 144, 191, 149, 188, 187, 145,
	0, 0, 0, 0, 472, 0, 518, 0, 0, 0,
	0, 143, 180, 130, 181, 0, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 197, 196, 198, 129, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	134, 0, 0, 176, 189, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 148, 0, 0, 185,
	186, 135, 193, 0, 0, 127, 0, 0, 169, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 156, 142,
	151, 173, 161, 174, 152, 167, 166, 168, 0, 0,
	0, 179, 0, 0, 147, 141, 183, 138, 164, 131,
	125, 0, 132, 133, 137, 136, 0, 155, 162, 165,
	171, 172, 177, 0, 0, 170, 0, 124, 0, 0,
	0, 150, 0, 154, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	140, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 160, 0, 0, 178, 163, 0, 123, 128,
	159, 0, 175, 144, 191, 149, 188, 187, 145, 0,
	0, 0, 0, 462, 0, 0, 0, 0, 0, 0,
	143, 180, 130, 181, 0, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 197, 196, 198, 129, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 134,
	0, 0, 176, 189, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 148, 0, 0, 185, 186,
	135, 193, 0, 0, 127, 0, 0, 169, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 156, 142, 151,
	173, 161, 174, 152, 167, 166, 168, 0, 0, 0,
	179, 0, 0, 147, 141, 183, 138, 164, 131, 125,
	0, 132, 133, 137, 136, 0, 155, 162, 165, 171,
	172, 177, 0, 0, 170, 0, 124, 0, 0, 0,
	150, 0, 154, 157, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 140,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 160, 0, 0, 178, 163, 0, 123, 128, 159,
	0, 175, 144, 191, 149, 188, 187, 145, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 143,
	180, 130, 181, 0, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 195, 197, 196, 198, 129, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 134, 0,
	0, 176, 189, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 148, 0, 0, 185, 186, 135,
	193, 0, 0, 127, 0, 0, 169, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 156, 142, 151, 173,
	161, 174, 152, 167, 166, 168, 0, 0, 0, 179,
	0, 0, 147, 141, 183, 138, 164, 131, 125, 0,
	132, 133, 137, 136, 0, 155, 162, 165, 171, 172,
	177, 0, 0, 170, 0, 124, 0, 0, 0, 150,
	0, 154, 157, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 140, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	160, 0, 0, 178, 163, 0, 123, 128, 159, 0,
	175, 144, 191, 149, 188, 187, 145, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 143, 180,
	130, 181, 0, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	195, 197, 196, 198, 129, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 134, 0, 0,
	176, 189, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 148, 0, 0, 185, 186, 135, 193,
	0, 0, 127, 0, 0, 169, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 156, 142, 151, 173, 161,
	174, 152, 167, 166, 168, 0, 0, 0, 179, 0,
	0, 147, 141, 183, 138, 164, 131, 125, 0, 132,
	133, 137, 136, 0, 155, 162, 165, 171, 172, 177,
	0, 0, 170, 0, 124, 0, 0, 0, 150, 0,
	154, 157, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 140, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 160,
	0, 0, 178, 163, 0, 123, 128, 159, 0, 175,
	144, 191, 149, 188, 187, 145, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 143, 180, 130,
	181, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 195,
	197, 196, 198, 129, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 134, 0, 0, 176,
	189, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 148, 0, 0, 185, 186, 135, 193, 0,
	0, 127, 0, 0, 169, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 156, 142, 151, 173, 161, 174,
	152, 167, 166, 168, 0, 0, 0, 179, 0, 0,
	147, 141, 183, 138, 164, 131, 125, 0, 132, 133,
	137, 136, 0, 155, 162, 165, 171, 172, 177, 0,
	0, 170, 0, 124, 0, 0, 0, 150, 0, 154,
	157, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 140, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 160, 0,
	0, 178, 163, 0, 123, 128, 159, 0, 175, 144,
	191, 149, 188, 187, 145, 0, 0, 0, 0, 1293,
	0, 0, 0, 0, 0, 0, 143, 180, 130, 181,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 195, 197,
	196, 198, 129, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 134, 0, 0, 176, 189,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 148, 0, 0, 185, 186, 135, 193, 0, 0,
	127, 0, 0, 169, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 156, 142, 151, 173, 161, 174, 152,
	167, 166, 168, 0, 0, 0, 179, 0, 0, 147,
	141, 183, 138, 164, 131, 125, 0, 132, 133, 137,
	136, 0, 155, 162, 165, 171, 172, 177, 0, 0,
	170, 0, 124, 0, 0, 0, 150, 0, 154, 157,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 140, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 160, 0, 0,
	178, 163, 0, 123, 128, 159, 0, 175, 144, 191,
	149, 188, 187, 145, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 0, 0, 143, 180, 130, 181, 0,
	0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 195, 197, 196,
	198, 129, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 134, 0, 0, 176, 189, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	148, 0, 0, 185, 186, 135, 193, 0, 0, 127,
	0, 0, 169, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 156, 142, 151, 173, 161, 174, 152, 167,
	166, 168, 0, 0, 0, 179, 0, 0, 147, 141,
	183, 138, 164, 131, 125, 0, 132, 133, 137, 136,
	0, 155, 162, 165, 171, 172, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 128, 159, 0, 175, 144, 191, 149,
	188, 187, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 180, 0, 181, 0, 0,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 195, 197, 196, 198,
	129, 199, 200,
}
var yyPact = [...]int{

	1658, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1095, 1138,
	-1000, -1000, -1000, -1000, -1000, -1000, 853, 226, 85, 212,
	191, 184, 1745, 60, 11144, -1000, 9192, 4509, -25, -1000,
	-153, -1000, -1000, -169, -1000, 7150, -188, 60, 832, -1000,
	-1000, -1000, -1000, -1000, -1000, 1064, 1086, 860, 1021, 961,
	-1000, 59, -22, 11144, 1117, 2613, -128, 10726, 224, 219,
	214, 203, 224, -1000, -1000, -1000, 183, 11562, -1000, 60,
	706, 222, -1000, 11144, -1000, 11144, -56, 46, -1000, -1000,
	34, 424, -1000, -1000, -1000, -63, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11144, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10308, 258, 167, 296, 395, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 559, -1000, -1000,
	-1000, -1000, -1000, -1000, 761, 761, -1000, 11144, -1000, -1000,
	-189, -1000, 737, 371, -1000, 7150, 2296, 761, 761, -1000,
	-1000, 268, -1000, -1000, 7428, 7428, 7428, 7428, 7428, 7428,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 761, 283, -1000, 6868, 761, 761, 761,
	761, 761, 761, 7150, 761, 761, 761, 761, 761, 761,
	761, 761, 761, 761, 761, 761, 761, -1000, -1000, 60,
	-1000, -1000, 11144, 681, 1024, 7150, 7150, 1095, -1000, 832,
	-1000, -1000, -1000, 990, -1000, -1000, 422, 209, -1000, -1000,
	-1000, 209, -1000, -1000, 1005, 11144, 758, -1000, -1000, -165,
	3245, -1000, -1000, -1000, -1000, 389, 8983, 8983, -1000, -1000,
	-1000, 1004, -1000, -1000, -1000, -1000, -1000, 1070, 1069, 704,
	-1000, 2179, -1000, -1000, 11562, 410, 689, 669, 663, 11144,
	11144, 79, -1000, -1000, -1000, 222, 888, 11562, 1014, -1000,
	-1000, 1111, 11144, 11144, -1000, -1000, 424, 424, -1000, -1000,
	11144, -1000, -1000, -1000, -1000, -1000, 424, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 105, -1000, -1000, -1000, -1000, -1000,
	30, -1000, -1000, -1000, -1000, -1000, -1000, 385, 5457, -27,
	-1000, -1000, -1000, 7150, -1000, -1000, 287, -1000, -1000, -1000,
	-1000, -1000, 7150, 7150, 7150, 439, 352, 7428, 447, 382,
	7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428,
	7428, 7428, 7428, 7428, 7428, 547, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 658, -1000, 832, 779, 779, 303,
	303, 303, 303, 303, 101, 6022, 4825, 681, 700, 6868,
	6586, 6586, 7150, 7150, 6586, 1022, 403, 371, 10517, -1000,
	681, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6586, 6586,
	6586, 6586, 11144, 745, -1000, -1000, -1000, 1124, 333, 554,
	756, -1000, 297, 1064, 681, 961, 8705, 911, -1000, -1000,
	10099, 10099, 10935, 1108, 2929, -1000, 755, 754, -178, -175,
	-1000, -165, 5739, -1000, -1000, -1000, -1000, 305, -1000, 761,
	125, 1626, 7731, 532, 51, -1000, -1000, -1000, 766, -1000,
	766, 766, 766, 766, 93, 93, 93, 93, -1000, -1000,
	-1000, -1000, -1000, 858, 857, -1000, 766, 766, 766, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 855, 855, 855,
	851, 851, 79, 1013, 870, 869, 867, -1000, 575, -1000,
	79, -1000, 181, -196, -1000, 11144, 11144, -1000, -1000, 1064,
	-59, -1000, -1000, 455, 11144, 11144, 424, -1000, 11144, -1000,
	-1000, -1000, 558, -114, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11144, -1000, -1000, -1000, -1000, -1000, 371,
	352, 379, -1000, -1000, 494, -1000, -1000, 1794, -1000, -1000,
	-1000, -1000, 447, 7428, 7428, 7428, 850, 1794, 1779, 1602,
	1979, 303, 564, 564, 331, 331, 331, 331, 331, 1020,
	1020, -1000, -1000, -1000, 681, -1000, -1000, -1000, 681, 6586,
	749, -1000, -1000, 1999, 282, 761, 278, -1000, -1000, -1000,
	681, 686, 686, 260, 568, 686, 6586, 402, -1000, 7150,
	681, -1000, 686, 681, 686, 686, 745, 133, -1000, 969,
	7150, 7150, 7150, -1000, -1000, -1000, 1024, -1000, 1022, 1084,
	-1000, 978, 977, 6586, -1000, -120, 11144, -1000, -120, 813,
	-1000, 374, -1000, 274, 1095, 7150, -1000, 4193, -1000, -185,
	-1000, -164, -198, -1000, -1000, -1000, -1000, -1000, 371, -1000,
	654, 10726, 761, 761, -1000, 1626, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 360, 360, 155, 360, 360, 360, 360, 360, 27,
	-21, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, -1000, -1000, 614, 311, 313, -1000,
	-1000, -1000, -1000, 1035, -1000, 532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 417, 362,
	-1000, 1031, -1000, 1030, 592, 1123, 497, 257, 216, 49,
	-1000, -1000, 551, 93, 93, -1000, -1000, -1000, 1003, -1000,
	-1000, -1000, 591, 591, -1000, -1000, -1000, -1000, 541, -1000,
	-1000, -1000, 530, -1000, -1000, -1000, 11144, 11144, 11144, -1000,
	293, 365, 169, 236, 231, 230, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 360, 360, -1000, -1000, 1002,
	999, 360, 768, 1016, -1000, 587, -1000, -1000, -1000, 586,
	7150, -1000, 424, 1108, -1000, -1000, -1000, -1000, 190, -1000,
	-1000, -1000, -1000, -1000, 850, 1794, 898, -1000, 7428, 7428,
	-1000, -1000, 686, 6586, -1000, -1000, 9819, -1000, -1000, 3877,
	6586, 5141, -1000, -1000, -1000, 651, 547, 651, -92, 812,
	372, -1000, 7150, 414, -1000, -1000, -1000, -1000, -1000, -1000,
	980, -1000, -1000, -1000, -1000, -1000, 966, 371, 371, -1000,
	-1000, 11144, -1000, -1000, -1000, -1000, 796, 953, 761, -1000,
	760, 1095, 10935, 7150, 4825, 1064, 371, -1000, -1000, -1000,
	-191, -193, -1000, -1000, 681, 10726, 10726, -1000, 584, -1000,
	497, 360, 360, 527, 524, 516, 578, 577, 360, 360,
	514, 574, 652, 510, 507, 505, 550, 571, 1545, 533,
	526, 522, 11353, 172, -1000, 614, -1000, 1028, 311, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 854, -1000,
	-1000, -1000, -1000, -1000, -1000, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 722, -1000, -1000,
	351, 684, -1000, 680, 742, 677, 761, 761, 761, -1000,
	11144, -1000, -1000, -1000, 647, 92, 853, 634, 10726, 602,
	361, -1000, -1000, 518, -1000, -1000, -1000, -1000, 1059, 992,
	360, 360, -1000, -1000, -1000, 371, 455, -1000, -1000, -1000,
	-1000, 7428, 1794, 1794, -1000, -1000, -1000, -1000, 273, 681,
	-1000, 681, 766, 766, -1000, 766, 851, -1000, 766, 122,
	766, 119, 681, 681, 761, -86, -1000, 371, 7150, -1000,
	-1000, -1000, 1108, 9610, 866, 10935, 761, -1000, 8496, 10726,
	-1000, 10935, 1064, -1000, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, 681, 681, -1000, -1000, 497, 497, -1000, -1000, -1000,
	-1000, -1000, 569, 565, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 825, -1000, 1090, 816, 172,
	614, 458, -1000, -1000, -1000, -1000, -1000, 562, -1000, 490,
	-1000, 466, 10517, 10517, 10517, -1000, -1000, -1000, 994, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 602, 602, -1000, 1794, 3561, -1000,
	-1000, -1000, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7428, 681, 561, 371, 1106, 741, 810, -1000, -1000,
	-1000, 1017, 8009, 8218, -1000, 1008, 730, 734, -1000, -1000,
	6304, 681, 667, 261, 662, -1000, 727, -1000, 761, -127,
	-1000, -1000, -1000, -1000, 10517, -1000, -1000, -1000, -1000, 10517,
	811, 172, -1000, 714, -1000, 712, 709, 646, -1000, 766,
	646, 646, 611, -1000, -1000, -1000, -1000, -1000, 117, -1000,
	-1000, 1091, 1067, 9610, 9610, 9610, 9610, -1000, 924, 918,
	-1000, 928, 926, 932, 11144, -1000, 639, 8009, 269, -1000,
	9401, -1000, -1000, 1025, -1000, 761, -1000, -1000, 815, 10726,
	10517, 10726, -1000, -123, -1000, 457, 631, 628, 10517, 762,
	-1000, -1000, -1000, -1000, 10517, -1000, -1000, -1000, -1000, 681,
	124, -105, -1000, 7150, 7150, 810, 780, 781, -1000, -1000,
	-1000, -1000, 914, -1000, 861, -1000, -1000, -1000, -1000, -1000,
	202, 201, 196, -1000, 1121, -1000, 761, -1000, 832, 254,
	-1000, -1000, 626, -1000, 603, -1000, -1000, -1000, 624, 10517,
	337, -1000, 160, 588, -1000, 940, -100, -108, 371, 737,
	7150, 7150, -1000, -1000, 761, 761, 761, 10935, 734, 681,
	10726, -123, -1000, 975, 156, 156, -1000, 618, -1000, -1000,
	-1000, -1000, 360, 555, 1057, -1000, -1000, -1000, 1045, -1000,
	-1000, -1000, 933, -1000, 371, 371, 10517, 10517, 10517, 727,
	-1000, -1000, -1000, 329, -1000, 360, -1000, 548, 1044, 156,
	-1000, 449, -1000, -1000, -1000, -1000, 590, -103, 597, -1000,
	597, 597, 761, 440, -1000, 535, 156, -1000, -1000, -106,
	-1000, 10517, -1000, -1000, -1000, -1000, -1000, -109, -1000, -1000,
}
var yyPgo = [...]int{

	0, 20, 27, 1408, 1407, 1403, 35, 1069, 1401, 1399,
	1398, 1397, 57, 1396, 1395, 1394, 1393, 1392, 6, 973,
	1391, 1389, 1153, 1151, 1149, 1146, 1387, 1386, 1383, 1382,
	1381, 1379, 1377, 1376, 1374, 1373, 1372, 1370, 1368, 101,
	1365, 1359, 40, 1358, 1357, 1356, 92, 1355, 93, 1353,
	1352, 1351, 55, 201, 53, 54, 391, 1350, 32, 22,
	18, 1349, 1348, 24, 1347, 1249, 95, 1346, 58, 100,
	1344, 1342, 33, 1341, 1340, 1338, 1337, 1335, 1326, 84,
	1325, 1324, 2, 31, 1322, 62, 1321, 46, 98, 392,
	1319, 1318, 1317, 1316, 1312, 1311, 73, 14, 1, 10,
	26, 1307, 43, 8, 1305, 69, 1300, 1297, 1295, 1294,
	51, 1293, 68, 1292, 30, 77, 1290, 83, 1288, 17,
	12, 42, 1287, 1284, 72, 89, 90, 71, 1283, 67,
	1282, 1281, 103, 1280, 1279, 1278, 122, 1276, 102, 508,
	1275, 1274, 1272, 1271, 1270, 1269, 1268, 104, 59, 49,
	0, 15, 23, 56, 1267, 21, 1030, 50, 16, 1265,
	99, 1263, 1262, 1579, 52, 87, 44, 1259, 1258, 1256,
	1255, 1252, 1246, 1243, 85, 1242, 1241, 1238, 1236, 1235,
	1233, 1232, 1231, 1229, 1228, 1227, 1225, 1223, 1221, 1218,
	1215, 86, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204,
	1203, 1202, 1200, 28, 1199, 1198, 1197, 1194, 29, 1193,
	64, 4, 63, 1192, 1191, 1190, 81, 36, 1189, 1188,
	1187, 1185, 60, 38, 1184, 82, 41, 39, 1183, 1182,
	1181, 66, 11, 19, 1180, 1178, 1177, 5, 9, 1176,
	1175, 1173, 1172, 13, 34, 37, 1169, 1168, 25, 1167,
	1166, 61, 80, 1165, 75, 3, 1164, 1163, 1162, 1159,
	141, 79, 1155, 105,
}
var yyR1 = [...]int{

	0, 258, 259, 259, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 18,
	18, 18, 19, 20, 20, 21, 21, 22, 22, 23,
	23, 44, 44, 44, 44, 45, 45, 45, 118, 118,
	117, 117, 24, 25, 27, 26, 26, 256, 256, 255,
	179, 179, 7, 7, 28, 28, 28, 28, 28, 257,
	257, 257, 257, 257, 257, 247, 247, 248, 248, 240,
	238, 238, 235, 235, 241, 241, 234, 234, 239, 239,
	236, 236, 243, 243, 243, 243, 243, 244, 245, 252,
	252, 253, 253, 207, 207, 254, 254, 254, 254, 212,
	212, 211, 211, 210, 210, 210, 213, 213, 213, 31,
	227, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 181,
	183, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 196, 197, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 199,
	199, 200, 200, 201, 201, 202, 202, 184, 208, 208,
	182, 178, 180, 228, 228, 228, 223, 155, 155, 167,
	167, 167, 167, 249, 249, 250, 250, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 170, 170, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 169, 169,
	169, 169, 169, 171, 171, 171, 171, 171, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 173, 173, 173, 173, 173, 173, 173,
	173, 222, 222, 174, 174, 216, 216, 217, 217, 217,
	214, 214, 215, 215, 218, 218, 175, 175, 175, 175,
	175, 175, 43, 42, 42, 42, 134, 134, 134, 219,
	203, 203, 203, 177, 204, 204, 205, 205, 205, 206,
	206, 206, 220, 220, 221, 221, 176, 224, 224, 224,
	224, 6, 6, 242, 242, 242, 242, 237, 237, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 5, 5,
	226, 226, 225, 225, 233, 233, 232, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 161, 161, 140, 140,
	145, 145, 145, 30, 30, 30, 79, 79, 146, 146,
	8, 32, 9, 141, 141, 141, 73, 73, 73, 10,
	12, 12, 12, 12, 12, 74, 74, 74, 74, 74,
	74, 11, 11, 11, 11, 209, 209, 209, 209, 209,
	13, 144, 144, 144, 14, 16, 16, 16, 16, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 51, 51, 71,
	71, 71, 68, 68, 69, 69, 70, 70, 67, 67,
	72, 72, 72, 75, 75, 75, 36, 147, 147, 34,
	76, 76, 76, 37, 77, 77, 77, 77, 77, 77,
	78, 78, 38, 35, 262, 39, 40, 40, 41, 41,
	41, 48, 48, 48, 46, 46, 47, 47, 54, 54,
	53, 53, 55, 55, 55, 55, 154, 154, 154, 153,
	153, 57, 57, 58, 58, 59, 59, 60, 60, 60,
	80, 61, 61, 61, 61, 162, 162, 159, 159, 159,
	158, 158, 62, 62, 62, 62, 63, 63, 63, 63,
	64, 64, 66, 66, 65, 65, 81, 81, 81, 81,
	82, 82, 83, 83, 56, 56, 56, 56, 56, 56,
	56, 137, 137, 85, 85, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 95, 95, 95, 95, 95,
	95, 86, 86, 86, 86, 86, 86, 86, 52, 52,
	96, 96, 96, 102, 97, 97, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 93, 93, 93, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 92, 92,
	92, 92, 92, 92, 92, 92, 263, 263, 94, 94,
	94, 94, 49, 49, 49, 49, 49, 164, 164, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 106, 106, 50, 50, 104, 104, 105, 107,
	107, 103, 103, 103, 88, 88, 88, 88, 88, 88,
	88, 90, 90, 90, 108, 108, 109, 109, 110, 110,
	111, 111, 112, 113, 113, 113, 114, 114, 114, 114,
	115, 115, 115, 87, 87, 87, 87, 87, 87, 116,
	116, 116, 116, 119, 119, 98, 98, 100, 100, 99,
	101, 120, 120, 121, 122, 122, 125, 125, 124, 124,
	124, 124, 124, 133, 133, 132, 132, 132, 123, 123,
	126, 126, 130, 130, 129, 131, 131, 131, 131, 128,
	128, 127, 127, 165, 165, 165, 135, 135, 138, 138,
	139, 139, 136, 136, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 148, 148, 148, 143, 143, 246,
	246, 151, 151, 152, 152, 156, 156, 157, 157, 160,
	160, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 260, 261, 163,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 7, 10, 1, 3, 1, 3, 8, 9, 7,
	8, 0, 1, 1, 1, 0, 1, 1, 1, 3,
	0, 4, 8, 7, 2, 3, 3, 1, 3, 5,
	0, 2, 1, 1, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 1, 1, 2, 2, 3, 3, 0,
	1, 1, 2, 1, 1, 4, 4, 2, 4, 0,
	1, 0, 1, 1, 2, 2, 1, 1, 1, 4,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 1, 3, 3, 3, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 3, 4, 1, 1, 1, 1,
	0, 3, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 7, 7, 8,
	9, 0, 1, 3, 1, 2, 3, 0, 2, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 3, 2, 6, 7, 7,
	7, 9, 7, 7, 7, 4, 0, 1, 0, 1,
	0, 1, 1, 6, 6, 4, 1, 3, 0, 1,
	3, 3, 2, 1, 1, 1, 0, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 3, 3, 3, 1,
	1, 3, 5, 3, 6, 0, 1, 1, 1, 1,
	2, 0, 1, 1, 4, 2, 3, 2, 2, 4,
	4, 3, 6, 3, 3, 4, 4, 4, 6, 5,
	5, 3, 3, 5, 6, 7, 3, 3, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 0, 3, 1,
	1, 1, 0, 2, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 1, 1, 5, 1, 1, 2,
	0, 1, 1, 4, 2, 1, 1, 1, 1, 1,
	0, 2, 4, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -258, -17, -18, -22, -23, -24, -25, -26, -28,
	-29, -30, -8, -32, -33, -36, -34, -9, -10, -11,
	-13, -14, -16, -15, -35, -27, -37, -38, -19, -20,
	6, 7, 264, 8, 9, 45, -31, 131, 132, 133,
	156, 135, 151, 50, 70, 284, -141, 154, 291, 294,
	295, 298, 297, 313, 155, 10, 157, 49, -260, 150,
	149, 148, 73, -259, 321, -110, 15, -41, 5, -39,
	-262, -39, -39, -39, -39, -39, -227, 73, -7, -246,
	24, 32, 144, 256, 257, 35, -136, 256, 140, -140,
	141, -7, 34, -146, 144, 144, 249, 131, 244, 286,
	-70, -71, 288, 289, 251, 144, 290, 247, 287, 246,
	243, 181, 76, 47, 141, 28, 26, -147, 144, 245,
	-156, 76, -150, 270, 20, 212, 158, 177, 271, 318,
	85, 211, 214, 215, 152, 173, 217, 216, 209, 167,
	43, 207, 191, 292, 275, 280, 253, 206, 168, 277,
	24, 192, 196, 299, 26, 219, 190, 27, 28, 272,
	55, 194, 220, 59, 210, 221, 198, 197, 199, 180,
	18, 222, 223, 193, 195, 274, 155, 224, 58, 203,
	293, 295, 251, 208, 182, 171, 172, 279, 278, 156,
	53, 276, 146, 174, 313, 314, 316, 315, 317, 319,
	320, -163, -65, -74, 135, -156, 277, 280, 282, -209,
	76, 78, -149, -150, 91, 39, 41, 201, 94, 164,
	126, 186, 16, 22, 95, 48, 175, 178, 181, 49,
	125, 252, 213, 265, 131, 68, 255, 258, 254, 256,
	244, 169, 44, 9, 148, 149, 38, 119, 10, 133,
	98, 99, 286, 153, 40, 150, 88, 51, 19, 71,
	11, 47, 13, 14, 154, 139, 140, 110, 141, 66,
	7, 162, 163, 127, 42, 107, 62, 36, 64, 108,
	17, 259, 260, 46, 189, 185, 269, 188, 52, 161,
	184, 121, 69, 56, 92, 86, 170, 89, 72, 157,
	90, 15, 67, 289, 143, 142, 288, 166, 109, 134,
	264, 30, 65, 257, 6, 268, 45, 151, 160, 63,
	144, 245, 34, 187, 159, 183, 97, 145, 87, 290,
	5, 35, 204, 8, 70, 147, 261, 262, 263, 54,
	179, 176, 287, 273, 96, 12, 205, -144, 274, 214,
	-163, 296, -163, -163, 314, 316, 315, 317, 318, 320,
	284, -163, -97, -56, -84, 92, -89, 44, 40, -88,
	-85, -103, -101, -102, 126, 115, 116, 123, 93, 127,
	-93, -91, -92, -94, 78, 77, 79, 80, 81, 82,
	86, 87, 88, -151, -156, -99, -260, 64, 65, 265,
	266, 269, 267, 95, 54, 254, 263, 262, 261, 259,
	260, 255, 258, 139, 256, 121, 264, 76, -150, -76,
	312, 300, -147, -18, -114, 17, 16, -21, -19, -260,
	6, 37, 38, -48, 60, 61, -40, -44, 230, 229,
	231, -45, 230, 229, -65, 11, -122, -123, -125, 296,
	-165, -124, 300, 301, 299, -152, -133, 302, -151, -149,
	181, 178, 76, -150, -257, 299, 293, 285, 281, -228,
	-223, -155, 76, -150, -139, 139, 141, 141, 141, -139,
	144, -161, -160, 76, -150, -147, 76, -138, 139, -65,
	-65, 248, 144, 256, -163, -163, 245, -67, 252, 253,
	-69, 11, 110, -163, -163, -163, 251, -163, -163, -163,
	-163, -163, -163, -163, -79, -65, -73, -155, 78, -12,
	19, -18, -24, -22, -23, -25, -12, 277, 128, 100,
	79, -163, -99, -260, -99, -163, -65, -163, -163, 319,
	297, 298, 74, 91, 90, 107, -56, -86, 110, 92,
	108, 109, 94, 112, 111, 122, 115, 116, 117, 118,
	119, 120, 121, 113, 114, 125, 100, 101, 102, 103,
	104, 105, 106, -137, -260, -102, -260, 129, 130, -89,
	-89, -89, -89, -89, -89, -260, 128, -18, -97, -260,
	-260, -260, -260, -260, -260, -260, -106, -56, -260, -263,
	-260, -263, -263, -263, -263, -263, -263, -263, -260, -260,
	-260, -260, -147, -79, -261, 75, -115, 19, 46, -56,
	-111, -112, -56, -110, -18, -39, 56, -46, 38, 84,
	-136, -136, 45, -65, 74, -126, -129, -127, 303, 305,
	-124, 296, 100, -132, -151, 78, 44, -132, 45, 16,
	16, 75, 74, -167, -170, -172, -171, -173, -168, -169,
	175, 176, 126, 179, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 45, 152, 171, 172, 173, 174,
	192, 193, 194, 195, 196, 197, 198, 199, 158, 177,
	271, 159, 160, 161, 162, 163, 164, 166, 167, 168,
	169, 170, -160, 92, 76, 76, 76, -65, -65, -252,
	-253, -254, -212, 305, 44, -138, 72, -160, 40, -51,
	11, -65, -156, -68, -69, -69, -65, -68, 74, -75,
	143, 280, 214, 100, -157, -156, -149, 190, 278, 279,
	-163, -163, -163, -148, 145, 39, -163, -163, -163, -56,
	-56, -56, -95, 86, 92, 87, 88, -89, -96, -99,
	-102, 83, 110, 108, 109, 94, -89, -89, -89, -89,
	-89, -89, -89, -89, -89, -89, -89, -89, -89, -89,
	-89, -164, 76, 78, 76, -88, -88, -151, -54, 38,
	-53, -55, 117, -56, -156, -152, -157, -149, -261, -261,
	-18, -53, -53, -56, -56, -53, -46, -104, -105, 96,
	-151, -261, -53, -54, -53, -53, -79, -78, 8, 110,
	74, 18, 74, -113, 41, 148, -114, -261, -48, -90,
	-151, 79, 82, -47, 63, -66, 42, -65, -66, -120,
	-121, -103, -151, -156, -83, 12, -125, -165, -128, 74,
	-130, 74, 304, 306, 307, -126, 72, 89, -56, -204,
	125, -260, 283, 25, -229, -230, -231, -182, -178, -180,
	-181, -183, -184, -185, -186, -187, -188, -189, -190, -191,
	-192, -193, -194, -195, -196, -197, -198, -199, -200, -201,
	-202, 85, 292, -212, 201, 212, 50, 213, 214, 215,
	141, 217, 218, 219, 27, 220, 221, 222, 223, 224,
	225, 226, 227, 228, -223, -224, -225, -5, -4, 141,
	36, 32, 24, 23, -249, -250, -251, -218, -175, -219,
	-220, -221, -176, -43, -177, -205, -206, 86, 92, 44,
	201, 142, 36, 35, 85, 72, 125, 211, 208, -214,
	204, -174, 73, -174, -174, -174, -174, -203, 178, -203,
	-203, -203, 73, 73, -174, -174, -174, -216, 73, -216,
	-216, -217, 73, -217, -252, 40, 72, 72, 72, -142,
	134, 292, 265, 136, 133, 137, 132, 201, 178, 85,
	44, 15, 276, 76, -254, 125, -210, -191, 181, 178,
	175, 307, -79, -65, -114, 250, -163, -163, -72, 108,
	12, -156, -65, -68, -163, -65, -163, 79, 278, -65,
	86, 87, 88, -96, -89, -89, -89, -52, 153, 91,
	-261, -261, -53, 74, -154, -153, 39, -151, 78, 128,
	-260, 128, -261, -261, -261, 74, 147, 39, -261, -53,
	-107, -105, 98, -56, -261, -261, -261, -261, -261, -77,
	19, 143, 51, 52, 280, 48, 58, -56, -56, -112,
	-115, -135, 19, 11, 54, 54, -53, -117, 281, -65,
	-117, -83, 74, 100, 128, -110, -56, -127, -129, -131,
	308, 305, 311, 76, -155, -260, -260, -231, -211, 100,
	-211, 125, -210, -211, -211, -211, -211, -211, 216, 216,
	-211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
	-211, -211, -211, -6, 76, -226, -225, 142, 35, 33,
	-251, 86, 78, 79, 80, 86, -42, -85, -134, 254,
	259, 260, 36, 36, 78, 8, -208, 76, 78, 206,
	207, 44, 44, 209, 210, -215, 205, 79, -203, -203,
	45, -222, 78, -222, 79, 79, -65, -65, -65, -163,
	-148, -143, 141, 36, 100, 145, 138, 138, 138, -211,
	-211, 45, 45, -211, -145, 30, 22, -243, -244, -245,
	46, 20, -163, 78, 78, -56, -68, -83, -12, -163,
	-52, 91, -89, -89, -261, -55, -153, 117, -157, -54,
	-152, -166, 126, 175, 152, 173, 169, 190, 180, 203,
	171, 204, -164, -166, 270, -110, 99, -56, 97, 53,
	59, -65, -57, 11, -87, 45, 54, -18, -260, -260,
	-87, 45, -110, -121, -56, -152, -114, 305, 309, 310,
	-261, -155, -155, 78, -208, -211, -211, 79, 79, 79,
	78, 78, -211, -211, 79, 78, 76, 79, 79, 79,
	79, 44, 78, 44, 207, 206, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 79, 44, 79,
	44, 79, 44, 76, -150, -2, -1, 147, -6, 36,
	-226, 73, -42, 75, 76, 126, 75, 74, 75, 74,
	75, 74, -260, -260, -260, -65, -163, 76, 178, -227,
	76, -223, -248, 76, 44, -213, 76, 126, 44, -207,
	79, 44, -245, -244, -211, -211, -72, -89, 128, -261,
	-261, -174, -174, -174, -217, -174, 163, -174, 163, -261,
	-261, -260, -50, 268, -56, -83, -58, -59, -60, -61,
	-80, -102, -260, -65, -119, 72, -120, -98, -100, -99,
	-260, -18, -116, -155, -118, -155, -120, -114, -261, -261,
	-208, -208, 78, 78, 73, -3, 25, 21, 31, 73,
	-2, -6, 75, 79, 78, 79, 79, -233, -232, -151,
	-233, -233, 45, -248, -248, 117, -203, 76, -89, -261,
	78, -108, 13, 74, -62, -63, -64, 62, 66, 68,
	63, 64, 65, 69, -162, 39, -58, -260, -159, -158,
	39, -156, 78, 43, -119, 74, -261, -261, -261, 74,
	128, 74, -261, -260, -179, 282, -233, -233, 73, -2,
	75, 75, 75, -261, 74, -174, -261, -261, 76, -49,
	110, 273, -109, 14, 16, -59, -60, -59, -60, 62,
	62, 62, 67, 62, 67, 62, -63, -156, -261, -81,
	70, 140, 71, -158, 36, -100, 54, -18, -260, -155,
	-151, -155, -256, -255, 281, 79, 75, 75, -233, 73,
	-235, -232, -234, -236, -261, 271, 69, 274, -56, -97,
	72, 72, 62, 62, 141, 141, 141, 8, -98, -18,
	128, 74, -261, 76, -237, -237, 75, -233, -243, -241,
	-238, -240, 27, 85, 147, -243, -239, -238, 273, -243,
	-238, 59, 272, 275, -56, -56, -260, -260, -260, -120,
	-261, -155, -255, 54, -242, 27, -1, 85, 273, -237,
	75, -211, 78, -247, 25, 21, 29, 59, -82, -151,
	-82, -82, 110, -211, 78, 29, -237, 79, 76, 273,
	-261, 74, -261, -261, -99, 79, 76, 274, -151, 275,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 678, 0,
	464, 464, 464, 464, 464, 464, 0, 769, 752, 348,
	358, 0, 436, 0, 0, 994, 375, 385, 391, 994,
	0, 994, 994, 0, 994, 0, 450, 0, 0, 363,
	364, 365, 992, 1, 3, 686, 0, 0, 468, 471,
	466, 41, 45, 0, 0, 0, 69, 0, 750, 0,
	0, 0, 750, 62, 63, 770, 0, 346, 753, 0,
	0, 748, 349, 0, 359, 0, 0, 0, 994, 994,
	0, 0, 994, 994, 994, 0, 994, 994, 994, 994,
	994, 994, 994, 437, 429, 430, 431, 0, 447, 448,
	449, 775, 776, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 362, 366, 0, 0, 524, 940, -2, 380, 390,
	386, 387, 388, 389, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 0, 392, 393,
	395, 994, 397, 398, 0, 0, 994, 0, 994, 994,
	0, 463, 54, 574, 534, 0, 539, 541, 0, 576,
	577, 578, 579, 580, 0, 0, 0, 0, 0, 0,
	602, 603, 604, 605, 664, 665, 666, 667, 668, 669,
	670, 543, 544, 661, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 652, 0, 626, 626, 626, 626, 626,
	626, 626, 626, 0, 0, 0, 0, -2, -2, 0,
	451, 452, 0, 33, 690, 0, 0, 678, 35, 0,
	464, 469, 470, 474, 472, 473, 465, 752, 42, 43,
	44, 752, 46, 47, 0, 0, 55, 56, 714, 0,
	0, 716, 743, 744, -2, 0, 0, 0, 773, 774,
	-2, 794, 771, 772, 64, 70, 71, 0, 0, 0,
	193, 0, 197, 198, 0, 0, 0, 0, 0, 0,
	0, -2, 347, 779, 780, 748, 0, 0, 0, 360,
	361, 427, 0, 0, 411, 412, 432, 0, 438, 439,
	0, 434, 435, 416, 417, 418, 432, 420, 421, 422,
	423, 424, 425, 426, 443, 356, 369, 367, 368, 381,
	0, -2, 371, 372, 373, 374, 383, 0, 0, 0,
	994, 396, 994, 0, 994, 401, 764, 403, 404, 994,
	994, 994, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 563, 564,
	565, 566, 567, 540, 0, 554, 0, 0, 0, 596,
	597, 598, 599, 600, 0, 478, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 474, 0, 653, 0, 618,
	0, 619, 620, 621, 622, 623, 624, 625, 0, 478,
	0, 0, 0, 460, 34, 993, 29, 0, 0, 687,
	679, 680, 683, 686, 33, 471, 0, 476, 475, 467,
	0, 0, 0, 532, 0, 728, 739, 732, 0, 0,
	717, 0, 0, 721, 725, 726, 727, 294, 724, 0,
	0, -2, 319, 203, 270, 200, 201, 202, 263, 218,
	263, 263, 263, 263, 290, 290, 290, 290, 246, 247,
	248, 249, 250, 0, 0, 233, 263, 263, 263, 237,
	253, 254, 255, 256, 257, 258, 259, 260, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 265, 265,
	267, 267, -2, 0, 0, 0, 0, 119, 0, 345,
	-2, 101, 0, 0, 110, 0, 0, 355, 749, 686,
	0, 994, 994, 440, 0, 0, 432, 994, 0, 994,
	444, 445, 0, 0, 525, 777, 778, 376, 377, 378,
	394, 399, 400, 0, 765, 766, 405, 406, 407, 575,
	535, 536, 538, 555, 0, 557, 559, 545, 546, 570,
	571, 572, 0, 0, 0, 0, 568, 550, 0, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 595, 637, 638, 0, 593, 594, 601, 0, 0,
	479, 480, 482, 486, 0, 662, 0, -2, 573, 709,
	33, 0, 0, 0, 0, 0, 0, 659, 656, 0,
	0, 627, 0, 0, 0, 0, 453, 462, 691, 0,
	0, 0, 0, 682, 684, 685, 690, 36, 474, 0,
	671, 0, 0, 0, 477, 50, 0, 523, 50, 532,
	711, 0, 661, 0, 678, 0, 715, 0, 730, 0,
	731, 0, 0, 741, 742, 729, 718, 719, 720, 722,
	0, 0, 0, 0, 120, -2, 123, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 111, 111, 0, 111, 111, 111, 111, 111, 0,
	0, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 194, 195, 311, 330, 0, 332,
	333, 328, -2, 320, 196, 204, 205, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 274, 0, 0,
	289, 0, 303, 305, 0, 0, 0, 0, 0, 272,
	271, 217, 0, 290, 290, 240, 241, 242, 0, 243,
	244, 245, 0, 0, 234, 235, 236, 228, 0, 229,
	230, 231, 0, 232, 65, 751, 0, 0, 0, 994,
	764, 0, 761, 0, 759, 0, 754, 755, 756, 757,
	758, 760, 762, 763, 102, 111, 111, 107, 113, 0,
	0, 111, 350, 92, 994, 0, 409, 410, 413, 0,
	0, 433, 432, 532, 419, 357, 446, 382, 0, 994,
	556, 558, 560, 547, 568, 551, 0, 548, 0, 0,
	542, 606, 0, 0, 483, 487, 0, 489, 490, 0,
	478, 0, -2, 609, 610, 0, 0, 0, 0, 678,
	0, 657, 0, 0, 617, 628, 629, 630, 631, 461,
	0, 455, 456, 457, 458, 459, 0, 688, 689, 681,
	30, 0, 746, 747, 672, 673, 491, 0, 0, 522,
	0, 678, 0, 0, 0, 686, 533, 740, 733, 734,
	0, 0, 738, 295, 0, 0, 0, 124, 0, 112,
	0, 111, 111, 0, 0, 0, 0, 0, 111, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 312, 311, 331, 0, 330, 321,
	206, 275, 276, 277, 278, 279, 280, 281, 283, 286,
	287, 288, 302, 304, 306, 0, 293, 188, 189, 296,
	297, 298, 299, 300, 301, 199, 273, 0, 238, 239,
	0, 0, 261, 0, 0, 0, 0, 0, 0, 337,
	0, 994, 767, 768, 0, 0, 0, 0, 0, 0,
	0, 114, 115, 0, 353, 351, 352, 354, 93, 94,
	111, 111, 408, 428, 441, 442, 440, 414, 384, 402,
	549, 0, 569, 552, 607, 481, 488, 484, 0, 0,
	663, 0, 263, 263, 642, 263, 267, 645, 263, 647,
	263, 650, 0, 0, 0, 654, 616, 660, 0, 454,
	692, 31, 532, 0, 703, 0, 0, -2, 0, 0,
	39, 0, 686, 712, 713, 662, 53, 735, 736, 737,
	72, 0, 0, 190, 191, 0, 0, 149, 150, 187,
	152, 153, 0, 0, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 0, 324, 0, 0, 323,
	311, 0, 282, 264, 291, 292, 251, 0, 252, 0,
	268, 0, 0, 0, 0, 338, 339, 340, 0, 342,
	343, 344, 105, 77, 78, 106, 116, 117, 118, 108,
	103, 104, 95, 96, 0, 0, 415, 553, 0, 608,
	611, 639, 290, 643, 644, 646, 648, 649, 651, 613,
	612, 0, 0, 0, 658, 674, 492, 493, 495, 496,
	497, 505, 0, 507, 37, 0, 703, 693, 705, 707,
	0, 33, 0, 699, 0, 48, 40, 52, 0, 60,
	151, 192, 154, 155, 0, 322, 325, 326, 327, 0,
	0, 323, 284, 0, 262, 0, 0, 0, 334, 263,
	0, 0, 0, 97, 98, 485, 640, 641, 632, 615,
	655, 676, 0, 0, 0, 0, 0, 512, 0, 0,
	515, 0, 0, 0, 0, 506, 0, 0, 526, 508,
	0, 510, 511, 0, 38, 0, 708, -2, 0, 0,
	0, 0, 51, 0, 74, 0, 0, 0, 0, 0,
	285, 266, 269, 82, 0, 336, 86, 90, 341, 0,
	0, 0, 32, 0, 0, 494, 501, 0, 504, 513,
	514, 516, 0, 518, 0, 520, 521, 498, 499, 500,
	0, 0, 0, 509, 0, 706, 0, -2, 0, 701,
	700, 49, 0, 57, 0, 61, 317, 317, 0, 0,
	92, 335, 92, 92, 614, 0, 0, 0, 677, 675,
	0, 0, 517, 519, 0, 0, 0, 0, 696, 33,
	0, 0, 73, 0, 307, 308, 317, 0, 66, 83,
	84, 85, 111, 0, 0, 67, 87, 88, 0, 68,
	91, 633, 0, 636, 502, 503, 0, 0, 0, 704,
	-2, 702, 58, 0, 318, 111, 314, 0, 0, 309,
	317, 0, 81, 79, 75, 76, 0, 634, 0, 530,
	0, 0, 0, 0, 315, 0, 310, 80, 89, 0,
	527, 0, 528, 529, 59, 313, 316, 0, 531, 635,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 93, 3, 3, 3, 120, 112, 3,
	73, 75, 117, 115, 74, 116, 128, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 321,
	101, 100, 102, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 123,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 94, 95,
	96, 97, 98, 99, 103, 104, 105, 106, 107, 108,
	109, 110, 113, 114, 119, 121, 124, 125, 126, 127,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1101
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1137
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1182
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1195
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1207
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1219
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = ""
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.statement = &Do{Exprs: yyDollar[2].exprs}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.optVal = nil
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1328
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1348
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1355
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 66:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 67:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.str = "hash"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.str = "btree"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.str = "default"
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1543
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1561
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = "default"
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1646
		{
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1651
		{
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.str = "character set"
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.str = "char set"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.str = "default"
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1685
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2235
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.optVal = nil
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2661
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.str = yyDollar[3].str
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2777
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2802
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2814
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 309:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2828
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 310:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2839
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2904
		{
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2907
		{
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2910
		{
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2921
		{
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2953
		{
			// set empty
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.str = yyDollar[1].str
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2979
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2995
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3000
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.byt = 0
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.byt = 1
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3048
		{
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3050
		{
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3052
		{
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3056
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3072
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3092
		{
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3094
		{
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.statement = &Xa{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3116
		{
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3118
		{
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3120
		{
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.showFilter = nil
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3137
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3143
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3194
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.optVal = nil
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3212
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3217
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3237
		{
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3239
		{
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3241
		{
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3331
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3342
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3377
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3381
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3394
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3398
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3418
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3422
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3438
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3442
		{
			yyVAL.str = "full "
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3448
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3452
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.showFilter = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3466
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3471
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3475
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3479
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3493
		{
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3497
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3502
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3510
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3516
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.checkOptionEnum = CheckOptionForUpgrade
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3526
		{
			yyVAL.checkOptionEnum = CheckOptionQuick
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.checkOptionEnum = CheckOptionFast
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.checkOptionEnum = CheckOptionMedium
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.checkOptionEnum = CheckOptionExtended
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3542
		{
			yyVAL.checkOptionEnum = CheckOptionChanged
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.checkOptionList = []CheckOptionEnum{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.checkOptionList = append(yyDollar[1].checkOptionList, yyDollar[2].checkOptionEnum)
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3558
		{
			yyVAL.statement = &Check{Tables: yyDollar[3].tableNames, CheckOptions: yyDollar[4].checkOptionList}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3564
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3569
		{
			setAllowComments(yylex, true)
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3572
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3578
		{
			yyVAL.bytes2 = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3582
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.str = UnionStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.str = UnionAllStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3596
		{
			yyVAL.str = UnionDistinctStr
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3601
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3605
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3609
		{
			yyVAL.str = SQLCacheStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3614
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3618
		{
			yyVAL.str = DistinctStr
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3623
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3627
		{
			yyVAL.str = StraightJoinHint
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.selectExprs = nil
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3642
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3664
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3669
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3673
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3684
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3689
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3693
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3713
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3717
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3721
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3727
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3740
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3744
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3752
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3757
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3761
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3781
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3787
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3791
		{
			yyVAL.str = JoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3795
		{
			yyVAL.str = JoinStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3799
		{
			yyVAL.str = StraightJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3805
		{
			yyVAL.str = LeftJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3809
		{
			yyVAL.str = LeftJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3813
		{
			yyVAL.str = RightJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3817
		{
			yyVAL.str = RightJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3823
		{
			yyVAL.str = NaturalJoinStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3827
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3837
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3841
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3851
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3856
		{
			yyVAL.indexHints = nil
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3864
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3868
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3883
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3893
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3897
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3923
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3927
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3933
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3959
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3963
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3967
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3971
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3975
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3979
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3985
		{
			yyVAL.str = IsNullStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3989
		{
			yyVAL.str = IsNotNullStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3993
		{
			yyVAL.str = IsTrueStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.str = IsNotTrueStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4001
		{
			yyVAL.str = IsFalseStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4005
		{
			yyVAL.str = IsNotFalseStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.str = EqualStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.str = LessThanStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.str = GreaterThanStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.str = LessEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.str = GreaterEqualStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.str = NotEqualStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4040
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4044
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4050
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4054
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4058
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4064
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4070
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4074
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4080
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4084
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4088
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4092
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4096
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4100
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4104
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4108
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4112
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4116
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4124
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4128
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4152
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4156
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4164
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4172
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4186
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4190
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4194
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4212
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4216
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4220
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4238
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4242
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4246
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 614:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4250
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4254
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4258
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4262
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4272
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4276
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4289
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4299
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4304
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4341
		{
			yyVAL.str = BooleanModeStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4345
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 635:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4349
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4353
		{
			yyVAL.str = QueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4369
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4373
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4377
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4381
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4385
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4389
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4395
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4399
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4403
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4407
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4411
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4415
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4419
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4424
		{
			yyVAL.expr = nil
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4428
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.str = string("")
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4437
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4443
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4447
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4458
		{
			yyVAL.expr = nil
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4468
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4482
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4486
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4490
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4494
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4498
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4502
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.expr = &NullVal{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4512
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4525
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4530
		{
			yyVAL.exprs = nil
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4534
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4539
		{
			yyVAL.expr = nil
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4543
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.orderBy = nil
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4558
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4562
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4568
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4573
		{
			yyVAL.str = AscScr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4577
		{
			yyVAL.str = AscScr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4581
		{
			yyVAL.str = DescScr
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4586
		{
			yyVAL.limit = nil
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4590
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4598
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4603
		{
			yyVAL.str = ""
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4607
		{
			yyVAL.str = ForUpdateStr
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4611
		{
			yyVAL.str = ShareModeStr
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4624
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4628
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4632
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4637
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4641
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 698:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4645
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4652
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4656
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4660
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 702:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4664
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4669
		{
			yyVAL.updateExprs = nil
		}
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4673
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4679
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4683
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4689
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4693
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4699
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4705
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4715
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4719
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4725
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4731
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4735
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4741
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4745
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4752
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4756
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4760
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4764
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4768
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4775
		{
			yyVAL.bytes = []byte("charset")
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4781
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4785
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4789
		{
			yyVAL.expr = &Default{}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4795
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4799
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4805
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4809
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4815
		{
			yyVAL.str = ""
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4819
		{
			yyVAL.str = yyDollar[2].str
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4825
		{
			yyVAL.str = yyDollar[3].str
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4831
		{
			yyVAL.str = RepeatableRead
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4835
		{
			yyVAL.str = ReadCommitted
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4839
		{
			yyVAL.str = ReadUncommitted
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4843
		{
			yyVAL.str = Serializable
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4849
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4853
		{
			yyVAL.str = yyDollar[2].str
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4859
		{
			yyVAL.str = TxReadWrite
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4863
		{
			yyVAL.str = TxReadOnly
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4869
		{
			yyVAL.str = SessionStr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4873
		{
			yyVAL.str = SessionStr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4877
		{
			yyVAL.str = GlobalStr
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4886
		{
			yyVAL.byt = 0
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4890
		{
			yyVAL.byt = 1
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4895
		{
			yyVAL.byt = 0
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4899
		{
			yyVAL.byt = 1
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4904
		{
			yyVAL.str = ""
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4908
		{
			yyVAL.str = IgnoreStr
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4914
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4918
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4922
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4926
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4930
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4934
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4938
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4942
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4946
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4950
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4955
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4959
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4963
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4969
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4973
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4978
		{
			yyVAL.str = IndexStr
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4982
		{
			yyVAL.str = UniqueStr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4988
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4992
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4999
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5005
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5009
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5016
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5022
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5026
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5264
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5273
		{
			decNesting(yylex)
		}
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5278
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
