//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const USING = 57463
const PRIMARY = 57464
const COLUMN = 57465
const DESC = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const SHOW = 57469
const DATE = 57470
const ESCAPE = 57471
const HELP = 57472
const REPAIR = 57473
const TRUNCATE = 57474
const OPTIMIZE = 57475
const BIT = 57476
const TINYINT = 57477
const SMALLINT = 57478
const MEDIUMINT = 57479
const INT = 57480
const INTEGER = 57481
const BIGINT = 57482
const INTNUM = 57483
const REAL = 57484
const DOUBLE = 57485
const FLOAT_TYPE = 57486
const DECIMAL = 57487
const NUMERIC = 57488
const TIME = 57489
const TIMESTAMP = 57490
const DATETIME = 57491
const YEAR = 57492
const CHAR = 57493
const VARCHAR = 57494
const BOOL = 57495
const CHARACTER = 57496
const VARBINARY = 57497
const NCHAR = 57498
const CHARSET = 57499
const TEXT = 57500
const TINYTEXT = 57501
const MEDIUMTEXT = 57502
const LONGTEXT = 57503
const BLOB = 57504
const TINYBLOB = 57505
const MEDIUMBLOB = 57506
const LONGBLOB = 57507
const JSON = 57508
const ENUM = 57509
const GEOMETRY = 57510
const POINT = 57511
const LINESTRING = 57512
const POLYGON = 57513
const GEOMETRYCOLLECTION = 57514
const MULTIPOINT = 57515
const MULTILINESTRING = 57516
const MULTIPOLYGON = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const FIXED = 57524
const DYNAMIC = 57525
const STORAGE = 57526
const DISK = 57527
const MEMORY = 57528
const COLUMN_FORMAT = 57529
const AVG_ROW_LENGTH = 57530
const COMPRESSION = 57531
const CONNECTION = 57532
const DATA = 57533
const DIRECTORY = 57534
const DELAY_KEY_WRITE = 57535
const ENCRYPTION = 57536
const INSERT_METHOD = 57537
const MAX_ROWS = 57538
const MIN_ROWS = 57539
const PACK_KEYS = 57540
const PASSWORD = 57541
const ROW_FORMAT = 57542
const STATS_AUTO_RECALC = 57543
const STATS_PERSISTENT = 57544
const STATS_SAMPLE_PAGES = 57545
const TABLESPACE = 57546
const DELAYED = 57547
const LOW_PRIORITY = 57548
const HIGH_PRIORITY = 57549
const COMPRESSED = 57550
const REDUNDANT = 57551
const COMPACT = 57552
const TOKUDB_DEFAULT = 57553
const TOKUDB_FAST = 57554
const TOKUDB_SMALL = 57555
const TOKUDB_ZLIB = 57556
const TOKUDB_QUICKLZ = 57557
const TOKUDB_LZMA = 57558
const TOKUDB_SNAPPY = 57559
const TOKUDB_UNCOMPRESSED = 57560
const COLLATION = 57561
const DATABASES = 57562
const TABLES = 57563
const WARNINGS = 57564
const VARIABLES = 57565
const EVENTS = 57566
const BINLOG = 57567
const GTID = 57568
const STATUS = 57569
const COLUMNS = 57570
const FIELDS = 57571
const CURRENT_TIMESTAMP = 57572
const CURRENT_DATE = 57573
const DATABASE = 57574
const SCHEMA = 57575
const CURRENT_TIME = 57576
const LOCALTIME = 57577
const LOCALTIMESTAMP = 57578
const UTC_DATE = 57579
const UTC_TIME = 57580
const UTC_TIMESTAMP = 57581
const REPLACE = 57582
const CONVERT = 57583
const CAST = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594
const FORMAT = 57595
const TREE = 57596
const TRADITIONAL = 57597
const EXTENDED = 57598
const PARTITION = 57599
const PARTITIONS = 57600
const LIST = 57601
const XA = 57602
const DISTRIBUTED = 57603
const ENGINES = 57604
const VERSIONS = 57605
const PROCESSLIST = 57606
const QUERYZ = 57607
const TXNZ = 57608
const KILL = 57609
const ENGINE = 57610
const SINGLE = 57611
const BEGIN = 57612
const START = 57613
const TRANSACTION = 57614
const COMMIT = 57615
const ROLLBACK = 57616
const GLOBAL = 57617
const LOCAL = 57618
const SESSION = 57619
const NAMES = 57620
const ISOLATION = 57621
const LEVEL = 57622
const READ = 57623
const WRITE = 57624
const ONLY = 57625
const REPEATABLE = 57626
const COMMITTED = 57627
const UNCOMMITTED = 57628
const SERIALIZABLE = 57629
const RADON = 57630
const ATTACH = 57631
const ATTACHLIST = 57632
const DETACH = 57633
const RESHARD = 57634
const CLEANUP = 57635
const RECOVER = 57636
const REBALANCE = 57637

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5160

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 199,
	6, 375,
	7, 375,
	8, 375,
	9, 375,
	18, 375,
	67, 375,
	257, 375,
	-2, 909,
	-1, 380,
	94, 917,
	-2, 724,
	-1, 386,
	94, 773,
	-2, 702,
	-1, 407,
	1, 95,
	313, 95,
	-2, 105,
	-1, 446,
	5, 30,
	-2, 366,
	-1, 526,
	122, 754,
	-2, 750,
	-1, 527,
	122, 755,
	-2, 751,
	-1, 559,
	119, 105,
	168, 105,
	171, 105,
	174, 105,
	-2, 117,
	-1, 610,
	1, 95,
	313, 95,
	-2, 105,
	-1, 618,
	1, 96,
	313, 96,
	-2, 105,
	-1, 771,
	119, 105,
	168, 105,
	171, 105,
	174, 105,
	-2, 118,
	-1, 828,
	35, 325,
	67, 325,
	70, 325,
	133, 325,
	-2, 914,
	-1, 977,
	122, 757,
	-2, 753,
	-1, 1151,
	5, 31,
	-2, 552,
	-1, 1174,
	5, 30,
	-2, 673,
	-1, 1398,
	5, 31,
	-2, 674,
	-1, 1451,
	5, 30,
	-2, 676,
	-1, 1514,
	5, 31,
	-2, 677,
}

const yyPrivate = 57344

const yyLast = 11397

var yyAct = [...]int{

	527, 1024, 1316, 1457, 1487, 647, 1114, 505, 53, 1493,
	1534, 504, 1317, 1347, 1390, 502, 381, 1307, 877, 480,
	745, 1520, 1306, 1232, 1313, 397, 1346, 1376, 973, 1072,
	863, 1259, 350, 1387, 1286, 750, 968, 971, 446, 3,
	961, 1144, 115, 1115, 115, 205, 1049, 1116, 385, 396,
	60, 976, 71, 1062, 1051, 1136, 746, 1171, 915, 938,
	444, 53, 631, 987, 1087, 650, 479, 902, 544, 115,
	355, 389, 545, 399, 832, 377, 620, 772, 529, 535,
	619, 617, 1003, 410, 785, 1052, 384, 478, 873, 115,
	543, 115, 349, 204, 376, 374, 359, 469, 715, 741,
	413, 81, 551, 465, 466, 59, 408, 907, 1017, 64,
	810, 1016, 632, 115, 1018, 622, 1185, 1186, 759, 760,
	346, 546, 1184, 547, 464, 547, 758, 622, 546, 337,
	769, 802, 1406, 1458, 193, 1004, 970, 642, 66, 67,
	68, 69, 70, 923, 27, 28, 30, 31, 467, 340,
	342, 341, 343, 344, 394, 345, 1556, 1519, 393, 1533,
	1555, 1507, 1118, 797, 335, 1553, 392, 1532, 1299, 1495,
	1506, 1370, 391, 1065, 87, 432, 418, 912, 1066, 1067,
	482, 336, 32, 338, 339, 40, 347, 348, 1117, 27,
	28, 30, 31, 417, 1035, 399, 1034, 27, 28, 30,
	31, 637, 41, 53, 53, 57, 83, 1082, 422, 426,
	1521, 27, 28, 30, 31, 424, 425, 806, 1077, 75,
	442, 1027, 1496, 445, 334, 643, 644, 76, 420, 421,
	80, 856, 429, 430, 431, 1422, 433, 434, 435, 436,
	437, 438, 439, 365, 364, 366, 369, 368, 1255, 864,
	57, 1078, 1365, 857, 1363, 1104, 1103, 451, 57, 1102,
	1054, 1444, 1446, 34, 35, 36, 1234, 38, 83, 1234,
	906, 414, 57, 905, 85, 901, 904, 401, 800, 56,
	55, 54, 39, 1101, 1479, 44, 51, 37, 52, 801,
	803, 804, 805, 419, 807, 808, 809, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 1469, 671, 670, 680,
	681, 673, 674, 675, 676, 677, 678, 679, 672, 82,
	652, 682, 1478, 826, 906, 1477, 1154, 905, 77, 1241,
	904, 404, 1099, 1445, 403, 652, 864, 402, 411, 406,
	1118, 730, 659, 658, 115, 112, 90, 1495, 458, 458,
	89, 1483, 457, 459, 694, 695, 1401, 1355, 1150, 660,
	1148, 1010, 1265, 53, 703, 1053, 1117, 808, 453, 798,
	621, 1505, 115, 672, 1075, 1076, 682, 389, 1538, 1242,
	472, 530, 768, 389, 389, 659, 658, 682, 766, 1263,
	78, 79, 384, 657, 532, 29, 1155, 1522, 552, 552,
	1496, 410, 660, 427, 531, 917, 115, 115, 658, 1501,
	1079, 1080, 660, 475, 410, 42, 988, 651, 1025, 115,
	115, 825, 45, 1100, 660, 46, 47, 115, 49, 48,
	1098, 1009, 651, 675, 676, 677, 678, 679, 672, 1264,
	29, 682, 731, 50, 638, 78, 79, 550, 29, 454,
	659, 658, 548, 452, 115, 1301, 611, 1303, 988, 1497,
	1161, 1057, 29, 537, 400, 538, 533, 660, 1470, 539,
	1551, 1268, 456, 1058, 1059, 1060, 945, 460, 57, 462,
	463, 1061, 500, 501, 691, 693, 555, 648, 941, 1341,
	943, 944, 942, 1342, 1543, 635, 916, 428, 468, 1459,
	662, 1267, 641, 663, 1345, 639, 1156, 610, 1344, 1073,
	702, 1074, 623, 705, 706, 707, 708, 709, 710, 711,
	625, 714, 716, 716, 716, 716, 716, 716, 716, 716,
	724, 725, 726, 727, 648, 389, 633, 659, 658, 115,
	115, 713, 405, 389, 704, 1287, 1129, 1130, 1131, 1206,
	736, 661, 659, 658, 660, 1229, 748, 962, 384, 963,
	747, 399, 1205, 1204, 732, 767, 1227, 659, 658, 660,
	1289, 931, 933, 934, 1201, 636, 1196, 932, 1195, 764,
	1194, 1118, 1225, 1208, 660, 1228, 1091, 1291, 1495, 1295,
	645, 1290, 646, 1288, 649, 1090, 1226, 1083, 1293, 653,
	654, 655, 922, 455, 865, 866, 867, 1117, 1292, 1540,
	820, 1552, 1224, 1207, 717, 718, 719, 720, 721, 722,
	723, 1294, 1296, 1526, 115, 115, 1425, 1343, 879, 1261,
	734, 1332, 1331, 115, 115, 1209, 799, 753, 752, 744,
	761, 1496, 1202, 1198, 1197, 1190, 822, 1121, 1065, 1120,
	1088, 115, 1070, 1066, 1067, 1544, 1260, 1486, 692, 1419,
	911, 1050, 671, 670, 680, 681, 673, 674, 675, 676,
	677, 678, 679, 672, 1547, 468, 682, 939, 1415, 1524,
	1413, 733, 1415, 1489, 1484, 468, 1412, 928, 929, 1257,
	935, 936, 880, 1415, 1461, 875, 876, 920, 1254, 900,
	1203, 53, 389, 1137, 1019, 903, 1113, 494, 493, 495,
	496, 497, 498, 705, 1112, 389, 499, 967, 27, 384,
	975, 1415, 1460, 1374, 468, 1415, 468, 1402, 468, 27,
	989, 1210, 704, 964, 648, 1400, 468, 982, 983, 1142,
	468, 1248, 1247, 115, 979, 1244, 1245, 1244, 1243, 924,
	468, 1411, 977, 1111, 389, 1240, 1178, 530, 1008, 614,
	1173, 613, 992, 612, 913, 914, 412, 1172, 399, 384,
	921, 1173, 560, 559, 1396, 1170, 1021, 1022, 61, 57,
	1012, 1007, 965, 966, 1314, 751, 1008, 924, 1374, 27,
	57, 985, 1246, 1020, 27, 1142, 925, 757, 755, 728,
	1026, 1011, 1029, 1030, 1031, 1032, 1033, 995, 542, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 859, 860, 861, 862, 1014, 1006, 1013, 548,
	996, 1450, 1142, 1142, 356, 57, 1463, 858, 870, 871,
	872, 1473, 1008, 980, 981, 1409, 940, 984, 799, 1023,
	57, 878, 1338, 978, 1333, 57, 72, 1238, 874, 869,
	868, 991, 1314, 993, 994, 990, 884, 1028, 673, 674,
	675, 676, 677, 678, 679, 672, 1002, 883, 682, 882,
	624, 25, 503, 115, 115, 115, 740, 1212, 1211, 1437,
	1084, 1085, 1476, 1475, 1438, 57, 1434, 696, 697, 698,
	699, 700, 701, 1105, 1106, 1435, 1056, 1433, 1545, 1109,
	1436, 1531, 1063, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 113, 1439, 197, 1382, 1383, 360,
	361, 53, 1128, 927, 1089, 1517, 1001, 536, 1276, 1000,
	1117, 1351, 1108, 470, 354, 1107, 1122, 1086, 849, 848,
	534, 197, 1096, 1126, 939, 1118, 1124, 845, 671, 670,
	680, 681, 673, 674, 675, 676, 677, 678, 679, 672,
	471, 197, 682, 197, 389, 556, 540, 1394, 881, 626,
	851, 1117, 1123, 1149, 1125, 1448, 1386, 357, 358, 1146,
	536, 1236, 1069, 850, 843, 197, 1068, 73, 115, 1055,
	844, 1541, 1132, 1378, 1381, 1382, 1383, 1379, 1530, 1380,
	1384, 1175, 1176, 1474, 1175, 1336, 1118, 1162, 351, 1335,
	1095, 1428, 399, 399, 748, 1337, 384, 1182, 747, 1192,
	1193, 1529, 999, 852, 86, 1528, 1199, 1200, 1181, 558,
	998, 557, 1174, 352, 1183, 1174, 1119, 1188, 1189, 1231,
	1160, 61, 1427, 847, 1373, 751, 1191, 628, 1179, 977,
	371, 1127, 1480, 1071, 1177, 1180, 1378, 1381, 1382, 1383,
	1379, 1233, 1380, 1384, 656, 63, 450, 7, 937, 447,
	6, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 65, 115, 1235, 58,
	1249, 1250, 1251, 449, 5, 399, 1141, 1, 846, 1237,
	448, 4, 115, 1139, 390, 854, 1456, 1140, 853, 1272,
	1273, 618, 1158, 940, 831, 1239, 830, 1527, 1151, 1152,
	1153, 74, 1518, 1157, 1492, 1494, 1499, 1467, 1163, 1464,
	1164, 1165, 1166, 1167, 1466, 771, 389, 770, 395, 821,
	837, 389, 836, 835, 1258, 1256, 833, 1081, 855, 1262,
	1271, 1146, 201, 1270, 384, 975, 384, 1285, 1266, 1187,
	842, 115, 841, 1312, 765, 796, 399, 399, 1311, 795,
	1280, 1319, 1274, 53, 794, 1318, 1284, 1281, 748, 1275,
	1302, 1298, 747, 1315, 748, 793, 1297, 977, 747, 1325,
	1283, 1322, 1324, 792, 1305, 1304, 791, 790, 789, 1300,
	788, 787, 1326, 786, 1320, 784, 783, 194, 782, 781,
	780, 779, 1329, 1330, 778, 777, 197, 773, 776, 775,
	1405, 774, 1253, 840, 838, 834, 565, 563, 564, 562,
	567, 566, 370, 561, 1385, 407, 1389, 1143, 88, 1110,
	389, 389, 389, 333, 197, 1097, 885, 43, 1233, 84,
	1339, 690, 415, 997, 416, 1348, 1348, 1348, 1064, 382,
	1015, 756, 754, 373, 372, 1323, 1321, 1349, 1350, 729,
	528, 1426, 1372, 1159, 1340, 712, 440, 986, 197, 197,
	1279, 680, 681, 673, 674, 675, 676, 677, 678, 679,
	672, 197, 630, 682, 1352, 1353, 481, 1368, 930, 197,
	1361, 492, 115, 115, 489, 491, 490, 735, 664, 1388,
	670, 680, 681, 673, 674, 675, 676, 677, 678, 679,
	672, 473, 1371, 682, 389, 1404, 640, 1327, 1328, 389,
	1395, 1443, 1309, 908, 195, 441, 96, 95, 648, 1348,
	704, 1310, 423, 1377, 1348, 1375, 389, 1133, 1134, 1135,
	1407, 1308, 1233, 1169, 1410, 1408, 627, 1369, 1468, 739,
	367, 384, 1285, 363, 839, 115, 115, 115, 115, 62,
	362, 15, 1311, 1311, 1311, 1311, 115, 24, 16, 115,
	1421, 14, 115, 1430, 13, 1432, 1388, 1429, 33, 1431,
	11, 399, 389, 399, 1319, 10, 1447, 1452, 1318, 1449,
	389, 9, 1440, 8, 353, 26, 389, 1454, 2, 22,
	23, 197, 197, 749, 21, 1348, 1453, 979, 1455, 1465,
	20, 1348, 19, 1356, 1472, 1357, 1462, 18, 1451, 17,
	12, 823, 824, 1334, 0, 0, 1366, 1367, 0, 0,
	0, 0, 0, 1481, 0, 0, 1471, 648, 1319, 0,
	53, 0, 1318, 0, 389, 0, 1488, 0, 1397, 1398,
	1399, 1491, 1403, 1498, 1502, 0, 1500, 1503, 0, 1348,
	0, 0, 0, 0, 399, 1510, 1511, 1512, 1516, 0,
	1490, 1482, 1310, 0, 1523, 1414, 748, 1525, 1417, 1418,
	747, 1513, 1508, 1509, 0, 0, 197, 197, 0, 1515,
	0, 389, 389, 389, 0, 918, 197, 461, 1424, 0,
	0, 1539, 1536, 1537, 0, 582, 1535, 1535, 1535, 1542,
	0, 0, 0, 197, 0, 0, 1442, 0, 0, 0,
	0, 1358, 1359, 0, 1360, 541, 458, 1362, 389, 1364,
	1550, 1277, 1278, 0, 0, 1310, 1310, 1310, 1310, 0,
	0, 0, 0, 1554, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 111, 0, 110, 0, 0, 615,
	616, 0, 0, 0, 0, 974, 640, 0, 0, 974,
	974, 0, 629, 974, 0, 108, 0, 0, 0, 0,
	634, 570, 1416, 0, 0, 1485, 0, 974, 974, 974,
	974, 0, 0, 0, 0, 0, 0, 1504, 0, 107,
	0, 0, 974, 897, 0, 197, 583, 0, 0, 0,
	0, 1514, 596, 599, 600, 601, 602, 603, 604, 0,
	605, 606, 607, 608, 609, 584, 585, 586, 587, 568,
	569, 597, 896, 571, 0, 0, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 588, 589, 590, 591,
	592, 593, 594, 595, 92, 1138, 0, 0, 0, 899,
	0, 100, 109, 1546, 0, 1548, 1549, 0, 895, 0,
	1354, 0, 0, 0, 0, 671, 670, 680, 681, 673,
	674, 675, 676, 677, 678, 679, 672, 0, 0, 682,
	0, 0, 743, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 890, 886, 0, 889,
	891, 0, 0, 0, 0, 598, 671, 670, 680, 681,
	673, 674, 675, 676, 677, 678, 679, 672, 0, 0,
	682, 0, 0, 0, 0, 197, 197, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 1423, 0, 0, 105, 93, 0, 104, 102,
	0, 91, 0, 99, 0, 0, 0, 909, 910, 0,
	0, 0, 0, 893, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 94, 103,
	97, 98, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 888, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 640, 887, 0, 0, 0, 0, 0,
	0, 666, 0, 669, 0, 0, 0, 0, 0, 683,
	684, 685, 686, 687, 688, 689, 1005, 667, 668, 665,
	671, 670, 680, 681, 673, 674, 675, 676, 677, 678,
	679, 672, 0, 0, 682, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 117, 0, 0, 0, 143, 0, 147, 150,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 197,
	0, 0, 153, 0, 0, 171, 156, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 640, 974, 0, 0, 0, 0, 0, 671, 670,
	680, 681, 673, 674, 675, 676, 677, 678, 679, 672,
	0, 0, 682, 197, 0, 749, 1092, 1093, 1094, 0,
	0, 749, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 169, 182, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 141, 0, 0, 178, 179, 128,
	185, 0, 0, 120, 0, 0, 162, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 0, 0, 172,
	0, 0, 140, 134, 176, 131, 157, 124, 118, 0,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 175, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 1392, 116, 121, 152, 0,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 173,
	0, 174, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 197, 197,
	197, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	1252, 197, 0, 0, 1392, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	316, 300, 258, 319, 233, 248, 331, 250, 251, 288,
	214, 268, 163, 246, 117, 0, 215, 0, 143, 0,
	147, 150, 151, 0, 297, 0, 0, 0, 308, 317,
	265, 0, 236, 207, 243, 208, 262, 133, 232, 302,
	271, 249, 0, 325, 153, 280, 0, 171, 156, 0,
	0, 264, 305, 266, 298, 257, 289, 225, 279, 320,
	247, 285, 0, 0, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 749, 123, 282, 314, 245, 284, 287,
	206, 281, 0, 210, 216, 330, 312, 239, 240, 0,
	0, 0, 0, 0, 0, 0, 263, 267, 294, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	278, 0, 0, 0, 220, 212, 261, 0, 0, 0,
	224, 0, 238, 295, 0, 0, 0, 306, 256, 184,
	313, 254, 253, 321, 291, 0, 234, 235, 244, 303,
	127, 242, 252, 169, 182, 286, 119, 310, 304, 276,
	259, 260, 211, 0, 293, 132, 141, 231, 283, 178,
	179, 128, 185, 217, 327, 120, 387, 326, 162, 386,
	177, 311, 277, 273, 213, 309, 275, 272, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 209,
	0, 172, 318, 332, 140, 134, 176, 131, 157, 124,
	118, 222, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 307, 0, 0, 0, 0, 0, 175,
	221, 139, 228, 226, 229, 299, 227, 269, 270, 322,
	323, 324, 296, 223, 0, 0, 301, 274, 116, 121,
	152, 329, 168, 137, 183, 142, 181, 180, 138, 0,
	0, 0, 0, 0, 241, 328, 292, 290, 315, 0,
	136, 173, 0, 174, 375, 0, 0, 380, 378, 379,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 316, 300,
	258, 319, 233, 248, 331, 250, 251, 288, 214, 268,
	163, 246, 117, 0, 215, 0, 143, 0, 147, 150,
	151, 0, 297, 0, 0, 0, 308, 317, 265, 0,
	236, 207, 243, 208, 262, 133, 232, 302, 271, 249,
	0, 325, 153, 280, 0, 171, 156, 0, 0, 264,
	305, 266, 298, 257, 289, 225, 279, 320, 247, 285,
	0, 0, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 282, 314, 245, 284, 287, 206, 281,
	0, 210, 216, 330, 312, 239, 240, 0, 0, 0,
	0, 0, 0, 0, 263, 267, 294, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 278, 0,
	0, 0, 220, 212, 261, 0, 0, 0, 224, 0,
	238, 295, 0, 0, 0, 306, 256, 184, 313, 254,
	253, 321, 291, 0, 234, 235, 244, 303, 127, 242,
	252, 169, 182, 286, 119, 310, 304, 276, 259, 260,
	211, 0, 293, 132, 141, 231, 283, 178, 179, 128,
	185, 217, 327, 120, 387, 326, 162, 386, 177, 311,
	277, 273, 213, 309, 275, 272, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 209, 0, 172,
	318, 332, 140, 134, 176, 131, 157, 124, 118, 222,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 307, 0, 0, 0, 0, 0, 175, 221, 139,
	228, 226, 229, 299, 227, 269, 270, 322, 323, 324,
	296, 223, 0, 0, 301, 274, 116, 121, 152, 329,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 0, 241, 328, 292, 290, 315, 0, 136, 173,
	0, 174, 0, 0, 0, 380, 378, 379, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 316, 300, 258, 319,
	233, 248, 331, 250, 251, 288, 214, 268, 163, 246,
	117, 0, 215, 0, 143, 0, 147, 150, 151, 0,
	297, 0, 0, 0, 308, 317, 265, 0, 236, 207,
	243, 208, 262, 133, 232, 302, 271, 249, 0, 325,
	153, 280, 0, 171, 156, 0, 0, 264, 305, 266,
	298, 257, 289, 225, 279, 320, 247, 285, 0, 0,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 282, 314, 245, 284, 287, 206, 281, 0, 210,
	216, 330, 312, 239, 240, 0, 0, 0, 0, 0,
	0, 0, 263, 267, 294, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 0, 278, 0, 0, 0,
	220, 212, 261, 0, 0, 0, 224, 0, 238, 295,
	0, 0, 0, 306, 256, 184, 313, 254, 253, 321,
	291, 0, 234, 235, 244, 303, 127, 242, 252, 169,
	182, 286, 119, 310, 304, 276, 259, 260, 211, 0,
	293, 132, 141, 231, 283, 178, 179, 128, 185, 217,
	327, 120, 387, 326, 162, 386, 177, 311, 277, 273,
	213, 309, 275, 272, 149, 135, 144, 166, 154, 167,
	145, 160, 159, 161, 0, 209, 0, 172, 318, 332,
	140, 134, 176, 131, 157, 124, 118, 222, 125, 126,
	130, 129, 0, 148, 155, 158, 164, 165, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 307,
	0, 0, 0, 0, 0, 175, 221, 139, 228, 226,
	229, 299, 227, 269, 270, 322, 323, 324, 296, 223,
	0, 0, 301, 274, 116, 121, 152, 329, 168, 137,
	183, 142, 181, 180, 138, 0, 0, 0, 0, 0,
	241, 328, 292, 290, 315, 0, 136, 173, 0, 174,
	549, 0, 0, 146, 0, 0, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 189, 188,
	190, 122, 191, 192, 316, 300, 258, 319, 233, 248,
	331, 250, 251, 288, 214, 268, 163, 246, 117, 0,
	215, 0, 143, 0, 147, 150, 151, 0, 297, 0,
	0, 0, 308, 317, 265, 0, 236, 207, 243, 208,
	262, 133, 232, 302, 271, 249, 0, 325, 153, 280,
	0, 171, 156, 0, 0, 264, 305, 266, 298, 257,
	289, 225, 279, 320, 247, 285, 0, 0, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 282,
	314, 245, 284, 287, 206, 281, 0, 210, 216, 330,
	312, 239, 240, 0, 0, 0, 0, 0, 0, 0,
	263, 267, 294, 255, 0, 0, 0, 0, 0, 0,
	1420, 0, 237, 0, 278, 0, 0, 0, 220, 212,
	261, 0, 0, 0, 224, 0, 238, 295, 0, 0,
	0, 306, 256, 184, 313, 254, 253, 321, 291, 0,
	234, 235, 244, 303, 127, 242, 252, 169, 182, 286,
	119, 310, 304, 276, 259, 260, 211, 0, 293, 132,
	141, 231, 283, 178, 179, 128, 185, 217, 327, 120,
	218, 326, 162, 219, 177, 311, 277, 273, 213, 309,
	275, 272, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 209, 0, 172, 318, 332, 140, 134,
	176, 131, 157, 124, 118, 222, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 307, 0, 0,
	0, 0, 0, 175, 221, 139, 228, 226, 229, 299,
	227, 269, 270, 322, 323, 324, 296, 223, 0, 0,
	301, 274, 116, 121, 152, 329, 168, 137, 183, 142,
	181, 180, 138, 0, 0, 0, 0, 0, 241, 328,
	292, 290, 315, 0, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 316, 300, 258, 319, 233, 248, 331, 250,
	251, 288, 214, 268, 163, 246, 117, 0, 215, 0,
	143, 0, 147, 150, 151, 0, 297, 0, 0, 0,
	308, 317, 265, 0, 236, 207, 243, 208, 262, 133,
	232, 302, 271, 249, 0, 325, 153, 280, 0, 171,
	156, 0, 0, 264, 305, 266, 298, 257, 289, 225,
	279, 320, 247, 285, 0, 0, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 282, 314, 245,
	284, 287, 206, 281, 0, 210, 216, 330, 312, 239,
	240, 0, 0, 0, 0, 0, 0, 0, 263, 267,
	294, 255, 0, 0, 0, 0, 0, 0, 1282, 0,
	237, 0, 278, 0, 0, 0, 220, 212, 261, 0,
	0, 0, 224, 0, 238, 295, 0, 0, 0, 306,
	256, 184, 313, 254, 253, 321, 291, 0, 234, 235,
	244, 303, 127, 242, 252, 169, 182, 286, 119, 310,
	304, 276, 259, 260, 211, 0, 293, 132, 141, 231,
	283, 178, 179, 128, 185, 217, 327, 120, 218, 326,
	162, 219, 177, 311, 277, 273, 213, 309, 275, 272,
	149, 135, 144, 166, 154, 167, 145, 160, 159, 161,
	0, 209, 0, 172, 318, 332, 140, 134, 176, 131,
	157, 124, 118, 222, 125, 126, 130, 129, 0, 148,
	155, 158, 164, 165, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 307, 0, 0, 0, 0,
	0, 175, 221, 139, 228, 226, 229, 299, 227, 269,
	270, 322, 323, 324, 296, 223, 0, 0, 301, 274,
	116, 121, 152, 329, 168, 137, 183, 142, 181, 180,
	138, 0, 0, 0, 0, 0, 241, 328, 292, 290,
	315, 0, 136, 173, 0, 174, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 189, 188, 190, 122, 191, 192,
	316, 300, 258, 319, 233, 248, 331, 250, 251, 288,
	214, 268, 163, 246, 117, 0, 215, 0, 143, 0,
	147, 150, 151, 0, 297, 0, 0, 0, 308, 317,
	265, 0, 236, 207, 243, 208, 262, 133, 232, 302,
	271, 249, 0, 325, 153, 280, 0, 171, 156, 0,
	0, 264, 305, 266, 298, 257, 289, 225, 279, 320,
	247, 285, 0, 0, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 282, 314, 245, 284, 287,
	206, 281, 0, 210, 216, 330, 312, 239, 240, 0,
	0, 0, 0, 0, 0, 0, 263, 267, 294, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	278, 0, 0, 0, 220, 212, 261, 0, 0, 0,
	224, 0, 238, 295, 0, 0, 0, 306, 256, 184,
	313, 254, 253, 321, 291, 0, 234, 235, 244, 303,
	127, 242, 252, 169, 182, 286, 119, 310, 304, 276,
	259, 260, 211, 0, 293, 132, 141, 231, 283, 178,
	179, 128, 185, 217, 327, 120, 387, 326, 162, 386,
	177, 311, 277, 273, 213, 309, 275, 272, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 209,
	0, 172, 318, 332, 140, 134, 176, 131, 157, 124,
	118, 222, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 307, 0, 0, 0, 0, 0, 175,
	221, 139, 228, 226, 229, 299, 227, 269, 270, 322,
	323, 324, 296, 223, 0, 0, 301, 274, 116, 121,
	152, 329, 168, 137, 183, 142, 181, 180, 138, 0,
	0, 0, 0, 0, 241, 328, 292, 290, 315, 0,
	136, 173, 0, 174, 0, 0, 0, 146, 0, 0,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 316, 300,
	258, 319, 233, 248, 331, 250, 251, 288, 214, 268,
	163, 246, 117, 0, 215, 0, 143, 0, 147, 150,
	151, 0, 297, 0, 0, 0, 308, 317, 265, 0,
	236, 207, 243, 208, 262, 133, 232, 302, 271, 249,
	0, 325, 153, 280, 0, 171, 156, 0, 0, 264,
	305, 266, 298, 257, 289, 225, 279, 320, 247, 285,
	0, 0, 0, 202, 0, 203, 0, 0, 0, 0,
	0, 0, 123, 282, 314, 245, 284, 287, 206, 281,
	0, 210, 216, 330, 312, 239, 240, 0, 0, 0,
	0, 0, 0, 0, 263, 267, 294, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 278, 0,
	0, 0, 220, 212, 261, 0, 0, 0, 224, 0,
	238, 295, 0, 0, 0, 306, 256, 184, 313, 254,
	253, 321, 291, 0, 234, 235, 244, 303, 127, 242,
	252, 169, 182, 286, 119, 310, 304, 276, 259, 260,
	211, 0, 293, 132, 141, 231, 283, 178, 179, 128,
	185, 217, 327, 120, 218, 326, 162, 219, 177, 311,
	277, 273, 213, 309, 275, 272, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 209, 0, 172,
	318, 332, 140, 134, 176, 131, 157, 124, 118, 222,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 307, 0, 0, 0, 0, 0, 175, 221, 139,
	228, 226, 229, 299, 227, 269, 270, 322, 323, 324,
	296, 223, 0, 0, 301, 274, 116, 121, 152, 329,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 0, 241, 328, 292, 290, 315, 0, 136, 173,
	0, 174, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 316, 300, 258, 319,
	233, 248, 331, 250, 251, 288, 214, 268, 163, 246,
	117, 0, 215, 0, 143, 0, 147, 150, 151, 0,
	297, 0, 0, 0, 308, 317, 265, 0, 236, 207,
	243, 208, 262, 133, 232, 302, 271, 249, 0, 325,
	153, 280, 0, 171, 156, 0, 0, 264, 305, 266,
	298, 257, 289, 225, 279, 320, 247, 285, 0, 0,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 282, 314, 245, 284, 287, 206, 281, 0, 210,
	216, 330, 312, 239, 240, 0, 0, 0, 0, 0,
	0, 0, 263, 267, 294, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 0, 278, 0, 0, 0,
	220, 212, 261, 0, 0, 0, 224, 0, 238, 295,
	0, 0, 0, 306, 256, 184, 313, 254, 253, 321,
	291, 0, 234, 235, 244, 303, 127, 242, 252, 169,
	182, 286, 119, 310, 304, 276, 259, 260, 211, 0,
	293, 132, 141, 231, 283, 178, 179, 128, 185, 217,
	327, 120, 218, 326, 162, 219, 177, 311, 277, 273,
	213, 309, 275, 272, 149, 135, 144, 166, 154, 167,
	145, 160, 159, 161, 0, 209, 0, 172, 318, 332,
	140, 134, 176, 131, 157, 124, 118, 222, 125, 126,
	130, 129, 0, 148, 155, 158, 164, 165, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 307,
	0, 0, 0, 0, 0, 175, 221, 139, 228, 226,
	229, 299, 227, 269, 270, 322, 323, 324, 296, 223,
	0, 0, 301, 274, 116, 121, 152, 329, 168, 137,
	183, 142, 181, 180, 138, 0, 0, 0, 0, 0,
	241, 328, 292, 290, 315, 0, 136, 173, 0, 174,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 189, 188,
	190, 122, 191, 192, 316, 300, 258, 319, 233, 248,
	331, 250, 251, 288, 214, 268, 163, 246, 117, 0,
	215, 0, 143, 0, 147, 150, 151, 0, 297, 0,
	0, 0, 308, 317, 265, 0, 236, 207, 243, 208,
	262, 133, 232, 302, 271, 249, 0, 325, 153, 280,
	0, 171, 156, 0, 0, 264, 305, 266, 298, 257,
	289, 225, 279, 320, 247, 285, 0, 0, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 282,
	314, 245, 284, 287, 206, 281, 0, 210, 216, 330,
	312, 239, 240, 0, 0, 0, 0, 0, 0, 0,
	263, 267, 294, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 0, 278, 0, 0, 0, 220, 212,
	261, 0, 0, 0, 224, 0, 238, 295, 0, 0,
	0, 306, 256, 184, 313, 254, 253, 321, 291, 0,
	234, 235, 244, 303, 127, 242, 252, 169, 182, 286,
	119, 310, 304, 276, 259, 260, 211, 0, 293, 132,
	141, 231, 283, 178, 179, 128, 185, 217, 327, 120,
	218, 326, 162, 219, 177, 311, 277, 273, 213, 309,
	275, 272, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 209, 0, 172, 318, 332, 140, 134,
	176, 131, 157, 124, 118, 222, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 307, 0, 0,
	0, 0, 0, 175, 221, 139, 228, 226, 229, 299,
	227, 269, 270, 322, 323, 324, 296, 223, 0, 0,
	301, 274, 116, 121, 152, 329, 168, 137, 183, 142,
	181, 180, 138, 0, 0, 0, 0, 0, 241, 328,
	292, 290, 315, 0, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 316, 300, 258, 319, 233, 248, 331, 250,
	251, 288, 214, 268, 163, 246, 117, 0, 215, 0,
	143, 0, 147, 150, 151, 0, 297, 0, 0, 0,
	308, 317, 265, 0, 236, 207, 243, 208, 262, 133,
	232, 302, 271, 249, 0, 325, 153, 280, 0, 171,
	156, 0, 0, 264, 305, 266, 298, 257, 289, 225,
	279, 320, 247, 285, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 282, 314, 245,
	284, 287, 206, 281, 0, 210, 216, 330, 312, 239,
	240, 0, 0, 0, 0, 0, 0, 0, 263, 267,
	294, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 0, 278, 0, 0, 0, 220, 212, 261, 0,
	0, 0, 224, 0, 238, 295, 0, 0, 0, 306,
	256, 184, 313, 254, 253, 321, 291, 0, 234, 235,
	244, 303, 127, 242, 252, 169, 182, 286, 119, 310,
	304, 276, 259, 260, 211, 0, 293, 132, 141, 231,
	283, 178, 179, 128, 185, 217, 327, 120, 218, 326,
	162, 219, 177, 311, 277, 273, 213, 309, 275, 272,
	149, 135, 144, 166, 154, 167, 145, 160, 159, 161,
	0, 209, 0, 172, 318, 332, 140, 134, 176, 131,
	157, 124, 118, 222, 125, 126, 130, 129, 0, 148,
	155, 158, 164, 165, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 307, 0, 0, 0, 0,
	0, 175, 221, 139, 228, 226, 229, 299, 227, 269,
	270, 322, 323, 324, 296, 223, 0, 0, 301, 274,
	116, 121, 152, 329, 168, 137, 183, 142, 181, 180,
	138, 0, 0, 0, 0, 0, 241, 328, 292, 290,
	315, 0, 136, 173, 0, 174, 0, 0, 0, 146,
	163, 0, 117, 0, 0, 0, 143, 0, 147, 150,
	151, 0, 186, 187, 189, 188, 190, 122, 191, 192,
	969, 0, 477, 0, 0, 133, 476, 0, 0, 0,
	0, 513, 153, 0, 0, 171, 156, 0, 0, 0,
	0, 506, 507, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 526, 494, 493, 495, 496, 497, 498,
	0, 0, 123, 499, 500, 501, 0, 0, 0, 474,
	487, 0, 512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 484, 485, 972, 0, 0, 0, 524, 0,
	486, 0, 0, 483, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 169, 182, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 141, 0, 0, 178, 179, 128,
	185, 0, 0, 120, 0, 0, 162, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 0, 0, 172,
	0, 0, 140, 134, 176, 131, 157, 124, 118, 0,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 139,
	514, 520, 523, 0, 521, 518, 519, 517, 516, 515,
	525, 508, 509, 511, 0, 510, 116, 121, 152, 0,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 173,
	0, 174, 0, 0, 163, 146, 117, 0, 0, 0,
	143, 0, 147, 150, 151, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 477, 0, 0, 133,
	476, 0, 0, 0, 0, 513, 153, 0, 0, 171,
	156, 0, 0, 0, 0, 506, 507, 0, 0, 0,
	0, 0, 0, 762, 57, 0, 0, 526, 494, 493,
	495, 496, 497, 498, 0, 0, 123, 499, 500, 501,
	763, 0, 0, 474, 487, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 484, 485, 0, 0,
	0, 0, 524, 0, 486, 0, 0, 483, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 169, 182, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 141, 0,
	0, 178, 179, 128, 185, 0, 0, 120, 0, 0,
	162, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	149, 135, 144, 166, 154, 167, 145, 160, 159, 161,
	0, 0, 0, 172, 0, 0, 140, 134, 176, 131,
	157, 124, 118, 0, 125, 126, 130, 129, 0, 148,
	155, 158, 164, 165, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 139, 514, 520, 523, 0, 521, 518,
	519, 517, 516, 515, 525, 508, 509, 511, 0, 510,
	116, 121, 152, 0, 168, 137, 183, 142, 181, 180,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 173, 0, 174, 0, 0, 163, 146,
	117, 0, 0, 0, 143, 0, 147, 150, 151, 0,
	0, 0, 186, 187, 189, 188, 190, 122, 191, 192,
	477, 0, 0, 133, 476, 0, 0, 0, 0, 513,
	153, 0, 0, 171, 156, 0, 0, 0, 0, 506,
	507, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	468, 526, 494, 493, 495, 496, 497, 498, 0, 0,
	123, 499, 500, 501, 0, 0, 0, 474, 487, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	484, 485, 0, 0, 0, 0, 524, 0, 486, 0,
	0, 483, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 169,
	182, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 141, 0, 0, 178, 179, 128, 185, 0,
	0, 120, 0, 0, 162, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 149, 135, 144, 166, 154, 167,
	145, 160, 159, 161, 0, 0, 0, 172, 0, 0,
	140, 134, 176, 131, 157, 124, 118, 0, 125, 126,
	130, 129, 0, 148, 155, 158, 164, 165, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 139, 514, 520,
	523, 0, 521, 518, 519, 517, 516, 515, 525, 508,
	509, 511, 0, 510, 116, 121, 152, 0, 168, 137,
	183, 142, 181, 180, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 173, 0, 174,
	0, 0, 163, 146, 117, 0, 0, 0, 143, 0,
	147, 150, 151, 0, 0, 0, 186, 187, 189, 188,
	190, 122, 191, 192, 477, 0, 0, 133, 476, 0,
	0, 0, 0, 513, 153, 0, 0, 171, 156, 0,
	0, 0, 0, 506, 507, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 526, 494, 493, 495, 496,
	497, 498, 0, 0, 123, 499, 500, 501, 0, 0,
	0, 474, 487, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 485, 972, 0, 0, 0,
	524, 0, 486, 0, 0, 483, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 169, 182, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 141, 0, 0, 178,
	179, 128, 185, 0, 0, 120, 0, 0, 162, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 0,
	0, 172, 0, 0, 140, 134, 176, 131, 157, 124,
	118, 0, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 139, 514, 520, 523, 0, 521, 518, 519, 517,
	516, 515, 525, 508, 509, 511, 0, 510, 116, 121,
	152, 0, 168, 137, 183, 142, 181, 180, 138, 0,
	0, 0, 0, 0, 0, 27, 0, 0, 0, 0,
	136, 173, 0, 174, 0, 0, 163, 146, 117, 0,
	0, 0, 143, 0, 147, 150, 151, 0, 0, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 477, 0,
	0, 133, 476, 0, 0, 0, 0, 513, 153, 0,
	0, 171, 156, 0, 0, 0, 0, 506, 507, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 526,
	494, 493, 495, 496, 497, 498, 0, 0, 123, 499,
	500, 501, 0, 0, 0, 474, 487, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 485,
	0, 0, 0, 0, 524, 0, 486, 0, 0, 483,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 169, 182, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	141, 0, 0, 178, 179, 128, 185, 0, 0, 120,
	0, 0, 162, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 0, 0, 172, 0, 0, 140, 134,
	176, 131, 157, 124, 118, 0, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 139, 514, 520, 523, 0,
	521, 518, 519, 517, 516, 515, 525, 508, 509, 511,
	0, 510, 116, 121, 152, 0, 168, 137, 183, 142,
	181, 180, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 173, 0, 174, 0, 0,
	163, 146, 117, 0, 0, 0, 143, 0, 147, 150,
	151, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 477, 0, 0, 133, 476, 0, 0, 0,
	0, 513, 153, 0, 0, 171, 156, 0, 0, 0,
	0, 506, 507, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 526, 494, 493, 495, 496, 497, 498,
	0, 0, 123, 499, 500, 501, 0, 0, 0, 474,
	487, 0, 512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 484, 485, 0, 0, 0, 0, 524, 0,
	486, 0, 0, 483, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 169, 182, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 141, 0, 0, 178, 179, 128,
	185, 0, 0, 120, 0, 0, 162, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 0, 0, 172,
	0, 0, 140, 134, 176, 131, 157, 124, 118, 0,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 139,
	514, 520, 523, 0, 521, 518, 519, 517, 516, 515,
	525, 508, 509, 511, 0, 510, 116, 121, 152, 0,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 173,
	0, 174, 163, 0, 117, 146, 0, 0, 143, 0,
	147, 150, 151, 0, 0, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 0, 133, 0, 0,
	0, 0, 0, 513, 153, 0, 0, 171, 156, 0,
	0, 0, 0, 506, 507, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 526, 494, 493, 495, 496,
	497, 498, 0, 0, 123, 499, 500, 501, 0, 0,
	0, 0, 487, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 485, 0, 0, 0, 0,
	524, 0, 486, 0, 0, 483, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 169, 182, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 141, 0, 0, 178,
	179, 128, 185, 0, 0, 120, 0, 0, 162, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 0,
	0, 172, 0, 0, 140, 134, 176, 131, 157, 124,
	118, 0, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 139, 514, 520, 523, 0, 521, 518, 519, 517,
	516, 515, 525, 508, 509, 511, 0, 510, 116, 121,
	152, 0, 168, 137, 183, 142, 181, 180, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 173, 0, 174, 0, 0, 0, 146, 163, 0,
	117, 0, 0, 0, 143, 0, 147, 150, 151, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 0, 1145,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 171, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 0, 1147, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 659, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 169,
	182, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 141, 0, 0, 178, 179, 128, 185, 0,
	0, 120, 0, 0, 162, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 149, 135, 144, 166, 154, 167,
	145, 160, 159, 161, 0, 0, 0, 172, 0, 0,
	140, 134, 176, 131, 157, 124, 118, 0, 125, 126,
	130, 129, 0, 148, 155, 158, 164, 165, 170, 0,
	0, 0, 0, 163, 0, 117, 0, 0, 829, 828,
	0, 147, 150, 151, 0, 0, 0, 827, 0, 0,
	0, 826, 0, 0, 0, 175, 0, 139, 133, 0,
	0, 0, 0, 0, 0, 153, 0, 0, 171, 156,
	0, 0, 0, 0, 116, 121, 152, 0, 168, 137,
	183, 142, 181, 180, 138, 0, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 136, 173, 0, 174,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 189, 188,
	190, 122, 191, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 169, 182, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 141, 0, 0,
	178, 179, 128, 185, 0, 0, 120, 0, 0, 162,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 149,
	135, 144, 166, 154, 167, 145, 160, 159, 161, 0,
	0, 0, 172, 0, 0, 140, 134, 176, 131, 157,
	124, 118, 0, 125, 126, 130, 129, 0, 148, 155,
	158, 164, 165, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	121, 152, 0, 168, 137, 183, 142, 181, 180, 138,
	0, 0, 0, 0, 27, 0, 0, 0, 0, 0,
	0, 136, 173, 0, 174, 163, 0, 117, 146, 0,
	0, 143, 0, 147, 150, 151, 0, 0, 0, 0,
	0, 186, 187, 189, 188, 190, 122, 191, 192, 0,
	133, 0, 0, 0, 0, 0, 0, 153, 0, 0,
	171, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 169, 182, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 141,
	0, 0, 178, 179, 128, 185, 0, 0, 120, 0,
	0, 162, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 149, 135, 144, 166, 154, 167, 145, 160, 159,
	161, 0, 0, 0, 172, 0, 0, 140, 134, 176,
	131, 157, 124, 118, 0, 125, 126, 130, 129, 0,
	148, 155, 158, 164, 165, 170, 0, 0, 0, 0,
	163, 0, 117, 0, 0, 0, 143, 0, 147, 150,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1391, 175, 0, 139, 133, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 171, 156, 0, 0, 0,
	0, 116, 121, 152, 0, 168, 137, 183, 142, 181,
	180, 138, 0, 114, 0, 1393, 0, 0, 0, 0,
	0, 0, 123, 136, 173, 0, 174, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 189, 188, 190, 122, 191,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 169, 182, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 141, 0, 0, 178, 179, 128,
	185, 0, 0, 120, 0, 0, 162, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 149, 135, 144, 166,
	154, 167, 145, 160, 159, 161, 0, 0, 0, 172,
	0, 0, 140, 134, 176, 131, 157, 124, 118, 0,
	125, 126, 130, 129, 0, 148, 155, 158, 164, 165,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 121, 152, 0,
	168, 137, 183, 142, 181, 180, 138, 0, 0, 0,
	0, 27, 0, 0, 0, 0, 0, 0, 136, 173,
	0, 174, 163, 0, 117, 146, 0, 0, 143, 0,
	147, 150, 151, 0, 0, 0, 0, 0, 186, 187,
	189, 188, 190, 122, 191, 192, 0, 133, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 171, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 169, 182, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 141, 0, 0, 178,
	179, 128, 185, 0, 0, 120, 0, 0, 162, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 0,
	0, 172, 0, 0, 140, 134, 176, 131, 157, 124,
	118, 0, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 163, 0, 117,
	0, 0, 0, 143, 0, 147, 150, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 139, 133, 0, 0, 0, 0, 0, 0, 153,
	0, 0, 171, 156, 0, 0, 0, 0, 116, 121,
	152, 0, 168, 137, 183, 142, 181, 180, 138, 0,
	388, 0, 0, 737, 0, 0, 738, 0, 0, 123,
	136, 173, 0, 174, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 169, 182,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 141, 0, 0, 178, 179, 128, 185, 0, 0,
	120, 0, 0, 162, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 149, 135, 144, 166, 154, 167, 145,
	160, 159, 161, 0, 0, 0, 172, 0, 0, 140,
	134, 176, 131, 157, 124, 118, 0, 125, 126, 130,
	129, 0, 148, 155, 158, 164, 165, 170, 0, 0,
	0, 0, 163, 0, 117, 0, 0, 0, 143, 0,
	147, 150, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 139, 133, 554, 0,
	0, 0, 0, 0, 153, 0, 0, 171, 156, 0,
	0, 0, 0, 116, 121, 152, 0, 168, 137, 183,
	142, 181, 180, 138, 0, 388, 0, 553, 0, 0,
	0, 0, 0, 0, 123, 136, 173, 0, 174, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 189, 188, 190,
	122, 191, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 169, 182, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 141, 0, 0, 178,
	179, 128, 185, 0, 0, 120, 0, 0, 162, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 149, 135,
	144, 166, 154, 167, 145, 160, 159, 161, 0, 0,
	0, 172, 0, 0, 140, 134, 176, 131, 157, 124,
	118, 0, 125, 126, 130, 129, 0, 148, 155, 158,
	164, 165, 170, 0, 0, 0, 0, 163, 0, 117,
	0, 0, 0, 143, 0, 147, 150, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 139, 133, 0, 0, 0, 0, 0, 0, 153,
	0, 0, 171, 156, 0, 0, 0, 0, 116, 121,
	152, 0, 168, 137, 183, 142, 181, 180, 138, 0,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	136, 173, 0, 174, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 189, 188, 190, 122, 191, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 169, 182,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 141, 0, 0, 178, 179, 128, 185, 0, 0,
	120, 0, 0, 162, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 149, 135, 144, 166, 154, 167, 145,
	160, 159, 161, 0, 0, 0, 172, 0, 0, 140,
	134, 176, 131, 157, 124, 118, 0, 125, 126, 130,
	129, 0, 148, 155, 158, 164, 165, 170, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 117, 0, 0,
	0, 143, 0, 147, 150, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 139, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 153, 0, 0,
	171, 156, 0, 116, 121, 152, 0, 168, 137, 183,
	198, 181, 180, 199, 0, 200, 0, 0, 114, 0,
	1393, 0, 0, 0, 0, 136, 173, 123, 174, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 189, 188, 190,
	122, 191, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 169, 182, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 141,
	0, 0, 178, 179, 128, 185, 0, 0, 120, 0,
	0, 162, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 149, 135, 144, 166, 154, 167, 145, 160, 159,
	161, 0, 0, 0, 172, 0, 0, 140, 134, 176,
	131, 157, 124, 118, 0, 125, 126, 130, 129, 0,
	148, 155, 158, 164, 165, 170, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 117, 0, 0, 0, 143,
	0, 147, 150, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 139, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 153, 0, 0, 171, 156,
	0, 116, 121, 152, 0, 168, 137, 183, 142, 181,
	180, 138, 0, 57, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 136, 173, 123, 174, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 189, 188, 190, 122, 191,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 169, 182, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 141, 0, 0,
	178, 179, 128, 185, 0, 0, 120, 0, 0, 162,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 149,
	135, 144, 166, 154, 167, 145, 160, 159, 161, 0,
	0, 0, 172, 0, 0, 140, 134, 176, 131, 157,
	124, 118, 0, 125, 126, 130, 129, 0, 148, 155,
	158, 164, 165, 170, 0, 0, 0, 0, 163, 0,
	117, 0, 0, 0, 143, 0, 147, 150, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 139, 133, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 171, 156, 0, 0, 0, 0, 116,
	121, 152, 0, 168, 137, 183, 142, 181, 180, 138,
	0, 388, 0, 1147, 0, 0, 0, 0, 0, 0,
	123, 136, 173, 0, 174, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 189, 188, 190, 122, 191, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 169,
	182, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 141, 0, 0, 178, 179, 128, 185, 0,
	0, 120, 0, 0, 162, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 149, 135, 144, 166, 154, 167,
	145, 160, 159, 161, 0, 0, 0, 172, 0, 0,
	140, 134, 176, 131, 157, 124, 118, 0, 125, 126,
	130, 129, 0, 148, 155, 158, 164, 165, 170, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 117, 0,
	0, 0, 143, 0, 147, 150, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 139, 0, 0,
	742, 133, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 171, 156, 0, 116, 121, 152, 0, 168, 137,
	183, 142, 181, 180, 138, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 136, 173, 123, 174,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 189, 188,
	190, 122, 191, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 169, 182, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	141, 0, 0, 178, 179, 128, 185, 0, 0, 120,
	0, 0, 162, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 0, 0, 172, 0, 0, 140, 134,
	176, 131, 157, 124, 118, 0, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 163, 0, 117, 0, 0, 0, 143, 0, 147,
	150, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 139, 133, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 171, 156, 0, 0,
	0, 0, 116, 121, 152, 0, 168, 137, 183, 142,
	181, 180, 138, 0, 398, 0, 443, 0, 0, 0,
	0, 0, 0, 123, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 169, 182, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 141, 0, 0, 178, 179,
	128, 185, 0, 0, 120, 0, 0, 162, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 149, 135, 144,
	166, 154, 167, 145, 160, 159, 161, 0, 0, 0,
	172, 0, 0, 140, 134, 176, 131, 157, 124, 118,
	0, 125, 126, 130, 129, 0, 148, 155, 158, 164,
	165, 170, 0, 0, 0, 0, 163, 0, 117, 0,
	0, 0, 143, 0, 147, 150, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	139, 133, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 171, 156, 0, 0, 0, 0, 116, 121, 152,
	0, 168, 137, 183, 142, 181, 180, 138, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 136,
	173, 0, 174, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 189, 188, 190, 122, 191, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 169, 182, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	141, 0, 0, 178, 179, 128, 185, 0, 0, 120,
	0, 0, 162, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 0, 0, 172, 0, 0, 140, 134,
	176, 131, 157, 124, 118, 0, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 163, 0, 117, 0, 0, 0, 143, 0, 147,
	150, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 139, 133, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 171, 156, 0, 0,
	0, 0, 116, 121, 152, 0, 168, 137, 183, 142,
	181, 180, 138, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 169, 182, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 141, 0, 0, 178, 179,
	128, 185, 0, 0, 120, 0, 0, 162, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 149, 135, 144,
	166, 154, 167, 145, 160, 159, 161, 0, 0, 0,
	172, 0, 0, 140, 134, 176, 131, 157, 124, 118,
	0, 125, 126, 130, 129, 0, 148, 155, 158, 164,
	165, 170, 0, 0, 0, 0, 163, 0, 117, 0,
	0, 0, 143, 0, 147, 150, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	139, 133, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 171, 156, 0, 0, 0, 0, 116, 121, 152,
	0, 168, 137, 183, 142, 181, 180, 138, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 136,
	173, 0, 174, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 189, 188, 190, 122, 191, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 169, 182, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	141, 0, 0, 178, 179, 128, 185, 0, 0, 120,
	0, 0, 162, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 0, 0, 172, 0, 0, 140, 134,
	176, 131, 157, 124, 118, 0, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 163, 0, 117, 0, 0, 0, 143, 0, 147,
	150, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 139, 133, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 171, 156, 0, 0,
	0, 0, 116, 121, 152, 0, 168, 137, 183, 142,
	181, 180, 138, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 169, 182, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 141, 0, 0, 178, 179,
	128, 185, 0, 0, 120, 0, 0, 162, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 149, 135, 144,
	166, 154, 167, 145, 160, 159, 161, 0, 0, 0,
	172, 0, 0, 140, 134, 176, 131, 157, 124, 118,
	0, 125, 126, 130, 129, 0, 148, 155, 158, 164,
	165, 170, 0, 0, 0, 0, 163, 0, 117, 0,
	0, 0, 143, 0, 147, 150, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	139, 133, 0, 0, 0, 0, 0, 0, 153, 0,
	0, 171, 156, 0, 0, 0, 0, 116, 121, 152,
	0, 168, 137, 183, 142, 181, 180, 138, 0, 1230,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 136,
	173, 0, 174, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 189, 188, 190, 122, 191, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 169, 182, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	141, 0, 0, 178, 179, 128, 185, 0, 0, 120,
	0, 0, 162, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 149, 135, 144, 166, 154, 167, 145, 160,
	159, 161, 0, 0, 0, 172, 0, 0, 140, 134,
	176, 131, 157, 124, 118, 0, 125, 126, 130, 129,
	0, 148, 155, 158, 164, 165, 170, 0, 0, 0,
	0, 163, 0, 117, 0, 0, 0, 143, 0, 147,
	150, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 139, 133, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 171, 156, 0, 0,
	0, 0, 116, 121, 152, 0, 168, 137, 183, 142,
	181, 180, 138, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 136, 173, 0, 174, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 189, 188, 190, 122,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 169, 182, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 141, 0, 0, 178, 179,
	128, 185, 0, 0, 120, 0, 0, 162, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 149, 135, 144,
	166, 154, 167, 145, 160, 159, 161, 0, 0, 0,
	172, 0, 0, 140, 134, 176, 131, 157, 124, 118,
	0, 125, 126, 130, 129, 0, 148, 155, 158, 164,
	165, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 121, 152,
	0, 168, 137, 183, 142, 181, 180, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	173, 0, 174, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 189, 188, 190, 122, 191, 192,
}
var yyPact = [...]int{

	138, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1037, 1070, -1000, -1000, -1000,
	-1000, -1000, -1000, 789, 196, 70, 141, 218, 214, 1549,
	213, 10674, -1000, 8820, 4133, -43, -1000, -160, -1000, -1000,
	-157, -1000, -1000, 788, -1000, -1000, -1000, -1000, -1000, -1000,
	1002, 1028, 828, 951, 875, -1000, 21, 24, 10674, 1050,
	2285, -120, 10264, 140, 204, 201, 198, 140, -1000, -1000,
	-1000, 207, 11084, -1000, 206, 696, 134, -1000, 10674, -1000,
	10674, -48, 44, -1000, -1000, -30, 393, -1000, -1000, -1000,
	-69, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10674, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9854, 205, 183, 246, 355, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 530, -1000, -1000, -1000, -1000, -1000, -1000,
	768, 768, -1000, 10674, -1000, -1000, -187, -1000, -1000, 429,
	925, 6703, 6703, 1037, -1000, 788, -1000, -1000, -1000, 900,
	-1000, -1000, 385, 132, -1000, -1000, -1000, 132, -1000, -1000,
	932, 10674, 740, -1000, -1000, -175, 2901, -1000, -1000, -1000,
	-1000, 353, 8615, 8615, -1000, -1000, -1000, 931, -1000, -1000,
	-1000, -1000, -1000, 1026, 1024, 704, -1000, 1481, -1000, -1000,
	11084, 370, 693, 691, 689, 10674, 10674, 72, -1000, -1000,
	-1000, 134, 814, 11084, 940, -1000, -1000, 1047, 10674, 10674,
	-1000, -1000, 393, 393, -1000, -1000, 10674, -1000, -1000, -1000,
	-1000, -1000, 393, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -6, -1000, -1000, -1000, -1000,
	-1000, -1000, 350, 5057, -46, -1000, -1000, -1000, 6703, -1000,
	-1000, 282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1066, 289, 483, -1000, 6703, 1815, 768, 768, -1000, -1000,
	231, -1000, -1000, 6975, 6975, 6975, 6975, 6975, 6975, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 768, 242, -1000, 6429, 768, 768, 768, 768,
	768, 768, 6703, 768, 768, 768, 768, 768, 768, 768,
	768, 768, 768, 768, 768, 768, -1000, -1000, 731, -1000,
	301, 1002, 429, 875, 8410, 829, -1000, -1000, 9649, 9649,
	10469, 1044, 2593, -1000, 730, 729, -171, -181, -1000, -175,
	5607, -1000, -1000, -1000, -1000, 269, -1000, 768, 106, 84,
	7456, 914, 34, -1000, -1000, -1000, 770, -1000, 770, 770,
	770, 770, 78, 78, 78, 78, -1000, -1000, -1000, -1000,
	-1000, 793, 792, -1000, 770, 770, 770, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 791, 791, 791, 784, 784,
	72, 939, 813, 811, 800, -1000, 1609, -1000, 72, -1000,
	156, -193, -1000, 10674, 10674, -1000, -1000, 1002, -66, -1000,
	-1000, 394, 10674, 10674, 393, -1000, -1000, 529, -128, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 681, 453, -1000,
	10674, -1000, -1000, -1000, -1000, -1000, -1000, 881, 6703, 6703,
	491, 6703, 6703, 311, 6975, 411, 388, 6975, 6975, 6975,
	6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975,
	6975, 6975, 487, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 663, -1000, 788, 636, 636, 268, 268, 268, 268,
	268, 1933, 5333, 4749, 429, 6429, 6155, 6155, 6703, 6703,
	6155, 953, 326, 453, 10059, -1000, 429, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6155, 6155, 6155, 6155, 6703, -1000,
	-1000, -1000, 925, -1000, 953, 1022, -1000, 891, 888, 6155,
	-1000, -139, 10674, -1000, -139, 774, -1000, 337, -1000, 239,
	1037, 6703, -1000, 3825, -1000, -173, -1000, -168, -190, -1000,
	-1000, -1000, -1000, -1000, 453, -1000, 634, 10264, 768, 768,
	-1000, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 324, 324, 102,
	324, 324, 324, 324, 324, -13, -15, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	-1000, -1000, 591, 288, 226, -1000, -1000, -1000, -1000, 967,
	-1000, 914, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 381, 401, -1000, 961, -1000, 957,
	580, 1055, 439, 175, 208, 9, -1000, -1000, 524, 78,
	78, -1000, -1000, -1000, 903, -1000, -1000, -1000, 578, 578,
	-1000, -1000, -1000, -1000, 522, -1000, -1000, -1000, 513, -1000,
	-1000, -1000, 10674, 10674, 10674, -1000, 297, 329, 148, 119,
	116, 115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 324, 324, -1000, -1000, 901, 898, 324, 685, -1000,
	936, -1000, 577, -1000, -1000, -1000, 575, 6703, -1000, 393,
	1044, -1000, -1000, 191, 6703, -1000, -1000, 879, 311, 323,
	-1000, -1000, 466, -1000, -1000, 453, 453, 1641, -1000, -1000,
	-1000, -1000, 411, 6975, 6975, 6975, 557, 1641, 1590, 1184,
	1214, 268, 322, 322, 257, 257, 257, 257, 257, 759,
	759, -1000, -1000, -1000, 429, -1000, -1000, -1000, 429, 6155,
	727, -1000, -1000, 7251, 238, 768, 236, -1000, -1000, 429,
	671, 671, 258, 468, 671, 6155, 368, -1000, 6703, 429,
	-1000, 671, 429, 671, 671, -1000, -1000, 10674, -1000, -1000,
	-1000, -1000, 765, 723, 768, -1000, 712, 1037, 10469, 6703,
	4749, 1002, 453, -1000, -1000, -1000, -176, -186, -1000, -1000,
	429, 10264, 10264, -1000, 573, -1000, 439, 324, 324, 507,
	505, 503, 572, 571, 324, 324, 501, 570, 630, 490,
	489, 476, 540, 563, 688, 539, 523, 512, 10879, 128,
	-1000, 591, -1000, 956, 288, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 790, -1000, -1000, -1000, -1000, -1000,
	-1000, -74, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 686, -1000, -1000, 259, 679, -1000, 677,
	724, 673, 768, 768, 768, -1000, 10674, -1000, -1000, -1000,
	628, 77, 789, 619, 10264, 586, 319, -1000, -1000, 428,
	-1000, 10674, -1000, -1000, -1000, 997, 895, 324, 324, -1000,
	-1000, -1000, 453, 394, -1000, -1000, 453, -1000, -1000, -1000,
	-1000, -1000, -1000, 557, 1641, 853, -1000, 6975, 6975, -1000,
	-1000, 671, 6155, -1000, -1000, 9441, -1000, -1000, 3517, 6155,
	4441, -1000, -1000, -1000, 425, 487, 425, -95, 764, 362,
	-1000, 6703, 366, -1000, -1000, -1000, -1000, -1000, -1000, 1044,
	9236, 796, 10469, 768, -1000, 8205, 10264, -1000, 10469, 1002,
	-1000, 453, -1000, -1000, -1000, -1000, -1000, -1000, 429, 429,
	-1000, -1000, 439, 439, -1000, -1000, -1000, -1000, -1000, 560,
	559, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 787, -1000, 995, 785, 128, 591, 420, -1000,
	-1000, -1000, -1000, -1000, 555, -1000, 435, -1000, 431, 10059,
	10059, 10059, -1000, -1000, -1000, 897, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 586, 586, -1000, -1000, 6975, 1641, 1641, -1000,
	-1000, -1000, -1000, 235, 429, -1000, 429, 770, 770, -1000,
	770, 784, -1000, 770, 98, 770, 96, 429, 429, 768,
	-90, -1000, 453, 6703, 1042, 720, 1010, -1000, -1000, -1000,
	948, 7728, 7933, -1000, 935, 718, 706, -1000, -1000, 5881,
	429, 667, 234, 659, -1000, 690, -1000, 768, -143, -1000,
	-1000, -1000, -1000, 10059, -1000, -1000, -1000, -1000, 10059, 778,
	128, -1000, 682, -1000, 617, 611, 657, -1000, 770, 657,
	657, 589, -1000, -1000, 1641, 3209, -1000, -1000, -1000, 165,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6975, 429,
	554, 453, 1039, 1006, 9236, 9236, 9236, 9236, -1000, 851,
	840, -1000, 849, 833, 869, 10674, -1000, 655, 7728, 197,
	-1000, 9028, -1000, -1000, 950, -1000, 768, -1000, -1000, 783,
	10264, 10059, 10264, -1000, -141, -1000, 426, 653, 625, 10059,
	769, -1000, -1000, -1000, -1000, 10059, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 202, -1000, -1000, -1000, 6703, 6703, 1010,
	775, 947, -1000, -1000, -1000, -1000, 837, -1000, 836, -1000,
	-1000, -1000, -1000, -1000, 192, 189, 151, -1000, 1054, -1000,
	768, -1000, 788, 229, -1000, -1000, 616, -1000, 587, -1000,
	-1000, -1000, 614, 10059, 321, -1000, 143, 562, 429, 107,
	-106, 453, 719, 6703, 6703, -1000, -1000, 768, 768, 768,
	10469, 706, 429, 10264, -141, -1000, 887, 131, 131, -1000,
	610, -1000, -1000, -1000, -1000, 324, 551, 1011, -1000, -1000,
	-1000, 980, -1000, -1000, -1000, 858, -98, -109, 453, 453,
	10059, 10059, 10059, 690, -1000, -1000, -1000, 274, -1000, 324,
	-1000, 537, 973, 131, -1000, 421, -1000, -1000, -1000, -1000,
	585, -1000, 855, -1000, 606, -1000, 606, 606, 768, 397,
	-1000, 541, 131, -1000, -1000, -101, -1000, 10059, -1000, -1000,
	-1000, -1000, -1000, -107, -1000, -112, -1000,
}
var yyPgo = [...]int{

	0, 21, 23, 1443, 1442, 1441, 46, 997, 1440, 1439,
	1437, 1432, 60, 1430, 1424, 1420, 1419, 1418, 38, 881,
	1415, 1414, 1110, 1103, 1079, 1076, 1413, 1411, 1405, 1400,
	1398, 1394, 1391, 1388, 1387, 1381, 109, 1380, 1379, 53,
	1374, 1373, 1370, 79, 1369, 96, 1368, 1367, 1366, 55,
	136, 36, 37, 28, 1363, 33, 22, 17, 1361, 1355,
	27, 1353, 1173, 99, 1352, 62, 112, 1347, 1346, 58,
	1345, 1344, 1343, 1342, 1341, 10, 35, 1331, 66, 1318,
	57, 87, 413, 1317, 1316, 1315, 1314, 1311, 1308, 59,
	5, 2, 11, 12, 1306, 180, 19, 1287, 63, 1285,
	1283, 1282, 1281, 50, 1280, 78, 1279, 32, 97, 1276,
	82, 1275, 24, 20, 56, 1274, 1273, 75, 95, 90,
	72, 1272, 68, 1271, 1270, 102, 1269, 1268, 1263, 101,
	1261, 100, 464, 1259, 1257, 1256, 1255, 1253, 1249, 1248,
	65, 48, 0, 15, 16, 41, 1247, 25, 882, 51,
	14, 1246, 106, 1245, 1244, 134, 40, 94, 34, 1243,
	1241, 1240, 1239, 1238, 1237, 1236, 253, 1235, 1234, 1233,
	1231, 1230, 1229, 1228, 1227, 1225, 1224, 1221, 1220, 1219,
	1218, 1216, 1215, 84, 1213, 1211, 1210, 1208, 1207, 1206,
	1203, 1195, 1184, 1179, 1175, 30, 1174, 1172, 1170, 1168,
	29, 1162, 67, 1, 76, 1159, 1158, 1157, 88, 18,
	1156, 1153, 1152, 1150, 64, 49, 1149, 85, 54, 52,
	1148, 1147, 1145, 77, 13, 26, 1144, 1139, 1137, 4,
	9, 1136, 1135, 1134, 1132, 6, 43, 47, 1131, 1127,
	31, 1126, 1124, 74, 81, 1121, 80, 3, 1116, 1114,
	1107, 1099, 7, 148, 1096, 98,
}
var yyR1 = [...]int{

	0, 250, 251, 251, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 19,
	20, 20, 21, 21, 22, 22, 23, 23, 41, 41,
	41, 41, 42, 42, 42, 111, 111, 110, 110, 24,
	25, 26, 26, 248, 248, 247, 171, 171, 7, 7,
	27, 27, 27, 27, 27, 249, 249, 249, 249, 249,
	249, 239, 239, 240, 240, 232, 230, 230, 227, 227,
	233, 233, 226, 226, 231, 231, 228, 228, 235, 235,
	235, 235, 235, 236, 237, 244, 244, 245, 245, 199,
	199, 246, 246, 246, 246, 204, 204, 203, 203, 202,
	202, 202, 205, 205, 205, 30, 219, 221, 221, 222,
	222, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 173, 175, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 188,
	189, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 191, 191, 192, 192, 193,
	193, 194, 194, 176, 200, 200, 174, 170, 172, 220,
	220, 220, 215, 147, 147, 159, 159, 159, 159, 241,
	241, 242, 242, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 162, 162, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 161, 161, 161, 161, 161, 163,
	163, 163, 163, 163, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 165,
	165, 165, 165, 165, 165, 165, 165, 214, 214, 166,
	166, 208, 208, 209, 209, 209, 206, 206, 207, 207,
	210, 210, 167, 167, 167, 167, 167, 167, 40, 39,
	39, 39, 127, 127, 127, 211, 195, 195, 195, 169,
	196, 196, 197, 197, 197, 198, 198, 198, 212, 212,
	213, 213, 168, 216, 216, 216, 216, 6, 6, 234,
	234, 234, 234, 229, 229, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 5, 5, 218, 218, 217, 217,
	225, 225, 224, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 153, 153, 133, 133, 138, 138, 138, 29,
	29, 29, 72, 72, 139, 139, 8, 31, 9, 134,
	134, 134, 70, 70, 70, 10, 12, 12, 12, 12,
	12, 71, 71, 71, 71, 71, 71, 11, 11, 11,
	11, 201, 201, 201, 201, 201, 13, 137, 137, 137,
	14, 16, 16, 16, 16, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 48, 48, 68, 68, 68, 65, 65,
	66, 66, 67, 67, 64, 64, 69, 69, 69, 35,
	33, 34, 34, 254, 36, 37, 37, 38, 38, 38,
	45, 45, 45, 43, 43, 44, 44, 51, 51, 50,
	50, 52, 52, 52, 52, 146, 146, 146, 145, 145,
	54, 54, 55, 55, 56, 56, 57, 57, 57, 73,
	58, 58, 58, 58, 154, 154, 151, 151, 151, 150,
	150, 59, 59, 59, 59, 60, 60, 60, 60, 61,
	61, 63, 63, 62, 62, 74, 74, 74, 74, 75,
	75, 76, 76, 53, 53, 53, 53, 53, 53, 53,
	130, 130, 78, 78, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 88, 88, 88, 88, 88, 88,
	79, 79, 79, 79, 79, 79, 79, 49, 49, 89,
	89, 89, 95, 90, 90, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 86, 86, 86, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 85, 85, 85,
	85, 85, 85, 85, 85, 255, 255, 87, 87, 87,
	87, 46, 46, 46, 46, 46, 156, 156, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 99, 99, 47, 47, 97, 97, 98, 100, 100,
	96, 96, 96, 81, 81, 81, 81, 81, 81, 81,
	83, 83, 83, 101, 101, 102, 102, 103, 103, 104,
	104, 105, 106, 106, 106, 107, 107, 107, 107, 108,
	108, 108, 80, 80, 80, 80, 80, 80, 109, 109,
	109, 109, 112, 112, 91, 91, 93, 93, 92, 94,
	113, 113, 114, 115, 115, 118, 118, 117, 117, 117,
	117, 117, 126, 126, 125, 125, 125, 116, 116, 119,
	119, 123, 123, 122, 124, 124, 124, 124, 121, 121,
	120, 120, 157, 157, 157, 128, 128, 131, 131, 132,
	132, 129, 129, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 140, 140, 140, 136, 136, 238, 238,
	143, 143, 144, 144, 148, 148, 149, 149, 152, 152,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 252, 253, 155,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 6, 7, 10,
	1, 3, 1, 3, 8, 9, 7, 8, 0, 1,
	1, 1, 0, 1, 1, 1, 3, 0, 4, 8,
	7, 3, 3, 1, 3, 5, 0, 2, 1, 1,
	3, 5, 11, 11, 11, 0, 1, 1, 5, 9,
	7, 1, 1, 1, 1, 2, 3, 2, 0, 2,
	1, 1, 0, 2, 1, 3, 0, 2, 0, 1,
	1, 2, 2, 3, 3, 0, 1, 1, 2, 1,
	1, 4, 4, 2, 4, 0, 1, 0, 1, 1,
	2, 2, 1, 1, 1, 4, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 4, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 3, 3, 4, 1,
	3, 3, 3, 1, 1, 3, 1, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 3, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	3, 4, 1, 1, 1, 1, 0, 3, 3, 2,
	0, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 1, 2, 7, 7, 8, 9, 0, 1, 3,
	1, 2, 3, 0, 2, 0, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 0, 1, 0, 1, 0, 1, 1, 6,
	6, 4, 1, 3, 0, 1, 3, 3, 2, 1,
	1, 1, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 3, 3, 3, 1, 1, 3, 5, 3,
	6, 0, 1, 1, 1, 1, 2, 0, 1, 1,
	4, 2, 3, 2, 2, 4, 4, 3, 6, 3,
	3, 4, 4, 4, 6, 5, 5, 3, 3, 5,
	6, 7, 3, 3, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 0, 3, 1, 1, 1, 0, 2,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 4,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 1, 2, 3, 3, 3,
	2, 3, 1, 2, 1, 1, 1, 2, 3, 2,
	2, 0, 2, 3, 2, 2, 2, 1, 0, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -250, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -29, -8, -31, -32, -35, -33, -9, -10, -11,
	-13, -14, -16, -15, -34, -19, -20, 6, 7, 257,
	8, 9, 44, -30, 125, 126, 127, 149, 129, 144,
	47, 64, 277, -134, 147, 284, 287, 288, 291, 290,
	305, 148, 150, -252, 143, 142, 141, 67, -251, 313,
	-103, 14, -38, 5, -36, -254, -36, -36, -36, -36,
	-36, -219, 67, -7, -238, 23, 31, 132, 249, 250,
	34, -129, 249, 136, -133, 133, -7, 33, -139, 132,
	132, 242, 125, 237, 279, -67, -68, 281, 282, 244,
	132, 283, 240, 280, 239, 236, 174, 70, 46, 133,
	27, 25, 132, -148, 70, -142, 263, 19, 205, 151,
	170, 264, 310, 79, 204, 207, 208, 145, 166, 210,
	209, 202, 160, 42, 200, 184, 285, 268, 273, 246,
	199, 161, 270, 23, 185, 189, 292, 25, 212, 183,
	26, 27, 265, 49, 187, 213, 53, 203, 214, 191,
	190, 192, 173, 17, 215, 216, 186, 188, 267, 148,
	217, 52, 196, 286, 288, 244, 201, 175, 164, 165,
	272, 271, 149, 269, 134, 167, 305, 306, 308, 307,
	309, 311, 312, -155, -62, -71, 129, -148, 270, 273,
	275, -201, 70, 72, -141, -142, 85, 38, 40, 194,
	88, 157, 120, 179, 15, 21, 89, 168, 171, 174,
	119, 245, 206, 258, 125, 62, 248, 251, 247, 249,
	237, 162, 43, 9, 141, 142, 37, 113, 127, 92,
	93, 279, 146, 39, 143, 82, 18, 65, 10, 46,
	12, 13, 147, 137, 136, 104, 133, 60, 7, 155,
	156, 121, 41, 101, 56, 35, 58, 102, 16, 252,
	253, 45, 182, 178, 262, 181, 154, 177, 115, 63,
	50, 86, 80, 163, 83, 66, 150, 84, 14, 61,
	282, 139, 281, 159, 103, 128, 257, 29, 59, 250,
	6, 261, 44, 144, 153, 57, 132, 238, 33, 180,
	152, 176, 91, 135, 81, 283, 5, 34, 197, 8,
	64, 138, 254, 255, 256, 48, 172, 169, 280, 266,
	90, 11, 198, -137, 267, 207, -155, 289, -155, -155,
	306, 308, 307, 309, 310, 312, 277, -155, -155, -18,
	-107, 16, 15, -21, -19, -252, 6, 36, 37, -45,
	54, 55, -37, -41, 223, 222, 224, -42, 223, 222,
	-62, 10, -115, -116, -118, 289, -157, -117, 293, 294,
	292, -144, -126, 295, -143, -141, 174, 171, 70, -142,
	-249, 292, 286, 278, 274, -220, -215, -147, 70, -142,
	-132, 137, 133, 133, 133, -132, 132, -153, -152, 70,
	-142, 132, 70, -131, 137, -62, -62, 241, 132, 249,
	-155, -155, 238, -64, 245, 246, -66, 10, 104, -155,
	-155, -155, 244, -155, -155, -155, -155, -155, -155, -155,
	-62, -70, -147, 72, -12, 18, -18, -24, -22, -23,
	-25, -12, 270, 122, 94, 73, -155, -92, -252, -92,
	-155, -62, -155, -155, 311, 290, 291, -253, 69, -108,
	18, 45, -53, -77, 86, -82, 43, 39, -81, -78,
	-96, -94, -95, 120, 109, 110, 117, 87, 121, -86,
	-84, -85, -87, 72, 71, 73, 74, 75, 76, 80,
	81, 82, -143, -148, -92, -252, 58, 59, 258, 259,
	262, 260, 89, 48, 247, 256, 255, 254, 252, 253,
	248, 251, 137, 249, 115, 257, 70, -142, -104, -105,
	-53, -103, -18, -36, 50, -43, 37, 78, -129, -129,
	44, -62, 68, -119, -122, -120, 296, 298, -117, 289,
	94, -125, -143, 72, 43, -125, 44, 15, 15, 69,
	68, -159, -162, -164, -163, -165, -160, -161, 168, 169,
	120, 172, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 44, 145, 164, 165, 166, 167, 185, 186,
	187, 188, 189, 190, 191, 192, 151, 170, 264, 152,
	153, 154, 155, 156, 157, 159, 160, 161, 162, 163,
	-152, 86, 70, 70, 70, -62, -62, -244, -245, -246,
	-204, 298, 43, -131, 66, -152, 39, -48, 10, -62,
	-148, -65, -66, -66, -62, -65, -155, 207, 94, -149,
	-148, -141, 183, 271, 272, -155, -155, -90, -53, -155,
	-140, 135, 38, -155, -155, -155, 8, 104, 85, 84,
	101, 68, 17, -53, -79, 104, 86, 102, 103, 88,
	106, 105, 116, 109, 110, 111, 112, 113, 114, 115,
	107, 108, 119, 94, 95, 96, 97, 98, 99, 100,
	-130, -252, -95, -252, 123, 124, -82, -82, -82, -82,
	-82, -82, -252, 122, -18, -252, -252, -252, -252, -252,
	-252, -252, -99, -53, -252, -255, -252, -255, -255, -255,
	-255, -255, -255, -255, -252, -252, -252, -252, 68, -106,
	40, 141, -107, -253, -45, -83, -143, 73, 76, -44,
	57, -63, 41, -62, -63, -113, -114, -96, -143, -148,
	-76, 11, -118, -157, -121, 68, -123, 68, 297, 299,
	300, -119, 66, 83, -53, -196, 119, -252, 276, 24,
	-221, -222, -223, -174, -170, -172, -173, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, 79, 285, -204,
	194, 205, 47, 206, 207, 208, 133, 210, 211, 212,
	26, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	-215, -216, -217, -5, -4, 133, 35, 31, 23, 22,
	-241, -242, -243, -210, -167, -211, -212, -213, -168, -40,
	-169, -197, -198, 80, 86, 43, 194, 139, 35, 34,
	79, 66, 119, 204, 201, -206, 197, -166, 67, -166,
	-166, -166, -166, -195, 171, -195, -195, -195, 67, 67,
	-166, -166, -166, -208, 67, -208, -208, -209, 67, -209,
	-244, 39, 66, 66, 66, -135, 128, 285, 258, 130,
	127, 131, 126, 194, 171, 79, 43, 14, 269, 70,
	-246, 119, -202, -183, 174, 171, 168, 300, -72, -62,
	-62, -107, 243, -155, -155, -69, 102, 11, -148, -62,
	-65, -155, 73, 271, 68, -253, -62, 52, -53, -53,
	-88, 80, 86, 81, 82, -53, -53, -82, -89, -92,
	-95, 77, 104, 102, 103, 88, -82, -82, -82, -82,
	-82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
	-82, -156, 70, 72, 70, -81, -81, -143, -51, 37,
	-50, -52, 111, -53, -148, -144, -149, -141, -253, -18,
	-50, -50, -53, -53, -50, -43, -97, -98, 90, -143,
	-253, -50, -51, -50, -50, -105, -108, -128, 18, 10,
	48, 48, -50, -110, 274, -62, -110, -76, 68, 94,
	122, -103, -53, -120, -122, -124, 301, 298, 304, 70,
	-147, -252, -252, -223, -203, 94, -203, 119, -202, -203,
	-203, -203, -203, -203, 209, 209, -203, -203, -203, -203,
	-203, -203, -203, -203, -203, -203, -203, -203, -203, -6,
	70, -218, -217, 139, 34, 32, -243, 80, 72, 73,
	74, 80, -39, -78, -127, 247, 252, 253, 35, 35,
	72, 8, -200, 70, 72, 199, 200, 43, 43, 202,
	203, -207, 198, 73, -195, -195, 44, -214, 72, -214,
	73, 73, -62, -62, -62, -155, -140, -136, 133, 35,
	94, 135, 140, 140, 140, -203, -203, 44, 44, -203,
	-138, 68, 29, 21, -235, -236, -237, 45, 19, -155,
	72, 72, -53, -65, -76, -12, -53, -155, 53, 80,
	81, 82, -89, -82, -82, -82, -49, 146, 85, -253,
	-253, -50, 68, -146, -145, 38, -143, 72, 122, -252,
	122, -253, -253, -253, 68, 138, 38, -253, -50, -100,
	-98, 92, -53, -253, -253, -253, -253, -253, -62, -54,
	10, -80, 44, 48, -18, -252, -252, -80, 44, -103,
	-114, -53, -144, -107, 298, 302, 303, -253, -147, -147,
	72, -200, -203, -203, 73, 73, 73, 72, 72, -203,
	-203, 73, 72, 70, 73, 73, 73, 73, 43, 72,
	43, 200, 199, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 73, 43, 73, 43, 73, 43,
	70, -142, -2, -1, 138, -6, 35, -218, 67, -39,
	69, 70, 120, 69, 68, 69, 68, 69, 68, -252,
	-252, -252, -62, -155, 70, 171, -219, 70, -215, -240,
	70, 43, -205, 70, 120, 43, -199, 73, 43, -62,
	-237, -236, -203, -203, -69, -49, 85, -82, -82, -253,
	-52, -145, 111, -149, -51, -144, -158, 120, 168, 145,
	166, 162, 183, 173, 196, 164, 197, -156, -158, 263,
	-103, 93, -53, 91, -76, -55, -56, -57, -58, -73,
	-95, -252, -62, -112, 66, -113, -91, -93, -92, -252,
	-18, -109, -147, -111, -147, -113, -107, -253, -253, -200,
	-200, 72, 72, 67, -3, 24, 20, 30, 67, -2,
	-6, 69, 73, 72, 73, 73, -225, -224, -143, -225,
	-225, 44, -240, -240, -82, 122, -253, -253, -166, -166,
	-166, -209, -166, 156, -166, 156, -253, -253, -252, -47,
	261, -53, -101, 12, 68, -59, -60, -61, 56, 60,
	62, 57, 58, 59, 63, -154, 38, -55, -252, -151,
	-150, 38, -148, 72, 42, -112, 68, -253, -253, -253,
	68, 122, 68, -253, -252, -171, 275, -225, -225, 67,
	-2, 69, 69, 69, -253, 68, -166, -253, -253, 70,
	111, -195, 70, -82, -253, 72, -102, 13, 15, -56,
	-57, -56, -57, 56, 56, 56, 61, 56, 61, 56,
	-60, -148, -253, -74, 64, 136, 65, -150, 35, -93,
	48, -18, -252, -147, -143, -147, -248, -247, 274, 73,
	69, 69, -225, 67, -227, -224, -226, -228, -46, 104,
	266, -53, -90, 66, 66, 56, 56, 133, 133, 133,
	8, -91, -18, 122, 68, -253, 70, -229, -229, 69,
	-225, -235, -233, -230, -232, 26, 79, 138, -235, -231,
	-230, 266, -235, -230, -253, 264, 63, 267, -53, -53,
	-252, -252, -252, -113, -253, -147, -247, 48, -234, 26,
	-1, 79, 266, -229, 69, -203, 72, -239, 24, 20,
	28, 53, 265, 268, -75, -143, -75, -75, 104, -203,
	72, 28, -229, 73, 70, 53, -253, 68, -253, -253,
	-92, 73, 70, 266, -143, 267, 268,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 657, 0, 443, 443, 443,
	443, 443, 443, 0, 748, 731, 344, 354, 0, 432,
	0, 0, 966, 371, 381, 387, 966, 0, 966, 966,
	0, 966, 966, 0, 359, 360, 361, 964, 1, 3,
	665, 0, 0, 447, 450, 445, 38, 42, 0, 0,
	0, 65, 0, 729, 0, 0, 0, 729, 58, 59,
	749, 0, 342, 732, 0, 0, 727, 345, 0, 355,
	0, 0, 0, 966, 966, 0, 0, 966, 966, 966,
	0, 966, 966, 966, 966, 966, 966, 966, 433, 425,
	426, 427, 0, 440, 754, 755, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 358, 362, 0, 0, 503, 913, -2,
	376, 386, 382, 383, 384, 385, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 0, 388, 389, 391, 966, 393, 394,
	0, 0, 966, 0, 966, 966, 0, 441, 442, 30,
	669, 0, 0, 657, 32, 0, 443, 448, 449, 453,
	451, 452, 444, 731, 39, 40, 41, 731, 43, 44,
	0, 0, 51, 52, 693, 0, 0, 695, 722, 723,
	-2, 0, 0, 0, 752, 753, -2, 772, 750, 751,
	60, 66, 67, 0, 0, 0, 189, 0, 193, 194,
	0, 0, 0, 0, 0, 0, 0, -2, 343, 758,
	759, 727, 0, 0, 0, 356, 357, 423, 0, 0,
	407, 408, 428, 0, 434, 435, 0, 430, 431, 412,
	413, 414, 428, 416, 417, 418, 419, 420, 421, 422,
	966, 365, 363, 364, 377, 0, -2, 367, 368, 369,
	370, 379, 0, 0, 0, 966, 392, 966, 0, 966,
	397, 743, 399, 400, 966, 966, 966, 31, 965, 26,
	0, 0, 666, 513, 0, 518, 520, 0, 555, 556,
	557, 558, 559, 0, 0, 0, 0, 0, 0, 581,
	582, 583, 584, 643, 644, 645, 646, 647, 648, 649,
	522, 523, 640, 0, 689, 0, 0, 0, 0, 0,
	0, 0, 631, 0, 605, 605, 605, 605, 605, 605,
	605, 605, 0, 0, 0, 0, -2, -2, 658, 659,
	662, 665, 30, 450, 0, 455, 454, 446, 0, 0,
	0, 511, 0, 707, 718, 711, 0, 0, 696, 0,
	0, 700, 704, 705, 706, 290, 703, 0, 0, -2,
	315, 199, 266, 196, 197, 198, 259, 214, 259, 259,
	259, 259, 286, 286, 286, 286, 242, 243, 244, 245,
	246, 0, 0, 229, 259, 259, 259, 233, 249, 250,
	251, 252, 253, 254, 255, 256, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 261, 261, 261, 263, 263,
	-2, 0, 0, 0, 0, 115, 0, 341, -2, 97,
	0, 0, 106, 0, 0, 351, 728, 665, 0, 966,
	966, 436, 0, 0, 428, 966, 439, 0, 0, 504,
	756, 757, 372, 373, 374, 390, 395, 0, 553, 396,
	0, 744, 745, 401, 402, 403, 670, 0, 0, 0,
	0, 0, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 542, 543, 544, 545, 546,
	519, 0, 533, 0, 0, 0, 575, 576, 577, 578,
	579, 0, 457, 0, 30, 0, 0, 0, 0, 0,
	0, 453, 0, 632, 0, 597, 0, 598, 599, 600,
	601, 602, 603, 604, 0, 457, 0, 0, 0, 661,
	663, 664, 669, 33, 453, 0, 650, 0, 0, 0,
	456, 47, 0, 502, 47, 511, 690, 0, 640, 0,
	657, 0, 694, 0, 709, 0, 710, 0, 0, 720,
	721, 708, 697, 698, 699, 701, 0, 0, 0, 0,
	116, -2, 119, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 107, 107, 0,
	107, 107, 107, 107, 107, 0, 0, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	190, 191, 307, 326, 0, 328, 329, 324, -2, 316,
	192, 200, 201, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 270, 0, 0, 285, 0, 299, 301,
	0, 0, 0, 0, 0, 268, 267, 213, 0, 286,
	286, 236, 237, 238, 0, 239, 240, 241, 0, 0,
	230, 231, 232, 224, 0, 225, 226, 227, 0, 228,
	61, 730, 0, 0, 0, 966, 743, 0, 740, 0,
	738, 0, 733, 734, 735, 736, 737, 739, 741, 742,
	98, 107, 107, 103, 109, 0, 0, 107, 346, 352,
	88, 966, 0, 405, 406, 409, 0, 0, 429, 428,
	511, 415, 378, 0, 0, 688, 966, 0, 514, 515,
	517, 534, 0, 536, 538, 667, 668, 524, 525, 549,
	550, 551, 0, 0, 0, 0, 547, 529, 0, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 574, 616, 617, 0, 572, 573, 580, 0, 0,
	458, 459, 461, 465, 0, 641, 0, -2, 552, 30,
	0, 0, 0, 0, 0, 0, 638, 635, 0, 0,
	606, 0, 0, 0, 0, 660, 27, 0, 725, 726,
	651, 652, 470, 0, 0, 501, 0, 657, 0, 0,
	0, 665, 512, 719, 712, 713, 0, 0, 717, 291,
	0, 0, 0, 120, 0, 108, 0, 107, 107, 0,
	0, 0, 0, 0, 107, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	308, 307, 327, 0, 326, 317, 202, 271, 272, 273,
	274, 275, 276, 277, 279, 282, 283, 284, 298, 300,
	302, 0, 289, 184, 185, 292, 293, 294, 295, 296,
	297, 195, 269, 0, 234, 235, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 333, 0, 966, 746, 747,
	0, 0, 0, 0, 0, 0, 0, 110, 111, 0,
	349, 0, 347, 348, 350, 89, 90, 107, 107, 404,
	424, 437, 438, 436, 410, 380, 554, 398, 671, 535,
	537, 539, 526, 547, 530, 0, 527, 0, 0, 521,
	585, 0, 0, 462, 466, 0, 468, 469, 0, 457,
	0, -2, 588, 589, 0, 0, 0, 0, 657, 0,
	636, 0, 0, 596, 607, 608, 609, 610, 28, 511,
	0, 682, 0, 0, -2, 0, 0, 36, 0, 665,
	691, 692, 641, 50, 714, 715, 716, 68, 0, 0,
	186, 187, 0, 0, 145, 146, 183, 148, 149, 0,
	0, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 0, 320, 0, 0, 319, 307, 0, 278,
	260, 287, 288, 247, 0, 248, 0, 264, 0, 0,
	0, 0, 334, 335, 336, 0, 338, 339, 340, 101,
	73, 74, 102, 112, 113, 114, 104, 99, 100, 353,
	91, 92, 0, 0, 411, 528, 0, 548, 531, 586,
	460, 467, 463, 0, 0, 642, 0, 259, 259, 621,
	259, 263, 624, 259, 626, 259, 629, 0, 0, 0,
	633, 595, 639, 0, 653, 471, 472, 474, 475, 476,
	484, 0, 486, 34, 0, 682, 672, 684, 686, 0,
	30, 0, 678, 0, 45, 37, 49, 0, 56, 147,
	188, 150, 151, 0, 318, 321, 322, 323, 0, 0,
	319, 280, 0, 258, 0, 0, 0, 330, 259, 0,
	0, 0, 93, 94, 532, 0, 587, 590, 618, 286,
	622, 623, 625, 627, 628, 630, 592, 591, 0, 0,
	0, 637, 655, 0, 0, 0, 0, 0, 491, 0,
	0, 494, 0, 0, 0, 0, 485, 0, 0, 505,
	487, 0, 489, 490, 0, 35, 0, 687, -2, 0,
	0, 0, 0, 48, 0, 70, 0, 0, 0, 0,
	0, 281, 262, 265, 78, 0, 332, 82, 86, 337,
	464, 619, 620, 611, 594, 634, 29, 0, 0, 473,
	480, 0, 483, 492, 493, 495, 0, 497, 0, 499,
	500, 477, 478, 479, 0, 0, 0, 488, 0, 685,
	0, -2, 0, 680, 679, 46, 0, 53, 0, 57,
	313, 313, 0, 0, 88, 331, 88, 88, 0, 0,
	0, 656, 654, 0, 0, 496, 498, 0, 0, 0,
	0, 675, 30, 0, 0, 69, 0, 303, 304, 313,
	0, 62, 79, 80, 81, 107, 0, 0, 63, 83,
	84, 0, 64, 87, 593, 0, 0, 0, 481, 482,
	0, 0, 0, 683, -2, 681, 54, 0, 314, 107,
	310, 0, 0, 305, 313, 0, 77, 75, 71, 72,
	0, 612, 0, 615, 0, 509, 0, 0, 0, 0,
	311, 0, 306, 76, 85, 613, 506, 0, 507, 508,
	55, 309, 312, 0, 510, 0, 614,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 313,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1105
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1150
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1163
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1175
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1187
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = ""
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1215
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.optVal = nil
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1317
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = "hash"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.str = "btree"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.str = "default"
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1523
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.str = "default"
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1608
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1613
		{
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.str = "character set"
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = "char set"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = "default"
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1647
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1998
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2157
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.optVal = nil
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2623
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.str = yyDollar[3].str
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2719
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2764
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2776
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2790
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 306:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2801
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2841
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2866
		{
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2872
		{
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2883
		{
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2915
		{
			// set empty
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.str = yyDollar[1].str
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2957
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2962
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2979
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2983
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.byt = 0
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.byt = 1
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3010
		{
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3014
		{
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3018
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3034
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3054
		{
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3056
		{
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3060
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.statement = &Xa{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3078
		{
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3080
		{
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3082
		{
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3099
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3117
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3121
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3126
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3146
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3156
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.optVal = nil
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3174
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3179
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3199
		{
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3203
		{
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3217
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3293
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3304
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3360
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3374
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3380
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3384
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3390
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3400
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3404
		{
			yyVAL.str = "full "
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3420
		{
			yyVAL.showFilter = nil
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3424
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3428
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3434
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3440
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3450
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3455
		{
			setAllowComments(yylex, true)
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3464
		{
			yyVAL.bytes2 = nil
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3468
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3474
		{
			yyVAL.str = UnionStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3478
		{
			yyVAL.str = UnionAllStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3482
		{
			yyVAL.str = UnionDistinctStr
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3487
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.str = SQLCacheStr
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3504
		{
			yyVAL.str = DistinctStr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3509
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3513
		{
			yyVAL.str = StraightJoinHint
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3518
		{
			yyVAL.selectExprs = nil
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3528
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3532
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3542
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3546
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3550
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3559
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3570
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3575
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3585
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3589
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3599
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3603
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3607
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3613
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3626
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3630
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3634
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3638
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3643
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3673
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.str = JoinStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.str = StraightJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3691
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3695
		{
			yyVAL.str = LeftJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.str = RightJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3709
		{
			yyVAL.str = NaturalJoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3713
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3723
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3727
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3733
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3737
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.indexHints = nil
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3754
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3760
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3764
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3769
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3773
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3779
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3783
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3787
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3791
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3795
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3799
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3803
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3809
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3813
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3819
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3823
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3829
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3833
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3837
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3841
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3845
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3849
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3853
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3861
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3871
		{
			yyVAL.str = IsNullStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3875
		{
			yyVAL.str = IsNotNullStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3879
		{
			yyVAL.str = IsTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3883
		{
			yyVAL.str = IsNotTrueStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.str = IsFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3891
		{
			yyVAL.str = IsNotFalseStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3897
		{
			yyVAL.str = EqualStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.str = LessThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.str = GreaterThanStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.str = LessEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.str = GreaterEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.str = NotEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3926
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3930
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3936
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3940
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3944
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3950
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3956
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3974
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3978
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3982
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3990
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3994
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3998
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4002
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4010
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4014
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4018
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4022
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4030
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4034
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4038
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4042
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4046
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4050
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4058
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4072
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4076
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4080
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4098
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4102
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4124
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4128
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 593:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 594:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4158
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4180
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4185
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4190
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4213
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4223
		{
			yyVAL.str = ""
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4227
		{
			yyVAL.str = BooleanModeStr
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4231
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4239
		{
			yyVAL.str = QueryExpansionStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4245
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4281
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4285
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4310
		{
			yyVAL.expr = nil
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.str = string("")
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4329
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4333
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4339
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4354
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4358
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4362
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4368
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4372
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4376
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4384
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4392
		{
			yyVAL.expr = &NullVal{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4398
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4407
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4411
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4416
		{
			yyVAL.exprs = nil
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4420
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4425
		{
			yyVAL.expr = nil
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4429
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4434
		{
			yyVAL.orderBy = nil
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4438
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4448
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4454
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.str = AscScr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.str = AscScr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.str = DescScr
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.limit = nil
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4480
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4484
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4489
		{
			yyVAL.str = ""
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.str = ForUpdateStr
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.str = ShareModeStr
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4514
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4518
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4523
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4527
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4531
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4538
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4542
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4546
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4550
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4555
		{
			yyVAL.updateExprs = nil
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4559
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4565
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4569
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4575
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4579
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4591
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4601
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4605
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4611
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4617
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4621
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4627
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4631
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4638
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4654
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4661
		{
			yyVAL.bytes = []byte("charset")
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4667
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4671
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4675
		{
			yyVAL.expr = &Default{}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4681
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4685
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4691
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4695
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.str = ""
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4705
		{
			yyVAL.str = yyDollar[2].str
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4711
		{
			yyVAL.str = yyDollar[3].str
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4717
		{
			yyVAL.str = RepeatableRead
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4721
		{
			yyVAL.str = ReadCommitted
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4725
		{
			yyVAL.str = ReadUncommitted
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4729
		{
			yyVAL.str = Serializable
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4735
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4739
		{
			yyVAL.str = yyDollar[2].str
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4745
		{
			yyVAL.str = TxReadWrite
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4749
		{
			yyVAL.str = TxReadOnly
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4755
		{
			yyVAL.str = SessionStr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4759
		{
			yyVAL.str = SessionStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4763
		{
			yyVAL.str = GlobalStr
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4772
		{
			yyVAL.byt = 0
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4776
		{
			yyVAL.byt = 1
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4781
		{
			yyVAL.byt = 0
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4785
		{
			yyVAL.byt = 1
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4790
		{
			yyVAL.str = ""
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4794
		{
			yyVAL.str = IgnoreStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4800
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4804
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4808
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4812
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4816
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4820
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4824
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4828
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4832
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4836
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4841
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4845
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4849
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4855
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4859
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4864
		{
			yyVAL.str = IndexStr
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4868
		{
			yyVAL.str = UniqueStr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4874
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4878
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4885
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4891
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4895
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4902
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4908
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4912
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5143
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5152
		{
			decNesting(yylex)
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5157
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
