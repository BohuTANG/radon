//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const COLUMN = 57457
const IF = 57458
const IGNORE = 57459
const INDEX = 57460
const PRIMARY = 57461
const QUICK = 57462
const TABLE = 57463
const TO = 57464
const VIEW = 57465
const USING = 57466
const DESC = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const SHOW = 57470
const DATE = 57471
const ESCAPE = 57472
const HELP = 57473
const REPAIR = 57474
const TRUNCATE = 57475
const OPTIMIZE = 57476
const BIT = 57477
const TINYINT = 57478
const SMALLINT = 57479
const MEDIUMINT = 57480
const INT = 57481
const INTEGER = 57482
const BIGINT = 57483
const INTNUM = 57484
const REAL = 57485
const DOUBLE = 57486
const FLOAT_TYPE = 57487
const DECIMAL = 57488
const NUMERIC = 57489
const TIME = 57490
const TIMESTAMP = 57491
const DATETIME = 57492
const YEAR = 57493
const CHAR = 57494
const VARCHAR = 57495
const BOOL = 57496
const CHARACTER = 57497
const VARBINARY = 57498
const NCHAR = 57499
const CHARSET = 57500
const TEXT = 57501
const TINYTEXT = 57502
const MEDIUMTEXT = 57503
const LONGTEXT = 57504
const BLOB = 57505
const TINYBLOB = 57506
const MEDIUMBLOB = 57507
const LONGBLOB = 57508
const JSON = 57509
const ENUM = 57510
const GEOMETRY = 57511
const POINT = 57512
const LINESTRING = 57513
const POLYGON = 57514
const GEOMETRYCOLLECTION = 57515
const MULTIPOINT = 57516
const MULTILINESTRING = 57517
const MULTIPOLYGON = 57518
const NULLX = 57519
const AUTO_INCREMENT = 57520
const APPROXNUM = 57521
const SIGNED = 57522
const UNSIGNED = 57523
const ZEROFILL = 57524
const FIXED = 57525
const DYNAMIC = 57526
const STORAGE = 57527
const DISK = 57528
const MEMORY = 57529
const COLUMN_FORMAT = 57530
const AVG_ROW_LENGTH = 57531
const COMPRESSION = 57532
const CONNECTION = 57533
const DATA = 57534
const DIRECTORY = 57535
const DELAY_KEY_WRITE = 57536
const ENCRYPTION = 57537
const INSERT_METHOD = 57538
const MAX_ROWS = 57539
const MIN_ROWS = 57540
const PACK_KEYS = 57541
const PASSWORD = 57542
const ROW_FORMAT = 57543
const STATS_AUTO_RECALC = 57544
const STATS_PERSISTENT = 57545
const STATS_SAMPLE_PAGES = 57546
const TABLESPACE = 57547
const DELAYED = 57548
const LOW_PRIORITY = 57549
const HIGH_PRIORITY = 57550
const COMPRESSED = 57551
const REDUNDANT = 57552
const COMPACT = 57553
const TOKUDB_DEFAULT = 57554
const TOKUDB_FAST = 57555
const TOKUDB_SMALL = 57556
const TOKUDB_ZLIB = 57557
const TOKUDB_QUICKLZ = 57558
const TOKUDB_LZMA = 57559
const TOKUDB_SNAPPY = 57560
const TOKUDB_UNCOMPRESSED = 57561
const COLLATION = 57562
const DATABASES = 57563
const TABLES = 57564
const WARNINGS = 57565
const VARIABLES = 57566
const EVENTS = 57567
const BINLOG = 57568
const GTID = 57569
const STATUS = 57570
const COLUMNS = 57571
const FIELDS = 57572
const CURRENT_TIMESTAMP = 57573
const CURRENT_DATE = 57574
const DATABASE = 57575
const SCHEMA = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const FORMAT = 57596
const TREE = 57597
const TRADITIONAL = 57598
const EXTENDED = 57599
const PARTITION = 57600
const PARTITIONS = 57601
const LIST = 57602
const XA = 57603
const DISTRIBUTED = 57604
const ENGINES = 57605
const VERSIONS = 57606
const PROCESSLIST = 57607
const QUERYZ = 57608
const TXNZ = 57609
const KILL = 57610
const ENGINE = 57611
const SINGLE = 57612
const BEGIN = 57613
const START = 57614
const TRANSACTION = 57615
const COMMIT = 57616
const ROLLBACK = 57617
const GLOBAL = 57618
const LOCAL = 57619
const SESSION = 57620
const NAMES = 57621
const ISOLATION = 57622
const LEVEL = 57623
const READ = 57624
const WRITE = 57625
const ONLY = 57626
const REPEATABLE = 57627
const COMMITTED = 57628
const UNCOMMITTED = 57629
const SERIALIZABLE = 57630
const RADON = 57631
const ATTACH = 57632
const ATTACHLIST = 57633
const DETACH = 57634
const RESHARD = 57635
const CLEANUP = 57636
const RECOVER = 57637
const REBALANCE = 57638

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5186

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 201,
	6, 375,
	7, 375,
	8, 375,
	9, 375,
	18, 375,
	67, 375,
	258, 375,
	-2, 915,
	-1, 383,
	94, 923,
	-2, 729,
	-1, 389,
	94, 778,
	-2, 707,
	-1, 410,
	1, 95,
	314, 95,
	-2, 105,
	-1, 450,
	5, 30,
	-2, 366,
	-1, 530,
	122, 759,
	-2, 755,
	-1, 531,
	122, 760,
	-2, 756,
	-1, 563,
	119, 105,
	169, 105,
	172, 105,
	175, 105,
	-2, 117,
	-1, 614,
	1, 95,
	314, 95,
	-2, 105,
	-1, 622,
	1, 96,
	314, 96,
	-2, 105,
	-1, 778,
	119, 105,
	169, 105,
	172, 105,
	175, 105,
	-2, 118,
	-1, 835,
	35, 325,
	67, 325,
	70, 325,
	135, 325,
	-2, 920,
	-1, 985,
	122, 762,
	-2, 758,
	-1, 1158,
	5, 31,
	-2, 557,
	-1, 1181,
	5, 30,
	-2, 678,
	-1, 1404,
	5, 31,
	-2, 679,
	-1, 1457,
	5, 30,
	-2, 681,
	-1, 1520,
	5, 31,
	-2, 682,
}

const yyPrivate = 57344

const yyLast = 11488

var yyAct = [...]int{

	531, 508, 1540, 1032, 1463, 1121, 654, 509, 53, 1499,
	1322, 484, 752, 1493, 1323, 506, 1396, 1353, 1352, 1313,
	400, 1382, 1526, 1239, 1319, 884, 1057, 870, 1266, 1080,
	450, 3, 353, 757, 1393, 1292, 976, 1312, 984, 979,
	60, 921, 117, 1151, 117, 207, 969, 1123, 399, 384,
	1122, 71, 388, 1059, 1178, 753, 946, 448, 1070, 1143,
	995, 53, 635, 657, 1095, 909, 483, 839, 548, 117,
	358, 392, 624, 402, 549, 380, 779, 473, 539, 1011,
	533, 792, 443, 413, 352, 482, 387, 621, 623, 117,
	1060, 117, 880, 379, 547, 377, 362, 206, 722, 748,
	416, 81, 59, 555, 469, 470, 914, 411, 626, 64,
	1191, 636, 765, 117, 1025, 1192, 1193, 1024, 766, 767,
	1026, 550, 551, 551, 349, 468, 550, 340, 776, 1412,
	1464, 397, 486, 1012, 931, 396, 649, 981, 66, 67,
	68, 69, 70, 395, 640, 1562, 1539, 471, 817, 394,
	1525, 1125, 978, 343, 345, 344, 346, 347, 1501, 348,
	1561, 27, 28, 30, 31, 626, 338, 1513, 1559, 809,
	1538, 1512, 27, 28, 30, 31, 1305, 1124, 1376, 1073,
	421, 435, 918, 420, 1074, 1075, 1066, 1067, 1068, 27,
	28, 30, 31, 83, 1069, 504, 505, 402, 1043, 32,
	113, 804, 40, 1527, 1042, 53, 53, 904, 429, 87,
	644, 1502, 1090, 642, 368, 367, 369, 446, 1086, 41,
	425, 908, 57, 863, 650, 651, 337, 427, 428, 372,
	371, 1371, 1262, 57, 1369, 1085, 903, 1475, 678, 677,
	687, 688, 680, 681, 682, 683, 684, 685, 686, 679,
	57, 1428, 689, 871, 1241, 659, 455, 813, 1109, 75,
	1485, 409, 1035, 906, 90, 1241, 89, 76, 83, 1062,
	80, 913, 902, 864, 912, 1484, 833, 911, 1450, 1452,
	34, 35, 36, 1483, 38, 407, 406, 405, 689, 417,
	404, 1112, 422, 1111, 1110, 701, 702, 56, 55, 54,
	39, 114, 1489, 44, 51, 37, 52, 1107, 1407, 82,
	659, 85, 913, 1361, 815, 912, 1217, 807, 911, 899,
	897, 893, 1157, 896, 898, 1318, 1155, 1018, 808, 810,
	811, 812, 710, 814, 815, 816, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 461, 463, 117, 1451, 457,
	643, 462, 462, 871, 679, 1272, 658, 689, 27, 28,
	30, 31, 1073, 773, 625, 901, 53, 1074, 1075, 196,
	449, 1061, 1544, 1511, 77, 117, 832, 430, 1087, 1088,
	392, 775, 1270, 664, 923, 667, 392, 392, 900, 536,
	665, 1528, 1083, 1084, 373, 387, 1033, 535, 1248, 1507,
	1476, 556, 556, 1108, 413, 1017, 667, 1106, 805, 117,
	117, 658, 479, 29, 418, 645, 419, 413, 1161, 57,
	554, 458, 117, 117, 29, 1307, 78, 79, 666, 665,
	117, 1163, 1271, 42, 666, 665, 996, 456, 444, 615,
	45, 29, 541, 46, 47, 667, 49, 48, 1249, 57,
	953, 667, 895, 666, 665, 552, 1065, 1557, 117, 949,
	1309, 50, 1549, 905, 951, 952, 950, 112, 542, 537,
	667, 431, 543, 1219, 1218, 922, 1546, 666, 665, 894,
	996, 403, 1168, 1136, 1137, 1138, 78, 79, 698, 700,
	559, 1162, 476, 534, 667, 1465, 646, 737, 639, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	648, 614, 1347, 1351, 709, 627, 1348, 712, 713, 714,
	715, 716, 717, 718, 629, 721, 723, 723, 723, 723,
	723, 723, 723, 723, 731, 732, 733, 734, 637, 392,
	711, 666, 665, 117, 117, 1275, 1350, 392, 1125, 1236,
	1213, 1081, 414, 1082, 743, 1501, 754, 1212, 667, 408,
	755, 970, 387, 971, 1532, 402, 1211, 1208, 739, 774,
	939, 941, 942, 1234, 1124, 1274, 940, 1203, 1202, 1235,
	856, 855, 682, 683, 684, 685, 686, 679, 1201, 852,
	689, 680, 681, 682, 683, 684, 685, 686, 679, 738,
	655, 689, 1558, 1233, 1099, 872, 873, 874, 1502, 669,
	29, 1098, 858, 827, 699, 1091, 670, 930, 724, 725,
	726, 727, 728, 729, 730, 857, 850, 1232, 117, 117,
	459, 1215, 851, 1431, 741, 1349, 806, 117, 117, 886,
	760, 117, 759, 751, 1338, 1125, 1337, 655, 768, 1216,
	1209, 1205, 1501, 1204, 720, 829, 1268, 1231, 117, 1197,
	668, 1214, 1128, 1127, 917, 859, 1096, 1078, 1553, 472,
	1503, 1124, 465, 1550, 947, 1492, 666, 665, 1421, 1530,
	1421, 1495, 854, 1267, 740, 498, 497, 499, 500, 501,
	502, 1425, 771, 667, 503, 1293, 1490, 472, 1421, 1467,
	545, 926, 887, 882, 883, 1502, 910, 1058, 53, 392,
	915, 907, 1421, 1466, 1380, 472, 1421, 472, 1408, 472,
	712, 1295, 392, 1264, 975, 1261, 387, 1406, 472, 1149,
	472, 711, 1255, 1254, 619, 620, 1210, 997, 1297, 27,
	1301, 853, 1296, 987, 1294, 1251, 1252, 633, 861, 1299,
	117, 860, 1251, 1250, 472, 638, 1027, 972, 618, 1298,
	983, 392, 617, 985, 1384, 1387, 1388, 1389, 1385, 1000,
	1386, 1390, 1300, 1302, 1480, 402, 387, 1185, 932, 472,
	1419, 1180, 616, 1029, 1030, 1120, 1015, 973, 974, 564,
	563, 61, 415, 1119, 1418, 1028, 27, 993, 1019, 27,
	57, 1417, 933, 936, 937, 948, 943, 944, 1320, 1034,
	1016, 1037, 1038, 1039, 1040, 1041, 1003, 1004, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1014, 640, 1022, 1179, 1247, 552, 1021, 1180, 1177,
	1016, 1456, 1402, 932, 1380, 1149, 866, 867, 868, 869,
	655, 806, 758, 990, 991, 1031, 27, 57, 57, 986,
	57, 1469, 877, 878, 879, 1253, 988, 989, 750, 750,
	992, 998, 1036, 534, 1384, 1387, 1388, 1389, 1385, 1149,
	1386, 1390, 764, 359, 999, 762, 1001, 1002, 735, 546,
	117, 117, 117, 865, 1092, 1093, 1020, 1149, 1415, 1010,
	703, 704, 705, 706, 707, 708, 1064, 885, 1479, 1016,
	1344, 1339, 1113, 1114, 72, 1245, 881, 57, 1117, 1071,
	678, 677, 687, 688, 680, 681, 682, 683, 684, 685,
	686, 679, 876, 875, 689, 1320, 891, 890, 889, 53,
	628, 1097, 25, 1443, 57, 1441, 1482, 1282, 1444, 747,
	1442, 1481, 947, 444, 916, 1440, 1445, 1104, 1388, 1389,
	1131, 1439, 1144, 925, 363, 364, 928, 678, 677, 687,
	688, 680, 681, 682, 683, 684, 685, 686, 679, 1551,
	1537, 689, 392, 934, 1135, 935, 540, 1523, 1130, 1132,
	1009, 1156, 1008, 1124, 1357, 1116, 474, 1153, 1125, 538,
	1115, 1094, 560, 544, 1400, 357, 117, 1139, 677, 687,
	688, 680, 681, 682, 683, 684, 685, 686, 679, 1182,
	1183, 689, 1182, 475, 1124, 888, 630, 1392, 754, 540,
	402, 402, 755, 1454, 387, 360, 361, 73, 1243, 1199,
	1200, 1077, 1181, 1076, 1342, 1181, 1206, 1207, 1341, 1063,
	1195, 1196, 1190, 1547, 1343, 1167, 1186, 1238, 1536, 1535,
	1125, 1129, 354, 1534, 1198, 1007, 1434, 562, 1189, 1184,
	1133, 985, 1187, 1006, 86, 1013, 561, 355, 61, 1433,
	1240, 1379, 758, 948, 945, 632, 1242, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 374, 1486, 1079, 117, 663, 63, 1256, 1257,
	1258, 454, 7, 402, 451, 6, 1244, 453, 5, 65,
	1146, 452, 4, 58, 1147, 1, 393, 1462, 1278, 1279,
	1148, 622, 838, 507, 1169, 1158, 1159, 1160, 1246, 837,
	1164, 1533, 74, 1524, 1498, 1170, 1165, 1171, 1172, 1173,
	1174, 1500, 1505, 392, 1473, 1188, 1470, 1472, 392, 778,
	777, 1265, 1263, 398, 828, 844, 843, 842, 1153, 840,
	1276, 387, 1280, 387, 1277, 115, 1194, 199, 117, 1089,
	862, 1269, 1324, 402, 402, 1317, 203, 1273, 1325, 1286,
	53, 754, 1321, 1290, 1289, 755, 1287, 754, 1331, 1304,
	1281, 755, 199, 1328, 1330, 983, 1306, 1291, 985, 1303,
	1310, 1145, 1311, 1326, 849, 1100, 1101, 1102, 848, 1332,
	772, 803, 199, 802, 199, 801, 800, 799, 798, 1335,
	1336, 678, 677, 687, 688, 680, 681, 682, 683, 684,
	685, 686, 679, 797, 796, 689, 199, 795, 794, 793,
	791, 790, 789, 788, 787, 786, 785, 392, 392, 392,
	784, 780, 783, 782, 1411, 781, 1240, 1345, 847, 845,
	841, 1346, 1354, 1354, 1354, 569, 1355, 1356, 678, 677,
	687, 688, 680, 681, 682, 683, 684, 685, 686, 679,
	567, 568, 689, 566, 571, 570, 1285, 565, 1391, 410,
	1395, 1150, 88, 1118, 336, 1105, 1308, 1358, 1359, 892,
	1316, 43, 84, 1374, 697, 1005, 1072, 385, 117, 117,
	1023, 763, 761, 1367, 376, 1394, 375, 1329, 1327, 736,
	532, 1175, 1432, 1378, 1166, 719, 994, 485, 938, 496,
	392, 1410, 493, 1333, 1334, 392, 1401, 495, 711, 494,
	742, 671, 477, 1449, 1315, 1354, 641, 197, 1413, 445,
	1354, 96, 392, 1414, 1140, 1141, 1142, 95, 426, 1240,
	1416, 1383, 1381, 1314, 1176, 631, 1375, 387, 1474, 746,
	370, 117, 117, 117, 117, 366, 846, 62, 1317, 1317,
	1317, 1317, 117, 1427, 365, 117, 15, 24, 117, 16,
	14, 1436, 1394, 1438, 1324, 13, 33, 402, 392, 402,
	1325, 1291, 1446, 1458, 1453, 11, 392, 1455, 1435, 10,
	1437, 9, 392, 1460, 8, 987, 356, 1459, 26, 1461,
	1259, 1354, 2, 22, 1468, 23, 1457, 1354, 1362, 1471,
	1363, 1478, 21, 20, 19, 18, 17, 1377, 12, 830,
	1316, 1372, 1373, 831, 1340, 0, 0, 0, 1324, 0,
	0, 0, 0, 655, 1325, 0, 53, 1487, 0, 0,
	392, 0, 0, 1403, 1404, 1405, 1497, 1409, 1504, 1508,
	199, 1494, 1506, 1509, 0, 1354, 0, 0, 1496, 1488,
	402, 1516, 1517, 1518, 0, 1522, 0, 0, 754, 1519,
	1420, 0, 755, 1423, 1424, 1531, 0, 0, 199, 1529,
	1521, 0, 0, 1316, 1316, 1316, 1316, 392, 392, 392,
	1542, 1543, 0, 1430, 0, 0, 0, 1316, 0, 1545,
	0, 0, 1541, 1541, 1541, 0, 0, 0, 0, 0,
	195, 1448, 199, 199, 1548, 0, 1556, 0, 0, 0,
	0, 0, 462, 0, 392, 199, 634, 1283, 1284, 0,
	0, 0, 0, 199, 0, 0, 0, 1364, 1365, 1560,
	1366, 1477, 655, 1368, 0, 1370, 687, 688, 680, 681,
	682, 683, 684, 685, 686, 679, 0, 339, 689, 341,
	342, 647, 350, 351, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 1514, 1515, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 423, 424, 1520, 0, 432, 433,
	434, 0, 436, 437, 438, 439, 440, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 0, 0, 0, 0, 0, 199, 199, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1552, 0,
	1554, 1555, 0, 0, 0, 1360, 587, 0, 0, 0,
	0, 0, 600, 603, 604, 605, 606, 607, 608, 0,
	609, 610, 611, 612, 613, 588, 589, 590, 591, 572,
	573, 601, 0, 575, 0, 0, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 592, 593, 594, 595,
	596, 597, 598, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 199, 0, 0, 0, 0, 0, 0, 0,
	924, 199, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 119, 1429, 0, 836,
	835, 199, 149, 152, 153, 0, 0, 0, 834, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 602, 155, 0, 0, 173,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 982, 647, 0, 125, 982, 982, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 982, 982, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 460, 0, 199, 0, 0, 464, 0, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 129, 0, 0, 171, 184, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 143,
	0, 0, 180, 181, 130, 187, 0, 0, 122, 0,
	0, 164, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 151, 137, 146, 168, 156, 169, 147, 162, 161,
	163, 0, 0, 0, 174, 0, 0, 142, 136, 178,
	133, 159, 126, 120, 0, 127, 128, 132, 131, 0,
	150, 157, 160, 166, 167, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	652, 0, 653, 0, 656, 0, 0, 0, 0, 660,
	661, 662, 177, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 199, 199, 0, 0, 0, 0,
	0, 118, 123, 154, 0, 170, 139, 185, 144, 183,
	182, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 175, 0, 176, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 191, 190, 192, 124, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 676, 0,
	0, 0, 0, 0, 690, 691, 692, 693, 694, 695,
	696, 982, 674, 675, 672, 678, 677, 687, 688, 680,
	681, 682, 683, 684, 685, 686, 679, 982, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	756, 0, 647, 165, 0, 119, 0, 0, 0, 145,
	0, 149, 152, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 920, 0, 0, 135, 0,
	927, 0, 929, 0, 517, 155, 0, 0, 173, 158,
	0, 0, 0, 0, 510, 511, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 530, 498, 497, 499,
	500, 501, 502, 0, 0, 125, 503, 504, 505, 0,
	0, 0, 0, 491, 0, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 488, 489, 0, 0, 0,
	0, 528, 0, 490, 0, 0, 487, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 129, 982, 0, 171, 184, 0, 121, 647,
	982, 0, 0, 0, 0, 0, 0, 134, 143, 0,
	0, 180, 181, 130, 187, 0, 0, 122, 0, 0,
	164, 199, 179, 756, 0, 0, 0, 0, 0, 756,
	151, 137, 146, 168, 156, 169, 147, 162, 161, 163,
	0, 0, 0, 174, 0, 0, 142, 136, 178, 133,
	159, 126, 120, 0, 127, 128, 132, 131, 0, 150,
	157, 160, 166, 167, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 141, 518, 524, 527, 0, 525, 522,
	523, 521, 520, 519, 529, 512, 513, 515, 0, 514,
	118, 123, 154, 0, 170, 139, 185, 144, 183, 182,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 175, 0, 176, 0, 0, 0, 148,
	0, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 191, 190, 192, 124, 193, 194,
	0, 199, 1398, 0, 0, 0, 0, 0, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 199, 199, 199, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 199, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 303, 260, 322, 235, 250, 334, 252, 253,
	290, 216, 270, 165, 248, 119, 0, 217, 0, 145,
	0, 149, 152, 153, 0, 300, 0, 0, 0, 311,
	320, 267, 0, 238, 209, 245, 210, 264, 135, 234,
	305, 273, 251, 0, 328, 155, 282, 0, 173, 158,
	0, 0, 266, 308, 268, 301, 259, 291, 227, 281,
	323, 249, 287, 0, 0, 0, 391, 0, 0, 0,
	756, 0, 0, 0, 0, 125, 284, 317, 247, 286,
	289, 208, 283, 0, 212, 218, 333, 315, 241, 242,
	0, 0, 0, 0, 0, 0, 1260, 265, 269, 297,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 239,
	0, 280, 0, 0, 0, 222, 214, 263, 0, 0,
	0, 226, 0, 240, 298, 0, 0, 0, 0, 255,
	256, 258, 294, 293, 309, 316, 186, 324, 236, 237,
	246, 306, 129, 244, 254, 171, 184, 288, 121, 313,
	307, 278, 261, 262, 213, 0, 296, 134, 143, 233,
	285, 180, 181, 130, 187, 219, 330, 122, 390, 329,
	164, 389, 179, 314, 279, 275, 215, 312, 277, 274,
	151, 137, 146, 168, 156, 169, 147, 162, 161, 163,
	0, 211, 0, 174, 321, 335, 142, 136, 178, 133,
	159, 126, 120, 224, 127, 128, 132, 131, 0, 150,
	157, 160, 166, 167, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 310, 0, 0, 0, 0,
	0, 177, 223, 141, 230, 228, 231, 302, 229, 271,
	272, 325, 326, 327, 299, 225, 0, 0, 304, 276,
	118, 123, 154, 332, 170, 139, 185, 144, 183, 182,
	140, 0, 0, 0, 0, 0, 243, 331, 295, 292,
	318, 0, 138, 175, 0, 176, 378, 0, 0, 383,
	381, 382, 386, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 191, 190, 192, 124, 193, 194,
	319, 303, 260, 322, 235, 250, 334, 252, 253, 290,
	216, 270, 165, 248, 119, 0, 217, 0, 145, 0,
	149, 152, 153, 0, 300, 0, 0, 0, 311, 320,
	267, 0, 238, 209, 245, 210, 264, 135, 234, 305,
	273, 251, 0, 328, 155, 282, 0, 173, 158, 0,
	0, 266, 308, 268, 301, 259, 291, 227, 281, 323,
	249, 287, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 284, 317, 247, 286, 289,
	208, 283, 0, 212, 218, 333, 315, 241, 242, 0,
	0, 0, 0, 0, 0, 0, 265, 269, 297, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 239, 0,
	280, 0, 0, 0, 222, 214, 263, 0, 0, 0,
	226, 0, 240, 298, 0, 0, 0, 0, 255, 256,
	258, 294, 293, 309, 316, 186, 324, 236, 237, 246,
	306, 129, 244, 254, 171, 184, 288, 121, 313, 307,
	278, 261, 262, 213, 0, 296, 134, 143, 233, 285,
	180, 181, 130, 187, 219, 330, 122, 390, 329, 164,
	389, 179, 314, 279, 275, 215, 312, 277, 274, 151,
	137, 146, 168, 156, 169, 147, 162, 161, 163, 0,
	211, 0, 174, 321, 335, 142, 136, 178, 133, 159,
	126, 120, 224, 127, 128, 132, 131, 0, 150, 157,
	160, 166, 167, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 310, 0, 0, 0, 0, 0,
	177, 223, 141, 230, 228, 231, 302, 229, 271, 272,
	325, 326, 327, 299, 225, 0, 0, 304, 276, 118,
	123, 154, 332, 170, 139, 185, 144, 183, 182, 140,
	0, 0, 0, 0, 0, 243, 331, 295, 292, 318,
	0, 138, 175, 0, 176, 0, 0, 0, 383, 381,
	382, 386, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 191, 190, 192, 124, 193, 194, 319,
	303, 260, 322, 235, 250, 334, 252, 253, 290, 216,
	270, 165, 248, 119, 0, 217, 0, 145, 0, 149,
	152, 153, 0, 300, 0, 0, 0, 311, 320, 267,
	0, 238, 209, 245, 210, 264, 135, 234, 305, 273,
	251, 0, 328, 155, 282, 0, 173, 158, 0, 0,
	266, 308, 268, 301, 259, 291, 227, 281, 323, 249,
	287, 0, 0, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 284, 317, 247, 286, 289, 208,
	283, 0, 212, 218, 333, 315, 241, 242, 0, 0,
	0, 0, 0, 0, 0, 265, 269, 297, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 239, 0, 280,
	0, 0, 0, 222, 214, 263, 0, 0, 0, 226,
	0, 240, 298, 0, 0, 0, 0, 255, 256, 258,
	294, 293, 309, 316, 186, 324, 236, 237, 246, 306,
	129, 244, 254, 171, 184, 288, 121, 313, 307, 278,
	261, 262, 213, 0, 296, 134, 143, 233, 285, 180,
	181, 130, 187, 219, 330, 122, 390, 329, 164, 389,
	179, 314, 279, 275, 215, 312, 277, 274, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 211,
	0, 174, 321, 335, 142, 136, 178, 133, 159, 126,
	120, 224, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 310, 0, 0, 0, 0, 0, 177,
	223, 141, 230, 228, 231, 302, 229, 271, 272, 325,
	326, 327, 299, 225, 0, 0, 304, 276, 118, 123,
	154, 332, 170, 139, 185, 144, 183, 182, 140, 0,
	0, 0, 0, 0, 243, 331, 295, 292, 318, 0,
	138, 175, 0, 176, 553, 0, 0, 148, 0, 0,
	386, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194, 319, 303,
	260, 322, 235, 250, 334, 252, 253, 290, 216, 270,
	165, 248, 119, 0, 217, 0, 145, 0, 149, 152,
	153, 0, 300, 0, 0, 0, 311, 320, 267, 0,
	238, 209, 245, 210, 264, 135, 234, 305, 273, 251,
	0, 328, 155, 282, 0, 173, 158, 0, 0, 266,
	308, 268, 301, 259, 291, 227, 281, 323, 249, 287,
	0, 0, 0, 391, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 284, 317, 247, 286, 289, 208, 283,
	0, 212, 218, 333, 315, 241, 242, 0, 0, 0,
	0, 0, 0, 0, 265, 269, 297, 257, 0, 0,
	0, 0, 0, 0, 1426, 0, 239, 0, 280, 0,
	0, 0, 222, 214, 263, 0, 0, 0, 226, 0,
	240, 298, 0, 0, 0, 0, 255, 256, 258, 294,
	293, 309, 316, 186, 324, 236, 237, 246, 306, 129,
	244, 254, 171, 184, 288, 121, 313, 307, 278, 261,
	262, 213, 0, 296, 134, 143, 233, 285, 180, 181,
	130, 187, 219, 330, 122, 220, 329, 164, 221, 179,
	314, 279, 275, 215, 312, 277, 274, 151, 137, 146,
	168, 156, 169, 147, 162, 161, 163, 0, 211, 0,
	174, 321, 335, 142, 136, 178, 133, 159, 126, 120,
	224, 127, 128, 132, 131, 0, 150, 157, 160, 166,
	167, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 310, 0, 0, 0, 0, 0, 177, 223,
	141, 230, 228, 231, 302, 229, 271, 272, 325, 326,
	327, 299, 225, 0, 0, 304, 276, 118, 123, 154,
	332, 170, 139, 185, 144, 183, 182, 140, 0, 0,
	0, 0, 0, 243, 331, 295, 292, 318, 0, 138,
	175, 0, 176, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 191, 190, 192, 124, 193, 194, 319, 303, 260,
	322, 235, 250, 334, 252, 253, 290, 216, 270, 165,
	248, 119, 0, 217, 0, 145, 0, 149, 152, 153,
	0, 300, 0, 0, 0, 311, 320, 267, 0, 238,
	209, 245, 210, 264, 135, 234, 305, 273, 251, 0,
	328, 155, 282, 0, 173, 158, 0, 0, 266, 308,
	268, 301, 259, 291, 227, 281, 323, 249, 287, 0,
	0, 0, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 284, 317, 247, 286, 289, 208, 283, 0,
	212, 218, 333, 315, 241, 242, 0, 0, 0, 0,
	0, 0, 0, 265, 269, 297, 257, 0, 0, 0,
	0, 0, 0, 1288, 0, 239, 0, 280, 0, 0,
	0, 222, 214, 263, 0, 0, 0, 226, 0, 240,
	298, 0, 0, 0, 0, 255, 256, 258, 294, 293,
	309, 316, 186, 324, 236, 237, 246, 306, 129, 244,
	254, 171, 184, 288, 121, 313, 307, 278, 261, 262,
	213, 0, 296, 134, 143, 233, 285, 180, 181, 130,
	187, 219, 330, 122, 220, 329, 164, 221, 179, 314,
	279, 275, 215, 312, 277, 274, 151, 137, 146, 168,
	156, 169, 147, 162, 161, 163, 0, 211, 0, 174,
	321, 335, 142, 136, 178, 133, 159, 126, 120, 224,
	127, 128, 132, 131, 0, 150, 157, 160, 166, 167,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 310, 0, 0, 0, 0, 0, 177, 223, 141,
	230, 228, 231, 302, 229, 271, 272, 325, 326, 327,
	299, 225, 0, 0, 304, 276, 118, 123, 154, 332,
	170, 139, 185, 144, 183, 182, 140, 0, 0, 0,
	0, 0, 243, 331, 295, 292, 318, 0, 138, 175,
	0, 176, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	191, 190, 192, 124, 193, 194, 319, 303, 260, 322,
	235, 250, 334, 252, 253, 290, 216, 270, 165, 248,
	119, 0, 217, 0, 145, 0, 149, 152, 153, 0,
	300, 0, 0, 0, 311, 320, 267, 0, 238, 209,
	245, 210, 264, 135, 234, 305, 273, 251, 0, 328,
	155, 282, 0, 173, 158, 0, 0, 266, 308, 268,
	301, 259, 291, 227, 281, 323, 249, 287, 0, 0,
	0, 391, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 284, 317, 247, 286, 289, 208, 283, 0, 212,
	218, 333, 315, 241, 242, 0, 0, 0, 0, 0,
	0, 0, 265, 269, 297, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 0, 280, 0, 0, 0,
	222, 214, 263, 0, 0, 0, 226, 0, 240, 298,
	0, 0, 0, 0, 255, 256, 258, 294, 293, 309,
	316, 186, 324, 236, 237, 246, 306, 129, 244, 254,
	171, 184, 288, 121, 313, 307, 278, 261, 262, 213,
	0, 296, 134, 143, 233, 285, 180, 181, 130, 187,
	219, 330, 122, 390, 329, 164, 389, 179, 314, 279,
	275, 215, 312, 277, 274, 151, 137, 146, 168, 156,
	169, 147, 162, 161, 163, 0, 211, 0, 174, 321,
	335, 142, 136, 178, 133, 159, 126, 120, 224, 127,
	128, 132, 131, 0, 150, 157, 160, 166, 167, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	310, 0, 0, 0, 0, 0, 177, 223, 141, 230,
	228, 231, 302, 229, 271, 272, 325, 326, 327, 299,
	225, 0, 0, 304, 276, 118, 123, 154, 332, 170,
	139, 185, 144, 183, 182, 140, 0, 0, 0, 0,
	0, 243, 331, 295, 292, 318, 0, 138, 175, 0,
	176, 0, 0, 0, 148, 0, 0, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 191,
	190, 192, 124, 193, 194, 319, 303, 260, 322, 235,
	250, 334, 252, 253, 290, 216, 270, 165, 248, 119,
	0, 217, 0, 145, 0, 149, 152, 153, 0, 300,
	0, 0, 0, 311, 320, 267, 0, 238, 209, 245,
	210, 264, 135, 234, 305, 273, 251, 0, 328, 155,
	282, 0, 173, 158, 0, 0, 266, 308, 268, 301,
	259, 291, 227, 281, 323, 249, 287, 0, 0, 0,
	204, 0, 205, 0, 0, 0, 0, 0, 0, 125,
	284, 317, 247, 286, 289, 208, 283, 0, 212, 218,
	333, 315, 241, 242, 0, 0, 0, 0, 0, 0,
	0, 265, 269, 297, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 239, 0, 280, 0, 0, 0, 222,
	214, 263, 0, 0, 0, 226, 0, 240, 298, 0,
	0, 0, 0, 255, 256, 258, 294, 293, 309, 316,
	186, 324, 236, 237, 246, 306, 129, 244, 254, 171,
	184, 288, 121, 313, 307, 278, 261, 262, 213, 0,
	296, 134, 143, 233, 285, 180, 181, 130, 187, 219,
	330, 122, 220, 329, 164, 221, 179, 314, 279, 275,
	215, 312, 277, 274, 151, 137, 146, 168, 156, 169,
	147, 162, 161, 163, 0, 211, 0, 174, 321, 335,
	142, 136, 178, 133, 159, 126, 120, 224, 127, 128,
	132, 131, 0, 150, 157, 160, 166, 167, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 310,
	0, 0, 0, 0, 0, 177, 223, 141, 230, 228,
	231, 302, 229, 271, 272, 325, 326, 327, 299, 225,
	0, 0, 304, 276, 118, 123, 154, 332, 170, 139,
	185, 144, 183, 182, 140, 0, 0, 0, 0, 0,
	243, 331, 295, 292, 318, 0, 138, 175, 0, 176,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 191, 190,
	192, 124, 193, 194, 319, 303, 260, 322, 235, 250,
	334, 252, 253, 290, 216, 270, 165, 248, 119, 0,
	217, 0, 145, 0, 149, 152, 153, 0, 300, 0,
	0, 0, 311, 320, 267, 0, 238, 209, 245, 210,
	264, 135, 234, 305, 273, 251, 0, 328, 155, 282,
	0, 173, 158, 0, 0, 266, 308, 268, 301, 259,
	291, 227, 281, 323, 249, 287, 0, 0, 0, 391,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 284,
	317, 247, 286, 289, 208, 283, 0, 212, 218, 333,
	315, 241, 242, 0, 0, 0, 0, 0, 0, 0,
	265, 269, 297, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 239, 0, 280, 0, 0, 0, 222, 214,
	263, 0, 0, 0, 226, 0, 240, 298, 0, 0,
	0, 0, 255, 256, 258, 294, 293, 309, 316, 186,
	324, 236, 237, 246, 306, 129, 244, 254, 171, 184,
	288, 121, 313, 307, 278, 261, 262, 213, 0, 296,
	134, 143, 233, 285, 180, 181, 130, 187, 219, 330,
	122, 220, 329, 164, 221, 179, 314, 279, 275, 215,
	312, 277, 274, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 211, 0, 174, 321, 335, 142,
	136, 178, 133, 159, 126, 120, 224, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 310, 0,
	0, 0, 0, 0, 177, 223, 141, 230, 228, 231,
	302, 229, 271, 272, 325, 326, 327, 299, 225, 0,
	0, 304, 276, 118, 123, 154, 332, 170, 139, 185,
	144, 183, 182, 140, 0, 0, 0, 0, 0, 243,
	331, 295, 292, 318, 0, 138, 175, 0, 176, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 319, 303, 260, 322, 235, 250, 334,
	252, 253, 290, 216, 270, 165, 248, 119, 0, 217,
	0, 145, 0, 149, 152, 153, 0, 300, 0, 0,
	0, 311, 320, 267, 0, 238, 209, 245, 210, 264,
	135, 234, 305, 273, 251, 0, 328, 155, 282, 0,
	173, 158, 0, 0, 266, 308, 268, 301, 259, 291,
	227, 281, 323, 249, 287, 0, 0, 0, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 284, 317,
	247, 286, 289, 208, 283, 0, 212, 218, 333, 315,
	241, 242, 0, 0, 0, 0, 0, 0, 0, 265,
	269, 297, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 280, 0, 0, 0, 222, 214, 263,
	0, 0, 0, 226, 0, 240, 298, 0, 0, 0,
	0, 255, 256, 258, 294, 293, 309, 316, 186, 324,
	236, 237, 246, 306, 129, 244, 254, 171, 184, 288,
	121, 313, 307, 278, 261, 262, 213, 0, 296, 134,
	143, 233, 285, 180, 181, 130, 187, 219, 330, 122,
	220, 329, 164, 221, 179, 314, 279, 275, 215, 312,
	277, 274, 151, 137, 146, 168, 156, 169, 147, 162,
	161, 163, 0, 211, 0, 174, 321, 335, 142, 136,
	178, 133, 159, 126, 120, 224, 127, 128, 132, 131,
	0, 150, 157, 160, 166, 167, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 310, 0, 0,
	0, 0, 0, 177, 223, 141, 230, 228, 231, 302,
	229, 271, 272, 325, 326, 327, 299, 225, 0, 0,
	304, 276, 118, 123, 154, 332, 170, 139, 185, 144,
	183, 182, 140, 0, 0, 0, 0, 0, 243, 331,
	295, 292, 318, 0, 138, 175, 0, 176, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 191, 190, 192, 124,
	193, 194, 319, 303, 260, 322, 235, 250, 334, 252,
	253, 290, 216, 270, 165, 248, 119, 0, 217, 0,
	145, 0, 149, 152, 153, 0, 300, 0, 0, 0,
	311, 320, 267, 0, 238, 209, 245, 210, 264, 135,
	234, 305, 273, 251, 0, 328, 155, 282, 0, 173,
	158, 0, 0, 266, 308, 268, 301, 259, 291, 227,
	281, 323, 249, 287, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 284, 317, 247,
	286, 289, 208, 283, 0, 212, 218, 333, 315, 241,
	242, 0, 0, 0, 0, 0, 0, 0, 265, 269,
	297, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	239, 0, 280, 0, 0, 0, 222, 214, 263, 0,
	0, 0, 226, 0, 240, 298, 0, 0, 0, 0,
	255, 256, 258, 294, 293, 309, 316, 186, 324, 236,
	237, 246, 306, 129, 244, 254, 171, 184, 288, 121,
	313, 307, 278, 261, 262, 213, 0, 296, 134, 143,
	233, 285, 180, 181, 130, 187, 219, 330, 122, 220,
	329, 164, 221, 179, 314, 279, 275, 215, 312, 277,
	274, 151, 137, 146, 168, 156, 169, 147, 162, 161,
	163, 0, 211, 0, 174, 321, 335, 142, 136, 178,
	133, 159, 126, 120, 224, 127, 128, 132, 131, 0,
	150, 157, 160, 166, 167, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 310, 0, 0, 0,
	0, 0, 177, 223, 141, 230, 228, 231, 302, 229,
	271, 272, 325, 326, 327, 299, 225, 0, 0, 304,
	276, 118, 123, 154, 332, 170, 139, 185, 144, 183,
	182, 140, 0, 0, 0, 0, 0, 243, 331, 295,
	292, 318, 0, 138, 175, 0, 176, 0, 0, 0,
	148, 165, 0, 119, 0, 0, 0, 145, 0, 149,
	152, 153, 0, 188, 189, 191, 190, 192, 124, 193,
	194, 977, 0, 481, 0, 0, 135, 480, 0, 0,
	0, 0, 517, 155, 0, 0, 173, 158, 0, 0,
	0, 0, 510, 511, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 530, 498, 497, 499, 500, 501,
	502, 0, 0, 125, 503, 504, 505, 0, 0, 0,
	478, 491, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 489, 980, 0, 0, 0, 528,
	0, 490, 0, 0, 487, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	129, 0, 0, 171, 184, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 143, 0, 0, 180,
	181, 130, 187, 0, 0, 122, 0, 0, 164, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 0,
	0, 174, 0, 0, 142, 136, 178, 133, 159, 126,
	120, 0, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 141, 518, 524, 527, 0, 525, 522, 523, 521,
	520, 519, 529, 512, 513, 515, 0, 514, 118, 123,
	154, 0, 170, 139, 185, 144, 183, 182, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 175, 0, 176, 0, 0, 165, 148, 119, 0,
	0, 0, 145, 0, 149, 152, 153, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194, 481, 0,
	0, 135, 480, 0, 0, 0, 0, 517, 155, 0,
	0, 173, 158, 0, 0, 0, 0, 510, 511, 0,
	0, 0, 0, 0, 0, 769, 57, 0, 0, 530,
	498, 497, 499, 500, 501, 502, 0, 0, 125, 503,
	504, 505, 770, 0, 0, 478, 491, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 489,
	0, 0, 0, 0, 528, 0, 490, 0, 0, 487,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 129, 0, 0, 171, 184,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 143, 0, 0, 180, 181, 130, 187, 0, 0,
	122, 0, 0, 164, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 0, 0, 174, 0, 0, 142,
	136, 178, 133, 159, 126, 120, 0, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 141, 518, 524, 527,
	0, 525, 522, 523, 521, 520, 519, 529, 512, 513,
	515, 0, 514, 118, 123, 154, 0, 170, 139, 185,
	144, 183, 182, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 175, 0, 176, 0,
	0, 165, 148, 119, 0, 0, 0, 145, 0, 149,
	152, 153, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 481, 0, 0, 135, 480, 0, 0,
	0, 0, 517, 155, 0, 0, 173, 158, 0, 0,
	0, 0, 510, 511, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 472, 530, 498, 497, 499, 500, 501,
	502, 0, 0, 125, 503, 504, 505, 0, 0, 0,
	478, 491, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 489, 0, 0, 0, 0, 528,
	0, 490, 0, 0, 487, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	129, 0, 0, 171, 184, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 143, 0, 0, 180,
	181, 130, 187, 0, 0, 122, 0, 0, 164, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 0,
	0, 174, 0, 0, 142, 136, 178, 133, 159, 126,
	120, 0, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 141, 518, 524, 527, 0, 525, 522, 523, 521,
	520, 519, 529, 512, 513, 515, 0, 514, 118, 123,
	154, 0, 170, 139, 185, 144, 183, 182, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 175, 0, 176, 0, 0, 165, 148, 119, 0,
	0, 0, 145, 0, 149, 152, 153, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194, 481, 0,
	0, 135, 480, 0, 0, 0, 0, 517, 155, 0,
	0, 173, 158, 0, 0, 0, 0, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 530,
	498, 497, 499, 500, 501, 502, 0, 0, 125, 503,
	504, 505, 0, 0, 0, 478, 491, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 489,
	980, 0, 0, 0, 528, 0, 490, 0, 0, 487,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 129, 0, 0, 171, 184,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 143, 0, 0, 180, 181, 130, 187, 0, 0,
	122, 0, 0, 164, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 0, 0, 174, 0, 0, 142,
	136, 178, 133, 159, 126, 120, 0, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 141, 518, 524, 527,
	0, 525, 522, 523, 521, 520, 519, 529, 512, 513,
	515, 0, 514, 118, 123, 154, 0, 170, 139, 185,
	144, 183, 182, 140, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 0, 138, 175, 0, 176, 0,
	0, 165, 148, 119, 0, 0, 0, 145, 0, 149,
	152, 153, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 481, 0, 0, 135, 480, 0, 0,
	0, 0, 517, 155, 0, 0, 173, 158, 0, 0,
	0, 0, 510, 511, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 530, 498, 497, 499, 500, 501,
	502, 0, 0, 125, 503, 504, 505, 0, 0, 0,
	478, 491, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 489, 0, 0, 0, 0, 528,
	0, 490, 0, 0, 487, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	129, 0, 0, 171, 184, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 143, 0, 0, 180,
	181, 130, 187, 0, 0, 122, 0, 0, 164, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 0,
	0, 174, 0, 0, 142, 136, 178, 133, 159, 126,
	120, 0, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 141, 518, 524, 527, 0, 525, 522, 523, 521,
	520, 519, 529, 512, 513, 515, 0, 514, 118, 123,
	154, 0, 170, 139, 185, 144, 183, 182, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 175, 0, 176, 0, 0, 165, 148, 119, 0,
	0, 0, 145, 0, 149, 152, 153, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194, 481, 0,
	0, 135, 480, 0, 0, 0, 0, 517, 155, 0,
	0, 173, 158, 0, 0, 0, 0, 510, 511, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 530,
	498, 497, 499, 500, 501, 502, 0, 0, 125, 503,
	504, 505, 0, 0, 0, 478, 491, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 489,
	0, 0, 0, 0, 528, 0, 490, 0, 0, 487,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 129, 0, 0, 171, 184,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 143, 0, 0, 180, 181, 130, 187, 0, 0,
	122, 0, 0, 164, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 0, 0, 174, 0, 0, 142,
	136, 178, 133, 159, 126, 120, 0, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 141, 518, 524, 527,
	0, 525, 522, 523, 521, 520, 519, 529, 512, 513,
	515, 0, 514, 118, 123, 154, 0, 170, 139, 185,
	144, 183, 182, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 175, 0, 176, 165,
	0, 119, 148, 0, 111, 145, 110, 149, 152, 153,
	0, 0, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 0, 135, 108, 0, 0, 0, 0,
	0, 155, 0, 0, 173, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 391, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 677, 687,
	688, 680, 681, 682, 683, 684, 685, 686, 679, 0,
	0, 689, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 100, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 129, 0,
	0, 171, 184, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 143, 0, 0, 180, 181, 130,
	187, 0, 0, 122, 106, 0, 164, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 151, 137, 146, 168,
	156, 169, 147, 162, 161, 163, 0, 0, 0, 174,
	0, 0, 142, 136, 178, 133, 159, 126, 120, 0,
	127, 128, 132, 131, 0, 150, 157, 160, 166, 167,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 93, 0, 104,
	102, 0, 91, 0, 99, 0, 0, 177, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 123, 154, 0,
	170, 139, 185, 144, 183, 182, 140, 0, 0, 94,
	103, 97, 98, 101, 0, 0, 0, 0, 138, 175,
	0, 176, 0, 0, 0, 148, 165, 0, 119, 0,
	0, 0, 145, 0, 149, 152, 153, 0, 188, 189,
	191, 190, 192, 124, 193, 194, 0, 1152, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 173, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	0, 1154, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 666, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 129, 0, 0, 171, 184,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 143, 0, 0, 180, 181, 130, 187, 0, 0,
	122, 0, 0, 164, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 0, 0, 174, 0, 0, 142,
	136, 178, 133, 159, 126, 120, 0, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 123, 154, 0, 170, 139, 185,
	144, 183, 182, 140, 0, 0, 0, 0, 27, 0,
	0, 0, 0, 0, 0, 138, 175, 0, 176, 165,
	0, 119, 148, 0, 0, 145, 0, 149, 152, 153,
	0, 0, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 0, 135, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 173, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 129, 0,
	0, 171, 184, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 143, 0, 0, 180, 181, 130,
	187, 0, 0, 122, 0, 0, 164, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 151, 137, 146, 168,
	156, 169, 147, 162, 161, 163, 0, 0, 0, 174,
	0, 0, 142, 136, 178, 133, 159, 126, 120, 0,
	127, 128, 132, 131, 0, 150, 157, 160, 166, 167,
	172, 0, 0, 0, 0, 165, 0, 119, 0, 0,
	0, 145, 0, 149, 152, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1397, 177, 0, 141,
	135, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	173, 158, 0, 0, 0, 0, 118, 123, 154, 0,
	170, 139, 185, 144, 183, 182, 140, 0, 116, 0,
	1399, 0, 0, 0, 0, 0, 0, 125, 138, 175,
	0, 176, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	191, 190, 192, 124, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 129, 0, 0, 171, 184, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	143, 0, 0, 180, 181, 130, 187, 0, 0, 122,
	0, 0, 164, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 151, 137, 146, 168, 156, 169, 147, 162,
	161, 163, 0, 0, 0, 174, 0, 0, 142, 136,
	178, 133, 159, 126, 120, 0, 127, 128, 132, 131,
	0, 150, 157, 160, 166, 167, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 123, 154, 0, 170, 139, 185, 144,
	183, 182, 140, 0, 0, 0, 0, 27, 0, 0,
	0, 0, 0, 0, 138, 175, 0, 176, 165, 0,
	119, 148, 0, 0, 145, 0, 149, 152, 153, 0,
	0, 0, 0, 0, 188, 189, 191, 190, 192, 124,
	193, 194, 0, 135, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 173, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 129, 0, 0,
	171, 184, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 143, 0, 0, 180, 181, 130, 187,
	0, 0, 122, 0, 0, 164, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 151, 137, 146, 168, 156,
	169, 147, 162, 161, 163, 0, 0, 0, 174, 0,
	0, 142, 136, 178, 133, 159, 126, 120, 0, 127,
	128, 132, 131, 0, 150, 157, 160, 166, 167, 172,
	0, 0, 0, 0, 165, 0, 119, 0, 0, 0,
	145, 0, 149, 152, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 141, 135,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 173,
	158, 0, 0, 0, 0, 118, 123, 154, 0, 170,
	139, 185, 144, 183, 182, 140, 0, 391, 0, 0,
	744, 0, 0, 745, 0, 0, 125, 138, 175, 0,
	176, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 191,
	190, 192, 124, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 129, 0, 0, 171, 184, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 143,
	0, 0, 180, 181, 130, 187, 0, 0, 122, 0,
	0, 164, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 151, 137, 146, 168, 156, 169, 147, 162, 161,
	163, 0, 0, 0, 174, 0, 0, 142, 136, 178,
	133, 159, 126, 120, 0, 127, 128, 132, 131, 0,
	150, 157, 160, 166, 167, 172, 0, 0, 0, 0,
	165, 0, 119, 0, 0, 0, 145, 0, 149, 152,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 141, 135, 558, 0, 0, 0,
	0, 0, 155, 0, 0, 173, 158, 0, 0, 0,
	0, 118, 123, 154, 0, 170, 139, 185, 144, 183,
	182, 140, 0, 391, 0, 557, 0, 0, 0, 0,
	0, 0, 125, 138, 175, 0, 176, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 191, 190, 192, 124, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 129,
	0, 0, 171, 184, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 143, 0, 0, 180, 181,
	130, 187, 0, 0, 122, 0, 0, 164, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 151, 137, 146,
	168, 156, 169, 147, 162, 161, 163, 0, 0, 0,
	174, 0, 0, 142, 136, 178, 133, 159, 126, 120,
	0, 127, 128, 132, 131, 0, 150, 157, 160, 166,
	167, 172, 0, 0, 0, 0, 165, 0, 119, 0,
	0, 0, 145, 0, 149, 152, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	141, 135, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 173, 158, 0, 0, 0, 0, 118, 123, 154,
	0, 170, 139, 185, 144, 183, 182, 140, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 138,
	175, 0, 176, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 191, 190, 192, 124, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 129, 0, 0, 171, 184,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 143, 0, 0, 180, 181, 130, 187, 0, 0,
	122, 0, 0, 164, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 151, 137, 146, 168, 156, 169, 147,
	162, 161, 163, 0, 0, 0, 174, 0, 0, 142,
	136, 178, 133, 159, 126, 120, 0, 127, 128, 132,
	131, 0, 150, 157, 160, 166, 167, 172, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 119, 0, 0,
	0, 145, 0, 149, 152, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 141, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	173, 158, 0, 118, 123, 154, 0, 170, 139, 185,
	200, 183, 182, 201, 0, 202, 0, 0, 116, 0,
	1399, 0, 0, 0, 0, 138, 175, 125, 176, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 191, 190, 192,
	124, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 129, 0, 0, 171, 184, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	143, 0, 0, 180, 181, 130, 187, 0, 0, 122,
	0, 0, 164, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 151, 137, 146, 168, 156, 169, 147, 162,
	161, 163, 0, 0, 0, 174, 0, 0, 142, 136,
	178, 133, 159, 126, 120, 0, 127, 128, 132, 131,
	0, 150, 157, 160, 166, 167, 172, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 119, 0, 0, 0,
	145, 0, 149, 152, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 141, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 173,
	158, 0, 118, 123, 154, 0, 170, 139, 185, 144,
	183, 182, 140, 0, 57, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 138, 175, 125, 176, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 191, 190, 192, 124,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 129, 0, 0, 171, 184, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 143,
	0, 0, 180, 181, 130, 187, 0, 0, 122, 0,
	0, 164, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 151, 137, 146, 168, 156, 169, 147, 162, 161,
	163, 0, 0, 0, 174, 0, 0, 142, 136, 178,
	133, 159, 126, 120, 0, 127, 128, 132, 131, 0,
	150, 157, 160, 166, 167, 172, 0, 0, 0, 0,
	165, 0, 119, 0, 0, 0, 145, 0, 149, 152,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 141, 135, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 173, 158, 0, 0, 0,
	0, 118, 123, 154, 0, 170, 139, 185, 144, 183,
	182, 140, 0, 391, 0, 1154, 0, 0, 0, 0,
	0, 0, 125, 138, 175, 0, 176, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 191, 190, 192, 124, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 129,
	0, 0, 171, 184, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 143, 0, 0, 180, 181,
	130, 187, 0, 0, 122, 0, 0, 164, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 151, 137, 146,
	168, 156, 169, 147, 162, 161, 163, 0, 0, 0,
	174, 0, 0, 142, 136, 178, 133, 159, 126, 120,
	0, 127, 128, 132, 131, 0, 150, 157, 160, 166,
	167, 172, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 119, 0, 0, 0, 145, 0, 149, 152, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	141, 0, 0, 749, 135, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 173, 158, 0, 118, 123, 154,
	0, 170, 139, 185, 144, 183, 182, 140, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 138,
	175, 125, 176, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 191, 190, 192, 124, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 129, 0,
	0, 171, 184, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 143, 0, 0, 180, 181, 130,
	187, 0, 0, 122, 0, 0, 164, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 151, 137, 146, 168,
	156, 169, 147, 162, 161, 163, 0, 0, 0, 174,
	0, 0, 142, 136, 178, 133, 159, 126, 120, 0,
	127, 128, 132, 131, 0, 150, 157, 160, 166, 167,
	172, 0, 0, 0, 0, 165, 0, 119, 0, 0,
	0, 145, 0, 149, 152, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 141,
	135, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	173, 158, 0, 0, 0, 0, 118, 123, 154, 0,
	170, 139, 185, 144, 183, 182, 140, 0, 401, 0,
	447, 0, 0, 0, 0, 0, 0, 125, 138, 175,
	0, 176, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	191, 190, 192, 124, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 129, 0, 0, 171, 184, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	143, 0, 0, 180, 181, 130, 187, 0, 0, 122,
	0, 0, 164, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 151, 137, 146, 168, 156, 169, 147, 162,
	161, 163, 0, 0, 0, 174, 0, 0, 142, 136,
	178, 133, 159, 126, 120, 0, 127, 128, 132, 131,
	0, 150, 157, 160, 166, 167, 172, 0, 0, 0,
	0, 165, 0, 119, 0, 0, 0, 145, 0, 149,
	152, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 141, 135, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 173, 158, 0, 0,
	0, 0, 118, 123, 154, 0, 170, 139, 185, 144,
	183, 182, 140, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 138, 175, 0, 176, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 191, 190, 192, 124,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	129, 0, 0, 171, 184, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 143, 0, 0, 180,
	181, 130, 187, 0, 0, 122, 0, 0, 164, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 0,
	0, 174, 0, 0, 142, 136, 178, 133, 159, 126,
	120, 0, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 165, 0, 119,
	0, 0, 0, 145, 0, 149, 152, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 141, 135, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 173, 158, 0, 0, 0, 0, 118, 123,
	154, 0, 170, 139, 185, 144, 183, 182, 140, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	138, 175, 0, 176, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 129, 0, 0, 171,
	184, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 143, 0, 0, 180, 181, 130, 187, 0,
	0, 122, 0, 0, 164, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 151, 137, 146, 168, 156, 169,
	147, 162, 161, 163, 0, 0, 0, 174, 0, 0,
	142, 136, 178, 133, 159, 126, 120, 0, 127, 128,
	132, 131, 0, 150, 157, 160, 166, 167, 172, 0,
	0, 0, 0, 165, 0, 119, 0, 0, 0, 145,
	0, 149, 152, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 141, 135, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 173, 158,
	0, 0, 0, 0, 118, 123, 154, 0, 170, 139,
	185, 144, 183, 182, 140, 0, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 138, 175, 0, 176,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 191, 190,
	192, 124, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 129, 0, 0, 171, 184, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 143, 0,
	0, 180, 181, 130, 187, 0, 0, 122, 0, 0,
	164, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	151, 137, 146, 168, 156, 169, 147, 162, 161, 163,
	0, 0, 0, 174, 0, 0, 142, 136, 178, 133,
	159, 126, 120, 0, 127, 128, 132, 131, 0, 150,
	157, 160, 166, 167, 172, 0, 0, 0, 0, 165,
	0, 119, 0, 0, 0, 145, 0, 149, 152, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 141, 135, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 173, 158, 0, 0, 0, 0,
	118, 123, 154, 0, 170, 139, 185, 144, 183, 182,
	140, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 138, 175, 0, 176, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 191, 190, 192, 124, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 129, 0,
	0, 171, 184, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 143, 0, 0, 180, 181, 130,
	187, 0, 0, 122, 0, 0, 164, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 151, 137, 146, 168,
	156, 169, 147, 162, 161, 163, 0, 0, 0, 174,
	0, 0, 142, 136, 178, 133, 159, 126, 120, 0,
	127, 128, 132, 131, 0, 150, 157, 160, 166, 167,
	172, 0, 0, 0, 0, 165, 0, 119, 0, 0,
	0, 145, 0, 149, 152, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 141,
	135, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	173, 158, 0, 0, 0, 0, 118, 123, 154, 0,
	170, 139, 185, 144, 183, 182, 140, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 138, 175,
	0, 176, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	191, 190, 192, 124, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 129, 0, 0, 171, 184, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	143, 0, 0, 180, 181, 130, 187, 0, 0, 122,
	0, 0, 164, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 151, 137, 146, 168, 156, 169, 147, 162,
	161, 163, 0, 0, 0, 174, 0, 0, 142, 136,
	178, 133, 159, 126, 120, 0, 127, 128, 132, 131,
	0, 150, 157, 160, 166, 167, 172, 0, 0, 0,
	0, 165, 0, 119, 0, 0, 0, 145, 0, 149,
	152, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 141, 135, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 173, 158, 0, 0,
	0, 0, 118, 123, 154, 0, 170, 139, 185, 144,
	183, 182, 140, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 138, 175, 0, 176, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 191, 190, 192, 124,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	129, 0, 0, 171, 184, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 143, 0, 0, 180,
	181, 130, 187, 0, 0, 122, 0, 0, 164, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 151, 137,
	146, 168, 156, 169, 147, 162, 161, 163, 0, 0,
	0, 174, 0, 0, 142, 136, 178, 133, 159, 126,
	120, 0, 127, 128, 132, 131, 0, 150, 157, 160,
	166, 167, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 123,
	154, 0, 170, 139, 185, 144, 183, 182, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 175, 0, 176, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 191, 190, 192, 124, 193, 194,
}
var yyPact = [...]int{

	155, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1064, 1102, -1000, -1000, -1000,
	-1000, -1000, -1000, 847, 236, 59, 176, 128, 126, 7249,
	62, 10762, -1000, 8899, 4400, -42, -1000, -163, -1000, -1000,
	-154, -1000, -1000, 850, -1000, -1000, -1000, -1000, -1000, -1000,
	1046, 1062, 877, 999, 910, -1000, -9, 6, 10762, 1092,
	2546, -144, 10350, 157, 152, 151, 150, 157, -1000, -1000,
	-1000, 123, 11174, -1000, 62, 722, 156, -1000, 10762, -1000,
	10762, -59, 42, -1000, -1000, -19, 367, -1000, -1000, -1000,
	-64, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10762, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9938, 352, 166, 227,
	327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 557, -1000, -1000, -1000,
	-1000, -1000, -1000, 791, 791, -1000, 10762, -1000, -1000, -187,
	-1000, -1000, 685, 978, 6979, 6979, 1064, -1000, 850, -1000,
	-1000, -1000, 949, -1000, -1000, 364, 134, -1000, -1000, -1000,
	134, -1000, -1000, 959, 10762, 821, -1000, -1000, -176, 3164,
	-1000, -1000, -1000, -1000, 326, 8693, 8693, -1000, -1000, -1000,
	958, -1000, -1000, -1000, -1000, -1000, 1061, 1052, 721, -1000,
	1550, -1000, -1000, 11174, 353, 712, 692, 688, 10762, 10762,
	65, -1000, -1000, -1000, 156, 874, 11174, 987, -1000, -1000,
	1075, 10762, 10762, -1000, -1000, 367, 367, -1000, -1000, 10762,
	-1000, -1000, -1000, -1000, -1000, 367, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 76, -1000, -1000, -1000, -1000, -1000, 2,
	-1000, -1000, -1000, -1000, -1000, -1000, 321, 5327, -48, -1000,
	-1000, -1000, 6979, -1000, -1000, 217, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1098, 279, 592, -1000, 6979, 2010,
	791, 791, -1000, -1000, 172, -1000, -1000, 2136, 2136, 2136,
	2136, 2136, 2136, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 791, 210, -1000, 6704,
	791, 791, 791, 791, 791, 791, 6979, 791, 791, 791,
	791, 791, 791, 791, 791, 791, 791, 791, 791, 791,
	-1000, -1000, 820, -1000, 457, 1046, 685, 910, 8487, 892,
	-1000, -1000, 9732, 9732, 10556, 1071, 2855, -1000, 817, 814,
	-186, -182, -1000, -176, 5879, -1000, -1000, -1000, -1000, 244,
	-1000, 791, 104, 122, 1767, 546, 25, -1000, -1000, -1000,
	826, -1000, 826, 826, 826, 826, 81, 81, 81, 81,
	-1000, -1000, -1000, -1000, -1000, 866, 865, -1000, 826, 826,
	826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 849,
	849, 849, 840, 840, 65, 986, 872, 871, 870, -1000,
	193, -1000, 65, -1000, 102, -195, -1000, 10762, 10762, -1000,
	-1000, 1046, -62, -1000, -1000, 373, 10762, 10762, 367, -1000,
	10762, -1000, -1000, -1000, 544, -138, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 710, 344, -1000, 10762, -1000, -1000,
	-1000, -1000, -1000, -1000, 933, 6979, 6979, 490, 6979, 6979,
	284, 2136, 382, 362, 2136, 2136, 2136, 2136, 2136, 2136,
	2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 491,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687, -1000,
	850, 614, 614, 169, 169, 169, 169, 169, 7252, 5604,
	5018, 685, 6704, 6429, 6429, 6979, 6979, 6429, 992, 346,
	344, 10144, -1000, 685, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6429, 6429, 6429, 6429, 6979, -1000, -1000, -1000, 978,
	-1000, 992, 1055, -1000, 944, 942, 6429, -1000, -142, 10762,
	-1000, -142, 841, -1000, 311, -1000, 205, 1064, 6979, -1000,
	4091, -1000, -177, -1000, -171, -185, -1000, -1000, -1000, -1000,
	-1000, 344, -1000, 686, 10350, 791, 791, -1000, 122, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 302, 302, 143, 302, 302, 302,
	302, 302, -6, -12, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, -1000, -1000, 637,
	241, 235, -1000, -1000, -1000, -1000, 1017, -1000, 546, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 376, 114, -1000, 1008, -1000, 1006, 595, 1096, 481,
	192, 175, 13, -1000, -1000, 542, 81, 81, -1000, -1000,
	-1000, 957, -1000, -1000, -1000, 594, 594, -1000, -1000, -1000,
	-1000, 538, -1000, -1000, -1000, 531, -1000, -1000, -1000, 10762,
	10762, 10762, -1000, 272, 309, 119, 162, 161, 159, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 302, 302,
	-1000, -1000, 956, 951, 302, 764, 979, -1000, 591, -1000,
	-1000, -1000, 590, 6979, -1000, 367, 1071, -1000, -1000, -1000,
	-1000, 183, 6979, -1000, -1000, 931, 284, 305, -1000, -1000,
	403, -1000, -1000, 344, 344, 1173, -1000, -1000, -1000, -1000,
	382, 2136, 2136, 2136, 815, 1173, 1126, 1469, 902, 169,
	471, 471, 238, 238, 238, 238, 238, 482, 482, -1000,
	-1000, -1000, 685, -1000, -1000, -1000, 685, 6429, 811, -1000,
	-1000, 7529, 204, 791, 200, -1000, -1000, 685, 661, 661,
	350, 393, 661, 6429, 390, -1000, 6979, 685, -1000, 661,
	685, 661, 661, -1000, -1000, 10762, -1000, -1000, -1000, -1000,
	829, 790, 791, -1000, 733, 1064, 10556, 6979, 5018, 1046,
	344, -1000, -1000, -1000, -189, -188, -1000, -1000, 685, 10350,
	10350, -1000, 587, -1000, 481, 302, 302, 515, 505, 504,
	581, 579, 302, 302, 494, 578, 666, 493, 484, 477,
	588, 577, 273, 584, 530, 506, 10968, 113, -1000, 637,
	-1000, 1003, 241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 848, -1000, -1000, -1000, -1000, -1000, -1000, -69,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 766, -1000, -1000, 328, 684, -1000, 677, 797, 664,
	791, 791, 791, -1000, 10762, -1000, -1000, -1000, 655, 60,
	847, 653, 10350, 613, 312, -1000, -1000, 502, -1000, -1000,
	-1000, -1000, 1041, 948, 302, 302, -1000, -1000, -1000, 344,
	373, -1000, -1000, 344, -1000, -1000, -1000, -1000, -1000, -1000,
	815, 1173, 862, -1000, 2136, 2136, -1000, -1000, 661, 6429,
	-1000, -1000, 9523, -1000, -1000, 3782, 6429, 4709, -1000, -1000,
	-1000, 575, 491, 575, -88, 777, 332, -1000, 6979, 369,
	-1000, -1000, -1000, -1000, -1000, -1000, 1071, 9317, 869, 10556,
	791, -1000, 8281, 10350, -1000, 10556, 1046, -1000, 344, -1000,
	-1000, -1000, -1000, -1000, -1000, 685, 685, -1000, -1000, 481,
	481, -1000, -1000, -1000, -1000, -1000, 574, 572, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 844,
	-1000, 1024, 843, 113, 637, 443, -1000, -1000, -1000, -1000,
	-1000, 563, -1000, 473, -1000, 440, 10144, 10144, 10144, -1000,
	-1000, -1000, 950, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 613, 613,
	-1000, -1000, 2136, 1173, 1173, -1000, -1000, -1000, -1000, 191,
	685, -1000, 685, 826, 826, -1000, 826, 840, -1000, 826,
	77, 826, 74, 685, 685, 791, -84, -1000, 344, 6979,
	1069, 776, 818, -1000, -1000, -1000, 989, 7802, 8008, -1000,
	962, 742, 774, -1000, -1000, 6154, 685, 659, 186, 650,
	-1000, 772, -1000, 791, -147, -1000, -1000, -1000, -1000, 10144,
	-1000, -1000, -1000, -1000, 10144, 831, 113, -1000, 732, -1000,
	725, 711, 648, -1000, 826, 648, 648, 621, -1000, -1000,
	1173, 3473, -1000, -1000, -1000, 181, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2136, 685, 561, 344, 1066, 1051,
	9317, 9317, 9317, 9317, -1000, 905, 899, -1000, 889, 887,
	900, 10762, -1000, 646, 7802, 214, -1000, 9108, -1000, -1000,
	998, -1000, 791, -1000, -1000, 793, 10350, 10144, 10350, -1000,
	-145, -1000, 422, 644, 630, 10144, 794, -1000, -1000, -1000,
	-1000, 10144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 133,
	-1000, -1000, -1000, 6979, 6979, 818, 842, 708, -1000, -1000,
	-1000, -1000, 895, -1000, 890, -1000, -1000, -1000, -1000, -1000,
	148, 140, 125, -1000, 1095, -1000, 791, -1000, 850, 180,
	-1000, -1000, 628, -1000, 605, -1000, -1000, -1000, 612, 10144,
	529, -1000, 132, 626, 685, 108, -101, 344, 775, 6979,
	6979, -1000, -1000, 791, 791, 791, 10556, 774, 685, 10350,
	-145, -1000, 939, 124, 124, -1000, 610, -1000, -1000, -1000,
	-1000, 302, 492, 1039, -1000, -1000, -1000, 1030, -1000, -1000,
	-1000, 927, -96, -123, 344, 344, 10144, 10144, 10144, 772,
	-1000, -1000, -1000, 268, -1000, 302, -1000, 404, 1025, 124,
	-1000, 389, -1000, -1000, -1000, -1000, 603, -1000, 926, -1000,
	600, -1000, 600, 600, 791, 384, -1000, 532, 124, -1000,
	-1000, -99, -1000, 10144, -1000, -1000, -1000, -1000, -1000, -108,
	-1000, -124, -1000,
}
var yyPgo = [...]int{

	0, 22, 23, 1454, 1453, 1449, 26, 1037, 1448, 1446,
	1445, 1444, 57, 1443, 1442, 1435, 1433, 1432, 30, 942,
	1428, 1426, 1121, 1117, 1114, 1111, 1424, 1421, 1419, 1415,
	1406, 1405, 1400, 1399, 1397, 1396, 109, 1394, 1387, 58,
	1386, 1385, 1380, 78, 1379, 96, 1378, 1376, 1375, 59,
	152, 36, 39, 137, 1374, 34, 37, 19, 1373, 1372,
	21, 1371, 325, 99, 1368, 62, 111, 1367, 1361, 41,
	1359, 1357, 1356, 82, 1354, 1353, 2, 33, 1352, 66,
	1351, 54, 85, 412, 1350, 1349, 1347, 1342, 1339, 1338,
	56, 6, 10, 1, 14, 1337, 132, 11, 1336, 60,
	1335, 1334, 1333, 1332, 40, 1330, 80, 1329, 32, 77,
	1328, 79, 1327, 24, 12, 55, 1326, 1324, 75, 95,
	94, 74, 1322, 68, 1321, 1320, 103, 1317, 1316, 1315,
	101, 1314, 100, 481, 1312, 1311, 1309, 1305, 1304, 1303,
	1302, 467, 63, 52, 0, 15, 49, 43, 1301, 20,
	1133, 38, 16, 1300, 107, 1299, 1298, 1540, 46, 93,
	35, 1297, 1295, 1294, 1293, 1291, 1290, 1275, 273, 1270,
	1269, 1268, 1265, 1264, 1263, 1262, 1261, 1260, 1256, 1255,
	1254, 1253, 1252, 1251, 1250, 81, 1249, 1248, 1247, 1244,
	1243, 1228, 1227, 1226, 1225, 1223, 1221, 27, 1220, 1218,
	1214, 1187, 29, 1186, 65, 3, 72, 1181, 1180, 1179,
	92, 25, 1169, 1167, 1166, 1165, 64, 48, 1164, 90,
	53, 51, 1163, 1160, 1159, 76, 17, 18, 1157, 1156,
	1154, 13, 9, 1152, 1151, 1144, 1143, 5, 50, 47,
	1142, 1141, 28, 1139, 1132, 67, 87, 1131, 88, 4,
	1127, 1126, 1125, 1123, 7, 147, 1119, 98,
}
var yyR1 = [...]int{

	0, 252, 253, 253, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 19,
	20, 20, 21, 21, 22, 22, 23, 23, 41, 41,
	41, 41, 42, 42, 42, 112, 112, 111, 111, 24,
	25, 26, 26, 250, 250, 249, 173, 173, 7, 7,
	27, 27, 27, 27, 27, 251, 251, 251, 251, 251,
	251, 241, 241, 242, 242, 234, 232, 232, 229, 229,
	235, 235, 228, 228, 233, 233, 230, 230, 237, 237,
	237, 237, 237, 238, 239, 246, 246, 247, 247, 201,
	201, 248, 248, 248, 248, 206, 206, 205, 205, 204,
	204, 204, 207, 207, 207, 30, 221, 223, 223, 224,
	224, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 175, 177, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 190,
	191, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 193, 193, 194, 194, 195,
	195, 196, 196, 178, 202, 202, 176, 172, 174, 222,
	222, 222, 217, 149, 149, 161, 161, 161, 161, 243,
	243, 244, 244, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 164, 164, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 163, 163, 163, 163, 163, 165,
	165, 165, 165, 165, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 167,
	167, 167, 167, 167, 167, 167, 167, 216, 216, 168,
	168, 210, 210, 211, 211, 211, 208, 208, 209, 209,
	212, 212, 169, 169, 169, 169, 169, 169, 40, 39,
	39, 39, 128, 128, 128, 213, 197, 197, 197, 171,
	198, 198, 199, 199, 199, 200, 200, 200, 214, 214,
	215, 215, 170, 218, 218, 218, 218, 6, 6, 236,
	236, 236, 236, 231, 231, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 5, 5, 220, 220, 219, 219,
	227, 227, 226, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 155, 155, 134, 134, 139, 139, 139, 29,
	29, 29, 73, 73, 140, 140, 8, 31, 9, 135,
	135, 135, 70, 70, 70, 10, 12, 12, 12, 12,
	12, 71, 71, 71, 71, 71, 71, 11, 11, 11,
	11, 203, 203, 203, 203, 203, 13, 138, 138, 138,
	14, 16, 16, 16, 16, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 48, 48, 68, 68, 68, 65, 65,
	66, 66, 67, 67, 64, 64, 69, 69, 69, 72,
	72, 72, 35, 141, 141, 33, 34, 34, 256, 36,
	37, 37, 38, 38, 38, 45, 45, 45, 43, 43,
	44, 44, 51, 51, 50, 50, 52, 52, 52, 52,
	148, 148, 148, 147, 147, 54, 54, 55, 55, 56,
	56, 57, 57, 57, 74, 58, 58, 58, 58, 156,
	156, 153, 153, 153, 152, 152, 59, 59, 59, 59,
	60, 60, 60, 60, 61, 61, 63, 63, 62, 62,
	75, 75, 75, 75, 76, 76, 77, 77, 53, 53,
	53, 53, 53, 53, 53, 131, 131, 79, 79, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 89,
	89, 89, 89, 89, 89, 80, 80, 80, 80, 80,
	80, 80, 49, 49, 90, 90, 90, 96, 91, 91,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	87, 87, 87, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 86, 86, 86, 86,
	257, 257, 88, 88, 88, 88, 46, 46, 46, 46,
	46, 158, 158, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 100, 100, 47, 47,
	98, 98, 99, 101, 101, 97, 97, 97, 82, 82,
	82, 82, 82, 82, 82, 84, 84, 84, 102, 102,
	103, 103, 104, 104, 105, 105, 106, 107, 107, 107,
	108, 108, 108, 108, 109, 109, 109, 81, 81, 81,
	81, 81, 81, 110, 110, 110, 110, 113, 113, 92,
	92, 94, 94, 93, 95, 114, 114, 115, 116, 116,
	119, 119, 118, 118, 118, 118, 118, 127, 127, 126,
	126, 126, 117, 117, 120, 120, 124, 124, 123, 125,
	125, 125, 125, 122, 122, 121, 121, 159, 159, 159,
	129, 129, 132, 132, 133, 133, 130, 130, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 142, 142,
	142, 137, 137, 240, 240, 145, 145, 146, 146, 150,
	150, 151, 151, 154, 154, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	254, 255, 157,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 6, 7, 10,
	1, 3, 1, 3, 8, 9, 7, 8, 0, 1,
	1, 1, 0, 1, 1, 1, 3, 0, 4, 8,
	7, 3, 3, 1, 3, 5, 0, 2, 1, 1,
	3, 5, 11, 11, 11, 0, 1, 1, 5, 9,
	7, 1, 1, 1, 1, 2, 3, 2, 0, 2,
	1, 1, 0, 2, 1, 3, 0, 2, 0, 1,
	1, 2, 2, 3, 3, 0, 1, 1, 2, 1,
	1, 4, 4, 2, 4, 0, 1, 0, 1, 1,
	2, 2, 1, 1, 1, 4, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 4, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 3, 3, 4, 1,
	3, 3, 3, 1, 1, 3, 1, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 3, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	3, 4, 1, 1, 1, 1, 0, 3, 3, 2,
	0, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 1, 2, 7, 7, 8, 9, 0, 1, 3,
	1, 2, 3, 0, 2, 0, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 0, 1, 0, 1, 0, 1, 1, 6,
	6, 4, 1, 3, 0, 1, 3, 3, 2, 1,
	1, 1, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 3, 3, 3, 1, 1, 3, 5, 3,
	6, 0, 1, 1, 1, 1, 2, 0, 1, 1,
	4, 2, 3, 2, 2, 4, 4, 3, 6, 3,
	3, 4, 4, 4, 6, 5, 5, 3, 3, 5,
	6, 7, 3, 3, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 0, 3, 1, 1, 1, 0, 2,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	1, 1, 5, 1, 1, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	1, 2, 3, 3, 3, 2, 3, 1, 2, 1,
	1, 1, 2, 3, 2, 2, 0, 2, 3, 2,
	2, 2, 1, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0,
}
var yyChk = [...]int{

	-1000, -252, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -29, -8, -31, -32, -35, -33, -9, -10, -11,
	-13, -14, -16, -15, -34, -19, -20, 6, 7, 258,
	8, 9, 44, -30, 125, 126, 127, 150, 129, 145,
	47, 64, 278, -135, 148, 285, 288, 289, 292, 291,
	306, 149, 151, -254, 144, 143, 142, 67, -253, 314,
	-104, 14, -38, 5, -36, -256, -36, -36, -36, -36,
	-36, -221, 67, -7, -240, 23, 31, 138, 250, 251,
	34, -130, 250, 134, -134, 135, -7, 33, -140, 138,
	138, 243, 125, 238, 280, -67, -68, 282, 283, 245,
	138, 284, 241, 281, 240, 237, 175, 70, 46, 135,
	27, 25, -141, 138, 239, -150, 70, -144, 264, 19,
	206, 152, 171, 265, 311, 79, 205, 208, 209, 146,
	167, 211, 210, 203, 161, 42, 201, 185, 286, 269,
	274, 247, 200, 162, 271, 23, 186, 190, 293, 25,
	213, 184, 26, 27, 266, 49, 188, 214, 53, 204,
	215, 192, 191, 193, 174, 17, 216, 217, 187, 189,
	268, 149, 218, 52, 197, 287, 289, 245, 202, 176,
	165, 166, 273, 272, 150, 270, 140, 168, 306, 307,
	309, 308, 310, 312, 313, -157, -62, -71, 129, -150,
	271, 274, 276, -203, 70, 72, -143, -144, 85, 38,
	40, 195, 88, 158, 120, 180, 15, 21, 89, 169,
	172, 175, 119, 246, 207, 259, 125, 62, 249, 252,
	248, 250, 238, 163, 43, 9, 142, 143, 37, 113,
	127, 92, 93, 280, 147, 39, 144, 82, 18, 65,
	10, 46, 12, 13, 148, 133, 134, 104, 135, 60,
	7, 156, 157, 121, 41, 101, 56, 35, 58, 102,
	16, 253, 254, 45, 183, 179, 263, 182, 155, 178,
	115, 63, 50, 86, 80, 164, 83, 66, 151, 84,
	14, 61, 283, 137, 136, 282, 160, 103, 128, 258,
	29, 59, 251, 6, 262, 44, 145, 154, 57, 138,
	239, 33, 181, 153, 177, 91, 139, 81, 284, 5,
	34, 198, 8, 64, 141, 255, 256, 257, 48, 173,
	170, 281, 267, 90, 11, 199, -138, 268, 208, -157,
	290, -157, -157, 307, 309, 308, 310, 311, 313, 278,
	-157, -157, -18, -108, 16, 15, -21, -19, -254, 6,
	36, 37, -45, 54, 55, -37, -41, 224, 223, 225,
	-42, 224, 223, -62, 10, -116, -117, -119, 290, -159,
	-118, 294, 295, 293, -146, -127, 296, -145, -143, 175,
	172, 70, -144, -251, 293, 287, 279, 275, -222, -217,
	-149, 70, -144, -133, 133, 135, 135, 135, -133, 138,
	-155, -154, 70, -144, -141, 70, -132, 133, -62, -62,
	242, 138, 250, -157, -157, 239, -64, 246, 247, -66,
	10, 104, -157, -157, -157, 245, -157, -157, -157, -157,
	-157, -157, -157, -73, -62, -70, -149, 72, -12, 18,
	-18, -24, -22, -23, -25, -12, 271, 122, 94, 73,
	-157, -93, -254, -93, -157, -62, -157, -157, 312, 291,
	292, -255, 69, -109, 18, 45, -53, -78, 86, -83,
	43, 39, -82, -79, -97, -95, -96, 120, 109, 110,
	117, 87, 121, -87, -85, -86, -88, 72, 71, 73,
	74, 75, 76, 80, 81, 82, -145, -150, -93, -254,
	58, 59, 259, 260, 263, 261, 89, 48, 248, 257,
	256, 255, 253, 254, 249, 252, 133, 250, 115, 258,
	70, -144, -105, -106, -53, -104, -18, -36, 50, -43,
	37, 78, -130, -130, 44, -62, 68, -120, -123, -121,
	297, 299, -118, 290, 94, -126, -145, 72, 43, -126,
	44, 15, 15, 69, 68, -161, -164, -166, -165, -167,
	-162, -163, 169, 170, 120, 173, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 44, 146, 165, 166,
	167, 168, 186, 187, 188, 189, 190, 191, 192, 193,
	152, 171, 265, 153, 154, 155, 156, 157, 158, 160,
	161, 162, 163, 164, -154, 86, 70, 70, 70, -62,
	-62, -246, -247, -248, -206, 299, 43, -132, 66, -154,
	39, -48, 10, -62, -150, -65, -66, -66, -62, -65,
	68, -72, 137, 274, 208, 94, -151, -150, -143, 184,
	272, 273, -157, -157, -91, -53, -157, -142, 139, 38,
	-157, -157, -157, 8, 104, 85, 84, 101, 68, 17,
	-53, -80, 104, 86, 102, 103, 88, 106, 105, 116,
	109, 110, 111, 112, 113, 114, 115, 107, 108, 119,
	94, 95, 96, 97, 98, 99, 100, -131, -254, -96,
	-254, 123, 124, -83, -83, -83, -83, -83, -83, -254,
	122, -18, -254, -254, -254, -254, -254, -254, -254, -100,
	-53, -254, -257, -254, -257, -257, -257, -257, -257, -257,
	-257, -254, -254, -254, -254, 68, -107, 40, 142, -108,
	-255, -45, -84, -145, 73, 76, -44, 57, -63, 41,
	-62, -63, -114, -115, -97, -145, -150, -77, 11, -119,
	-159, -122, 68, -124, 68, 298, 300, 301, -120, 66,
	83, -53, -198, 119, -254, 277, 24, -223, -224, -225,
	-176, -172, -174, -175, -177, -178, -179, -180, -181, -182,
	-183, -184, -185, -186, -187, -188, -189, -190, -191, -192,
	-193, -194, -195, -196, 79, 286, -206, 195, 206, 47,
	207, 208, 209, 135, 211, 212, 213, 26, 214, 215,
	216, 217, 218, 219, 220, 221, 222, -217, -218, -219,
	-5, -4, 135, 35, 31, 23, 22, -243, -244, -245,
	-212, -169, -213, -214, -215, -170, -40, -171, -199, -200,
	80, 86, 43, 195, 136, 35, 34, 79, 66, 119,
	205, 202, -208, 198, -168, 67, -168, -168, -168, -168,
	-197, 172, -197, -197, -197, 67, 67, -168, -168, -168,
	-210, 67, -210, -210, -211, 67, -211, -246, 39, 66,
	66, 66, -136, 128, 286, 259, 130, 127, 131, 126,
	195, 172, 79, 43, 14, 270, 70, -248, 119, -204,
	-185, 175, 172, 169, 301, -73, -62, -108, 244, -157,
	-157, -69, 102, 11, -150, -62, -65, -157, -62, -157,
	73, 272, 68, -255, -62, 52, -53, -53, -89, 80,
	86, 81, 82, -53, -53, -83, -90, -93, -96, 77,
	104, 102, 103, 88, -83, -83, -83, -83, -83, -83,
	-83, -83, -83, -83, -83, -83, -83, -83, -83, -158,
	70, 72, 70, -82, -82, -145, -51, 37, -50, -52,
	111, -53, -150, -146, -151, -143, -255, -18, -50, -50,
	-53, -53, -50, -43, -98, -99, 90, -145, -255, -50,
	-51, -50, -50, -106, -109, -129, 18, 10, 48, 48,
	-50, -111, 275, -62, -111, -77, 68, 94, 122, -104,
	-53, -121, -123, -125, 302, 299, 305, 70, -149, -254,
	-254, -225, -205, 94, -205, 119, -204, -205, -205, -205,
	-205, -205, 210, 210, -205, -205, -205, -205, -205, -205,
	-205, -205, -205, -205, -205, -205, -205, -6, 70, -220,
	-219, 136, 34, 32, -245, 80, 72, 73, 74, 80,
	-39, -79, -128, 248, 253, 254, 35, 35, 72, 8,
	-202, 70, 72, 200, 201, 43, 43, 203, 204, -209,
	199, 73, -197, -197, 44, -216, 72, -216, 73, 73,
	-62, -62, -62, -157, -142, -137, 135, 35, 94, 139,
	132, 132, 132, -205, -205, 44, 44, -205, -139, 29,
	21, -237, -238, -239, 45, 19, -157, 72, 72, -53,
	-65, -77, -12, -53, -157, 53, 80, 81, 82, -90,
	-83, -83, -83, -49, 147, 85, -255, -255, -50, 68,
	-148, -147, 38, -145, 72, 122, -254, 122, -255, -255,
	-255, 68, 141, 38, -255, -50, -101, -99, 92, -53,
	-255, -255, -255, -255, -255, -62, -54, 10, -81, 44,
	48, -18, -254, -254, -81, 44, -104, -115, -53, -146,
	-108, 299, 303, 304, -255, -149, -149, 72, -202, -205,
	-205, 73, 73, 73, 72, 72, -205, -205, 73, 72,
	70, 73, 73, 73, 73, 43, 72, 43, 201, 200,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 73, 43, 73, 43, 73, 43, 70, -144, -2,
	-1, 141, -6, 35, -220, 67, -39, 69, 70, 120,
	69, 68, 69, 68, 69, 68, -254, -254, -254, -62,
	-157, 70, 172, -221, 70, -217, -242, 70, 43, -207,
	70, 120, 43, -201, 73, 43, -239, -238, -205, -205,
	-69, -49, 85, -83, -83, -255, -52, -147, 111, -151,
	-51, -146, -160, 120, 169, 146, 167, 163, 184, 174,
	197, 165, 198, -158, -160, 264, -104, 93, -53, 91,
	-77, -55, -56, -57, -58, -74, -96, -254, -62, -113,
	66, -114, -92, -94, -93, -254, -18, -110, -149, -112,
	-149, -114, -108, -255, -255, -202, -202, 72, 72, 67,
	-3, 24, 20, 30, 67, -2, -6, 69, 73, 72,
	73, 73, -227, -226, -145, -227, -227, 44, -242, -242,
	-83, 122, -255, -255, -168, -168, -168, -211, -168, 157,
	-168, 157, -255, -255, -254, -47, 262, -53, -102, 12,
	68, -59, -60, -61, 56, 60, 62, 57, 58, 59,
	63, -156, 38, -55, -254, -153, -152, 38, -150, 72,
	42, -113, 68, -255, -255, -255, 68, 122, 68, -255,
	-254, -173, 276, -227, -227, 67, -2, 69, 69, 69,
	-255, 68, -168, -255, -255, 70, 111, -197, 70, -83,
	-255, 72, -103, 13, 15, -56, -57, -56, -57, 56,
	56, 56, 61, 56, 61, 56, -60, -150, -255, -75,
	64, 134, 65, -152, 35, -94, 48, -18, -254, -149,
	-145, -149, -250, -249, 275, 73, 69, 69, -227, 67,
	-229, -226, -228, -230, -46, 104, 267, -53, -91, 66,
	66, 56, 56, 135, 135, 135, 8, -92, -18, 122,
	68, -255, 70, -231, -231, 69, -227, -237, -235, -232,
	-234, 26, 79, 141, -237, -233, -232, 267, -237, -232,
	-255, 265, 63, 268, -53, -53, -254, -254, -254, -114,
	-255, -149, -249, 48, -236, 26, -1, 79, 267, -231,
	69, -205, 72, -241, 24, 20, 28, 53, 266, 269,
	-76, -145, -76, -76, 104, -205, 72, 28, -231, 73,
	70, 53, -255, 68, -255, -255, -93, 73, 70, 267,
	-145, 268, 269,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 662, 0, 448, 448, 448,
	448, 448, 448, 0, 753, 736, 344, 354, 0, 432,
	0, 0, 972, 371, 381, 387, 972, 0, 972, 972,
	0, 972, 972, 0, 359, 360, 361, 970, 1, 3,
	670, 0, 0, 452, 455, 450, 38, 42, 0, 0,
	0, 65, 0, 734, 0, 0, 0, 734, 58, 59,
	754, 0, 342, 737, 0, 0, 732, 345, 0, 355,
	0, 0, 0, 972, 972, 0, 0, 972, 972, 972,
	0, 972, 972, 972, 972, 972, 972, 972, 433, 425,
	426, 427, 0, 443, 444, 445, 759, 760, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 358, 362, 0, 0, 508,
	919, -2, 376, 386, 382, 383, 384, 385, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 0, 388, 389, 391,
	972, 393, 394, 0, 0, 972, 0, 972, 972, 0,
	446, 447, 30, 674, 0, 0, 662, 32, 0, 448,
	453, 454, 458, 456, 457, 449, 736, 39, 40, 41,
	736, 43, 44, 0, 0, 51, 52, 698, 0, 0,
	700, 727, 728, -2, 0, 0, 0, 757, 758, -2,
	777, 755, 756, 60, 66, 67, 0, 0, 0, 189,
	0, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	-2, 343, 763, 764, 732, 0, 0, 0, 356, 357,
	423, 0, 0, 407, 408, 428, 0, 434, 435, 0,
	430, 431, 412, 413, 414, 428, 416, 417, 418, 419,
	420, 421, 422, 439, 352, 365, 363, 364, 377, 0,
	-2, 367, 368, 369, 370, 379, 0, 0, 0, 972,
	392, 972, 0, 972, 397, 748, 399, 400, 972, 972,
	972, 31, 971, 26, 0, 0, 671, 518, 0, 523,
	525, 0, 560, 561, 562, 563, 564, 0, 0, 0,
	0, 0, 0, 586, 587, 588, 589, 648, 649, 650,
	651, 652, 653, 654, 527, 528, 645, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 636, 0, 610, 610,
	610, 610, 610, 610, 610, 610, 0, 0, 0, 0,
	-2, -2, 663, 664, 667, 670, 30, 455, 0, 460,
	459, 451, 0, 0, 0, 516, 0, 712, 723, 716,
	0, 0, 701, 0, 0, 705, 709, 710, 711, 290,
	708, 0, 0, -2, 315, 199, 266, 196, 197, 198,
	259, 214, 259, 259, 259, 259, 286, 286, 286, 286,
	242, 243, 244, 245, 246, 0, 0, 229, 259, 259,
	259, 233, 249, 250, 251, 252, 253, 254, 255, 256,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 261,
	261, 261, 263, 263, -2, 0, 0, 0, 0, 115,
	0, 341, -2, 97, 0, 0, 106, 0, 0, 351,
	733, 670, 0, 972, 972, 436, 0, 0, 428, 972,
	0, 972, 440, 441, 0, 0, 509, 761, 762, 372,
	373, 374, 390, 395, 0, 558, 396, 0, 749, 750,
	401, 402, 403, 675, 0, 0, 0, 0, 0, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	545, 546, 547, 548, 549, 550, 551, 524, 0, 538,
	0, 0, 0, 580, 581, 582, 583, 584, 0, 462,
	0, 30, 0, 0, 0, 0, 0, 0, 458, 0,
	637, 0, 602, 0, 603, 604, 605, 606, 607, 608,
	609, 0, 462, 0, 0, 0, 666, 668, 669, 674,
	33, 458, 0, 655, 0, 0, 0, 461, 47, 0,
	507, 47, 516, 695, 0, 645, 0, 662, 0, 699,
	0, 714, 0, 715, 0, 0, 725, 726, 713, 702,
	703, 704, 706, 0, 0, 0, 0, 116, -2, 119,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 107, 107, 0, 107, 107, 107,
	107, 107, 0, 0, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 190, 191, 307,
	326, 0, 328, 329, 324, -2, 316, 192, 200, 201,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	270, 0, 0, 285, 0, 299, 301, 0, 0, 0,
	0, 0, 268, 267, 213, 0, 286, 286, 236, 237,
	238, 0, 239, 240, 241, 0, 0, 230, 231, 232,
	224, 0, 225, 226, 227, 0, 228, 61, 735, 0,
	0, 0, 972, 748, 0, 745, 0, 743, 0, 738,
	739, 740, 741, 742, 744, 746, 747, 98, 107, 107,
	103, 109, 0, 0, 107, 346, 88, 972, 0, 405,
	406, 409, 0, 0, 429, 428, 516, 415, 353, 442,
	378, 0, 0, 693, 972, 0, 519, 520, 522, 539,
	0, 541, 543, 672, 673, 529, 530, 554, 555, 556,
	0, 0, 0, 0, 552, 534, 0, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 579,
	621, 622, 0, 577, 578, 585, 0, 0, 463, 464,
	466, 470, 0, 646, 0, -2, 557, 30, 0, 0,
	0, 0, 0, 0, 643, 640, 0, 0, 611, 0,
	0, 0, 0, 665, 27, 0, 730, 731, 656, 657,
	475, 0, 0, 506, 0, 662, 0, 0, 0, 670,
	517, 724, 717, 718, 0, 0, 722, 291, 0, 0,
	0, 120, 0, 108, 0, 107, 107, 0, 0, 0,
	0, 0, 107, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 308, 307,
	327, 0, 326, 317, 202, 271, 272, 273, 274, 275,
	276, 277, 279, 282, 283, 284, 298, 300, 302, 0,
	289, 184, 185, 292, 293, 294, 295, 296, 297, 195,
	269, 0, 234, 235, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 333, 0, 972, 751, 752, 0, 0,
	0, 0, 0, 0, 0, 110, 111, 0, 349, 347,
	348, 350, 89, 90, 107, 107, 404, 424, 437, 438,
	436, 410, 380, 559, 398, 676, 540, 542, 544, 531,
	552, 535, 0, 532, 0, 0, 526, 590, 0, 0,
	467, 471, 0, 473, 474, 0, 462, 0, -2, 593,
	594, 0, 0, 0, 0, 662, 0, 641, 0, 0,
	601, 612, 613, 614, 615, 28, 516, 0, 687, 0,
	0, -2, 0, 0, 36, 0, 670, 696, 697, 646,
	50, 719, 720, 721, 68, 0, 0, 186, 187, 0,
	0, 145, 146, 183, 148, 149, 0, 0, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 0,
	320, 0, 0, 319, 307, 0, 278, 260, 287, 288,
	247, 0, 248, 0, 264, 0, 0, 0, 0, 334,
	335, 336, 0, 338, 339, 340, 101, 73, 74, 102,
	112, 113, 114, 104, 99, 100, 91, 92, 0, 0,
	411, 533, 0, 553, 536, 591, 465, 472, 468, 0,
	0, 647, 0, 259, 259, 626, 259, 263, 629, 259,
	631, 259, 634, 0, 0, 0, 638, 600, 644, 0,
	658, 476, 477, 479, 480, 481, 489, 0, 491, 34,
	0, 687, 677, 689, 691, 0, 30, 0, 683, 0,
	45, 37, 49, 0, 56, 147, 188, 150, 151, 0,
	318, 321, 322, 323, 0, 0, 319, 280, 0, 258,
	0, 0, 0, 330, 259, 0, 0, 0, 93, 94,
	537, 0, 592, 595, 623, 286, 627, 628, 630, 632,
	633, 635, 597, 596, 0, 0, 0, 642, 660, 0,
	0, 0, 0, 0, 496, 0, 0, 499, 0, 0,
	0, 0, 490, 0, 0, 510, 492, 0, 494, 495,
	0, 35, 0, 692, -2, 0, 0, 0, 0, 48,
	0, 70, 0, 0, 0, 0, 0, 281, 262, 265,
	78, 0, 332, 82, 86, 337, 469, 624, 625, 616,
	599, 639, 29, 0, 0, 478, 485, 0, 488, 497,
	498, 500, 0, 502, 0, 504, 505, 482, 483, 484,
	0, 0, 0, 493, 0, 690, 0, -2, 0, 685,
	684, 46, 0, 53, 0, 57, 313, 313, 0, 0,
	88, 331, 88, 88, 0, 0, 0, 661, 659, 0,
	0, 501, 503, 0, 0, 0, 0, 680, 30, 0,
	0, 69, 0, 303, 304, 313, 0, 62, 79, 80,
	81, 107, 0, 0, 63, 83, 84, 0, 64, 87,
	598, 0, 0, 0, 486, 487, 0, 0, 0, 688,
	-2, 686, 54, 0, 314, 107, 310, 0, 0, 305,
	313, 0, 77, 75, 71, 72, 0, 617, 0, 620,
	0, 514, 0, 0, 0, 0, 311, 0, 306, 76,
	85, 618, 511, 0, 512, 513, 55, 309, 312, 0,
	515, 0, 619,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 314,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1078
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1080
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1111
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1156
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1169
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1181
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1193
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.str = ""
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1221
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.optVal = nil
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1316
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1323
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.str = "hash"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = "btree"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.str = "default"
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1511
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1529
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.str = "default"
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1614
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1619
		{
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = "character set"
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.str = "char set"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.str = "default"
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1653
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2004
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2203
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.optVal = nil
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2629
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.str = yyDollar[3].str
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2745
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2770
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2782
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2796
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 306:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2807
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2823
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2872
		{
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2875
		{
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2878
		{
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2889
		{
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2921
		{
			// set empty
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.str = yyDollar[1].str
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2963
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2968
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.byt = 0
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.byt = 1
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3016
		{
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3020
		{
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3024
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3040
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3050
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3060
		{
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3062
		{
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.statement = &Xa{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3086
		{
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3088
		{
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3099
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3111
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3162
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3167
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3171
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.optVal = nil
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3185
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3205
		{
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3209
		{
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3237
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3261
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3275
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3295
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3299
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3310
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3317
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3321
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3325
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3380
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3386
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3390
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3400
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3406
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.str = "full "
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3426
		{
			yyVAL.showFilter = nil
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3430
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3434
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3447
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3459
		{
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3461
		{
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3465
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3471
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3475
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3480
		{
			setAllowComments(yylex, true)
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3483
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3489
		{
			yyVAL.bytes2 = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3493
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.str = UnionStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.str = UnionAllStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.str = UnionDistinctStr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3512
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3516
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3520
		{
			yyVAL.str = SQLCacheStr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.str = DistinctStr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.str = StraightJoinHint
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.selectExprs = nil
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3553
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3557
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3567
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3571
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3575
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3580
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3584
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3595
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3600
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3604
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3614
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3628
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3638
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3651
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3668
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3692
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3698
		{
			yyVAL.str = JoinStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.str = JoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.str = JoinStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3710
		{
			yyVAL.str = StraightJoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.str = LeftJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.str = LeftJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.str = RightJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3728
		{
			yyVAL.str = RightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3734
		{
			yyVAL.str = NaturalJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3738
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3752
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3758
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3767
		{
			yyVAL.indexHints = nil
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3771
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3775
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3779
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3785
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3789
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3794
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3798
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3824
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3828
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3834
		{
			yyVAL.str = ""
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3838
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3844
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3848
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3854
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3858
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3862
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3866
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3870
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3886
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3890
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3896
		{
			yyVAL.str = IsNullStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3900
		{
			yyVAL.str = IsNotNullStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.str = IsTrueStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.str = IsNotTrueStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.str = IsFalseStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3916
		{
			yyVAL.str = IsNotFalseStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3922
		{
			yyVAL.str = EqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3926
		{
			yyVAL.str = LessThanStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3930
		{
			yyVAL.str = GreaterThanStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3934
		{
			yyVAL.str = LessEqualStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.str = GreaterEqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.str = NotEqualStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3946
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3961
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3965
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3969
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3975
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3985
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3995
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3999
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4003
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4043
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4051
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4059
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4063
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4067
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4071
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4075
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4083
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4097
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4101
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4105
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4123
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4127
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4131
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4145
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4149
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4153
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4157
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 598:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4161
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 599:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4165
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4169
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4173
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4187
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4191
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4210
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4215
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4238
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4242
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4248
		{
			yyVAL.str = ""
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4252
		{
			yyVAL.str = BooleanModeStr
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4256
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4264
		{
			yyVAL.str = QueryExpansionStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4270
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4274
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4280
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4284
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4288
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4292
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4296
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4300
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4306
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4310
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4326
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4330
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4335
		{
			yyVAL.expr = nil
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4339
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.str = string("")
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4354
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4358
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4364
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4369
		{
			yyVAL.expr = nil
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4373
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4379
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4383
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4387
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4393
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4397
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4409
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4413
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4417
		{
			yyVAL.expr = &NullVal{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4423
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4432
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4436
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4441
		{
			yyVAL.exprs = nil
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4445
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4450
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4454
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.orderBy = nil
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4469
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4473
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4479
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4484
		{
			yyVAL.str = AscScr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.str = AscScr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4492
		{
			yyVAL.str = DescScr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.limit = nil
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4505
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4509
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4514
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4518
		{
			yyVAL.str = ForUpdateStr
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4522
		{
			yyVAL.str = ShareModeStr
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4535
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4539
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4543
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4556
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4563
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4567
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4571
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4575
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4580
		{
			yyVAL.updateExprs = nil
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4584
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4590
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4600
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4604
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4610
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4616
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4630
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4636
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4652
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4656
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4663
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4667
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4671
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4675
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4679
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4686
		{
			yyVAL.bytes = []byte("charset")
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4692
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4696
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4700
		{
			yyVAL.expr = &Default{}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4706
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4710
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4716
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4720
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4726
		{
			yyVAL.str = ""
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4730
		{
			yyVAL.str = yyDollar[2].str
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4736
		{
			yyVAL.str = yyDollar[3].str
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4742
		{
			yyVAL.str = RepeatableRead
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4746
		{
			yyVAL.str = ReadCommitted
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4750
		{
			yyVAL.str = ReadUncommitted
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4754
		{
			yyVAL.str = Serializable
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4760
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4764
		{
			yyVAL.str = yyDollar[2].str
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4770
		{
			yyVAL.str = TxReadWrite
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4774
		{
			yyVAL.str = TxReadOnly
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4780
		{
			yyVAL.str = SessionStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4784
		{
			yyVAL.str = SessionStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4788
		{
			yyVAL.str = GlobalStr
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4797
		{
			yyVAL.byt = 0
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4801
		{
			yyVAL.byt = 1
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4806
		{
			yyVAL.byt = 0
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4810
		{
			yyVAL.byt = 1
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4815
		{
			yyVAL.str = ""
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4819
		{
			yyVAL.str = IgnoreStr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4825
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4829
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4833
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4837
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4841
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4845
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4849
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4853
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4857
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4861
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4866
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4870
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4874
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4880
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4884
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4889
		{
			yyVAL.str = IndexStr
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4893
		{
			yyVAL.str = UniqueStr
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4899
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4903
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4910
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4916
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4920
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4927
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4933
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4937
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5169
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5178
		{
			decNesting(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5183
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
