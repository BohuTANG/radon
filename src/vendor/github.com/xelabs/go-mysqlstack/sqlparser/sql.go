// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const KEY_BLOCK_SIZE = 57366
const PARSER = 57367
const RTREE = 57368
const SPATIAL = 57369
const SYMBOL = 57370
const UNIQUE = 57371
const KEY = 57372
const ALL = 57373
const DISTINCT = 57374
const AS = 57375
const EXISTS = 57376
const ASC = 57377
const DESC = 57378
const INTO = 57379
const DUPLICATE = 57380
const DEFAULT = 57381
const SET = 57382
const LOCK = 57383
const FULL = 57384
const CHECKSUM = 57385
const VALUES = 57386
const LAST_INSERT_ID = 57387
const NEXT = 57388
const VALUE = 57389
const SHARE = 57390
const MODE = 57391
const SQL_NO_CACHE = 57392
const SQL_CACHE = 57393
const JOIN = 57394
const STRAIGHT_JOIN = 57395
const LEFT = 57396
const RIGHT = 57397
const INNER = 57398
const OUTER = 57399
const CROSS = 57400
const NATURAL = 57401
const USE = 57402
const FORCE = 57403
const ON = 57404
const ID = 57405
const HEX = 57406
const STRING = 57407
const INTEGRAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const VALUE_ARG = 57411
const LIST_ARG = 57412
const COMMENT = 57413
const COMMENT_KEYWORD = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const AND = 57420
const NOT = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const ELSE = 57426
const END = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const MODIFY = 57452
const TABLE = 57453
const INDEX = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const USING = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const BIT = 57470
const TINYINT = 57471
const SMALLINT = 57472
const MEDIUMINT = 57473
const INT = 57474
const INTEGER = 57475
const BIGINT = 57476
const INTNUM = 57477
const REAL = 57478
const DOUBLE = 57479
const FLOAT_TYPE = 57480
const DECIMAL = 57481
const NUMERIC = 57482
const TIME = 57483
const TIMESTAMP = 57484
const DATETIME = 57485
const YEAR = 57486
const CHAR = 57487
const VARCHAR = 57488
const BOOL = 57489
const CHARACTER = 57490
const VARBINARY = 57491
const NCHAR = 57492
const CHARSET = 57493
const TEXT = 57494
const TINYTEXT = 57495
const MEDIUMTEXT = 57496
const LONGTEXT = 57497
const BLOB = 57498
const TINYBLOB = 57499
const MEDIUMBLOB = 57500
const LONGBLOB = 57501
const JSON = 57502
const ENUM = 57503
const GEOMETRY = 57504
const POINT = 57505
const LINESTRING = 57506
const POLYGON = 57507
const GEOMETRYCOLLECTION = 57508
const MULTIPOINT = 57509
const MULTILINESTRING = 57510
const MULTIPOLYGON = 57511
const NULLX = 57512
const AUTO_INCREMENT = 57513
const APPROXNUM = 57514
const SIGNED = 57515
const UNSIGNED = 57516
const ZEROFILL = 57517
const FIXED = 57518
const DYNAMIC = 57519
const STORAGE = 57520
const DISK = 57521
const MEMORY = 57522
const COLUMN_FORMAT = 57523
const AVG_ROW_LENGTH = 57524
const COMPRESSION = 57525
const CONNECTION = 57526
const DATA = 57527
const DIRECTORY = 57528
const DELAY_KEY_WRITE = 57529
const ENCRYPTION = 57530
const INSERT_METHOD = 57531
const MAX_ROWS = 57532
const MIN_ROWS = 57533
const PACK_KEYS = 57534
const PASSWORD = 57535
const ROW_FORMAT = 57536
const STATS_AUTO_RECALC = 57537
const STATS_PERSISTENT = 57538
const STATS_SAMPLE_PAGES = 57539
const TABLESPACE = 57540
const COMPRESSED = 57541
const REDUNDANT = 57542
const COMPACT = 57543
const TOKUDB_DEFAULT = 57544
const TOKUDB_FAST = 57545
const TOKUDB_SMALL = 57546
const TOKUDB_ZLIB = 57547
const TOKUDB_QUICKLZ = 57548
const TOKUDB_LZMA = 57549
const TOKUDB_SNAPPY = 57550
const TOKUDB_UNCOMPRESSED = 57551
const DATABASES = 57552
const TABLES = 57553
const WARNINGS = 57554
const VARIABLES = 57555
const EVENTS = 57556
const BINLOG = 57557
const GTID = 57558
const STATUS = 57559
const COLUMNS = 57560
const FIELDS = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583
const PARTITION = 57584
const PARTITIONS = 57585
const LIST = 57586
const XA = 57587
const DISTRIBUTED = 57588
const ENGINES = 57589
const VERSIONS = 57590
const PROCESSLIST = 57591
const QUERYZ = 57592
const TXNZ = 57593
const KILL = 57594
const ENGINE = 57595
const SINGLE = 57596
const BEGIN = 57597
const START = 57598
const TRANSACTION = 57599
const COMMIT = 57600
const ROLLBACK = 57601
const GLOBAL = 57602
const LOCAL = 57603
const SESSION = 57604
const NAMES = 57605
const ISOLATION = 57606
const LEVEL = 57607
const READ = 57608
const WRITE = 57609
const ONLY = 57610
const REPEATABLE = 57611
const COMMITTED = 57612
const UNCOMMITTED = 57613
const SERIALIZABLE = 57614
const RADON = 57615
const ATTACH = 57616
const ATTACHLIST = 57617
const DETACH = 57618
const RESHARD = 57619
const CLEANUP = 57620
const RECOVER = 57621
const REBALANCE = 57622

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"KEY_BLOCK_SIZE",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4748

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 216,
	90, 841,
	-2, 657,
	-1, 222,
	90, 703,
	-2, 635,
	-1, 460,
	118, 687,
	-2, 683,
	-1, 461,
	118, 688,
	-2, 684,
	-1, 495,
	115, 82,
	165, 82,
	168, 82,
	-2, 93,
	-1, 546,
	1, 76,
	298, 76,
	-2, 82,
	-1, 668,
	5, 27,
	-2, 606,
	-1, 702,
	115, 82,
	165, 82,
	168, 82,
	-2, 94,
	-1, 760,
	30, 301,
	63, 301,
	66, 301,
	129, 301,
	-2, 838,
	-1, 813,
	1, 77,
	298, 77,
	-2, 82,
	-1, 900,
	118, 690,
	-2, 686,
	-1, 1070,
	5, 28,
	-2, 485,
	-1, 1094,
	5, 28,
	-2, 607,
	-1, 1223,
	5, 27,
	-2, 609,
	-1, 1349,
	5, 28,
	-2, 610,
}

const yyPrivate = 57344

const yyLast = 10095

var yyAct = [...]int{
	461, 438, 1247, 1352, 436, 1378, 1425, 1384, 1254, 1382,
	1255, 571, 414, 1296, 671, 1282, 809, 1214, 409, 1213,
	795, 1003, 1408, 217, 953, 930, 1152, 929, 980, 1193,
	681, 789, 1293, 56, 891, 884, 899, 894, 99, 221,
	841, 416, 628, 3, 66, 191, 982, 1063, 352, 993,
	439, 50, 910, 1055, 353, 672, 926, 861, 574, 957,
	562, 1018, 730, 814, 99, 893, 225, 413, 355, 403,
	220, 764, 480, 703, 463, 481, 983, 479, 200, 212,
	99, 99, 210, 469, 401, 412, 55, 563, 1104, 1105,
	805, 1103, 213, 190, 399, 400, 946, 99, 185, 945,
	483, 50, 947, 689, 690, 691, 482, 482, 483, 196,
	700, 176, 1306, 1353, 1451, 398, 95, 1424, 24, 51,
	26, 27, 1407, 1386, 173, 1450, 639, 179, 181, 180,
	182, 183, 1398, 184, 1448, 1423, 1206, 1276, 381, 838,
	94, 1397, 350, 741, 369, 487, 349, 370, 46, 374,
	896, 966, 28, 518, 348, 36, 376, 377, 751, 996,
	347, 965, 733, 997, 998, 1013, 788, 1177, 76, 77,
	60, 796, 37, 1409, 1387, 53, 989, 990, 991, 1009,
	1271, 391, 393, 99, 992, 434, 435, 1269, 1024, 1038,
	956, 364, 1008, 1037, 728, 82, 62, 63, 64, 65,
	1036, 1322, 89, 985, 1154, 99, 1374, 70, 99, 1344,
	1346, 357, 71, 225, 73, 75, 576, 220, 758, 225,
	225, 1035, 1373, 488, 488, 1372, 360, 1303, 465, 506,
	392, 392, 1154, 30, 31, 32, 359, 34, 959, 466,
	959, 958, 362, 958, 358, 96, 80, 50, 737, 35,
	47, 39, 79, 519, 48, 49, 33, 371, 532, 535,
	536, 537, 538, 539, 540, 1386, 541, 542, 543, 544,
	545, 520, 521, 522, 523, 504, 505, 533, 78, 507,
	1261, 1345, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 524, 525, 526, 527, 528, 529, 530, 531,
	796, 83, 1097, 93, 91, 484, 81, 731, 88, 984,
	1069, 174, 1067, 72, 575, 939, 1387, 757, 732, 734,
	735, 736, 627, 738, 739, 740, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 1396, 1010, 1011, 84, 92,
	86, 87, 90, 406, 464, 996, 1006, 1007, 699, 997,
	998, 618, 619, 1410, 1392, 476, 1033, 99, 52, 576,
	606, 697, 99, 99, 99, 491, 534, 99, 467, 1161,
	596, 99, 99, 606, 38, 1388, 564, 1429, 581, 584,
	843, 40, 954, 1034, 41, 42, 1075, 44, 43, 729,
	595, 594, 604, 605, 597, 598, 599, 600, 601, 602,
	603, 596, 45, 938, 606, 1364, 595, 594, 604, 605,
	597, 598, 599, 600, 601, 602, 603, 596, 486, 1162,
	606, 1208, 911, 68, 599, 600, 601, 602, 603, 596,
	1056, 868, 606, 583, 582, 363, 620, 621, 622, 623,
	624, 625, 567, 1253, 547, 866, 867, 865, 1073, 988,
	584, 583, 582, 616, 471, 1032, 582, 575, 1210, 583,
	582, 615, 617, 566, 583, 582, 565, 842, 584, 225,
	1251, 1386, 584, 660, 99, 53, 584, 99, 1444, 225,
	674, 584, 911, 220, 1080, 864, 586, 626, 673, 1436,
	629, 630, 631, 632, 633, 634, 635, 355, 638, 640,
	640, 640, 640, 640, 640, 640, 640, 648, 649, 650,
	651, 656, 1149, 676, 366, 668, 678, 1242, 1074, 356,
	1252, 1243, 1387, 669, 654, 655, 1048, 1049, 1050, 1354,
	797, 798, 799, 585, 1246, 1147, 791, 792, 793, 794,
	1245, 1145, 1148, 572, 698, 752, 658, 1126, 1125, 583,
	582, 657, 802, 803, 804, 1124, 1121, 99, 684, 587,
	1365, 683, 811, 692, 99, 1146, 584, 99, 1128, 583,
	582, 1144, 1004, 754, 1005, 99, 641, 642, 643, 644,
	645, 646, 647, 854, 856, 857, 584, 1116, 1115, 855,
	572, 862, 361, 885, 1114, 886, 1431, 637, 1127, 1022,
	1021, 1014, 389, 1417, 837, 1325, 1244, 860, 1233, 815,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 1232, 225, 1129, 1122, 1118,
	890, 863, 220, 807, 808, 1117, 1109, 695, 1042, 225,
	1041, 1019, 1001, 912, 428, 427, 429, 430, 431, 432,
	1249, 898, 1445, 433, 1440, 402, 848, 1437, 1315, 1412,
	1315, 1380, 847, 1377, 1375, 402, 402, 900, 50, 931,
	225, 674, 902, 1319, 935, 981, 1179, 1248, 832, 673,
	629, 928, 1315, 1356, 915, 225, 1315, 1355, 1313, 220,
	1280, 402, 1315, 402, 1061, 402, 903, 904, 1176, 355,
	907, 1123, 936, 831, 888, 889, 1168, 1167, 1164, 1165,
	1164, 1163, 933, 901, 914, 940, 916, 917, 932, 908,
	50, 1096, 402, 937, 948, 913, 919, 918, 887, 925,
	834, 847, 402, 851, 852, 550, 858, 859, 549, 830,
	604, 605, 597, 598, 599, 600, 601, 602, 603, 596,
	950, 951, 606, 949, 955, 548, 960, 961, 962, 963,
	964, 943, 942, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 952, 484, 496, 495,
	572, 1194, 365, 905, 906, 1312, 827, 825, 821, 1311,
	824, 826, 597, 598, 599, 600, 601, 602, 603, 596,
	57, 1160, 606, 464, 927, 1196, 937, 1092, 1280, 24,
	1166, 1061, 1015, 1016, 1089, 24, 24, 835, 99, 99,
	99, 1198, 688, 1202, 686, 1197, 682, 1195, 652, 829,
	478, 197, 1200, 941, 53, 987, 99, 1284, 1287, 1288,
	1289, 1285, 1199, 1286, 1290, 994, 1358, 1369, 664, 666,
	1061, 790, 828, 667, 1222, 1201, 1203, 1309, 1284, 1287,
	1288, 1289, 1285, 1020, 1286, 1290, 53, 862, 1061, 74,
	810, 1239, 53, 53, 1234, 1025, 815, 1023, 1368, 937,
	1030, 67, 1158, 806, 801, 1052, 1053, 1054, 53, 800,
	927, 819, 818, 817, 556, 22, 1371, 225, 1337, 1335,
	1370, 1065, 1334, 1338, 1336, 1333, 1044, 863, 1438, 1422,
	1339, 823, 1288, 1289, 201, 202, 1047, 850, 1405, 470,
	924, 99, 833, 1051, 923, 1415, 1259, 816, 1113, 1017,
	404, 492, 204, 468, 822, 475, 751, 1090, 555, 986,
	1292, 470, 674, 1220, 220, 198, 199, 1414, 1156, 1068,
	673, 355, 355, 405, 195, 1000, 999, 1432, 1060, 192,
	1421, 1237, 1079, 1101, 1236, 1420, 1328, 1238, 1419, 494,
	1098, 493, 1058, 1130, 1077, 922, 1059, 1110, 193, 900,
	1151, 1111, 1112, 921, 57, 1091, 1102, 1070, 1071, 1072,
	1119, 1120, 1076, 1099, 1043, 1327, 1279, 1082, 1045, 1083,
	1084, 1085, 1086, 1153, 682, 1107, 1108, 559, 207, 1300,
	1002, 1155, 580, 59, 61, 54, 1, 1093, 1094, 1095,
	346, 1351, 813, 812, 763, 762, 1418, 69, 437, 1406,
	1383, 99, 1157, 1413, 1106, 1385, 1390, 1362, 1359, 355,
	1361, 702, 701, 351, 753, 769, 768, 767, 765, 1169,
	1170, 1012, 1159, 787, 1250, 774, 773, 696, 727, 726,
	725, 724, 1081, 723, 722, 225, 97, 721, 720, 1065,
	225, 719, 220, 718, 220, 1184, 1185, 1171, 1172, 1173,
	717, 1178, 716, 572, 715, 1181, 714, 1180, 713, 1100,
	99, 898, 206, 1192, 931, 712, 711, 225, 225, 1187,
	710, 1225, 1226, 1191, 1190, 1205, 1182, 900, 206, 206,
	1204, 1207, 1188, 709, 708, 704, 707, 706, 1221, 1211,
	1305, 705, 1212, 772, 770, 206, 766, 1132, 1131, 501,
	499, 1217, 500, 1230, 1231, 498, 503, 502, 1223, 497,
	1218, 1291, 1295, 932, 1227, 1186, 1224, 1062, 1031, 820,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 614, 920, 995, 218, 944, 687, 685, 209, 208,
	934, 653, 225, 225, 225, 462, 1256, 1256, 1256, 1153,
	1326, 1257, 1258, 1240, 1278, 1078, 1241, 636, 909, 415,
	853, 426, 1228, 1229, 423, 425, 424, 659, 665, 588,
	407, 1343, 1260, 1216, 553, 85, 375, 472, 1283, 1281,
	1215, 206, 1088, 558, 1275, 1267, 1363, 663, 771, 99,
	99, 25, 58, 203, 931, 14, 1264, 1265, 21, 1266,
	15, 1209, 1268, 206, 1270, 225, 206, 13, 12, 1256,
	225, 29, 10, 1307, 1256, 9, 8, 7, 1308, 6,
	1301, 5, 4, 194, 23, 2, 20, 1274, 19, 18,
	1217, 17, 225, 16, 1153, 11, 220, 1302, 1310, 1294,
	755, 756, 1235, 932, 0, 50, 1262, 0, 1263, 1304,
	0, 99, 99, 99, 99, 1192, 1321, 0, 1316, 1272,
	1273, 0, 99, 1323, 0, 99, 0, 0, 99, 1330,
	1329, 1332, 1331, 0, 225, 674, 1340, 0, 1350, 0,
	225, 1347, 0, 673, 1256, 1348, 225, 0, 1357, 0,
	1256, 0, 1217, 1217, 1217, 1217, 1360, 0, 0, 0,
	0, 1218, 1218, 1218, 1218, 0, 1217, 902, 0, 1314,
	1367, 0, 1317, 1318, 0, 1294, 0, 0, 0, 1219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	1324, 1277, 1379, 1256, 0, 0, 0, 1381, 0, 1391,
	1394, 1389, 1393, 0, 0, 0, 0, 0, 1342, 1404,
	0, 0, 0, 0, 0, 546, 1411, 1349, 0, 0,
	206, 206, 206, 0, 0, 557, 0, 0, 0, 206,
	561, 0, 225, 225, 225, 0, 1426, 1426, 1426, 1427,
	1428, 1416, 0, 205, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 1401, 1402, 1403, 0, 0, 0, 367,
	368, 1443, 1430, 0, 0, 0, 1376, 1446, 1447, 1434,
	1435, 225, 171, 0, 0, 1449, 387, 0, 1395, 0,
	595, 594, 604, 605, 597, 598, 599, 600, 601, 602,
	603, 596, 781, 780, 606, 0, 0, 0, 0, 0,
	0, 0, 777, 0, 0, 0, 0, 0, 1366, 572,
	392, 0, 172, 0, 175, 0, 177, 178, 0, 186,
	187, 188, 189, 0, 0, 783, 0, 0, 0, 0,
	0, 0, 206, 0, 675, 677, 0, 0, 782, 775,
	1439, 0, 1441, 1442, 0, 776, 0, 0, 0, 1399,
	1400, 0, 0, 0, 0, 0, 372, 373, 0, 378,
	379, 380, 395, 382, 383, 384, 385, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	0, 0, 0, 590, 474, 593, 0, 477, 0, 0,
	0, 607, 608, 609, 610, 611, 612, 613, 779, 591,
	592, 589, 595, 594, 604, 605, 597, 598, 599, 600,
	601, 602, 603, 596, 0, 206, 606, 0, 0, 0,
	0, 0, 844, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 206, 594, 604, 605, 597, 598, 599,
	600, 601, 602, 603, 596, 0, 388, 606, 143, 390,
	101, 778, 0, 125, 394, 131, 396, 397, 786, 0,
	0, 785, 0, 0, 1064, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 897, 677, 0, 0, 897,
	897, 0, 0, 897, 0, 0, 0, 224, 0, 1066,
	0, 0, 0, 0, 0, 0, 107, 897, 897, 897,
	897, 583, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 675, 0, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 552, 554, 0, 0, 0, 0, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 0, 0, 0,
	568, 0, 569, 0, 570, 155, 573, 122, 0, 0,
	0, 577, 578, 579, 0, 0, 206, 206, 206, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 0,
	0, 0, 0, 0, 0, 1183, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 897, 0, 0, 849, 595, 594, 604, 605, 597,
	598, 599, 600, 601, 602, 603, 596, 897, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 675, 0, 677, 0,
	595, 594, 604, 605, 597, 598, 599, 600, 601, 602,
	603, 596, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 840, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 677, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 1027, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1040, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	206, 206, 206, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 206, 0, 0, 1298, 0, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 314, 274, 332, 250, 265,
	344, 267, 268, 304, 234, 284, 143, 263, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 330, 281,
	1174, 253, 227, 260, 228, 251, 278, 117, 249, 316,
	287, 266, 0, 338, 133, 296, 0, 151, 136, 0,
	0, 280, 319, 282, 313, 273, 305, 242, 295, 333,
	264, 301, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 298, 327, 262, 300, 303,
	226, 297, 0, 230, 235, 343, 325, 256, 257, 0,
	0, 0, 0, 0, 0, 0, 279, 283, 310, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	294, 0, 0, 0, 237, 232, 277, 0, 0, 0,
	241, 0, 255, 311, 1175, 0, 0, 320, 272, 162,
	326, 270, 269, 334, 307, 0, 317, 252, 261, 111,
	259, 149, 302, 160, 103, 323, 318, 292, 275, 276,
	231, 0, 309, 116, 124, 248, 299, 158, 159, 112,
	163, 236, 340, 104, 223, 339, 142, 222, 157, 324,
	293, 289, 233, 322, 291, 288, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 229, 0, 152,
	331, 345, 123, 118, 156, 115, 137, 108, 102, 239,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 321, 0, 0,
	0, 0, 0, 155, 238, 122, 245, 246, 243, 244,
	285, 286, 335, 336, 337, 312, 240, 0, 0, 315,
	290, 100, 105, 132, 342, 148, 121, 161, 0, 0,
	0, 0, 0, 258, 341, 308, 306, 328, 0, 120,
	153, 0, 154, 211, 0, 0, 216, 214, 215, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 329, 314, 274,
	332, 250, 265, 344, 267, 268, 304, 234, 284, 143,
	263, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 330, 281, 0, 253, 227, 260, 228, 251, 278,
	117, 249, 316, 287, 266, 0, 338, 133, 296, 0,
	151, 136, 0, 0, 280, 319, 282, 313, 273, 305,
	242, 295, 333, 264, 301, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 298, 327,
	262, 300, 303, 226, 297, 0, 230, 235, 343, 325,
	256, 257, 0, 0, 0, 0, 0, 0, 0, 279,
	283, 310, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 294, 0, 0, 0, 237, 232, 277,
	0, 0, 0, 241, 0, 255, 311, 0, 0, 0,
	320, 272, 162, 326, 270, 269, 334, 307, 0, 317,
	252, 261, 111, 259, 149, 302, 160, 103, 323, 318,
	292, 275, 276, 231, 0, 309, 116, 124, 248, 299,
	158, 159, 112, 163, 236, 340, 104, 223, 339, 142,
	222, 157, 324, 293, 289, 233, 322, 291, 288, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	229, 0, 152, 331, 345, 123, 118, 156, 115, 137,
	108, 102, 239, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	321, 0, 0, 0, 0, 0, 155, 238, 122, 245,
	246, 243, 244, 285, 286, 335, 336, 337, 312, 240,
	0, 0, 315, 290, 100, 105, 132, 342, 148, 121,
	161, 0, 0, 0, 0, 0, 258, 341, 308, 306,
	328, 0, 120, 153, 0, 154, 0, 0, 0, 216,
	214, 215, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	329, 314, 274, 332, 250, 265, 344, 267, 268, 304,
	234, 284, 143, 263, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 330, 281, 0, 253, 227, 260,
	228, 251, 278, 117, 249, 316, 287, 266, 0, 338,
	133, 296, 0, 151, 136, 0, 0, 280, 319, 282,
	313, 273, 305, 242, 295, 333, 264, 301, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 298, 327, 262, 300, 303, 226, 297, 0, 230,
	235, 343, 325, 256, 257, 0, 0, 0, 0, 0,
	0, 0, 279, 283, 310, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 294, 0, 0, 0,
	237, 232, 277, 0, 0, 0, 241, 0, 255, 311,
	0, 0, 0, 320, 272, 162, 326, 270, 269, 334,
	307, 0, 317, 252, 261, 111, 259, 149, 302, 160,
	103, 323, 318, 292, 275, 276, 231, 0, 309, 116,
	124, 248, 299, 158, 159, 112, 163, 236, 340, 104,
	223, 339, 142, 222, 157, 324, 293, 289, 233, 322,
	291, 288, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 229, 0, 152, 331, 345, 123, 118,
	156, 115, 137, 108, 102, 239, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 321, 0, 0, 0, 0, 0, 155,
	238, 122, 245, 246, 243, 244, 285, 286, 335, 336,
	337, 312, 240, 0, 0, 315, 290, 100, 105, 132,
	342, 148, 121, 161, 0, 0, 0, 0, 0, 258,
	341, 308, 306, 328, 0, 120, 153, 0, 154, 485,
	0, 0, 128, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 329, 314, 274, 332, 250, 265, 344,
	267, 268, 304, 234, 284, 143, 263, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 330, 281, 0,
	253, 227, 260, 228, 251, 278, 117, 249, 316, 287,
	266, 0, 338, 133, 296, 0, 151, 136, 0, 0,
	280, 319, 282, 313, 273, 305, 242, 295, 333, 264,
	301, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 298, 327, 262, 300, 303, 226,
	297, 0, 230, 235, 343, 325, 256, 257, 0, 0,
	0, 0, 0, 0, 0, 279, 283, 310, 271, 0,
	0, 0, 0, 0, 0, 1320, 0, 254, 0, 294,
	0, 0, 0, 237, 232, 277, 0, 0, 0, 241,
	0, 255, 311, 0, 0, 0, 320, 272, 162, 326,
	270, 269, 334, 307, 0, 317, 252, 261, 111, 259,
	149, 302, 160, 103, 323, 318, 292, 275, 276, 231,
	0, 309, 116, 124, 248, 299, 158, 159, 112, 163,
	236, 340, 104, 679, 339, 142, 680, 157, 324, 293,
	289, 233, 322, 291, 288, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 229, 0, 152, 331,
	345, 123, 118, 156, 115, 137, 108, 102, 239, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 321, 0, 0, 0,
	0, 0, 155, 238, 122, 245, 246, 243, 244, 285,
	286, 335, 336, 337, 312, 240, 0, 0, 315, 290,
	100, 105, 132, 342, 148, 121, 161, 0, 0, 0,
	0, 0, 258, 341, 308, 306, 328, 0, 120, 153,
	0, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 329, 314, 274, 332,
	250, 265, 344, 267, 268, 304, 234, 284, 143, 263,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	330, 281, 0, 253, 227, 260, 228, 251, 278, 117,
	249, 316, 287, 266, 0, 338, 133, 296, 0, 151,
	136, 0, 0, 280, 319, 282, 313, 273, 305, 242,
	295, 333, 264, 301, 0, 0, 0, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 298, 327, 262,
	300, 303, 226, 297, 0, 230, 235, 343, 325, 256,
	257, 0, 0, 0, 0, 0, 0, 0, 279, 283,
	310, 271, 0, 0, 0, 0, 0, 0, 1189, 0,
	254, 0, 294, 0, 0, 0, 237, 232, 277, 0,
	0, 0, 241, 0, 255, 311, 0, 0, 0, 320,
	272, 162, 326, 270, 269, 334, 307, 0, 317, 252,
	261, 111, 259, 149, 302, 160, 103, 323, 318, 292,
	275, 276, 231, 0, 309, 116, 124, 248, 299, 158,
	159, 112, 163, 236, 340, 104, 679, 339, 142, 680,
	157, 324, 293, 289, 233, 322, 291, 288, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 229,
	0, 152, 331, 345, 123, 118, 156, 115, 137, 108,
	102, 239, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 321,
	0, 0, 0, 0, 0, 155, 238, 122, 245, 246,
	243, 244, 285, 286, 335, 336, 337, 312, 240, 0,
	0, 315, 290, 100, 105, 132, 342, 148, 121, 161,
	0, 0, 0, 0, 0, 258, 341, 308, 306, 328,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 329,
	314, 274, 332, 250, 265, 344, 267, 268, 304, 234,
	284, 143, 263, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 330, 281, 0, 253, 227, 260, 228,
	251, 278, 117, 249, 316, 287, 266, 0, 338, 133,
	296, 0, 151, 136, 0, 0, 280, 319, 282, 313,
	273, 305, 242, 295, 333, 264, 301, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	298, 327, 262, 300, 303, 226, 297, 0, 230, 235,
	343, 325, 256, 257, 0, 0, 0, 0, 0, 0,
	0, 279, 283, 310, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 294, 0, 0, 0, 237,
	232, 277, 0, 0, 0, 241, 0, 255, 311, 0,
	0, 0, 320, 272, 162, 326, 270, 269, 334, 307,
	0, 317, 252, 261, 111, 259, 149, 302, 160, 103,
	323, 318, 292, 275, 276, 231, 0, 309, 116, 124,
	248, 299, 158, 159, 112, 163, 236, 340, 104, 223,
	339, 142, 222, 157, 324, 293, 289, 233, 322, 291,
	288, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 229, 0, 152, 331, 345, 123, 118, 156,
	115, 137, 108, 102, 239, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 321, 0, 0, 0, 0, 0, 155, 238,
	122, 245, 246, 243, 244, 285, 286, 335, 336, 337,
	312, 240, 0, 0, 315, 290, 100, 105, 132, 342,
	148, 121, 161, 0, 0, 0, 0, 0, 258, 341,
	308, 306, 328, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 167, 166, 168, 106,
	169, 170, 329, 314, 274, 332, 250, 265, 344, 267,
	268, 304, 234, 284, 143, 263, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 330, 281, 0, 253,
	227, 260, 228, 251, 278, 117, 249, 316, 287, 266,
	0, 338, 133, 296, 0, 151, 136, 0, 0, 280,
	319, 282, 313, 273, 305, 242, 295, 333, 264, 301,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 298, 327, 262, 300, 303, 226, 297,
	0, 230, 235, 343, 325, 256, 257, 0, 0, 0,
	0, 0, 0, 0, 279, 283, 310, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 294, 0,
	0, 0, 237, 232, 277, 0, 0, 0, 241, 0,
	255, 311, 0, 0, 0, 320, 272, 162, 326, 270,
	269, 334, 307, 0, 317, 252, 261, 111, 259, 149,
	302, 160, 103, 323, 318, 292, 275, 276, 231, 0,
	309, 116, 124, 248, 299, 158, 159, 112, 163, 236,
	340, 104, 679, 339, 142, 680, 157, 324, 293, 289,
	233, 322, 291, 288, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 229, 0, 152, 331, 345,
	123, 118, 156, 115, 137, 108, 102, 239, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 321, 0, 0, 0, 0,
	0, 155, 238, 122, 245, 246, 243, 244, 285, 286,
	335, 336, 337, 312, 240, 0, 0, 315, 290, 100,
	105, 132, 342, 148, 121, 161, 0, 0, 0, 0,
	0, 258, 341, 308, 306, 328, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 169, 170, 329, 314, 274, 332, 250,
	265, 344, 267, 268, 304, 234, 284, 143, 263, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 330,
	281, 0, 253, 227, 260, 228, 251, 278, 117, 249,
	316, 287, 266, 0, 338, 133, 296, 0, 151, 136,
	0, 0, 280, 319, 282, 313, 273, 305, 242, 295,
	333, 264, 301, 0, 0, 0, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 298, 327, 262, 300,
	303, 226, 297, 0, 230, 235, 343, 325, 256, 257,
	0, 0, 0, 0, 0, 0, 0, 279, 283, 310,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 294, 0, 0, 0, 237, 232, 277, 0, 0,
	0, 241, 0, 255, 311, 0, 0, 0, 320, 272,
	162, 326, 270, 269, 334, 307, 0, 317, 252, 261,
	111, 259, 149, 302, 160, 103, 323, 318, 292, 275,
	276, 231, 0, 309, 116, 124, 248, 299, 158, 159,
	112, 163, 236, 340, 104, 679, 339, 142, 680, 157,
	324, 293, 289, 233, 322, 291, 288, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 229, 0,
	152, 331, 345, 123, 118, 156, 115, 137, 108, 102,
	239, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 321, 0,
	0, 0, 0, 0, 155, 238, 122, 245, 246, 243,
	244, 285, 286, 335, 336, 337, 312, 240, 0, 0,
	315, 290, 100, 105, 132, 342, 148, 121, 161, 0,
	0, 0, 0, 0, 258, 341, 308, 306, 328, 0,
	120, 153, 0, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 329, 314,
	274, 332, 250, 265, 344, 267, 268, 304, 234, 284,
	143, 263, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 330, 281, 0, 253, 227, 260, 228, 251,
	278, 117, 249, 316, 287, 266, 0, 338, 133, 296,
	0, 151, 136, 0, 0, 280, 319, 282, 313, 273,
	305, 242, 295, 333, 264, 301, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 298,
	327, 262, 300, 303, 226, 297, 0, 230, 235, 343,
	325, 256, 257, 0, 0, 0, 0, 0, 0, 0,
	279, 283, 310, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 294, 0, 0, 0, 237, 232,
	277, 0, 0, 0, 241, 0, 255, 311, 0, 0,
	0, 320, 272, 162, 326, 270, 269, 334, 307, 0,
	317, 252, 261, 111, 259, 149, 302, 160, 103, 323,
	318, 292, 275, 276, 231, 0, 309, 116, 124, 248,
	299, 158, 159, 112, 163, 236, 340, 104, 679, 339,
	142, 680, 157, 324, 293, 289, 233, 322, 291, 288,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 229, 0, 152, 331, 345, 123, 118, 156, 115,
	137, 108, 102, 239, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 321, 0, 0, 0, 0, 0, 155, 238, 122,
	245, 246, 243, 244, 285, 286, 335, 336, 337, 312,
	240, 0, 0, 315, 290, 100, 105, 132, 342, 148,
	121, 161, 0, 0, 0, 0, 0, 258, 341, 308,
	306, 328, 0, 120, 153, 0, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	170, 143, 0, 101, 0, 0, 125, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 411, 0,
	0, 0, 117, 410, 0, 0, 0, 0, 447, 133,
	0, 0, 151, 136, 0, 0, 0, 0, 440, 441,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	460, 428, 427, 429, 430, 431, 432, 0, 0, 107,
	433, 434, 435, 0, 0, 0, 408, 421, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	419, 895, 0, 0, 0, 458, 0, 420, 0, 0,
	417, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 456, 0, 0,
	0, 0, 0, 0, 111, 0, 149, 0, 160, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 124,
	0, 0, 158, 159, 112, 163, 0, 0, 104, 0,
	0, 142, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 0, 0, 152, 0, 0, 123, 118, 156,
	115, 137, 108, 102, 0, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	122, 448, 457, 454, 455, 452, 453, 451, 450, 449,
	459, 442, 443, 445, 0, 444, 100, 105, 132, 0,
	148, 121, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 154, 0, 0,
	0, 128, 0, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 164, 165, 167, 166, 168, 106,
	169, 170, 411, 0, 0, 0, 117, 410, 0, 0,
	0, 0, 447, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 440, 441, 0, 0, 0, 0, 0, 0,
	693, 53, 0, 0, 460, 428, 427, 429, 430, 431,
	432, 0, 0, 107, 433, 434, 435, 694, 0, 0,
	408, 421, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 419, 0, 0, 0, 0, 458,
	0, 420, 0, 0, 417, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 456, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 122, 448, 457, 454, 455, 452,
	453, 451, 450, 449, 459, 442, 443, 445, 0, 444,
	100, 105, 132, 0, 148, 121, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 154, 0, 0, 0, 128, 0, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 411, 0, 0, 0,
	117, 410, 0, 0, 0, 0, 447, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 460, 428,
	427, 429, 430, 431, 432, 0, 0, 107, 433, 434,
	435, 0, 0, 0, 408, 421, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 418, 419, 895,
	0, 0, 0, 458, 0, 420, 0, 0, 417, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 456, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 448,
	457, 454, 455, 452, 453, 451, 450, 449, 459, 442,
	443, 445, 0, 444, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 154, 0, 0, 0, 128,
	0, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	411, 0, 0, 0, 117, 410, 0, 0, 0, 0,
	447, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 402, 460, 428, 427, 429, 430, 431, 432, 0,
	0, 107, 433, 434, 435, 0, 0, 0, 408, 421,
	0, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 418, 419, 0, 0, 0, 0, 458, 0, 420,
	0, 0, 417, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 456,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 448, 457, 454, 455, 452, 453, 451,
	450, 449, 459, 442, 443, 445, 0, 444, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 0, 117, 410, 0, 0, 0,
	0, 447, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 440, 441, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 460, 428, 427, 429, 430, 431, 432,
	0, 0, 107, 433, 434, 435, 0, 0, 0, 408,
	421, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 418, 419, 0, 0, 0, 0, 458, 0,
	420, 0, 0, 417, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	456, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 122, 448, 457, 454, 455, 452, 453,
	451, 450, 449, 459, 442, 443, 445, 0, 444, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 164, 165, 167,
	166, 168, 106, 169, 170, 411, 0, 0, 0, 117,
	410, 0, 0, 0, 0, 447, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 460, 428, 427,
	429, 430, 431, 432, 0, 0, 107, 433, 434, 435,
	0, 0, 0, 408, 421, 0, 446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 418, 419, 0, 0,
	0, 0, 458, 0, 420, 0, 0, 417, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 456, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 122, 448, 457,
	454, 455, 452, 453, 451, 450, 449, 459, 442, 443,
	445, 0, 444, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 154, 0, 0, 0, 128, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 0,
	117, 0, 0, 0, 0, 0, 447, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 460, 428,
	427, 429, 430, 431, 432, 0, 0, 107, 433, 434,
	435, 0, 0, 0, 0, 421, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 418, 419, 0,
	0, 0, 0, 458, 0, 420, 0, 0, 417, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 456, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 448,
	457, 454, 455, 452, 453, 451, 450, 449, 459, 442,
	443, 445, 0, 444, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 154, 0, 0, 0, 128,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 117, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 594, 604, 605, 597, 598,
	599, 600, 601, 602, 603, 596, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 761, 760, 0, 131, 0, 0, 759, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 24, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 122, 117, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 53, 0, 0, 98, 0, 0, 0, 0,
	120, 153, 0, 154, 107, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 98, 0, 1299, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 24, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 122, 117, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 53, 0,
	0, 224, 0, 0, 0, 0, 120, 153, 0, 154,
	107, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 224, 0,
	0, 661, 0, 0, 662, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 143, 0,
	101, 0, 0, 125, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 117,
	490, 0, 0, 0, 0, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 224, 0, 489,
	0, 0, 120, 153, 0, 154, 107, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 160, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 158,
	159, 112, 163, 0, 0, 104, 0, 0, 142, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 156, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 143, 0, 101, 0, 0,
	125, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 117, 122, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 161,
	0, 0, 0, 0, 98, 0, 1299, 0, 0, 0,
	0, 120, 153, 107, 154, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 167, 166, 168, 106, 169, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 160, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 158, 159, 112, 163,
	0, 0, 104, 0, 0, 142, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 156, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 143, 0, 101, 0, 0, 125, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 117, 122, 0, 0, 0, 0, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 161, 0, 53, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 120, 153,
	107, 154, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	167, 166, 168, 106, 169, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 160,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 158, 159, 112, 163, 0, 0, 104,
	0, 0, 142, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	156, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	117, 122, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 161, 0, 0, 0, 0, 224, 0,
	1066, 0, 0, 0, 0, 120, 153, 107, 154, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 167, 166, 168,
	106, 169, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 143,
	0, 101, 0, 0, 125, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 122, 473,
	117, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	151, 136, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 120, 153, 0, 154, 0, 107, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 160, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	158, 159, 112, 163, 0, 0, 104, 0, 0, 142,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 156, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 143, 0, 101, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 117, 122, 0,
	0, 0, 0, 0, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	161, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 120, 153, 107, 154, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 167, 166, 168, 106, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 160, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 158, 159, 112,
	163, 0, 0, 104, 0, 0, 142, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 156, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 143, 0, 101, 0, 0, 125, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 117, 122, 0, 0, 0, 0,
	0, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 161, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 0, 0, 120,
	153, 107, 154, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 167, 166, 168, 106, 169, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	160, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 158, 159, 112, 163, 0, 0,
	104, 0, 0, 142, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 0, 0, 152, 0, 0, 123,
	118, 156, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	143, 0, 101, 0, 0, 125, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 117, 122, 0, 0, 0, 0, 0, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 161, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 120, 153, 107, 154,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 167, 166,
	168, 106, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 160, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 158, 159, 112, 163, 0, 0, 104, 0, 0,
	142, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 0, 0, 152, 0, 0, 123, 118, 156, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 143, 0, 101,
	0, 0, 125, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 117, 122,
	0, 0, 0, 0, 0, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 161, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 120, 153, 107, 154, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 167, 166, 168, 106, 169,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 160, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 158, 159,
	112, 163, 0, 0, 104, 0, 0, 142, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 156, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 143, 0, 101, 0, 0, 125,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 117, 122, 0, 0, 0,
	0, 0, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 161, 0,
	0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
	120, 153, 107, 154, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 167, 166, 168, 106, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 160, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 158, 159, 112, 163, 0,
	0, 104, 0, 0, 142, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 156, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	154, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 167,
	166, 168, 106, 169, 170,
}

var yyPact = [...]int{
	112, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 970, 1008, -1000, -1000, -1000, -1000, -1000, 818,
	185, 83, 40, 124, 118, 74, 117, 9403, -1000, -1000,
	55, -1000, -163, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	803, -1000, -1000, -1000, -1000, -1000, 943, 963, 825, 914,
	864, -1000, 83, 9403, 998, 2349, -117, 9600, 78, 115,
	107, 97, 78, -1000, 114, -1000, 58, 716, 58, 9403,
	9403, -87, 19, -1000, -1000, -79, -1000, -1000, -1000, -96,
	-1000, -1000, -1000, -1000, -1000, -1000, 9403, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 533, -1000, -1000, -1000, -1000, 771,
	771, -1000, 9403, -1000, -1000, -181, -1000, -1000, -1000, -1000,
	601, 912, 6311, 6311, 970, -1000, 803, -1000, -1000, -1000,
	887, -1000, -1000, 380, 8812, 895, 237, 9403, 766, -1000,
	-1000, -175, 2935, -1000, -1000, -1000, -1000, 328, 8021, 8021,
	-1000, -1000, -1000, 891, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 956,
	954, 714, -1000, 113, -1000, -1000, 9403, 362, 689, 672,
	669, 9403, 9403, 9403, 904, 832, 9403, -1000, -1000, 997,
	9403, 9403, -1000, -1000, 366, 366, -1000, -1000, -1000, -1000,
	-1000, 366, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6311, -1000, -1000, 183, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1004, 278, 469, -1000, 6311, 1471,
	771, 771, -1000, -1000, 232, -1000, -1000, 6572, 6572, 6572,
	6572, 6572, 6572, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 771, 204, -1000, 6047,
	771, 771, 771, 771, 771, 771, 6311, 771, 771, 771,
	771, 771, 771, 771, 771, 771, 771, 771, 771, 771,
	-1000, -1000, 764, -1000, 489, 943, 601, 864, 7822, 795,
	-1000, -1000, 809, 9403, -1000, 9206, 4693, 993, 2642, -1000,
	760, 758, -179, -180, -1000, -175, 5238, -1000, -1000, -1000,
	-1000, 246, -1000, 771, 87, 119, 7030, 1433, -25, -1000,
	-1000, -1000, 788, -1000, 788, 788, 788, 788, 6, 6,
	6, 6, -1000, -1000, -1000, -1000, -1000, 826, 821, -1000,
	788, 788, 788, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 820, 820, 820, 807, 807, 897, 893, 831, 830,
	829, -1000, 664, 753, -1000, -1000, 9403, -1000, 943, -94,
	-1000, -1000, 369, 9403, -1000, -1000, 9403, -1000, -1000, -1000,
	-1000, 667, 379, -1000, 9403, -1000, -1000, -1000, -1000, -1000,
	-1000, 869, 6311, 6311, 507, 6311, 6311, 282, 6572, 412,
	347, 6572, 6572, 6572, 6572, 6572, 6572, 6572, 6572, 6572,
	6572, 6572, 6572, 6572, 6572, 6572, 527, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 662, -1000, 803, 577, 577,
	245, 245, 245, 245, 245, 6833, 4974, 4400, 601, 6047,
	5502, 5502, 6311, 6311, 5502, 909, 336, 379, 9009, -1000,
	601, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5502, 5502,
	5502, 5502, 6311, -1000, -1000, -1000, 912, -1000, 909, 965,
	-1000, 880, 876, 5502, -1000, 828, 9206, 771, -1000, 7625,
	-1000, 815, -1000, 313, -1000, 197, -1000, -1000, -1000, -1000,
	-1000, 970, 6311, -1000, 3814, -1000, -183, -1000, -174, -187,
	-1000, -1000, -1000, -1000, -1000, 379, -1000, 658, 9600, 771,
	771, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 292, 292,
	75, 292, 292, 292, 292, 292, -42, -52, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, -1000, -1000, -1000, 609, 188, 174, -1000, -1000, -1000,
	-1000, 911, -1000, 1433, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 373, 108, -1000, 926,
	-1000, 925, 574, 1002, 506, 153, 140, -27, -1000, -1000,
	532, 6, 6, -1000, -1000, -1000, 889, -1000, -1000, -1000,
	573, 573, -1000, -1000, -1000, -1000, 531, -1000, -1000, -1000,
	530, -1000, -1000, 897, -1000, 73, -1000, 9403, 9403, 9403,
	-1000, 326, 293, 90, 64, 57, 53, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9403, -1000, -1000, 572, -1000,
	-1000, -1000, 570, 6311, -1000, 366, -1000, 6311, -1000, -1000,
	867, 282, 375, -1000, -1000, 450, -1000, -1000, 379, 379,
	1349, -1000, -1000, -1000, -1000, 412, 6572, 6572, 6572, 289,
	1349, 1869, 637, 1502, 245, 317, 317, 258, 258, 258,
	258, 258, 687, 687, -1000, -1000, -1000, 601, -1000, -1000,
	-1000, 601, 5502, 747, -1000, -1000, 1601, 194, 771, 192,
	-1000, -1000, 601, 630, 630, 384, 353, 630, 5502, 396,
	-1000, 6311, 601, -1000, 630, 601, 630, 630, -1000, -1000,
	9403, -1000, -1000, -1000, -1000, 804, -1000, 899, 742, 743,
	-1000, -1000, 5766, 601, 657, 184, 970, 9206, 6311, 4400,
	943, 379, -1000, -1000, -1000, -192, -199, -1000, -1000, 601,
	9600, 9600, -1000, 568, -1000, 506, 292, 292, -1000, 888,
	525, 519, 518, 567, 561, 292, 292, 487, 560, 635,
	486, 479, 478, 529, 559, 934, 502, 496, 473, 9797,
	70, -1000, 609, -1000, 918, 188, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 819, -1000, -1000, -1000, -1000,
	-1000, -1000, -78, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 736, -1000, -1000, 303, 646, -1000,
	644, 746, 642, -1000, 292, 292, 771, 771, 771, -1000,
	9403, -1000, -1000, -1000, 632, 2, 818, 610, 9600, -1000,
	-1000, -1000, -1000, 379, 369, 379, -1000, -1000, -1000, -1000,
	-1000, -1000, 289, 1349, 1824, -1000, 6572, 6572, -1000, -1000,
	630, 5502, -1000, -1000, 8612, -1000, -1000, 3521, 5502, 4107,
	-1000, -1000, -1000, 665, 527, 665, -116, 786, 332, -1000,
	6311, 371, -1000, -1000, -1000, -1000, -1000, -1000, 993, 8415,
	913, -1000, 771, -1000, -1000, 810, 9009, 9009, 943, -1000,
	379, -1000, -1000, -1000, -1000, -1000, -1000, 601, 601, -1000,
	-1000, 506, 506, -1000, -1000, -1000, -1000, -1000, -1000, 557,
	540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 811, -1000, 941, 808, 70, 609, 452, -1000,
	-1000, -1000, -1000, -1000, 538, -1000, 471, -1000, 465, 611,
	404, 9009, 9009, 9009, -1000, -1000, -1000, 886, -1000, -1000,
	-1000, -1000, -1000, 6572, 1349, 1349, -1000, -1000, -1000, -1000,
	162, 601, -1000, 601, 788, 788, -1000, 788, 807, -1000,
	788, 37, 788, 30, 601, 601, 771, -113, -1000, 379,
	6311, 984, 744, 806, -1000, -1000, -1000, 907, 7229, 7426,
	1001, -1000, 771, -1000, 803, 109, -1000, -1000, 771, -148,
	-1000, -1000, -1000, -1000, 9009, -1000, -1000, -1000, -1000, 9009,
	794, 70, -1000, 724, -1000, 720, 623, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 628, -1000, 788, 628, 628, 607,
	1349, 3228, -1000, -1000, -1000, 135, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6572, 601, 537, 379, 982, 951,
	8415, 8415, 8415, 8415, -1000, 853, 850, -1000, 847, 846,
	858, 9403, -1000, 626, 7229, 149, -1000, 8218, -1000, -1000,
	9206, 743, 601, 9009, -146, -1000, 460, 622, 618, 9009,
	783, -1000, -1000, -1000, -1000, 9009, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 305, -1000, -1000, -1000, 6311, 6311, 806,
	816, 785, -1000, -1000, -1000, -1000, 848, -1000, 844, -1000,
	-1000, -1000, -1000, -1000, 96, 93, 77, -1000, 659, -1000,
	-1000, 600, -1000, 597, -1000, -1000, -1000, 596, 9009, 241,
	-1000, 99, 447, 601, 82, -124, 379, 598, 6311, 6311,
	-1000, -1000, 771, 771, 771, -146, -1000, 874, 98, 98,
	-1000, 594, 906, -1000, -1000, -1000, 292, 535, 945, 906,
	-1000, -1000, 935, 906, -1000, -1000, 860, -119, -140, 379,
	379, 9009, 9009, 9009, -1000, 277, -1000, 292, -1000, 528,
	932, 98, -1000, -1000, 292, 292, 420, -1000, -1000, -1000,
	-1000, 591, -1000, 859, -1000, 590, -1000, 590, 590, 771,
	409, -1000, 586, 98, 611, 611, -1000, -1000, -121, -1000,
	9009, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -131, -1000,
	-143, -1000,
}

var yyPgo = [...]int{
	0, 22, 26, 1272, 1271, 1270, 28, 1265, 1263, 1261,
	1259, 1258, 1256, 1255, 42, 895, 1254, 1253, 1252, 1251,
	1249, 1247, 1246, 1245, 1242, 1241, 1238, 1237, 1230, 1228,
	1225, 170, 1223, 1222, 1221, 49, 1218, 83, 1217, 78,
	1216, 1214, 1213, 53, 65, 34, 37, 150, 1212, 32,
	19, 17, 1210, 1209, 15, 1208, 1349, 1207, 1206, 60,
	87, 1205, 40, 1204, 1203, 1201, 6, 30, 1200, 67,
	1199, 1198, 85, 18, 1197, 1196, 1195, 1194, 1191, 1190,
	57, 11, 27, 1, 25, 1189, 41, 12, 1188, 52,
	1187, 1185, 1184, 1180, 33, 1175, 74, 1171, 45, 69,
	1170, 56, 14, 55, 1169, 1168, 92, 82, 77, 75,
	1167, 72, 1166, 1165, 145, 1164, 1163, 1162, 869, 1161,
	435, 519, 1149, 58, 1148, 39, 0, 4, 23, 47,
	1147, 54, 1028, 36, 13, 1142, 1141, 1442, 35, 79,
	29, 1139, 1137, 1136, 1135, 1132, 1130, 1129, 31, 1126,
	1124, 1123, 1121, 1120, 1117, 1116, 1115, 1114, 1113, 1100,
	1096, 1095, 1088, 1086, 1084, 1082, 1080, 1073, 1071, 1068,
	1067, 1064, 1063, 1061, 1060, 1059, 1058, 20, 1057, 1056,
	1055, 21, 59, 24, 62, 1054, 1053, 1051, 90, 16,
	1048, 1047, 1046, 1045, 61, 48, 1044, 76, 46, 44,
	1043, 1042, 1041, 73, 10, 8, 1040, 9, 1038, 1037,
	5, 7, 1036, 1035, 1033, 1030, 1029, 1027, 1026, 2,
	1025, 1024, 71, 1023, 1022, 63, 3, 1021, 1020, 1016,
	1015, 50, 84, 1014, 126,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 227,
	227, 226, 153, 153, 22, 22, 22, 22, 22, 228,
	228, 228, 228, 228, 228, 218, 218, 219, 219, 213,
	211, 211, 208, 208, 215, 215, 206, 206, 212, 212,
	209, 209, 207, 207, 214, 214, 223, 223, 224, 224,
	225, 225, 184, 184, 183, 183, 182, 182, 185, 185,
	185, 25, 199, 201, 201, 202, 202, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 155, 157, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 170, 171, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 173, 173, 174, 174, 175, 175, 176, 176, 158,
	181, 181, 156, 152, 154, 200, 200, 200, 195, 131,
	131, 141, 141, 141, 141, 220, 220, 221, 221, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 144,
	144, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	143, 143, 143, 143, 143, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	147, 147, 147, 194, 194, 148, 148, 188, 188, 189,
	189, 189, 186, 186, 187, 187, 190, 190, 149, 149,
	149, 149, 149, 149, 36, 35, 35, 35, 116, 116,
	116, 191, 177, 177, 177, 151, 178, 178, 179, 179,
	179, 180, 180, 180, 192, 192, 193, 193, 150, 196,
	196, 196, 196, 6, 6, 216, 216, 216, 216, 210,
	210, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 198, 198, 197, 197, 205, 205, 204, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	63, 63, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 42, 42, 59,
	59, 60, 60, 61, 61, 58, 58, 62, 62, 62,
	30, 28, 29, 29, 29, 29, 233, 31, 32, 32,
	33, 33, 33, 39, 39, 39, 37, 37, 38, 38,
	45, 45, 44, 44, 46, 46, 46, 46, 130, 130,
	130, 129, 129, 48, 48, 49, 49, 50, 50, 51,
	51, 51, 64, 52, 52, 52, 52, 136, 136, 135,
	135, 135, 134, 134, 53, 53, 53, 53, 54, 54,
	54, 54, 55, 55, 57, 57, 56, 56, 65, 65,
	65, 65, 66, 66, 67, 67, 47, 47, 47, 47,
	47, 47, 47, 119, 119, 69, 69, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 79, 79, 79,
	79, 79, 79, 70, 70, 70, 70, 70, 70, 70,
	43, 43, 80, 80, 80, 86, 81, 81, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 77, 77,
	77, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 234, 234,
	78, 78, 78, 78, 40, 40, 40, 40, 40, 138,
	138, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 90, 90, 41, 41, 88, 88,
	89, 91, 91, 87, 87, 87, 72, 72, 72, 72,
	72, 72, 72, 74, 74, 74, 92, 92, 93, 93,
	94, 94, 95, 95, 96, 97, 97, 97, 98, 98,
	98, 98, 99, 99, 99, 71, 71, 71, 71, 71,
	71, 100, 100, 100, 100, 101, 101, 82, 82, 84,
	84, 83, 85, 102, 102, 103, 104, 104, 107, 107,
	106, 106, 106, 106, 106, 115, 115, 114, 114, 114,
	105, 105, 108, 108, 112, 112, 111, 113, 113, 113,
	113, 110, 110, 109, 109, 139, 139, 139, 117, 117,
	120, 120, 121, 121, 118, 118, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 123, 123, 123, 124,
	124, 217, 217, 127, 127, 128, 128, 132, 132, 133,
	133, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 231, 232, 137,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 7, 3, 3,
	3, 5, 3, 3, 3, 3, 3, 0, 3, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 1, 2,
	3, 3, 3, 2, 3, 1, 2, 1, 1, 1,
	2, 3, 2, 2, 0, 2, 3, 2, 2, 2,
	1, 0, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}

var yyChk = [...]int{
	-1000, -229, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 40, -25,
	121, 122, 123, 144, 125, 137, 43, 60, 262, 139,
	269, 272, 273, 276, 275, 290, 36, 138, 142, 143,
	-231, 7, 246, 63, -230, 298, -94, 14, -33, 5,
	-31, -233, -31, -31, -31, -31, -199, 63, 238, -217,
	22, 27, 128, 29, -118, 132, 128, 129, 238, 128,
	128, 232, 121, 227, 264, -61, 266, 267, 234, 128,
	268, 230, 265, 229, 66, 42, 128, -132, 66, -126,
	252, 19, 199, 145, 164, 253, 295, 75, 198, 201,
	202, 140, 160, 204, 203, 196, 154, 38, 194, 178,
	270, 257, 236, 193, 155, 22, 179, 183, 277, 206,
	177, 24, 254, 45, 181, 207, 49, 197, 208, 185,
	184, 186, 167, 17, 209, 210, 180, 182, 256, 142,
	211, 48, 190, 271, 273, 234, 195, 169, 158, 159,
	144, 258, 130, 161, 290, 291, 293, 292, 294, 296,
	297, -137, -137, 69, 256, -137, 274, -137, -137, 291,
	293, 292, 294, 295, 297, 262, -137, -137, -137, -137,
	-14, -98, 16, 15, -17, -15, -231, 6, 31, 32,
	-39, 50, 51, -32, -118, -56, -132, 10, -104, -105,
	-107, 274, -139, -106, 278, 279, 277, -128, -115, 280,
	-127, -125, 168, 165, 66, -126, 81, 33, 35, 188,
	84, 151, 116, 173, 15, 85, 162, 115, 235, 200,
	247, 121, 58, 239, 240, 237, 238, 227, 156, 39,
	9, 36, 138, 32, 109, 123, 88, 89, 264, 141,
	34, 139, 78, 18, 61, 10, 42, 12, 13, 133,
	132, 100, 129, 56, 7, 149, 150, 117, 37, 97,
	52, 30, 54, 98, 16, 241, 242, 41, 176, 172,
	251, 175, 148, 171, 111, 59, 46, 82, 76, 157,
	79, 62, 143, 80, 14, 57, 267, 135, 266, 153,
	99, 124, 246, 55, 6, 250, 40, 137, 147, 53,
	128, 228, 174, 146, 170, 87, 131, 77, 268, 5,
	29, 191, 8, 60, 134, 243, 244, 245, 44, 166,
	163, 265, 255, 86, 11, 192, -228, 277, 271, 263,
	259, -200, -195, -131, 66, -126, -121, 133, 129, 129,
	129, -121, 128, -120, 133, 66, -120, -56, -56, 231,
	128, 238, -137, -137, 228, -58, 235, 236, -137, -137,
	-137, 234, -137, -137, -137, -137, -137, -56, -137, 69,
	-137, -83, -231, -83, -137, -56, -137, -137, 296, 275,
	276, -232, 65, -99, 18, 41, -47, -68, 82, -73,
	39, 34, -72, -69, -87, -85, -86, 116, 105, 106,
	113, 83, 117, -77, -75, -76, -78, 68, 67, 69,
	70, 71, 72, 76, 77, 78, -127, -132, -83, -231,
	54, 55, 247, 248, 251, 249, 85, 44, 237, 245,
	244, 243, 241, 242, 239, 240, 133, 238, 111, 246,
	66, -126, -95, -96, -47, -94, -14, -31, 46, -37,
	32, 74, -57, 37, -56, 40, 118, -56, 64, -108,
	-111, -109, 281, 283, -106, 274, 90, -114, -127, 68,
	39, -114, 40, 15, 15, 65, 64, -141, -144, -146,
	-145, -147, -142, -143, 162, 163, 116, 166, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 40, 140,
	158, 159, 160, 161, 179, 180, 181, 182, 183, 184,
	185, 186, 145, 164, 253, 146, 147, 148, 149, 150,
	151, 153, 154, 155, 156, 157, -132, 82, 66, 66,
	66, -56, -56, -63, -56, 34, 62, -132, -42, 10,
	-56, -132, -59, -60, 10, 100, -60, -59, -137, -137,
	-137, -81, -47, -137, -123, 131, 33, -137, -137, -137,
	8, 100, 81, 80, 97, 64, 17, -47, -70, 100,
	82, 98, 99, 84, 102, 101, 112, 105, 106, 107,
	108, 109, 110, 111, 103, 104, 115, 90, 91, 92,
	93, 94, 95, 96, -119, -231, -86, -231, 119, 120,
	-73, -73, -73, -73, -73, -73, -231, 118, -14, -231,
	-231, -231, -231, -231, -231, -231, -90, -47, -231, -234,
	-231, -234, -234, -234, -234, -234, -234, -234, -231, -231,
	-231, -231, 64, -97, 35, 36, -98, -232, -39, -74,
	-127, 69, 72, -38, 53, -71, 40, 44, -14, -231,
	-56, -102, -103, -87, -127, -132, -133, -132, -125, 165,
	168, -67, 11, -107, -139, -110, 64, -112, 64, 282,
	284, 285, -108, 62, 79, -47, -178, 115, -231, 261,
	23, -201, -202, -203, -156, -152, -154, -155, -157, -158,
	-159, -160, -161, -162, -163, -164, -165, -166, -167, -168,
	-169, -170, -171, -172, -173, -174, -175, -176, 75, 270,
	-184, 188, 199, 43, 200, 201, 202, 129, 204, 205,
	206, 24, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 39, -195, -196, -197, -5, -4, 129, 30, 27,
	22, 21, -220, -221, -222, -190, -149, -191, -192, -193,
	-150, -36, -151, -179, -180, 76, 82, 39, 188, 135,
	30, 29, 75, 62, 115, 198, 195, -186, 191, -148,
	63, -148, -148, -148, -148, -177, 165, -177, -177, -177,
	63, 63, -148, -148, -148, -188, 63, -188, -188, -189,
	63, -189, -223, -224, -225, -184, 34, 62, 62, 62,
	-122, 124, 270, 247, 126, 123, 127, 122, 188, 165,
	75, 39, 14, 258, 66, 64, -56, -98, 233, -137,
	-137, -62, 98, 11, -132, -56, -137, 64, -232, -56,
	48, -47, -47, -79, 76, 82, 77, 78, -47, -47,
	-73, -80, -83, -86, 73, 100, 98, 99, 84, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -73, -73, -73, -138, 66, 68, 66, -72, -72,
	-127, -45, 32, -44, -46, 107, -47, -132, -128, -133,
	-125, -232, -14, -44, -44, -47, -47, -44, -37, -88,
	-89, 86, -127, -232, -44, -45, -44, -44, -96, -99,
	-117, 18, 10, 44, 44, -44, -101, 62, -102, -82,
	-84, -83, -231, -14, -100, -127, -67, 64, 90, 118,
	-94, -47, -109, -111, -113, 286, 283, 289, 66, -131,
	-231, -231, -203, -183, 90, -183, 115, -182, 168, 165,
	-183, -183, -183, -183, -183, 203, 203, -183, -183, -183,
	-183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
	-6, 66, -198, -197, 135, 29, 28, -222, 76, 68,
	69, 70, 76, -35, -69, -116, 237, 241, 242, 30,
	30, 68, 8, -181, 66, 68, 193, 194, 39, 39,
	196, 197, -187, 192, 69, -177, -177, 40, -194, 68,
	-194, 69, 69, -225, 115, -182, -56, -56, -56, -137,
	-123, -124, 129, 30, 90, 131, 136, 136, 136, -56,
	-137, 68, 68, -47, -59, -47, -137, 49, 76, 77,
	78, -80, -73, -73, -73, -43, 141, 81, -232, -232,
	-44, 64, -130, -129, 33, -127, 68, 118, -231, 118,
	-232, -232, -232, 64, 134, 33, -232, -44, -91, -89,
	88, -47, -232, -232, -232, -232, -232, -56, -48, 10,
	38, -101, 64, -232, -232, -232, 64, 118, -94, -103,
	-47, -128, -98, 283, 287, 288, -232, -131, -131, 68,
	-181, -183, -183, 40, 69, 69, 69, 68, 68, -183,
	-183, 69, 68, 66, 69, 69, 69, 69, 39, 68,
	39, 194, 193, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 69, 39, 69, 39, 69, 39,
	66, -126, -2, -1, 134, -6, 30, -198, 63, -35,
	65, 66, 116, 65, 64, 65, 64, 65, 64, -183,
	-183, -231, -231, -231, -56, -137, 66, 165, -199, 66,
	-195, -62, -43, 81, -73, -73, -232, -46, -129, 107,
	-133, -45, -128, -140, 116, 162, 140, 160, 156, 177,
	167, 190, 158, 191, -138, -140, 252, -94, 89, -47,
	87, -67, -49, -50, -51, -52, -64, -86, -231, -56,
	30, -84, 44, -14, -231, -127, -127, -98, -232, -232,
	-181, -181, 68, 68, 63, -3, 23, 20, 26, 63,
	-2, -6, 65, 69, 68, 69, 69, -219, 66, 39,
	-185, 66, 116, 39, -205, -204, -127, -205, -205, 40,
	-73, 118, -232, -232, -148, -148, -148, -189, -148, 150,
	-148, 150, -232, -232, -231, -41, 250, -47, -92, 12,
	64, -53, -54, -55, 52, 56, 58, 53, 54, 55,
	59, -136, 33, -49, -231, -135, -134, 33, -132, 68,
	8, -82, -14, 118, -231, -153, 260, -205, -205, 63,
	-2, 65, 65, 65, -232, 64, -148, -232, -232, 66,
	107, -177, 66, -73, -232, 68, -93, 13, 15, -50,
	-51, -50, -51, 52, 52, 52, 57, 52, 57, 52,
	-54, -132, -232, -65, 60, 132, 61, -134, -102, -232,
	-127, -227, -226, 259, 69, 65, 65, -205, 63, -208,
	-204, -206, -209, -40, 100, 255, -47, -81, 62, 62,
	52, 52, 129, 129, 129, 64, -232, 66, -210, -210,
	65, -205, -207, -215, -211, -213, 24, 75, 134, -207,
	-212, -211, 255, -207, -211, -232, 253, 59, 256, -47,
	-47, -231, -231, -231, -226, 44, -216, 24, -1, 75,
	255, -210, 65, -214, 41, 19, -183, 68, -218, 23,
	20, 25, 49, 254, 257, -66, -127, -66, -66, 100,
	-183, 68, 25, -210, -183, -183, 69, 66, 49, -232,
	64, -232, -232, -83, 69, 66, -219, -219, 255, -127,
	256, 257,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 590, 0, 376, 376, 376, 376, 376, 0,
	681, 664, 0, 0, 0, 363, 0, 0, 886, 886,
	0, 886, 0, 886, 886, 0, 886, 886, 886, 886,
	0, 33, 34, 884, 1, 3, 598, 0, 0, 380,
	383, 378, 664, 0, 0, 0, 49, 0, 662, 0,
	0, 0, 662, 682, 0, 665, 660, 0, 660, 0,
	0, 0, 0, 886, 886, 0, 886, 886, 886, 0,
	886, 886, 886, 886, 886, 364, 0, 371, 687, 688,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 324, 325, 886, 0, 328, 886, 330, 331, 0,
	0, 886, 0, 886, 886, 0, 372, 373, 374, 375,
	27, 602, 0, 0, 590, 29, 0, 376, 381, 382,
	386, 384, 385, 377, 0, 0, 436, 0, 37, 38,
	626, 0, 0, 628, 655, 656, -2, 0, 0, 0,
	685, 686, -2, 702, 683, 684, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 44, 50, 51, 0,
	0, 0, 165, 0, 169, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 357,
	0, 0, 344, 345, 359, 0, 365, 366, 348, 349,
	350, 359, 352, 353, 354, 355, 356, 886, 326, 886,
	329, 886, 0, 886, 334, 676, 336, 337, 886, 886,
	886, 28, 885, 23, 0, 0, 599, 446, 0, 451,
	453, 0, 488, 489, 490, 491, 492, 0, 0, 0,
	0, 0, 0, 514, 515, 516, 517, 576, 577, 578,
	579, 580, 581, 582, 455, 456, 573, 0, 622, 0,
	0, 0, 0, 0, 0, 0, 564, 0, 538, 538,
	538, 538, 538, 538, 538, 538, 0, 0, 0, 0,
	-2, -2, 591, 592, 595, 598, 27, 383, 0, 388,
	387, 379, 0, 0, 435, 0, 0, 444, 0, 640,
	651, 644, 0, 0, 629, 0, 0, 633, 637, 638,
	639, 266, 636, 0, 0, -2, 291, 175, 242, 172,
	173, 174, 235, 190, 235, 235, 235, 235, 262, 262,
	262, 262, 218, 219, 220, 221, 222, 0, 0, 205,
	235, 235, 235, 209, 225, 226, 227, 228, 229, 230,
	231, 232, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 237, 237, 237, 239, 239, -2, 0, 0, 0,
	0, 91, 0, 317, 320, 661, 0, 319, 598, 0,
	886, 886, 367, 0, 361, 362, 0, 886, 370, 327,
	332, 0, 486, 333, 0, 677, 678, 338, 339, 340,
	603, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 473, 474, 475,
	476, 477, 478, 479, 452, 0, 466, 0, 0, 0,
	508, 509, 510, 511, 512, 0, 390, 0, 27, 0,
	0, 0, 0, 0, 0, 386, 0, 565, 0, 530,
	0, 531, 532, 533, 534, 535, 536, 537, 0, 390,
	0, 0, 0, 594, 596, 597, 602, 30, 386, 0,
	583, 0, 0, 0, 389, 615, 0, 0, -2, 0,
	434, 444, 623, 0, 573, 0, 437, 689, 690, 702,
	703, 590, 0, 627, 0, 642, 0, 643, 0, 0,
	653, 654, 641, 630, 631, 632, 634, 0, 0, 0,
	0, 92, -2, 95, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 84, 84,
	0, 84, 84, 84, 84, 84, 0, 0, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 83, 166, 167, 283, 302, 0, 304, 305, 300,
	-2, 292, 168, 176, 177, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 246, 0, 0, 261, 0,
	275, 277, 0, 0, 0, 0, 0, 244, 243, 189,
	0, 262, 262, 212, 213, 214, 0, 215, 216, 217,
	0, 0, 206, 207, 208, 200, 0, 201, 202, 203,
	0, 204, 45, -2, 78, 0, 663, 0, 0, 0,
	886, 676, 0, 673, 0, 671, 0, 666, 667, 668,
	669, 670, 672, 674, 675, 0, 318, 886, 0, 342,
	343, 346, 0, 0, 360, 359, 351, 0, 621, 886,
	0, 447, 448, 450, 467, 0, 469, 471, 600, 601,
	457, 458, 482, 483, 484, 0, 0, 0, 0, 480,
	462, 0, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 507, 549, 550, 0, 505, 506,
	513, 0, 0, 391, 392, 394, 398, 0, 574, 0,
	-2, 485, 27, 0, 0, 0, 0, 0, 0, 571,
	568, 0, 0, 539, 0, 0, 0, 0, 593, 24,
	0, 658, 659, 584, 585, 403, 31, 0, 615, 605,
	617, 619, 0, 27, 0, 611, 590, 0, 0, 0,
	598, 445, 652, 645, 646, 0, 0, 650, 267, 0,
	0, 0, 96, 0, 85, 0, 84, 84, 86, 0,
	0, 0, 0, 0, 0, 84, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 284, 283, 303, 0, 302, 293, 178, 247, 248,
	249, 250, 251, 252, 253, 255, 258, 259, 260, 274,
	276, 278, 0, 265, 160, 161, 268, 269, 270, 271,
	272, 273, 171, 245, 0, 210, 211, 0, 0, 233,
	0, 0, 0, 79, 84, 84, 0, 0, 0, 309,
	0, 886, 679, 680, 0, 0, 0, 0, 0, 321,
	341, 358, 368, 369, 367, 487, 335, 604, 468, 470,
	472, 459, 480, 463, 0, 460, 0, 0, 454, 518,
	0, 0, 395, 399, 0, 401, 402, 0, 390, 0,
	-2, 521, 522, 0, 0, 0, 0, 590, 0, 569,
	0, 0, 529, 540, 541, 542, 543, 25, 444, 0,
	0, 32, 0, 620, -2, 0, 0, 0, 598, 624,
	625, 574, 36, 647, 648, 649, 52, 0, 0, 162,
	163, 0, 0, 87, 121, 122, 159, 124, 125, 0,
	0, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 0, 296, 0, 0, 295, 283, 0, 254,
	236, 263, 264, 223, 0, 224, 0, 240, 0, 0,
	0, 0, 0, 0, 310, 311, 312, 0, 314, 315,
	316, 347, 461, 0, 481, 464, 519, 393, 400, 396,
	0, 0, 575, 0, 235, 235, 554, 235, 239, 557,
	235, 559, 235, 562, 0, 0, 0, 566, 528, 572,
	0, 586, 404, 405, 407, 408, 409, 417, 0, 419,
	0, 618, 0, -2, 0, 613, 612, 35, 0, 42,
	123, 164, 126, 127, 0, 294, 297, 298, 299, 0,
	0, 295, 256, 0, 234, 0, 0, 80, 57, 58,
	81, 88, 89, 90, 0, 306, 235, 0, 0, 0,
	465, 0, 520, 523, 551, 262, 555, 556, 558, 560,
	561, 563, 525, 524, 0, 0, 0, 570, 588, 0,
	0, 0, 0, 0, 424, 0, 0, 427, 0, 0,
	0, 0, 418, 0, 0, 438, 420, 0, 422, 423,
	0, 608, 27, 0, 0, 54, 0, 0, 0, 0,
	0, 257, 238, 241, 62, 0, 308, 66, 70, 313,
	397, 552, 553, 544, 527, 567, 26, 0, 0, 406,
	413, 0, 416, 425, 426, 428, 0, 430, 0, 432,
	433, 410, 411, 412, 0, 0, 0, 421, 616, -2,
	614, 0, 39, 0, 43, 289, 289, 0, 0, 72,
	307, 72, 72, 0, 0, 0, 589, 587, 0, 0,
	429, 431, 0, 0, 0, 0, 53, 0, 279, 280,
	289, 0, 46, 63, 64, 65, 84, 0, 0, 47,
	67, 68, 0, 48, 71, 526, 0, 0, 0, 414,
	415, 0, 0, 0, 40, 0, 290, 84, 286, 0,
	0, 281, 289, 73, 84, 84, 0, 61, 59, 55,
	56, 0, 545, 0, 548, 0, 442, 0, 0, 0,
	0, 287, 0, 282, 0, 0, 60, 69, 546, 439,
	0, 440, 441, 41, 285, 288, 74, 75, 0, 443,
	0, 547,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 110, 102, 3,
	63, 65, 107, 105, 64, 106, 118, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 298,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}
type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}
func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}
func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4
	if !yyErrorVerbose {
		return "syntax error"
	}
	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)
	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)
	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}
	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}
		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}
	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}
func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}
out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}
func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}
yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}
		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}
	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}
	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1
	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1047
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1055
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1059
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1066
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1092
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1103
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1125
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1131
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1157
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1184
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1192
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1196
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1200
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1218
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1224
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1231
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1277
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1285
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1289
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1304
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1326
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1330
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1335
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1345
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1368
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1403
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1408
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1410
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1414
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1449
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1530
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1534
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1557
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1720
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1730
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1749
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1755
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1761
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1767
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1773
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1802
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1820
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1862
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1866
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1874
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1967
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1978
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2004
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2024
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2051
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2171
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2325
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2334
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2338
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2346
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2356
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2364
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2373
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2377
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2446
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2450
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2466
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2555
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2567
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2581
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2592
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2647
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2706
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2744
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2748
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2753
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2758
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2762
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2766
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2770
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2774
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2780
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2788
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2793
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2807
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2841
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2865
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2877
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2889
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2893
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2897
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2903
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2907
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2911
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2923
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2927
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2942
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2946
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2971
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.str = "full "
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3021
		{
			yyVAL.showFilter = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3029
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3035
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3041
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.statement = &OtherRead{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3051
		{
			yyVAL.statement = &OtherRead{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3055
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3064
		{
			setAllowComments(yylex, true)
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3073
		{
			yyVAL.bytes2 = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3077
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.str = UnionStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3087
		{
			yyVAL.str = UnionAllStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = UnionDistinctStr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3096
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.str = SQLCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3118
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.selectExprs = nil
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3141
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3155
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3159
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3172
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3184
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3212
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3216
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3243
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3247
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3261
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3269
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.str = JoinStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3286
		{
			yyVAL.str = JoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3290
		{
			yyVAL.str = JoinStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.str = StraightJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.str = LeftJoinStr
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.str = LeftJoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			yyVAL.str = RightJoinStr
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3312
		{
			yyVAL.str = RightJoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3318
		{
			yyVAL.str = NaturalJoinStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3322
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3346
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3351
		{
			yyVAL.indexHints = nil
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3355
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3359
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3363
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3369
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3373
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3418
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3422
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3480
		{
			yyVAL.str = IsNullStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3484
		{
			yyVAL.str = IsNotNullStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3488
		{
			yyVAL.str = IsTrueStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3492
		{
			yyVAL.str = IsNotTrueStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3496
		{
			yyVAL.str = IsFalseStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3500
		{
			yyVAL.str = IsNotFalseStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.str = EqualStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = LessThanStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = GreaterThanStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3518
		{
			yyVAL.str = LessEqualStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.str = GreaterEqualStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.str = NotEqualStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = nil
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3559
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3569
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3583
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3587
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3591
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3659
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3667
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3681
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3685
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3689
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3707
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3711
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3715
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3733
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3737
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3741
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 526:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3745
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3749
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3753
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3757
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3789
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3832
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3836
		{
			yyVAL.str = BooleanModeStr
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3840
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3844
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3848
		{
			yyVAL.str = QueryExpansionStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3854
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3919
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3923
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3928
		{
			yyVAL.str = string("")
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3932
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3938
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3948
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3953
		{
			yyVAL.expr = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3963
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3967
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3971
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3977
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3981
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3985
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3989
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3993
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3997
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4001
		{
			yyVAL.expr = &NullVal{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4007
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4016
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4020
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4025
		{
			yyVAL.exprs = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4029
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4034
		{
			yyVAL.expr = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4038
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4043
		{
			yyVAL.orderBy = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4047
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4053
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4057
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4063
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4068
		{
			yyVAL.str = AscScr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4072
		{
			yyVAL.str = AscScr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4076
		{
			yyVAL.str = DescScr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4081
		{
			yyVAL.limit = nil
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4085
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4089
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4093
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4098
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4102
		{
			yyVAL.str = ForUpdateStr
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4106
		{
			yyVAL.str = ShareModeStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4119
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4123
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4127
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4132
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4136
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4140
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4147
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4151
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4155
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4159
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4164
		{
			yyVAL.updateExprs = nil
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4168
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4174
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4178
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4184
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4188
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4194
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4200
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4210
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4214
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4220
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4226
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4230
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4236
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4240
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4247
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4251
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4255
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4259
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4263
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4270
		{
			yyVAL.bytes = []byte("charset")
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4276
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4280
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4284
		{
			yyVAL.expr = &Default{}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4290
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4294
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4300
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4304
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4310
		{
			yyVAL.str = ""
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4314
		{
			yyVAL.str = yyDollar[2].str
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4320
		{
			yyVAL.str = yyDollar[3].str
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4326
		{
			yyVAL.str = RepeatableRead
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4330
		{
			yyVAL.str = ReadCommitted
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4334
		{
			yyVAL.str = ReadUncommitted
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4338
		{
			yyVAL.str = Serializable
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4344
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4348
		{
			yyVAL.str = yyDollar[2].str
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4354
		{
			yyVAL.str = TxReadWrite
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4358
		{
			yyVAL.str = TxReadOnly
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4364
		{
			yyVAL.str = SessionStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4368
		{
			yyVAL.str = SessionStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4372
		{
			yyVAL.str = GlobalStr
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4381
		{
			yyVAL.byt = 0
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4385
		{
			yyVAL.byt = 1
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4390
		{
			yyVAL.byt = 0
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4394
		{
			yyVAL.byt = 1
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4399
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4403
		{
			yyVAL.str = IgnoreStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4409
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4413
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4417
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4421
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4425
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4429
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4433
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4437
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4441
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4445
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4450
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4454
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4458
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4464
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4468
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4473
		{
			yyVAL.str = IndexStr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4477
		{
			yyVAL.str = UniqueStr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4487
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4494
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4500
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4504
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4511
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4731
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4740
		{
			decNesting(yylex)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4745
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
