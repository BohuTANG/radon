//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const USING = 57463
const PRIMARY = 57464
const COLUMN = 57465
const DESC = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const SHOW = 57469
const DATE = 57470
const ESCAPE = 57471
const HELP = 57472
const REPAIR = 57473
const TRUNCATE = 57474
const OPTIMIZE = 57475
const BIT = 57476
const TINYINT = 57477
const SMALLINT = 57478
const MEDIUMINT = 57479
const INT = 57480
const INTEGER = 57481
const BIGINT = 57482
const INTNUM = 57483
const REAL = 57484
const DOUBLE = 57485
const FLOAT_TYPE = 57486
const DECIMAL = 57487
const NUMERIC = 57488
const TIME = 57489
const TIMESTAMP = 57490
const DATETIME = 57491
const YEAR = 57492
const CHAR = 57493
const VARCHAR = 57494
const BOOL = 57495
const CHARACTER = 57496
const VARBINARY = 57497
const NCHAR = 57498
const CHARSET = 57499
const TEXT = 57500
const TINYTEXT = 57501
const MEDIUMTEXT = 57502
const LONGTEXT = 57503
const BLOB = 57504
const TINYBLOB = 57505
const MEDIUMBLOB = 57506
const LONGBLOB = 57507
const JSON = 57508
const ENUM = 57509
const GEOMETRY = 57510
const POINT = 57511
const LINESTRING = 57512
const POLYGON = 57513
const GEOMETRYCOLLECTION = 57514
const MULTIPOINT = 57515
const MULTILINESTRING = 57516
const MULTIPOLYGON = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const FIXED = 57524
const DYNAMIC = 57525
const STORAGE = 57526
const DISK = 57527
const MEMORY = 57528
const COLUMN_FORMAT = 57529
const AVG_ROW_LENGTH = 57530
const COMPRESSION = 57531
const CONNECTION = 57532
const DATA = 57533
const DIRECTORY = 57534
const DELAY_KEY_WRITE = 57535
const ENCRYPTION = 57536
const INSERT_METHOD = 57537
const MAX_ROWS = 57538
const MIN_ROWS = 57539
const PACK_KEYS = 57540
const PASSWORD = 57541
const ROW_FORMAT = 57542
const STATS_AUTO_RECALC = 57543
const STATS_PERSISTENT = 57544
const STATS_SAMPLE_PAGES = 57545
const TABLESPACE = 57546
const COMPRESSED = 57547
const REDUNDANT = 57548
const COMPACT = 57549
const TOKUDB_DEFAULT = 57550
const TOKUDB_FAST = 57551
const TOKUDB_SMALL = 57552
const TOKUDB_ZLIB = 57553
const TOKUDB_QUICKLZ = 57554
const TOKUDB_LZMA = 57555
const TOKUDB_SNAPPY = 57556
const TOKUDB_UNCOMPRESSED = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const WARNINGS = 57561
const VARIABLES = 57562
const EVENTS = 57563
const BINLOG = 57564
const GTID = 57565
const STATUS = 57566
const COLUMNS = 57567
const FIELDS = 57568
const CURRENT_TIMESTAMP = 57569
const CURRENT_DATE = 57570
const DATABASE = 57571
const SCHEMA = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const FORMAT = 57592
const TREE = 57593
const TRADITIONAL = 57594
const EXTENDED = 57595
const PARTITION = 57596
const PARTITIONS = 57597
const LIST = 57598
const XA = 57599
const DISTRIBUTED = 57600
const ENGINES = 57601
const VERSIONS = 57602
const PROCESSLIST = 57603
const QUERYZ = 57604
const TXNZ = 57605
const KILL = 57606
const ENGINE = 57607
const SINGLE = 57608
const BEGIN = 57609
const START = 57610
const TRANSACTION = 57611
const COMMIT = 57612
const ROLLBACK = 57613
const GLOBAL = 57614
const LOCAL = 57615
const SESSION = 57616
const NAMES = 57617
const ISOLATION = 57618
const LEVEL = 57619
const READ = 57620
const WRITE = 57621
const ONLY = 57622
const REPEATABLE = 57623
const COMMITTED = 57624
const UNCOMMITTED = 57625
const SERIALIZABLE = 57626
const RADON = 57627
const ATTACH = 57628
const ATTACHLIST = 57629
const DETACH = 57630
const RESHARD = 57631
const CLEANUP = 57632
const RECOVER = 57633
const REBALANCE = 57634

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5043

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 197,
	6, 356,
	7, 356,
	8, 356,
	9, 356,
	18, 356,
	67, 356,
	254, 356,
	-2, 890,
	-1, 372,
	94, 898,
	-2, 705,
	-1, 378,
	94, 754,
	-2, 683,
	-1, 434,
	5, 29,
	-2, 348,
	-1, 513,
	122, 735,
	-2, 731,
	-1, 514,
	122, 736,
	-2, 732,
	-1, 547,
	119, 90,
	168, 90,
	171, 90,
	174, 90,
	-2, 102,
	-1, 598,
	1, 83,
	310, 83,
	-2, 90,
	-1, 728,
	5, 29,
	-2, 654,
	-1, 757,
	119, 90,
	168, 90,
	171, 90,
	174, 90,
	-2, 103,
	-1, 815,
	35, 310,
	67, 310,
	70, 310,
	133, 310,
	-2, 895,
	-1, 868,
	1, 84,
	310, 84,
	-2, 90,
	-1, 959,
	122, 738,
	-2, 734,
	-1, 1141,
	5, 30,
	-2, 533,
	-1, 1165,
	5, 30,
	-2, 655,
	-1, 1300,
	5, 29,
	-2, 657,
	-1, 1428,
	5, 30,
	-2, 658,
}

const yyPrivate = 57344

const yyLast = 11352

var yyAct = [...]int{

	514, 1457, 1501, 1431, 1331, 1104, 491, 1463, 631, 1332,
	731, 467, 1012, 988, 1361, 1375, 1324, 1291, 373, 1290,
	989, 454, 864, 1487, 1224, 1040, 736, 1372, 1063, 1270,
	1134, 943, 377, 950, 953, 958, 1126, 850, 897, 1105,
	113, 1106, 113, 203, 388, 348, 1053, 70, 920, 492,
	51, 732, 969, 60, 844, 1042, 489, 432, 985, 615,
	634, 1016, 771, 466, 1078, 389, 785, 869, 113, 469,
	381, 819, 391, 465, 758, 202, 532, 456, 516, 533,
	522, 860, 1043, 531, 369, 368, 357, 113, 366, 113,
	616, 598, 401, 539, 64, 452, 453, 59, 796, 1175,
	1176, 51, 745, 746, 26, 52, 28, 29, 462, 1174,
	535, 113, 353, 744, 534, 806, 451, 344, 534, 788,
	535, 335, 66, 67, 68, 69, 376, 1385, 755, 1005,
	1432, 952, 1004, 699, 626, 1006, 26, 52, 28, 29,
	905, 1523, 30, 1486, 1500, 38, 338, 340, 339, 341,
	342, 783, 343, 1522, 333, 386, 1477, 434, 3, 385,
	1520, 1499, 39, 1476, 1283, 57, 1355, 384, 1108, 420,
	894, 1056, 410, 383, 405, 1465, 1057, 1058, 1026, 412,
	413, 85, 1025, 621, 1069, 414, 1073, 955, 26, 52,
	28, 29, 843, 391, 1107, 406, 1488, 57, 1249, 1068,
	433, 851, 1015, 1350, 74, 792, 1348, 1099, 109, 347,
	108, 332, 75, 1401, 1098, 79, 1097, 1226, 1045, 627,
	628, 402, 393, 32, 33, 34, 81, 36, 1466, 106,
	1096, 399, 813, 26, 52, 28, 29, 398, 636, 56,
	55, 54, 37, 51, 51, 42, 49, 35, 50, 57,
	110, 1019, 438, 105, 1018, 1226, 1453, 1017, 430, 1423,
	1425, 1049, 1050, 1051, 1452, 1451, 786, 396, 395, 1052,
	487, 488, 394, 1084, 88, 1382, 87, 787, 789, 790,
	791, 83, 793, 794, 795, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 57, 1443, 655, 654, 664, 665,
	657, 658, 659, 660, 661, 662, 663, 656, 90, 407,
	666, 678, 679, 76, 851, 98, 107, 1233, 1340, 415,
	1168, 1140, 1019, 1044, 1330, 1018, 1138, 1108, 1017, 714,
	812, 1424, 998, 687, 1465, 635, 440, 1094, 656, 666,
	636, 666, 113, 1070, 1071, 444, 446, 752, 1505, 641,
	642, 1328, 53, 1107, 784, 1066, 1067, 104, 644, 899,
	1013, 1475, 113, 1146, 113, 794, 644, 1234, 1095, 381,
	997, 622, 40, 643, 642, 381, 381, 754, 538, 43,
	1489, 441, 44, 45, 53, 47, 46, 1466, 445, 445,
	644, 1285, 1048, 600, 77, 78, 970, 439, 113, 113,
	48, 1329, 600, 51, 970, 518, 1151, 113, 113, 643,
	642, 57, 1471, 416, 601, 113, 103, 91, 524, 102,
	100, 923, 89, 1518, 97, 376, 644, 77, 78, 927,
	715, 540, 540, 1056, 1510, 1093, 53, 635, 1057, 1058,
	392, 113, 1271, 925, 926, 924, 1467, 643, 642, 520,
	898, 1433, 1323, 536, 1444, 1119, 1120, 1121, 1144, 92,
	101, 95, 96, 99, 644, 643, 642, 1273, 1322, 543,
	1519, 1198, 1287, 625, 643, 642, 623, 913, 915, 916,
	619, 53, 644, 914, 1275, 1319, 1279, 1197, 1274, 1320,
	1272, 644, 607, 609, 1221, 1277, 659, 660, 661, 662,
	663, 656, 617, 1108, 666, 1276, 1219, 1064, 1196, 1065,
	1465, 519, 1193, 675, 677, 1188, 1187, 397, 1278, 1280,
	1186, 1082, 381, 944, 1220, 945, 1507, 113, 1145, 1107,
	1081, 381, 1074, 904, 676, 442, 1218, 459, 517, 686,
	733, 717, 689, 690, 691, 692, 693, 694, 695, 391,
	698, 700, 700, 700, 700, 700, 700, 700, 700, 708,
	709, 710, 711, 1466, 716, 664, 665, 657, 658, 659,
	660, 661, 662, 663, 656, 729, 1217, 666, 720, 680,
	681, 682, 683, 684, 685, 734, 1493, 376, 1404, 1321,
	1310, 1309, 1200, 807, 1201, 753, 1194, 1190, 1189, 852,
	853, 854, 1180, 1111, 1110, 1326, 1216, 718, 113, 113,
	1079, 846, 847, 848, 849, 1061, 739, 113, 113, 738,
	866, 747, 1199, 1514, 455, 906, 1511, 857, 858, 859,
	1456, 809, 1325, 632, 1398, 113, 701, 702, 703, 704,
	705, 706, 707, 481, 480, 482, 483, 484, 485, 647,
	688, 1041, 486, 907, 1394, 1491, 921, 893, 1394, 1459,
	1363, 1366, 1367, 1368, 1364, 870, 1365, 1369, 1454, 455,
	1448, 1394, 1435, 1394, 1434, 455, 862, 863, 902, 1251,
	632, 1202, 1248, 728, 1359, 455, 381, 697, 654, 664,
	665, 657, 658, 659, 660, 661, 662, 663, 656, 381,
	1195, 666, 1394, 455, 1132, 455, 957, 1240, 1239, 1392,
	960, 657, 658, 659, 660, 661, 662, 663, 656, 922,
	959, 666, 972, 1236, 1237, 1391, 750, 51, 1236, 1235,
	381, 1167, 455, 1103, 990, 1007, 946, 987, 733, 689,
	381, 1102, 949, 974, 376, 906, 455, 1450, 604, 603,
	602, 400, 947, 948, 391, 971, 1390, 919, 995, 1232,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 61, 967, 991, 1160, 51,
	1101, 548, 547, 734, 996, 26, 994, 986, 737, 996,
	999, 977, 1163, 1359, 978, 1238, 376, 1014, 26, 1020,
	1021, 1022, 1023, 1024, 1009, 1010, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1008,
	1002, 1001, 962, 963, 536, 646, 966, 1299, 1132, 1132,
	910, 911, 1011, 917, 918, 688, 1132, 1204, 1203, 743,
	973, 26, 975, 976, 741, 996, 57, 961, 712, 530,
	1363, 1366, 1367, 1368, 1364, 984, 1365, 1369, 354, 57,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 57, 1437, 113, 113, 113, 645, 632, 490, 726,
	964, 965, 845, 727, 1075, 1076, 1388, 992, 865, 1316,
	1047, 1311, 643, 642, 71, 1230, 1054, 861, 856, 855,
	517, 24, 57, 80, 1447, 986, 874, 873, 872, 644,
	887, 608, 1416, 1418, 1449, 1367, 1368, 1417, 111, 57,
	195, 1080, 1414, 909, 724, 1000, 1413, 1415, 1412, 1114,
	1512, 921, 1085, 1086, 1498, 870, 1083, 1091, 1118, 886,
	358, 359, 1484, 983, 523, 982, 195, 1107, 1108, 457,
	1336, 871, 1185, 1184, 1077, 51, 381, 521, 544, 528,
	806, 1113, 1161, 1115, 352, 195, 889, 195, 1129, 610,
	361, 1371, 1130, 1122, 1107, 885, 458, 355, 356, 523,
	113, 1297, 1228, 1141, 1142, 1143, 1060, 1059, 1147, 195,
	72, 1046, 1508, 1153, 922, 1154, 1155, 1156, 1157, 1314,
	1497, 1496, 1108, 1313, 349, 1495, 1407, 1139, 733, 1315,
	391, 391, 1136, 1164, 1165, 1166, 546, 1172, 545, 350,
	61, 1150, 882, 880, 876, 84, 879, 881, 1182, 1183,
	1177, 959, 1406, 981, 1123, 1124, 1125, 1358, 1191, 1192,
	1223, 980, 737, 1181, 612, 1173, 1162, 363, 1170, 1169,
	1379, 1062, 640, 734, 63, 376, 437, 6, 435, 5,
	436, 4, 65, 58, 1225, 1, 382, 884, 1227, 1430,
	868, 867, 818, 817, 1494, 1178, 1179, 73, 1485, 1462,
	1464, 1469, 1441, 1131, 1438, 1440, 757, 1112, 756, 387,
	883, 808, 113, 824, 1116, 823, 822, 1241, 1242, 1148,
	391, 1229, 113, 820, 1072, 842, 1327, 199, 829, 1231,
	828, 751, 782, 781, 780, 779, 778, 777, 776, 775,
	1256, 1257, 774, 773, 772, 770, 769, 768, 767, 766,
	765, 764, 763, 759, 762, 761, 381, 1243, 1244, 1245,
	1384, 381, 760, 827, 1252, 1250, 1255, 1254, 825, 821,
	553, 878, 1258, 1263, 551, 552, 550, 957, 1152, 1269,
	1259, 113, 888, 555, 554, 549, 1265, 1264, 381, 381,
	990, 959, 1370, 1268, 1267, 1374, 1282, 1281, 877, 632,
	1133, 86, 1100, 331, 1298, 1171, 1288, 1092, 1289, 875,
	41, 82, 1136, 674, 979, 376, 1055, 376, 374, 1003,
	1305, 1306, 1284, 742, 740, 365, 364, 993, 713, 515,
	1295, 1307, 1308, 991, 1405, 1304, 1301, 1357, 1149, 696,
	195, 968, 468, 912, 1302, 1303, 479, 476, 478, 477,
	1294, 719, 725, 648, 460, 1422, 1261, 1262, 1293, 890,
	195, 193, 195, 429, 381, 381, 381, 94, 93, 1334,
	1335, 411, 1225, 1317, 525, 1318, 1362, 1360, 655, 654,
	664, 665, 657, 658, 659, 660, 661, 662, 663, 656,
	1292, 1159, 666, 1337, 1338, 611, 195, 195, 1354, 1442,
	723, 826, 27, 62, 360, 195, 614, 14, 23, 15,
	1341, 13, 1342, 195, 12, 31, 113, 113, 1346, 1127,
	1333, 1333, 1333, 1351, 1352, 10, 990, 9, 8, 7,
	351, 25, 381, 1380, 2, 21, 1386, 381, 22, 624,
	20, 1387, 19, 18, 1300, 17, 1343, 1344, 16, 1345,
	11, 810, 1347, 1353, 1349, 811, 1312, 0, 0, 1286,
	0, 381, 1225, 1389, 0, 1373, 0, 0, 0, 991,
	0, 51, 0, 1393, 0, 1383, 1396, 1397, 0, 1269,
	113, 113, 113, 113, 0, 1294, 0, 0, 1333, 1339,
	0, 113, 0, 1333, 113, 0, 1403, 113, 1409, 1408,
	1411, 1410, 1400, 381, 1419, 0, 0, 0, 1395, 381,
	1427, 733, 1426, 1436, 1421, 381, 0, 376, 0, 0,
	0, 0, 0, 1428, 1439, 195, 0, 735, 0, 1295,
	1295, 1295, 1295, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 1373, 0, 0, 0, 0, 0, 1294,
	1294, 1294, 1294, 0, 0, 0, 734, 1458, 381, 1429,
	0, 0, 1460, 1294, 1461, 1333, 1468, 1472, 1470, 1473,
	0, 1333, 1455, 688, 0, 0, 0, 0, 1483, 1381,
	0, 1490, 1402, 0, 1474, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 1492, 0,
	0, 381, 381, 381, 1503, 1504, 195, 195, 0, 0,
	0, 0, 0, 1509, 1333, 900, 195, 0, 0, 1506,
	0, 1480, 1481, 1482, 0, 0, 0, 192, 0, 0,
	0, 191, 1517, 195, 0, 381, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1515, 1516, 0, 0, 0,
	570, 961, 0, 362, 0, 0, 0, 1502, 1502, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 0, 404, 445, 334, 0, 336, 337,
	0, 345, 346, 0, 0, 956, 624, 0, 0, 956,
	956, 1521, 0, 956, 0, 0, 428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 956, 956,
	956, 0, 0, 0, 1445, 632, 0, 0, 1260, 0,
	0, 0, 956, 408, 409, 735, 558, 417, 418, 419,
	0, 421, 422, 423, 424, 425, 426, 427, 655, 654,
	664, 665, 657, 658, 659, 660, 661, 662, 663, 656,
	0, 571, 666, 0, 0, 1478, 1479, 584, 587, 588,
	589, 590, 591, 592, 0, 593, 594, 595, 596, 597,
	572, 573, 574, 575, 556, 557, 585, 0, 559, 0,
	0, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 576, 577, 578, 579, 580, 581, 582, 583, 0,
	1128, 836, 835, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 654, 664, 665, 657, 658, 659, 660, 661, 662,
	663, 656, 0, 838, 666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 830, 0, 0,
	0, 0, 0, 831, 655, 654, 664, 665, 657, 658,
	659, 660, 661, 662, 663, 656, 0, 586, 666, 0,
	0, 195, 195, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 650, 0, 653, 0, 0, 0, 0, 0, 667,
	668, 669, 670, 671, 672, 673, 834, 651, 652, 649,
	655, 654, 664, 665, 657, 658, 659, 660, 661, 662,
	663, 656, 0, 0, 666, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 529,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 956, 443, 841, 0,
	0, 840, 447, 0, 449, 450, 0, 0, 195, 0,
	0, 0, 0, 605, 606, 0, 0, 0, 0, 0,
	0, 0, 613, 0, 0, 735, 0, 624, 0, 0,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 630, 0, 633, 0,
	0, 0, 0, 637, 638, 639, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 624, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 115, 0, 195,
	0, 141, 0, 145, 148, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	169, 154, 0, 891, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 380, 0,
	1137, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	908, 0, 643, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	0, 0, 0, 0, 0, 895, 896, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 167, 180, 0, 117,
	0, 0, 0, 0, 195, 1377, 0, 0, 130, 139,
	0, 0, 176, 177, 126, 183, 0, 0, 118, 0,
	0, 160, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 147, 133, 142, 164, 152, 165, 143, 158, 157,
	159, 0, 0, 0, 170, 0, 0, 138, 132, 174,
	129, 155, 122, 116, 0, 123, 124, 128, 127, 0,
	146, 153, 156, 162, 163, 168, 0, 0, 195, 195,
	195, 195, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 195, 0, 0, 1377, 0, 0, 735, 173,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 119,
	150, 0, 166, 135, 181, 140, 179, 178, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 171, 0, 172, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 187, 186, 188, 120, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 1088,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 298, 256, 317, 231,
	246, 329, 248, 249, 286, 212, 266, 161, 244, 115,
	0, 213, 0, 141, 0, 145, 148, 149, 0, 295,
	0, 0, 0, 306, 315, 263, 0, 234, 205, 241,
	206, 260, 131, 230, 300, 269, 247, 0, 323, 151,
	278, 0, 169, 154, 0, 0, 262, 303, 264, 296,
	255, 287, 223, 277, 318, 245, 283, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 1246, 0, 121,
	280, 312, 243, 282, 285, 204, 279, 1253, 208, 214,
	328, 310, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 261, 265, 292, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 276, 0, 0, 0, 218,
	210, 259, 0, 0, 1247, 222, 0, 236, 293, 0,
	0, 0, 304, 254, 182, 311, 252, 251, 319, 289,
	0, 232, 233, 242, 301, 125, 240, 250, 167, 180,
	284, 117, 308, 302, 274, 257, 258, 209, 0, 291,
	130, 139, 229, 281, 176, 177, 126, 183, 215, 325,
	118, 379, 324, 160, 378, 175, 309, 275, 271, 211,
	307, 273, 270, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 207, 0, 170, 316, 330, 138,
	132, 174, 129, 155, 122, 116, 220, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 305, 0, 0, 0, 0,
	0, 173, 219, 137, 226, 224, 227, 297, 225, 267,
	268, 320, 321, 322, 294, 221, 0, 0, 299, 272,
	114, 119, 150, 327, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 239, 326, 290, 288,
	313, 0, 134, 171, 0, 172, 367, 0, 0, 372,
	370, 371, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	314, 298, 256, 317, 231, 246, 329, 248, 249, 286,
	212, 266, 161, 244, 115, 0, 213, 0, 141, 0,
	145, 148, 149, 0, 295, 0, 0, 0, 306, 315,
	263, 0, 234, 205, 241, 206, 260, 131, 230, 300,
	269, 247, 0, 323, 151, 278, 0, 169, 154, 0,
	0, 262, 303, 264, 296, 255, 287, 223, 277, 318,
	245, 283, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 280, 312, 243, 282, 285,
	204, 279, 0, 208, 214, 328, 310, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	276, 0, 0, 0, 218, 210, 259, 0, 0, 0,
	222, 0, 236, 293, 0, 0, 0, 304, 254, 182,
	311, 252, 251, 319, 289, 0, 232, 233, 242, 301,
	125, 240, 250, 167, 180, 284, 117, 308, 302, 274,
	257, 258, 209, 0, 291, 130, 139, 229, 281, 176,
	177, 126, 183, 215, 325, 118, 379, 324, 160, 378,
	175, 309, 275, 271, 211, 307, 273, 270, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 207,
	0, 170, 316, 330, 138, 132, 174, 129, 155, 122,
	116, 220, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	305, 0, 0, 0, 0, 0, 173, 219, 137, 226,
	224, 227, 297, 225, 267, 268, 320, 321, 322, 294,
	221, 0, 0, 299, 272, 114, 119, 150, 327, 166,
	135, 181, 140, 179, 178, 136, 0, 0, 0, 0,
	0, 239, 326, 290, 288, 313, 0, 134, 171, 0,
	172, 0, 0, 0, 372, 370, 371, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 314, 298, 256, 317, 231,
	246, 329, 248, 249, 286, 212, 266, 161, 244, 115,
	0, 213, 0, 141, 0, 145, 148, 149, 0, 295,
	0, 0, 0, 306, 315, 263, 0, 234, 205, 241,
	206, 260, 131, 230, 300, 269, 247, 0, 323, 151,
	278, 0, 169, 154, 0, 0, 262, 303, 264, 296,
	255, 287, 223, 277, 318, 245, 283, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	280, 312, 243, 282, 285, 204, 279, 0, 208, 214,
	328, 310, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 261, 265, 292, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 276, 0, 0, 0, 218,
	210, 259, 0, 0, 0, 222, 0, 236, 293, 0,
	0, 0, 304, 254, 182, 311, 252, 251, 319, 289,
	0, 232, 233, 242, 301, 125, 240, 250, 167, 180,
	284, 117, 308, 302, 274, 257, 258, 209, 0, 291,
	130, 139, 229, 281, 176, 177, 126, 183, 215, 325,
	118, 379, 324, 160, 378, 175, 309, 275, 271, 211,
	307, 273, 270, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 207, 0, 170, 316, 330, 138,
	132, 174, 129, 155, 122, 116, 220, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 305, 0, 0, 0, 0,
	0, 173, 219, 137, 226, 224, 227, 297, 225, 267,
	268, 320, 321, 322, 294, 221, 0, 0, 299, 272,
	114, 119, 150, 327, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 239, 326, 290, 288,
	313, 0, 134, 171, 0, 172, 537, 0, 0, 144,
	0, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	314, 298, 256, 317, 231, 246, 329, 248, 249, 286,
	212, 266, 161, 244, 115, 0, 213, 0, 141, 0,
	145, 148, 149, 0, 295, 0, 0, 0, 306, 315,
	263, 0, 234, 205, 241, 206, 260, 131, 230, 300,
	269, 247, 0, 323, 151, 278, 0, 169, 154, 0,
	0, 262, 303, 264, 296, 255, 287, 223, 277, 318,
	245, 283, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 280, 312, 243, 282, 285,
	204, 279, 0, 208, 214, 328, 310, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 1399, 0, 235, 0,
	276, 0, 0, 0, 218, 210, 259, 0, 0, 0,
	222, 0, 236, 293, 0, 0, 0, 304, 254, 182,
	311, 252, 251, 319, 289, 0, 232, 233, 242, 301,
	125, 240, 250, 167, 180, 284, 117, 308, 302, 274,
	257, 258, 209, 0, 291, 130, 139, 229, 281, 176,
	177, 126, 183, 215, 325, 118, 216, 324, 160, 217,
	175, 309, 275, 271, 211, 307, 273, 270, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 207,
	0, 170, 316, 330, 138, 132, 174, 129, 155, 122,
	116, 220, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	305, 0, 0, 0, 0, 0, 173, 219, 137, 226,
	224, 227, 297, 225, 267, 268, 320, 321, 322, 294,
	221, 0, 0, 299, 272, 114, 119, 150, 327, 166,
	135, 181, 140, 179, 178, 136, 0, 0, 0, 0,
	0, 239, 326, 290, 288, 313, 0, 134, 171, 0,
	172, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 314, 298, 256, 317, 231,
	246, 329, 248, 249, 286, 212, 266, 161, 244, 115,
	0, 213, 0, 141, 0, 145, 148, 149, 0, 295,
	0, 0, 0, 306, 315, 263, 0, 234, 205, 241,
	206, 260, 131, 230, 300, 269, 247, 0, 323, 151,
	278, 0, 169, 154, 0, 0, 262, 303, 264, 296,
	255, 287, 223, 277, 318, 245, 283, 0, 0, 0,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	280, 312, 243, 282, 285, 204, 279, 0, 208, 214,
	328, 310, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 261, 265, 292, 253, 0, 0, 0, 0, 0,
	0, 1266, 0, 235, 0, 276, 0, 0, 0, 218,
	210, 259, 0, 0, 0, 222, 0, 236, 293, 0,
	0, 0, 304, 254, 182, 311, 252, 251, 319, 289,
	0, 232, 233, 242, 301, 125, 240, 250, 167, 180,
	284, 117, 308, 302, 274, 257, 258, 209, 0, 291,
	130, 139, 229, 281, 176, 177, 126, 183, 215, 325,
	118, 216, 324, 160, 217, 175, 309, 275, 271, 211,
	307, 273, 270, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 207, 0, 170, 316, 330, 138,
	132, 174, 129, 155, 122, 116, 220, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 305, 0, 0, 0, 0,
	0, 173, 219, 137, 226, 224, 227, 297, 225, 267,
	268, 320, 321, 322, 294, 221, 0, 0, 299, 272,
	114, 119, 150, 327, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 239, 326, 290, 288,
	313, 0, 134, 171, 0, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	314, 298, 256, 317, 231, 246, 329, 248, 249, 286,
	212, 266, 161, 244, 115, 0, 213, 0, 141, 0,
	145, 148, 149, 0, 295, 0, 0, 0, 306, 315,
	263, 0, 234, 205, 241, 206, 260, 131, 230, 300,
	269, 247, 0, 323, 151, 278, 0, 169, 154, 0,
	0, 262, 303, 264, 296, 255, 287, 223, 277, 318,
	245, 283, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 280, 312, 243, 282, 285,
	204, 279, 0, 208, 214, 328, 310, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	276, 0, 0, 0, 218, 210, 259, 0, 0, 0,
	222, 0, 236, 293, 0, 0, 0, 304, 254, 182,
	311, 252, 251, 319, 289, 0, 232, 233, 242, 301,
	125, 240, 250, 167, 180, 284, 117, 308, 302, 274,
	257, 258, 209, 0, 291, 130, 139, 229, 281, 176,
	177, 126, 183, 215, 325, 118, 379, 324, 160, 378,
	175, 309, 275, 271, 211, 307, 273, 270, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 207,
	0, 170, 316, 330, 138, 132, 174, 129, 155, 122,
	116, 220, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	305, 0, 0, 0, 0, 0, 173, 219, 137, 226,
	224, 227, 297, 225, 267, 268, 320, 321, 322, 294,
	221, 0, 0, 299, 272, 114, 119, 150, 327, 166,
	135, 181, 140, 179, 178, 136, 0, 0, 0, 0,
	0, 239, 326, 290, 288, 313, 0, 134, 171, 0,
	172, 0, 0, 0, 144, 0, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 314, 298, 256, 317, 231,
	246, 329, 248, 249, 286, 212, 266, 161, 244, 115,
	0, 213, 0, 141, 0, 145, 148, 149, 0, 295,
	0, 0, 0, 306, 315, 263, 0, 234, 205, 241,
	206, 260, 131, 230, 300, 269, 247, 0, 323, 151,
	278, 0, 169, 154, 0, 0, 262, 303, 264, 296,
	255, 287, 223, 277, 318, 245, 283, 0, 0, 0,
	200, 0, 201, 0, 0, 0, 0, 0, 0, 121,
	280, 312, 243, 282, 285, 204, 279, 0, 208, 214,
	328, 310, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 261, 265, 292, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 276, 0, 0, 0, 218,
	210, 259, 0, 0, 0, 222, 0, 236, 293, 0,
	0, 0, 304, 254, 182, 311, 252, 251, 319, 289,
	0, 232, 233, 242, 301, 125, 240, 250, 167, 180,
	284, 117, 308, 302, 274, 257, 258, 209, 0, 291,
	130, 139, 229, 281, 176, 177, 126, 183, 215, 325,
	118, 216, 324, 160, 217, 175, 309, 275, 271, 211,
	307, 273, 270, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 207, 0, 170, 316, 330, 138,
	132, 174, 129, 155, 122, 116, 220, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 305, 0, 0, 0, 0,
	0, 173, 219, 137, 226, 224, 227, 297, 225, 267,
	268, 320, 321, 322, 294, 221, 0, 0, 299, 272,
	114, 119, 150, 327, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 239, 326, 290, 288,
	313, 0, 134, 171, 0, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	314, 298, 256, 317, 231, 246, 329, 248, 249, 286,
	212, 266, 161, 244, 115, 0, 213, 0, 141, 0,
	145, 148, 149, 0, 295, 0, 0, 0, 306, 315,
	263, 0, 234, 205, 241, 206, 260, 131, 230, 300,
	269, 247, 0, 323, 151, 278, 0, 169, 154, 0,
	0, 262, 303, 264, 296, 255, 287, 223, 277, 318,
	245, 283, 0, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 280, 312, 243, 282, 285,
	204, 279, 0, 208, 214, 328, 310, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	276, 0, 0, 0, 218, 210, 259, 0, 0, 0,
	222, 0, 236, 293, 0, 0, 0, 304, 254, 182,
	311, 252, 251, 319, 289, 0, 232, 233, 242, 301,
	125, 240, 250, 167, 180, 284, 117, 308, 302, 274,
	257, 258, 209, 0, 291, 130, 139, 229, 281, 176,
	177, 126, 183, 215, 325, 118, 216, 324, 160, 217,
	175, 309, 275, 271, 211, 307, 273, 270, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 207,
	0, 170, 316, 330, 138, 132, 174, 129, 155, 122,
	116, 220, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	305, 0, 0, 0, 0, 0, 173, 219, 137, 226,
	224, 227, 297, 225, 267, 268, 320, 321, 322, 294,
	221, 0, 0, 299, 272, 114, 119, 150, 327, 166,
	135, 181, 140, 179, 178, 136, 0, 0, 0, 0,
	0, 239, 326, 290, 288, 313, 0, 134, 171, 0,
	172, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 314, 298, 256, 317, 231,
	246, 329, 248, 249, 286, 212, 266, 161, 244, 115,
	0, 213, 0, 141, 0, 145, 148, 149, 0, 295,
	0, 0, 0, 306, 315, 263, 0, 234, 205, 241,
	206, 260, 131, 230, 300, 269, 247, 0, 323, 151,
	278, 0, 169, 154, 0, 0, 262, 303, 264, 296,
	255, 287, 223, 277, 318, 245, 283, 0, 0, 0,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	280, 312, 243, 282, 285, 204, 279, 0, 208, 214,
	328, 310, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 261, 265, 292, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 276, 0, 0, 0, 218,
	210, 259, 0, 0, 0, 222, 0, 236, 293, 0,
	0, 0, 304, 254, 182, 311, 252, 251, 319, 289,
	0, 232, 233, 242, 301, 125, 240, 250, 167, 180,
	284, 117, 308, 302, 274, 257, 258, 209, 0, 291,
	130, 139, 229, 281, 176, 177, 126, 183, 215, 325,
	118, 216, 324, 160, 217, 175, 309, 275, 271, 211,
	307, 273, 270, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 207, 0, 170, 316, 330, 138,
	132, 174, 129, 155, 122, 116, 220, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 305, 0, 0, 0, 0,
	0, 173, 219, 137, 226, 224, 227, 297, 225, 267,
	268, 320, 321, 322, 294, 221, 0, 0, 299, 272,
	114, 119, 150, 327, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 239, 326, 290, 288,
	313, 0, 134, 171, 0, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	314, 298, 256, 317, 231, 246, 329, 248, 249, 286,
	212, 266, 161, 244, 115, 0, 213, 0, 141, 0,
	145, 148, 149, 0, 295, 0, 0, 0, 306, 315,
	263, 0, 234, 205, 241, 206, 260, 131, 230, 300,
	269, 247, 0, 323, 151, 278, 0, 169, 154, 0,
	0, 262, 303, 264, 296, 255, 287, 223, 277, 318,
	245, 283, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 280, 312, 243, 282, 285,
	204, 279, 0, 208, 214, 328, 310, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 261, 265, 292, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	276, 0, 0, 0, 218, 210, 259, 0, 0, 0,
	222, 0, 236, 293, 0, 0, 0, 304, 254, 182,
	311, 252, 251, 319, 289, 0, 232, 233, 242, 301,
	125, 240, 250, 167, 180, 284, 117, 308, 302, 274,
	257, 258, 209, 0, 291, 130, 139, 229, 281, 176,
	177, 126, 183, 215, 325, 118, 216, 324, 160, 217,
	175, 309, 275, 271, 211, 307, 273, 270, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 207,
	0, 170, 316, 330, 138, 132, 174, 129, 155, 122,
	116, 220, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	305, 0, 0, 0, 0, 0, 173, 219, 137, 226,
	224, 227, 297, 225, 267, 268, 320, 321, 322, 294,
	221, 0, 0, 299, 272, 114, 119, 150, 327, 166,
	135, 181, 140, 179, 178, 136, 0, 0, 0, 0,
	0, 239, 326, 290, 288, 313, 0, 134, 171, 0,
	172, 0, 0, 0, 144, 161, 0, 115, 0, 0,
	0, 141, 0, 145, 148, 149, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 951, 0, 464, 0, 0,
	131, 463, 0, 0, 0, 0, 500, 151, 0, 0,
	169, 154, 0, 0, 0, 0, 493, 494, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 513, 481,
	480, 482, 483, 484, 485, 0, 0, 121, 486, 487,
	488, 0, 0, 0, 461, 474, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 472, 954,
	0, 0, 0, 511, 0, 473, 0, 0, 470, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 509, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 167, 180, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 139,
	0, 0, 176, 177, 126, 183, 0, 0, 118, 0,
	0, 160, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 147, 133, 142, 164, 152, 165, 143, 158, 157,
	159, 0, 0, 0, 170, 0, 0, 138, 132, 174,
	129, 155, 122, 116, 0, 123, 124, 128, 127, 0,
	146, 153, 156, 162, 163, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 137, 501, 507, 510, 0, 508, 505, 506, 504,
	503, 502, 512, 495, 496, 498, 0, 497, 114, 119,
	150, 0, 166, 135, 181, 140, 179, 178, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 171, 0, 172, 0, 0, 161, 144, 115, 0,
	0, 0, 141, 0, 145, 148, 149, 0, 0, 0,
	184, 185, 187, 186, 188, 120, 189, 190, 464, 0,
	0, 131, 463, 0, 0, 0, 0, 500, 151, 0,
	0, 169, 154, 0, 0, 0, 0, 493, 494, 0,
	0, 0, 0, 0, 0, 748, 57, 0, 0, 513,
	481, 480, 482, 483, 484, 485, 0, 0, 121, 486,
	487, 488, 749, 0, 0, 461, 474, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 511, 0, 473, 0, 0, 470,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 167, 180, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	139, 0, 0, 176, 177, 126, 183, 0, 0, 118,
	0, 0, 160, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 147, 133, 142, 164, 152, 165, 143, 158,
	157, 159, 0, 0, 0, 170, 0, 0, 138, 132,
	174, 129, 155, 122, 116, 0, 123, 124, 128, 127,
	0, 146, 153, 156, 162, 163, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 137, 501, 507, 510, 0, 508, 505, 506,
	504, 503, 502, 512, 495, 496, 498, 0, 497, 114,
	119, 150, 0, 166, 135, 181, 140, 179, 178, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 171, 0, 172, 0, 0, 161, 144, 115,
	0, 0, 0, 141, 0, 145, 148, 149, 0, 0,
	0, 184, 185, 187, 186, 188, 120, 189, 190, 464,
	0, 0, 131, 463, 0, 0, 0, 0, 500, 151,
	0, 0, 169, 154, 0, 0, 0, 0, 493, 494,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	513, 481, 480, 482, 483, 484, 485, 0, 0, 121,
	486, 487, 488, 0, 0, 0, 461, 474, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 954, 0, 0, 0, 511, 0, 473, 0, 0,
	470, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 509, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 167, 180,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 139, 0, 0, 176, 177, 126, 183, 0, 0,
	118, 0, 0, 160, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 0, 0, 170, 0, 0, 138,
	132, 174, 129, 155, 122, 116, 0, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 137, 501, 507, 510, 0, 508, 505,
	506, 504, 503, 502, 512, 495, 496, 498, 0, 497,
	114, 119, 150, 0, 166, 135, 181, 140, 179, 178,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 171, 0, 172, 0, 0, 161, 144,
	115, 0, 0, 0, 141, 0, 145, 148, 149, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	464, 0, 0, 131, 463, 0, 0, 0, 0, 500,
	151, 0, 0, 169, 154, 0, 0, 0, 0, 493,
	494, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	455, 513, 481, 480, 482, 483, 484, 485, 0, 0,
	121, 486, 487, 488, 0, 0, 0, 461, 474, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 511, 0, 473, 0,
	0, 470, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 509, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 167,
	180, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 139, 0, 0, 176, 177, 126, 183, 0,
	0, 118, 0, 0, 160, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 147, 133, 142, 164, 152, 165,
	143, 158, 157, 159, 0, 0, 0, 170, 0, 0,
	138, 132, 174, 129, 155, 122, 116, 0, 123, 124,
	128, 127, 0, 146, 153, 156, 162, 163, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 137, 501, 507, 510, 0, 508,
	505, 506, 504, 503, 502, 512, 495, 496, 498, 0,
	497, 114, 119, 150, 0, 166, 135, 181, 140, 179,
	178, 136, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 0, 0, 134, 171, 0, 172, 0, 0, 161,
	144, 115, 0, 0, 0, 141, 0, 145, 148, 149,
	0, 0, 0, 184, 185, 187, 186, 188, 120, 189,
	190, 464, 0, 0, 131, 463, 0, 0, 0, 0,
	500, 151, 0, 0, 169, 154, 0, 0, 0, 0,
	493, 494, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 513, 481, 480, 482, 483, 484, 485, 0,
	0, 121, 486, 487, 488, 0, 0, 0, 461, 474,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 511, 0, 473,
	0, 0, 470, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	167, 180, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 139, 0, 0, 176, 177, 126, 183,
	0, 0, 118, 0, 0, 160, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 147, 133, 142, 164, 152,
	165, 143, 158, 157, 159, 0, 0, 0, 170, 0,
	0, 138, 132, 174, 129, 155, 122, 116, 0, 123,
	124, 128, 127, 0, 146, 153, 156, 162, 163, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 137, 501, 507, 510, 0,
	508, 505, 506, 504, 503, 502, 512, 495, 496, 498,
	0, 497, 114, 119, 150, 0, 166, 135, 181, 140,
	179, 178, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 171, 0, 172, 0, 0,
	161, 144, 115, 0, 0, 0, 141, 0, 145, 148,
	149, 0, 0, 0, 184, 185, 187, 186, 188, 120,
	189, 190, 464, 0, 0, 131, 463, 0, 0, 0,
	0, 500, 151, 0, 0, 169, 154, 0, 0, 0,
	0, 493, 494, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 513, 481, 480, 482, 483, 484, 485,
	0, 0, 121, 486, 487, 488, 0, 0, 0, 461,
	474, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 511, 0,
	473, 0, 0, 470, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 167, 180, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 139, 0, 0, 176, 177, 126,
	183, 0, 0, 118, 0, 0, 160, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 147, 133, 142, 164,
	152, 165, 143, 158, 157, 159, 0, 0, 0, 170,
	0, 0, 138, 132, 174, 129, 155, 122, 116, 0,
	123, 124, 128, 127, 0, 146, 153, 156, 162, 163,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 137, 501, 507, 510,
	0, 508, 505, 506, 504, 503, 502, 512, 495, 496,
	498, 0, 497, 114, 119, 150, 0, 166, 135, 181,
	140, 179, 178, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 171, 0, 172, 161,
	0, 115, 144, 0, 0, 141, 0, 145, 148, 149,
	0, 0, 0, 0, 0, 184, 185, 187, 186, 188,
	120, 189, 190, 0, 131, 0, 0, 0, 0, 0,
	500, 151, 0, 0, 169, 154, 0, 0, 0, 0,
	493, 494, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 513, 481, 480, 482, 483, 484, 485, 0,
	0, 121, 486, 487, 488, 0, 0, 0, 0, 474,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 511, 0, 473,
	0, 0, 470, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	167, 180, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 139, 0, 0, 176, 177, 126, 183,
	0, 0, 118, 0, 0, 160, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 147, 133, 142, 164, 152,
	165, 143, 158, 157, 159, 0, 0, 0, 170, 0,
	0, 138, 132, 174, 129, 155, 122, 116, 0, 123,
	124, 128, 127, 0, 146, 153, 156, 162, 163, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 137, 501, 507, 510, 0,
	508, 505, 506, 504, 503, 502, 512, 495, 496, 498,
	0, 497, 114, 119, 150, 0, 166, 135, 181, 140,
	179, 178, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 171, 0, 172, 161, 0,
	115, 144, 0, 0, 141, 0, 145, 148, 149, 0,
	0, 0, 0, 0, 184, 185, 187, 186, 188, 120,
	189, 190, 0, 131, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 169, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 655, 654, 664, 665,
	657, 658, 659, 660, 661, 662, 663, 656, 0, 0,
	666, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 167,
	180, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 139, 0, 0, 176, 177, 126, 183, 0,
	0, 118, 0, 0, 160, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 147, 133, 142, 164, 152, 165,
	143, 158, 157, 159, 0, 0, 0, 170, 0, 0,
	138, 132, 174, 129, 155, 122, 116, 0, 123, 124,
	128, 127, 0, 146, 153, 156, 162, 163, 168, 0,
	161, 0, 115, 0, 0, 816, 815, 0, 145, 148,
	149, 0, 0, 0, 814, 0, 0, 0, 813, 0,
	0, 0, 173, 0, 137, 131, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 169, 154, 0, 0, 0,
	0, 114, 119, 150, 0, 166, 135, 181, 140, 179,
	178, 136, 0, 390, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 134, 171, 0, 172, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 187, 186, 188, 120, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 167, 180, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 139, 0, 0, 176, 177, 126,
	183, 0, 0, 118, 0, 0, 160, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 147, 133, 142, 164,
	152, 165, 143, 158, 157, 159, 0, 0, 0, 170,
	0, 0, 138, 132, 174, 129, 155, 122, 116, 0,
	123, 124, 128, 127, 26, 146, 153, 156, 162, 163,
	168, 0, 0, 0, 0, 161, 0, 115, 0, 0,
	0, 141, 0, 145, 148, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 137, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	169, 154, 0, 114, 119, 150, 0, 166, 135, 181,
	140, 179, 178, 136, 0, 57, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 134, 171, 121, 172, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 187, 186, 188,
	120, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 167, 180, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 139,
	0, 0, 176, 177, 126, 183, 0, 0, 118, 0,
	0, 160, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 147, 133, 142, 164, 152, 165, 143, 158, 157,
	159, 0, 0, 0, 170, 0, 0, 138, 132, 174,
	129, 155, 122, 116, 0, 123, 124, 128, 127, 0,
	146, 153, 156, 162, 163, 168, 0, 161, 0, 115,
	0, 0, 0, 141, 0, 145, 148, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1376, 173,
	0, 137, 131, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 169, 154, 0, 0, 0, 0, 114, 119,
	150, 0, 166, 135, 181, 140, 179, 178, 136, 0,
	112, 0, 1378, 0, 0, 0, 0, 0, 0, 121,
	134, 171, 0, 172, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 187, 186, 188, 120, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 167, 180,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 139, 0, 0, 176, 177, 126, 183, 0, 0,
	118, 0, 0, 160, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 0, 0, 170, 0, 0, 138,
	132, 174, 129, 155, 122, 116, 0, 123, 124, 128,
	127, 26, 146, 153, 156, 162, 163, 168, 0, 0,
	0, 0, 161, 0, 115, 0, 0, 0, 141, 0,
	145, 148, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 137, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 169, 154, 0,
	114, 119, 150, 0, 166, 135, 181, 140, 179, 178,
	136, 0, 57, 0, 0, 380, 0, 0, 0, 0,
	0, 0, 134, 171, 121, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 167, 180, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 139, 0, 0, 176,
	177, 126, 183, 0, 0, 118, 0, 0, 160, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 147, 133,
	142, 164, 152, 165, 143, 158, 157, 159, 0, 0,
	0, 170, 0, 0, 138, 132, 174, 129, 155, 122,
	116, 0, 123, 124, 128, 127, 0, 146, 153, 156,
	162, 163, 168, 0, 161, 0, 115, 0, 0, 0,
	141, 0, 145, 148, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 137, 131,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 169,
	154, 0, 0, 0, 0, 114, 119, 150, 0, 166,
	135, 181, 140, 179, 178, 136, 0, 380, 0, 0,
	721, 0, 0, 722, 0, 0, 121, 134, 171, 0,
	172, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 187,
	186, 188, 120, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 167, 180, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 139, 0,
	0, 176, 177, 126, 183, 0, 0, 118, 0, 0,
	160, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	147, 133, 142, 164, 152, 165, 143, 158, 157, 159,
	0, 0, 0, 170, 0, 0, 138, 132, 174, 129,
	155, 122, 116, 0, 123, 124, 128, 127, 0, 146,
	153, 156, 162, 163, 168, 0, 161, 0, 115, 0,
	0, 0, 141, 0, 145, 148, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	137, 131, 542, 0, 0, 0, 0, 0, 151, 0,
	0, 169, 154, 0, 0, 0, 0, 114, 119, 150,
	0, 166, 135, 181, 140, 179, 178, 136, 0, 380,
	0, 541, 0, 0, 0, 0, 0, 0, 121, 134,
	171, 0, 172, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 187, 186, 188, 120, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 167, 180, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	139, 0, 0, 176, 177, 126, 183, 0, 0, 118,
	0, 0, 160, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 147, 133, 142, 164, 152, 165, 143, 158,
	157, 159, 0, 0, 0, 170, 0, 0, 138, 132,
	174, 129, 155, 122, 116, 0, 123, 124, 128, 127,
	0, 146, 153, 156, 162, 163, 168, 0, 161, 0,
	115, 0, 0, 0, 141, 0, 145, 148, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 137, 131, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 169, 154, 0, 0, 0, 0, 114,
	119, 150, 0, 166, 135, 181, 140, 179, 178, 136,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 134, 171, 0, 172, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 187, 186, 188, 120, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 167,
	180, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 139, 0, 0, 176, 177, 126, 183, 0,
	0, 118, 0, 0, 160, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 147, 133, 142, 164, 152, 165,
	143, 158, 157, 159, 0, 0, 0, 170, 0, 0,
	138, 132, 174, 129, 155, 122, 116, 0, 123, 124,
	128, 127, 0, 146, 153, 156, 162, 163, 168, 0,
	0, 0, 0, 161, 0, 115, 0, 0, 0, 141,
	0, 145, 148, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 137, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 169, 154,
	0, 114, 119, 150, 0, 166, 135, 181, 196, 179,
	178, 197, 0, 198, 0, 0, 112, 0, 1378, 0,
	0, 0, 0, 134, 171, 121, 172, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 187, 186, 188, 120, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 167, 180, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 139, 0, 0,
	176, 177, 126, 183, 0, 0, 118, 0, 0, 160,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 147,
	133, 142, 164, 152, 165, 143, 158, 157, 159, 0,
	0, 0, 170, 0, 0, 138, 132, 174, 129, 155,
	122, 116, 0, 123, 124, 128, 127, 0, 146, 153,
	156, 162, 163, 168, 0, 0, 0, 0, 161, 0,
	115, 0, 0, 0, 141, 0, 145, 148, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 137,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 169, 154, 0, 114, 119, 150, 0,
	166, 135, 181, 140, 179, 178, 136, 0, 57, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 134, 171,
	121, 172, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	187, 186, 188, 120, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 167,
	180, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 139, 0, 0, 176, 177, 126, 183, 0,
	0, 118, 0, 0, 160, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 147, 133, 142, 164, 152, 165,
	143, 158, 157, 159, 0, 0, 0, 170, 0, 0,
	138, 132, 174, 129, 155, 122, 116, 0, 123, 124,
	128, 127, 0, 146, 153, 156, 162, 163, 168, 0,
	161, 0, 115, 0, 0, 0, 141, 0, 145, 148,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 137, 131, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 169, 154, 0, 0, 0,
	0, 114, 119, 150, 0, 166, 135, 181, 140, 179,
	178, 136, 0, 380, 0, 1137, 0, 0, 0, 0,
	0, 0, 121, 134, 171, 0, 172, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 187, 186, 188, 120, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 167, 180, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 139, 0, 0, 176, 177, 126,
	183, 0, 0, 118, 0, 0, 160, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 147, 133, 142, 164,
	152, 165, 143, 158, 157, 159, 0, 0, 0, 170,
	0, 0, 138, 132, 174, 129, 155, 122, 116, 0,
	123, 124, 128, 127, 0, 146, 153, 156, 162, 163,
	168, 0, 0, 0, 0, 161, 0, 115, 0, 0,
	0, 141, 0, 145, 148, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 137, 0, 0, 526,
	131, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	169, 154, 0, 114, 119, 150, 0, 166, 135, 181,
	140, 179, 178, 136, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 134, 171, 121, 172, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 187, 186, 188,
	120, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 167, 180, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 139,
	0, 0, 176, 177, 126, 183, 0, 0, 118, 0,
	0, 160, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 147, 133, 142, 164, 152, 165, 143, 158, 157,
	159, 0, 0, 0, 170, 0, 0, 138, 132, 174,
	129, 155, 122, 116, 0, 123, 124, 128, 127, 0,
	146, 153, 156, 162, 163, 168, 0, 161, 0, 115,
	0, 0, 0, 141, 0, 145, 148, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 137, 131, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 169, 154, 0, 0, 0, 0, 114, 119,
	150, 0, 166, 135, 181, 140, 179, 178, 136, 0,
	390, 0, 431, 0, 0, 0, 0, 0, 0, 121,
	134, 171, 0, 172, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 187, 186, 188, 120, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 167, 180,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 139, 0, 0, 176, 177, 126, 183, 0, 0,
	118, 0, 0, 160, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 0, 0, 170, 0, 0, 138,
	132, 174, 129, 155, 122, 116, 0, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 161,
	0, 115, 0, 0, 0, 141, 0, 145, 148, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 137, 131, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 169, 154, 0, 0, 0, 0,
	114, 119, 150, 0, 166, 135, 181, 140, 179, 178,
	136, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 134, 171, 0, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	167, 180, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 139, 0, 0, 176, 177, 126, 183,
	0, 0, 118, 0, 0, 160, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 147, 133, 142, 164, 152,
	165, 143, 158, 157, 159, 0, 0, 0, 170, 0,
	0, 138, 132, 174, 129, 155, 122, 116, 0, 123,
	124, 128, 127, 0, 146, 153, 156, 162, 163, 168,
	0, 161, 0, 115, 0, 0, 0, 141, 0, 145,
	148, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 137, 131, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 169, 154, 0, 0,
	0, 0, 114, 119, 150, 0, 166, 135, 181, 140,
	179, 178, 136, 0, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 134, 171, 0, 172, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 187, 186, 188, 120,
	189, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 167, 180, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 139, 0, 0, 176, 177,
	126, 183, 0, 0, 118, 0, 0, 160, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 147, 133, 142,
	164, 152, 165, 143, 158, 157, 159, 0, 0, 0,
	170, 0, 0, 138, 132, 174, 129, 155, 122, 116,
	0, 123, 124, 128, 127, 0, 146, 153, 156, 162,
	163, 168, 0, 161, 0, 115, 0, 0, 0, 141,
	0, 145, 148, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 137, 131, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 169, 154,
	0, 0, 0, 0, 114, 119, 150, 0, 166, 135,
	181, 140, 179, 178, 136, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 134, 171, 0, 172,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 187, 186,
	188, 120, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 167, 180, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 139, 0, 0,
	176, 177, 126, 183, 0, 0, 118, 0, 0, 160,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 147,
	133, 142, 164, 152, 165, 143, 158, 157, 159, 0,
	0, 0, 170, 0, 0, 138, 132, 174, 129, 155,
	122, 116, 0, 123, 124, 128, 127, 0, 146, 153,
	156, 162, 163, 168, 0, 161, 0, 115, 0, 0,
	0, 141, 0, 145, 148, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 137,
	131, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	169, 154, 0, 0, 0, 0, 114, 119, 150, 0,
	166, 135, 181, 140, 179, 178, 136, 0, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 134, 171,
	0, 172, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	187, 186, 188, 120, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 167, 180, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 139,
	0, 0, 176, 177, 126, 183, 0, 0, 118, 0,
	0, 160, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 147, 133, 142, 164, 152, 165, 143, 158, 157,
	159, 0, 0, 0, 170, 0, 0, 138, 132, 174,
	129, 155, 122, 116, 0, 123, 124, 128, 127, 0,
	146, 153, 156, 162, 163, 168, 0, 161, 0, 115,
	0, 0, 0, 141, 0, 145, 148, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 137, 131, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 169, 154, 0, 0, 0, 0, 114, 119,
	150, 0, 166, 135, 181, 140, 179, 178, 136, 0,
	1222, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	134, 171, 0, 172, 0, 0, 0, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 187, 186, 188, 120, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 167, 180,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 139, 0, 0, 176, 177, 126, 183, 0, 0,
	118, 0, 0, 160, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 147, 133, 142, 164, 152, 165, 143,
	158, 157, 159, 0, 0, 0, 170, 0, 0, 138,
	132, 174, 129, 155, 122, 116, 0, 123, 124, 128,
	127, 0, 146, 153, 156, 162, 163, 168, 0, 161,
	0, 115, 0, 0, 0, 141, 0, 145, 148, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 137, 131, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 169, 154, 0, 0, 0, 0,
	114, 119, 150, 0, 166, 135, 181, 140, 179, 178,
	136, 0, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 134, 171, 0, 172, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 187, 186, 188, 120, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	167, 180, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 139, 0, 0, 176, 177, 126, 183,
	0, 0, 118, 0, 0, 160, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 147, 133, 142, 164, 152,
	165, 143, 158, 157, 159, 0, 0, 0, 170, 0,
	0, 138, 132, 174, 129, 155, 122, 116, 0, 123,
	124, 128, 127, 0, 146, 153, 156, 162, 163, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 119, 150, 0, 166, 135, 181, 140,
	179, 178, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 171, 0, 172, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 187, 186, 188, 120,
	189, 190,
}
var yyPact = [...]int{

	98, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1006, 1049, -1000, -1000, -1000, -1000,
	-1000, 827, 181, 90, 148, 144, 142, 183, 118, 10436,
	-1000, 8811, 4310, -53, -1000, -165, -1000, -1000, -157, -1000,
	-1000, 792, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	988, 1004, 852, 941, 886, -1000, 90, 10436, 1037, 2480,
	-116, 10638, 85, 139, 135, 134, 85, -1000, -1000, -1000,
	105, -1000, 99, 681, 84, -1000, 10436, -1000, 10436, -64,
	63, -1000, -1000, -63, 309, -1000, -1000, -1000, -72, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9830, 182, 130, 214, 287, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 462, -1000, -1000, -1000, -1000, -1000, -1000, 804, 804,
	-1000, 10436, -1000, -1000, -192, -1000, -1000, 606, 931, 6853,
	6853, 1006, -1000, 792, -1000, -1000, -1000, 907, -1000, -1000,
	340, 9628, 915, 10436, 781, -1000, -1000, -175, 3090, -1000,
	-1000, -1000, -1000, 284, 8609, 8609, -1000, -1000, -1000, 914,
	-1000, -1000, -1000, -1000, -1000, 1003, 1001, 713, -1000, 1486,
	-1000, -1000, 11042, 328, 680, 679, 678, 10436, 10436, 84,
	845, 11042, 930, -1000, -1000, 1034, 10436, 10436, -1000, -1000,
	309, 309, -1000, -1000, 10436, -1000, -1000, -1000, -1000, -1000,
	309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -24, -1000, -1000, -1000, -1000, -1000, 277,
	5225, -49, -1000, -1000, -1000, 6853, -1000, -1000, 200, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1044, 245, 808,
	-1000, 6853, 1685, 804, 804, -1000, -1000, 188, -1000, -1000,
	7122, 7122, 7122, 7122, 7122, 7122, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 804,
	211, -1000, 6582, 804, 804, 804, 804, 804, 804, 6853,
	804, 804, 804, 804, 804, 804, 804, 804, 804, 804,
	804, 804, 804, -1000, -1000, 780, -1000, 289, 988, 606,
	886, 8407, 867, -1000, -1000, 835, 10436, -1000, 10234, 1031,
	2785, -1000, 776, 771, -181, -194, -1000, -175, 5769, -1000,
	-1000, -1000, -1000, 228, -1000, 804, 104, 72, 7593, 1647,
	-5, -1000, -1000, -1000, 815, -1000, 815, 815, 815, 815,
	30, 30, 30, 30, -1000, -1000, -1000, -1000, -1000, 832,
	831, -1000, 815, 815, 815, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 830, 830, 830, 821, 821, 917, -1000,
	-1000, 912, 842, 841, 840, -1000, 896, 10436, 10436, -1000,
	-1000, 988, -70, -1000, -1000, 348, 10436, 10436, 309, -1000,
	-1000, 460, -128, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 677, 363, -1000, 10436, -1000, -1000, -1000, -1000, -1000,
	-1000, 871, 6853, 6853, 397, 6853, 6853, 257, 7122, 344,
	341, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122,
	7122, 7122, 7122, 7122, 7122, 7122, 453, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 666, -1000, 792, 572, 572,
	220, 220, 220, 220, 220, 7391, 5498, 4920, 606, 6582,
	6040, 6040, 6853, 6853, 6040, 942, 306, 363, 10032, -1000,
	606, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6040, 6040,
	6040, 6040, 6853, -1000, -1000, -1000, 931, -1000, 942, 1023,
	-1000, 897, 895, 6040, -1000, 839, 10234, 804, -1000, 8205,
	-1000, 777, -1000, 276, -1000, 210, 1006, 6853, -1000, 4005,
	-1000, -185, -1000, -179, -166, -1000, -1000, -1000, -1000, -1000,
	363, -1000, 665, 10638, 804, 804, -1000, 72, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 266, 266, 83, 266, 266, 266, 266,
	266, -27, -31, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, -1000, -1000, -1000, 581,
	197, 184, -1000, -1000, -1000, -1000, 959, -1000, 1647, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 312, 189, -1000, 952, -1000, 951, 543, 1043, 437,
	156, 141, -12, -1000, -1000, 459, 30, 30, -1000, -1000,
	-1000, 910, -1000, -1000, -1000, 538, 538, -1000, -1000, -1000,
	-1000, 457, -1000, -1000, -1000, 448, -1000, -1000, 917, -1000,
	154, -1000, 10436, 10436, 10436, -1000, 302, 274, 95, 76,
	74, 67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	712, -1000, 929, -1000, 532, -1000, -1000, -1000, 531, 6853,
	-1000, 309, 1031, -1000, -1000, 227, 6853, -1000, -1000, 885,
	257, 265, -1000, -1000, 375, -1000, -1000, 363, 363, 1629,
	-1000, -1000, -1000, -1000, 344, 7122, 7122, 7122, 1153, 1629,
	1595, 458, 582, 220, 385, 385, 222, 222, 222, 222,
	222, 602, 602, -1000, -1000, -1000, 606, -1000, -1000, -1000,
	606, 6040, 760, -1000, -1000, 2018, 204, 804, 199, -1000,
	-1000, 606, 636, 636, 390, 325, 636, 6040, 314, -1000,
	6853, 606, -1000, 636, 606, 636, 636, -1000, -1000, 10436,
	-1000, -1000, -1000, -1000, 768, -1000, 920, 721, 724, -1000,
	-1000, 6311, 606, 663, 198, 1006, 10234, 6853, 4920, 988,
	363, -1000, -1000, -1000, -186, -200, -1000, -1000, 606, 10638,
	10638, -1000, 530, -1000, 437, 266, 266, -1000, 909, 908,
	447, 443, 442, 526, 525, 266, 266, 439, 524, 630,
	435, 414, 398, 549, 522, 638, 533, 463, 451, 10840,
	79, -1000, 581, -1000, 947, 197, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 828, -1000, -1000, -1000, -1000,
	-1000, -1000, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 690, -1000, -1000, 247, 660, -1000,
	655, 727, 639, -1000, 266, 266, -1000, 804, 804, 804,
	-1000, 10436, -1000, -1000, -1000, 612, 27, 827, 609, 10638,
	-1000, 10436, -1000, -1000, -1000, 983, 902, 266, 266, -1000,
	-1000, -1000, 363, 348, -1000, -1000, 363, -1000, -1000, -1000,
	-1000, -1000, -1000, 1153, 1629, 1513, -1000, 7122, 7122, -1000,
	-1000, 636, 6040, -1000, -1000, 9423, -1000, -1000, 3700, 6040,
	4615, -1000, -1000, -1000, 322, 453, 322, -96, 761, 298,
	-1000, 6853, 381, -1000, -1000, -1000, -1000, -1000, -1000, 1031,
	9221, 946, -1000, 804, -1000, -1000, 779, 10032, 10032, 988,
	-1000, 363, -1000, -1000, -1000, -1000, -1000, -1000, 606, 606,
	-1000, -1000, 437, 437, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 519, 518, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 824, -1000, 979, 822, 79, 581,
	416, -1000, -1000, -1000, -1000, -1000, 517, -1000, 395, -1000,
	379, 562, 281, 10032, 10032, 10032, -1000, -1000, -1000, 906,
	-1000, -1000, -1000, -1000, -1000, -1000, 562, 562, -1000, -1000,
	7122, 1629, 1629, -1000, -1000, -1000, -1000, 196, 606, -1000,
	606, 815, 815, -1000, 815, 821, -1000, 815, 50, 815,
	47, 606, 606, 804, -92, -1000, 363, 6853, 1025, 725,
	794, -1000, -1000, -1000, 933, 7798, 8000, 1042, -1000, 804,
	-1000, 792, 153, -1000, -1000, 804, -145, -1000, -1000, -1000,
	-1000, 10032, -1000, -1000, -1000, -1000, 10032, 819, 79, -1000,
	687, -1000, 656, 640, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 634, -1000, 815, 634, 634, 564, -1000, -1000, 1629,
	3395, -1000, -1000, -1000, 143, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7122, 606, 516, 363, 1019, 991, 9221,
	9221, 9221, 9221, -1000, 872, 870, -1000, 866, 856, 857,
	10436, -1000, 616, 7798, 195, -1000, 9016, -1000, -1000, 10234,
	724, 606, 10032, -141, -1000, 378, 605, 603, 10032, 805,
	-1000, -1000, -1000, -1000, 10032, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 191, -1000, -1000, -1000, 6853, 6853, 794, 838,
	604, -1000, -1000, -1000, -1000, 858, -1000, 691, -1000, -1000,
	-1000, -1000, -1000, 132, 131, 123, -1000, 716, -1000, -1000,
	600, -1000, 560, -1000, -1000, -1000, 590, 10032, 308, -1000,
	149, 484, 606, 100, -108, 363, 557, 6853, 6853, -1000,
	-1000, 804, 804, 804, -141, -1000, 894, 117, 117, -1000,
	586, -1000, -1000, -1000, -1000, 266, 514, 981, -1000, -1000,
	-1000, 972, -1000, -1000, -1000, 881, -101, -121, 363, 363,
	10032, 10032, 10032, -1000, 244, -1000, 266, -1000, 454, 964,
	117, -1000, 361, -1000, -1000, -1000, -1000, 556, -1000, 877,
	-1000, 555, -1000, 555, 555, 804, 350, -1000, 400, 117,
	-1000, -1000, -103, -1000, 10032, -1000, -1000, -1000, -1000, -1000,
	-111, -1000, -124, -1000,
}
var yyPgo = [...]int{

	0, 23, 24, 1336, 1335, 1331, 25, 990, 1330, 1328,
	1325, 1323, 57, 1322, 1320, 1318, 1315, 1314, 157, 901,
	1311, 1310, 1060, 1058, 1056, 1309, 1308, 1307, 1305, 1295,
	1294, 1291, 1289, 1288, 1287, 94, 1284, 1283, 1282, 46,
	1281, 80, 1280, 86, 1279, 1278, 1275, 36, 131, 33,
	34, 187, 1271, 27, 19, 17, 1270, 1257, 14, 1256,
	1465, 1254, 1251, 59, 90, 1248, 1247, 38, 1243, 1241,
	1239, 1238, 1235, 2, 26, 1234, 63, 1233, 1232, 73,
	108, 1231, 1229, 1228, 1227, 1226, 1223, 48, 8, 13,
	6, 20, 1222, 69, 11, 1221, 52, 1219, 1218, 1217,
	1214, 53, 1209, 78, 1208, 45, 77, 1207, 58, 10,
	51, 1206, 1205, 84, 88, 83, 79, 1204, 76, 1203,
	1199, 93, 1198, 1196, 1194, 903, 1193, 92, 440, 1191,
	1190, 1189, 1187, 1183, 1182, 1181, 60, 32, 0, 56,
	18, 30, 1180, 65, 878, 35, 15, 1175, 91, 1172,
	1511, 31, 85, 29, 1165, 1164, 1163, 1156, 1155, 1154,
	1150, 54, 1149, 1148, 1143, 1142, 1140, 1135, 1134, 1133,
	1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 62, 1124,
	1123, 1122, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112,
	37, 1111, 1110, 1108, 28, 1107, 61, 12, 66, 1106,
	1105, 1104, 81, 22, 1103, 1096, 1095, 1093, 64, 44,
	1091, 82, 55, 47, 1089, 1088, 1086, 74, 9, 4,
	1085, 1084, 1082, 1, 7, 1081, 1080, 1079, 1078, 5,
	39, 41, 1077, 1074, 16, 1073, 1072, 71, 1071, 1070,
	67, 3, 1069, 1066, 1065, 1063, 49, 21, 1062, 133,
}
var yyR1 = [...]int{

	0, 244, 245, 245, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 18, 18, 18, 19, 20,
	20, 21, 21, 22, 22, 38, 38, 23, 24, 25,
	25, 242, 242, 241, 166, 166, 7, 7, 26, 26,
	26, 26, 26, 243, 243, 243, 243, 243, 243, 233,
	233, 234, 234, 226, 224, 224, 221, 221, 227, 227,
	220, 220, 225, 225, 222, 222, 229, 229, 229, 229,
	229, 230, 231, 238, 238, 239, 239, 240, 240, 240,
	198, 198, 197, 197, 196, 196, 196, 199, 199, 199,
	29, 213, 215, 215, 216, 216, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	168, 170, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 183, 184, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	186, 186, 187, 187, 188, 188, 189, 189, 171, 194,
	194, 169, 165, 167, 214, 214, 214, 209, 143, 143,
	154, 154, 154, 154, 235, 235, 236, 236, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 157, 157,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 156,
	156, 156, 156, 156, 158, 158, 158, 158, 158, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 160, 160, 160, 160, 160, 160,
	160, 160, 208, 208, 161, 161, 202, 202, 203, 203,
	203, 200, 200, 201, 201, 204, 204, 162, 162, 162,
	162, 162, 162, 40, 39, 39, 39, 123, 123, 123,
	205, 190, 190, 190, 164, 191, 191, 192, 192, 192,
	193, 193, 193, 206, 206, 207, 207, 163, 210, 210,
	210, 210, 6, 6, 228, 228, 228, 228, 223, 223,
	4, 4, 4, 1, 2, 2, 3, 3, 3, 5,
	5, 212, 212, 211, 211, 219, 219, 218, 27, 27,
	27, 27, 27, 27, 27, 27, 129, 129, 134, 134,
	134, 28, 28, 28, 70, 70, 135, 135, 8, 30,
	9, 130, 130, 130, 68, 68, 68, 10, 12, 12,
	12, 12, 69, 69, 69, 69, 69, 69, 11, 11,
	11, 11, 195, 195, 195, 195, 195, 13, 133, 133,
	133, 14, 16, 16, 16, 16, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 46, 46, 66, 66, 66, 63,
	63, 64, 64, 65, 65, 62, 62, 67, 67, 67,
	34, 32, 33, 33, 248, 35, 36, 36, 37, 37,
	37, 43, 43, 43, 41, 41, 42, 42, 49, 49,
	48, 48, 50, 50, 50, 50, 142, 142, 142, 141,
	141, 52, 52, 53, 53, 54, 54, 55, 55, 55,
	71, 56, 56, 56, 56, 149, 149, 147, 147, 147,
	146, 146, 57, 57, 57, 57, 58, 58, 58, 58,
	59, 59, 61, 61, 60, 60, 72, 72, 72, 72,
	73, 73, 74, 74, 51, 51, 51, 51, 51, 51,
	51, 126, 126, 76, 76, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 86, 86, 86, 86, 86,
	86, 77, 77, 77, 77, 77, 77, 77, 47, 47,
	87, 87, 87, 93, 88, 88, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 84, 84, 84, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 83, 83,
	83, 83, 83, 83, 83, 83, 249, 249, 85, 85,
	85, 85, 44, 44, 44, 44, 44, 151, 151, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 97, 97, 45, 45, 95, 95, 96, 98,
	98, 94, 94, 94, 79, 79, 79, 79, 79, 79,
	79, 81, 81, 81, 99, 99, 100, 100, 101, 101,
	102, 102, 103, 104, 104, 104, 105, 105, 105, 105,
	106, 106, 106, 78, 78, 78, 78, 78, 78, 107,
	107, 107, 107, 108, 108, 89, 89, 91, 91, 90,
	92, 109, 109, 110, 111, 111, 114, 114, 113, 113,
	113, 113, 113, 122, 122, 121, 121, 121, 112, 112,
	115, 115, 119, 119, 118, 120, 120, 120, 120, 117,
	117, 116, 116, 152, 152, 152, 124, 124, 127, 127,
	128, 128, 125, 125, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 136, 136, 136, 132, 132, 232,
	232, 139, 139, 140, 140, 144, 144, 145, 145, 148,
	148, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 246, 247, 150,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 10, 1,
	3, 1, 3, 6, 7, 1, 1, 8, 7, 3,
	3, 1, 3, 5, 0, 2, 1, 1, 3, 5,
	11, 11, 11, 0, 1, 1, 5, 9, 7, 1,
	1, 1, 1, 2, 3, 2, 0, 2, 1, 1,
	0, 2, 1, 3, 0, 2, 0, 1, 1, 2,
	2, 3, 3, 0, 1, 1, 2, 4, 4, 2,
	0, 1, 0, 1, 1, 2, 2, 1, 1, 1,
	4, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 4, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 3, 3, 4, 1, 3, 3, 3, 1, 1,
	3, 1, 1, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 3, 4, 1, 1, 1,
	1, 0, 3, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 7, 7,
	8, 9, 0, 1, 3, 1, 2, 3, 0, 2,
	0, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 3, 2, 6, 7,
	7, 7, 9, 7, 7, 7, 0, 1, 0, 1,
	1, 6, 6, 4, 1, 3, 0, 1, 3, 3,
	2, 1, 1, 1, 0, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 3, 1, 1, 3, 5,
	3, 6, 0, 1, 1, 1, 1, 2, 0, 1,
	1, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 3, 4, 4, 4, 6, 5, 5, 3, 3,
	5, 6, 7, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 0, 3, 1, 1, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -244, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -8, -30, -31, -34, -32, -9, -10, -11, -13,
	-14, -16, -15, -33, -19, -20, 6, -38, 8, 9,
	44, -29, 125, 126, 127, 149, 129, 144, 47, 64,
	274, -130, 147, 281, 284, 285, 288, 287, 302, 148,
	150, -246, 7, 254, 143, 142, 141, 67, -245, 310,
	-101, 14, -37, 5, -35, -248, -35, -35, -35, -35,
	-213, 67, -7, -232, 23, 31, 132, 246, 247, 34,
	-125, 136, -129, 133, -7, 33, -135, 132, 132, 239,
	125, 234, 276, -65, -66, 278, 279, 241, 132, 280,
	237, 277, 236, 233, 174, 70, 46, 133, 27, 25,
	132, -144, 70, -138, 260, 19, 205, 151, 170, 261,
	307, 79, 204, 207, 208, 145, 166, 210, 209, 202,
	160, 42, 200, 184, 282, 265, 270, 243, 199, 161,
	267, 23, 185, 189, 289, 25, 212, 183, 26, 27,
	262, 49, 187, 213, 53, 203, 214, 191, 190, 192,
	173, 17, 215, 216, 186, 188, 264, 148, 217, 52,
	196, 283, 285, 241, 201, 175, 164, 165, 269, 268,
	149, 266, 134, 167, 302, 303, 305, 304, 306, 308,
	309, -150, -60, -69, 129, -144, 267, 270, 272, -195,
	70, 72, -137, -138, 85, 38, 40, 194, 88, 157,
	120, 179, 15, 21, 89, 168, 171, 174, 119, 242,
	206, 255, 125, 62, 245, 248, 244, 246, 234, 162,
	43, 9, 141, 142, 37, 113, 127, 92, 93, 276,
	146, 39, 143, 82, 18, 65, 10, 46, 12, 13,
	147, 137, 136, 104, 133, 60, 7, 155, 156, 121,
	41, 101, 56, 35, 58, 102, 16, 249, 250, 45,
	182, 178, 259, 181, 154, 177, 115, 63, 50, 86,
	80, 163, 83, 66, 150, 84, 14, 61, 279, 139,
	278, 159, 103, 128, 254, 29, 59, 247, 6, 258,
	44, 144, 153, 57, 132, 235, 33, 180, 152, 176,
	91, 135, 81, 280, 5, 34, 197, 8, 64, 138,
	251, 252, 253, 48, 172, 169, 277, 263, 90, 11,
	198, -133, 264, 207, -150, 286, -150, -150, 303, 305,
	304, 306, 307, 309, 274, -150, -150, -18, -105, 16,
	15, -21, -19, -246, 6, 36, 37, -43, 54, 55,
	-36, -125, -60, 10, -111, -112, -114, 286, -152, -113,
	290, 291, 289, -140, -122, 292, -139, -137, 174, 171,
	70, -138, -243, 289, 283, 275, 271, -214, -209, -143,
	70, -138, -128, 137, 133, 133, 133, -128, 132, 132,
	70, -127, 137, -60, -60, 238, 132, 246, -150, -150,
	235, -62, 242, 243, -64, 10, 104, -150, -150, -150,
	241, -150, -150, -150, -150, -150, -150, -150, -60, -68,
	-143, 72, -12, 18, -18, -23, -22, -24, -12, 267,
	122, 94, 73, -150, -90, -246, -90, -150, -60, -150,
	-150, 308, 287, 288, -247, 69, -106, 18, 45, -51,
	-75, 86, -80, 43, 39, -79, -76, -94, -92, -93,
	120, 109, 110, 117, 87, 121, -84, -82, -83, -85,
	72, 71, 73, 74, 75, 76, 80, 81, 82, -139,
	-144, -90, -246, 58, 59, 255, 256, 259, 257, 89,
	48, 244, 253, 252, 251, 249, 250, 245, 248, 137,
	246, 115, 254, 70, -138, -102, -103, -51, -101, -18,
	-35, 50, -41, 37, 78, -61, 41, -60, 44, -60,
	68, -115, -118, -116, 293, 295, -113, 286, 94, -121,
	-139, 72, 43, -121, 44, 15, 15, 69, 68, -154,
	-157, -159, -158, -160, -155, -156, 168, 169, 120, 172,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	44, 145, 164, 165, 166, 167, 185, 186, 187, 188,
	189, 190, 191, 192, 151, 170, 261, 152, 153, 154,
	155, 156, 157, 159, 160, 161, 162, 163, -148, 70,
	-138, 86, 70, 70, 70, -60, -60, -127, 66, -148,
	39, -46, 10, -60, -144, -63, -64, -64, -60, -63,
	-150, 207, 94, -145, -144, -137, 183, 268, 269, -150,
	-150, -88, -51, -150, -136, 135, 38, -150, -150, -150,
	8, 104, 85, 84, 101, 68, 17, -51, -77, 104,
	86, 102, 103, 88, 106, 105, 116, 109, 110, 111,
	112, 113, 114, 115, 107, 108, 119, 94, 95, 96,
	97, 98, 99, 100, -126, -246, -93, -246, 123, 124,
	-80, -80, -80, -80, -80, -80, -246, 122, -18, -246,
	-246, -246, -246, -246, -246, -246, -97, -51, -246, -249,
	-246, -249, -249, -249, -249, -249, -249, -249, -246, -246,
	-246, -246, 68, -104, 40, 141, -105, -247, -43, -81,
	-139, 73, 76, -42, 57, -78, 44, 48, -18, -246,
	-60, -109, -110, -94, -139, -144, -74, 11, -114, -152,
	-117, 68, -119, 68, 294, 296, 297, -115, 66, 83,
	-51, -191, 119, -246, 273, 24, -215, -216, -217, -169,
	-165, -167, -168, -170, -171, -172, -173, -174, -175, -176,
	-177, -178, -179, -180, -181, -182, -183, -184, -185, -186,
	-187, -188, -189, 79, 282, -198, 194, 205, 47, 206,
	207, 208, 133, 210, 211, 212, 26, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 43, -209, -210, -211,
	-5, -4, 133, 35, 31, 23, 22, -235, -236, -237,
	-204, -162, -205, -206, -207, -163, -40, -164, -192, -193,
	80, 86, 43, 194, 139, 35, 34, 79, 66, 119,
	204, 201, -200, 197, -161, 67, -161, -161, -161, -161,
	-190, 171, -190, -190, -190, 67, 67, -161, -161, -161,
	-202, 67, -202, -202, -203, 67, -203, -238, -239, -240,
	-198, 39, 66, 66, 66, -131, 128, 282, 255, 130,
	127, 131, 126, 194, 171, 79, 43, 14, 266, 70,
	-70, -60, -60, -105, 240, -150, -150, -67, 102, 11,
	-144, -60, -63, -150, 73, 268, 68, -247, -60, 52,
	-51, -51, -86, 80, 86, 81, 82, -51, -51, -80,
	-87, -90, -93, 77, 104, 102, 103, 88, -80, -80,
	-80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
	-80, -80, -80, -151, 70, 72, 70, -79, -79, -139,
	-49, 37, -48, -50, 111, -51, -144, -140, -145, -137,
	-247, -18, -48, -48, -51, -51, -48, -41, -95, -96,
	90, -139, -247, -48, -49, -48, -48, -103, -106, -124,
	18, 10, 48, 48, -48, -108, 66, -109, -89, -91,
	-90, -246, -18, -107, -139, -74, 68, 94, 122, -101,
	-51, -116, -118, -120, 298, 295, 301, 70, -143, -246,
	-246, -217, -197, 94, -197, 119, -196, 174, 171, 168,
	-197, -197, -197, -197, -197, 209, 209, -197, -197, -197,
	-197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
	-6, 70, -212, -211, 139, 34, 32, -237, 80, 72,
	73, 74, 80, -39, -76, -123, 244, 249, 250, 35,
	35, 72, 8, -194, 70, 72, 199, 200, 43, 43,
	202, 203, -201, 198, 73, -190, -190, 44, -208, 72,
	-208, 73, 73, -240, 119, -196, -178, -60, -60, -60,
	-150, -136, -132, 133, 35, 94, 135, 140, 140, 140,
	-134, 68, 29, 21, -229, -230, -231, 45, 19, -150,
	72, 72, -51, -63, -74, -12, -51, -150, 53, 80,
	81, 82, -87, -80, -80, -80, -47, 146, 85, -247,
	-247, -48, 68, -142, -141, 38, -139, 72, 122, -246,
	122, -247, -247, -247, 68, 138, 38, -247, -48, -98,
	-96, 92, -51, -247, -247, -247, -247, -247, -60, -52,
	10, 42, -108, 68, -247, -247, -247, 68, 122, -101,
	-110, -51, -140, -105, 295, 299, 300, -247, -143, -143,
	72, -194, -197, -197, 44, 44, 73, 73, 73, 72,
	72, -197, -197, 73, 72, 70, 73, 73, 73, 73,
	43, 72, 43, 200, 199, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 73, 43, 73, 43,
	73, 43, 70, -138, -2, -1, 138, -6, 35, -212,
	67, -39, 69, 70, 120, 69, 68, 69, 68, 69,
	68, -197, -197, -246, -246, -246, -60, -150, 70, 171,
	-213, 70, -209, -60, -231, -230, -197, -197, -67, -47,
	85, -80, -80, -247, -50, -141, 111, -145, -49, -140,
	-153, 120, 168, 145, 166, 162, 183, 173, 196, 164,
	197, -151, -153, 260, -101, 93, -51, 91, -74, -53,
	-54, -55, -56, -71, -93, -246, -60, 35, -91, 48,
	-18, -246, -139, -139, -105, -247, -247, -194, -194, 72,
	72, 67, -3, 24, 20, 30, 67, -2, -6, 69,
	73, 72, 73, 73, -234, 70, 43, -199, 70, 120,
	43, -219, -218, -139, -219, -219, 44, -234, -234, -80,
	122, -247, -247, -161, -161, -161, -203, -161, 156, -161,
	156, -247, -247, -246, -45, 258, -51, -99, 12, 68,
	-57, -58, -59, 56, 60, 62, 57, 58, 59, 63,
	-149, 38, -53, -246, -147, -146, 38, -144, 72, 8,
	-89, -18, 122, -246, -166, 272, -219, -219, 67, -2,
	69, 69, 69, -247, 68, -161, -247, -247, 70, 111,
	-190, 70, -80, -247, 72, -100, 13, 15, -54, -55,
	-54, -55, 56, 56, 56, 61, 56, 61, 56, -58,
	-144, -247, -72, 64, 136, 65, -146, -109, -247, -139,
	-242, -241, 271, 73, 69, 69, -219, 67, -221, -218,
	-220, -222, -44, 104, 263, -51, -88, 66, 66, 56,
	56, 133, 133, 133, 68, -247, 70, -223, -223, 69,
	-219, -229, -227, -224, -226, 26, 79, 138, -229, -225,
	-224, 263, -229, -224, -247, 261, 63, 264, -51, -51,
	-246, -246, -246, -241, 48, -228, 26, -1, 79, 263,
	-223, 69, -197, 72, -233, 24, 20, 28, 53, 262,
	265, -73, -139, -73, -73, 104, -197, 72, 28, -223,
	73, 70, 53, -247, 68, -247, -247, -90, 73, 70,
	263, -139, 264, 265,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 638, 0, 424, 424, 424, 424,
	424, 0, 729, 712, 326, 336, 0, 413, 0, 0,
	947, 352, 362, 368, 947, 0, 947, 947, 0, 947,
	947, 0, 35, 36, 341, 342, 343, 945, 1, 3,
	646, 0, 0, 428, 431, 426, 712, 0, 0, 0,
	53, 0, 710, 0, 0, 0, 710, 46, 47, 730,
	0, 713, 0, 0, 708, 327, 0, 337, 0, 0,
	0, 947, 947, 0, 0, 947, 947, 947, 0, 947,
	947, 947, 947, 947, 947, 947, 414, 406, 407, 408,
	0, 421, 735, 736, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 340, 344, 0, 0, 484, 894, -2, 357, 367,
	363, 364, 365, 366, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 0, 369, 370, 372, 947, 374, 375, 0, 0,
	947, 0, 947, 947, 0, 422, 423, 29, 650, 0,
	0, 638, 31, 0, 424, 429, 430, 434, 432, 433,
	425, 0, 0, 0, 39, 40, 674, 0, 0, 676,
	703, 704, -2, 0, 0, 0, 733, 734, -2, 753,
	731, 732, 48, 54, 55, 0, 0, 0, 174, 0,
	178, 179, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 338, 339, 404, 0, 0, 388, 389,
	409, 0, 415, 416, 0, 411, 412, 393, 394, 395,
	409, 397, 398, 399, 400, 401, 402, 403, 947, 347,
	345, 346, 358, 0, -2, 349, 350, 351, 360, 0,
	0, 0, 947, 373, 947, 0, 947, 378, 724, 380,
	381, 947, 947, 947, 30, 946, 25, 0, 0, 647,
	494, 0, 499, 501, 0, 536, 537, 538, 539, 540,
	0, 0, 0, 0, 0, 0, 562, 563, 564, 565,
	624, 625, 626, 627, 628, 629, 630, 503, 504, 621,
	0, 670, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 586, 586, 586, 586, 586, 586, 586, 586, 0,
	0, 0, 0, -2, -2, 639, 640, 643, 646, 29,
	431, 0, 436, 435, 427, 0, 0, 483, 0, 492,
	0, 688, 699, 692, 0, 0, 677, 0, 0, 681,
	685, 686, 687, 275, 684, 0, 0, -2, 300, 184,
	251, 181, 182, 183, 244, 199, 244, 244, 244, 244,
	271, 271, 271, 271, 227, 228, 229, 230, 231, 0,
	0, 214, 244, 244, 244, 218, 234, 235, 236, 237,
	238, 239, 240, 241, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 246, 246, 246, 248, 248, -2, 739,
	740, 0, 0, 0, 0, 100, 0, 0, 0, 333,
	709, 646, 0, 947, 947, 417, 0, 0, 409, 947,
	420, 0, 0, 485, 737, 738, 353, 354, 355, 371,
	376, 0, 534, 377, 0, 725, 726, 382, 383, 384,
	651, 0, 0, 0, 0, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 522, 523,
	524, 525, 526, 527, 500, 0, 514, 0, 0, 0,
	556, 557, 558, 559, 560, 0, 438, 0, 29, 0,
	0, 0, 0, 0, 0, 434, 0, 613, 0, 578,
	0, 579, 580, 581, 582, 583, 584, 585, 0, 438,
	0, 0, 0, 642, 644, 645, 650, 32, 434, 0,
	631, 0, 0, 0, 437, 663, 0, 0, -2, 0,
	482, 492, 671, 0, 621, 0, 638, 0, 675, 0,
	690, 0, 691, 0, 0, 701, 702, 689, 678, 679,
	680, 682, 0, 0, 0, 0, 101, -2, 104, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 92, 92, 0, 92, 92, 92, 92,
	92, 0, 0, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 91, 175, 176, 292,
	311, 0, 313, 314, 309, -2, 301, 177, 185, 186,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	255, 0, 0, 270, 0, 284, 286, 0, 0, 0,
	0, 0, 253, 252, 198, 0, 271, 271, 221, 222,
	223, 0, 224, 225, 226, 0, 0, 215, 216, 217,
	209, 0, 210, 211, 212, 0, 213, 49, -2, 85,
	0, 711, 0, 0, 0, 947, 724, 0, 721, 0,
	719, 0, 714, 715, 716, 717, 718, 720, 722, 723,
	328, 334, 76, 947, 0, 386, 387, 390, 0, 0,
	410, 409, 492, 396, 359, 0, 0, 669, 947, 0,
	495, 496, 498, 515, 0, 517, 519, 648, 649, 505,
	506, 530, 531, 532, 0, 0, 0, 0, 528, 510,
	0, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 555, 597, 598, 0, 553, 554, 561,
	0, 0, 439, 440, 442, 446, 0, 622, 0, -2,
	533, 29, 0, 0, 0, 0, 0, 0, 619, 616,
	0, 0, 587, 0, 0, 0, 0, 641, 26, 0,
	706, 707, 632, 633, 451, 33, 0, 663, 653, 665,
	667, 0, 29, 0, 659, 638, 0, 0, 0, 646,
	493, 700, 693, 694, 0, 0, 698, 276, 0, 0,
	0, 105, 0, 93, 0, 92, 92, 94, 0, 0,
	0, 0, 0, 0, 0, 92, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 293, 292, 312, 0, 311, 302, 187, 256, 257,
	258, 259, 260, 261, 262, 264, 267, 268, 269, 283,
	285, 287, 0, 274, 169, 170, 277, 278, 279, 280,
	281, 282, 180, 254, 0, 219, 220, 0, 0, 242,
	0, 0, 0, 86, 92, 92, 89, 0, 0, 0,
	318, 0, 947, 727, 728, 0, 0, 0, 0, 0,
	331, 0, 329, 330, 332, 77, 78, 92, 92, 385,
	405, 418, 419, 417, 391, 361, 535, 379, 652, 516,
	518, 520, 507, 528, 511, 0, 508, 0, 0, 502,
	566, 0, 0, 443, 447, 0, 449, 450, 0, 438,
	0, -2, 569, 570, 0, 0, 0, 0, 638, 0,
	617, 0, 0, 577, 588, 589, 590, 591, 27, 492,
	0, 0, 34, 0, 668, -2, 0, 0, 0, 646,
	672, 673, 622, 38, 695, 696, 697, 56, 0, 0,
	171, 172, 0, 0, 95, 96, 130, 131, 168, 133,
	134, 0, 0, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 0, 305, 0, 0, 304, 292,
	0, 263, 245, 272, 273, 232, 0, 233, 0, 249,
	0, 0, 0, 0, 0, 0, 319, 320, 321, 0,
	323, 324, 325, 335, 79, 80, 0, 0, 392, 509,
	0, 529, 512, 567, 441, 448, 444, 0, 0, 623,
	0, 244, 244, 602, 244, 248, 605, 244, 607, 244,
	610, 0, 0, 0, 614, 576, 620, 0, 634, 452,
	453, 455, 456, 457, 465, 0, 467, 0, 666, 0,
	-2, 0, 661, 660, 37, 0, 44, 132, 173, 135,
	136, 0, 303, 306, 307, 308, 0, 0, 304, 265,
	0, 243, 0, 0, 87, 61, 62, 88, 97, 98,
	99, 0, 315, 244, 0, 0, 0, 81, 82, 513,
	0, 568, 571, 599, 271, 603, 604, 606, 608, 609,
	611, 573, 572, 0, 0, 0, 618, 636, 0, 0,
	0, 0, 0, 472, 0, 0, 475, 0, 0, 0,
	0, 466, 0, 0, 486, 468, 0, 470, 471, 0,
	656, 29, 0, 0, 58, 0, 0, 0, 0, 0,
	266, 247, 250, 66, 0, 317, 70, 74, 322, 445,
	600, 601, 592, 575, 615, 28, 0, 0, 454, 461,
	0, 464, 473, 474, 476, 0, 478, 0, 480, 481,
	458, 459, 460, 0, 0, 0, 469, 664, -2, 662,
	0, 41, 0, 45, 298, 298, 0, 0, 76, 316,
	76, 76, 0, 0, 0, 637, 635, 0, 0, 477,
	479, 0, 0, 0, 0, 57, 0, 288, 289, 298,
	0, 50, 67, 68, 69, 92, 0, 0, 51, 71,
	72, 0, 52, 75, 574, 0, 0, 0, 462, 463,
	0, 0, 0, 42, 0, 299, 92, 295, 0, 0,
	290, 298, 0, 65, 63, 59, 60, 0, 593, 0,
	596, 0, 490, 0, 0, 0, 0, 296, 0, 291,
	64, 73, 594, 487, 0, 488, 489, 43, 294, 297,
	0, 491, 0, 595,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 310,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1061
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1093
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1138
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1149
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.optVal = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1213
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1240
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.str = "hash"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = "btree"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = "default"
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1428
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1446
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1508
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1513
		{
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1515
		{
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = "character set"
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = "char set"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = "default"
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1547
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1845
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1882
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1898
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.optVal = nil
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2523
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.str = yyDollar[3].str
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2619
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2639
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2664
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2676
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 290:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2690
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 291:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2701
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2734
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2766
		{
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2769
		{
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2772
		{
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2783
		{
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2800
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2815
		{
			// set empty
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.str = yyDollar[1].str
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2841
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2857
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2862
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.byt = 0
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.byt = 1
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2897
		{
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2905
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2921
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2941
		{
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2943
		{
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.statement = &Xa{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2967
		{
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2969
		{
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.showFilter = nil
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3039
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.optVal = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3057
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3062
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3071
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3082
		{
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3086
		{
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3114
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3126
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3146
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3176
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3187
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.str = "full "
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3303
		{
			yyVAL.showFilter = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3317
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3338
		{
			setAllowComments(yylex, true)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.bytes2 = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.str = UnionStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.str = UnionAllStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.str = UnionDistinctStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3370
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3374
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3378
		{
			yyVAL.str = SQLCacheStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3387
		{
			yyVAL.str = DistinctStr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.str = StraightJoinHint
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.selectExprs = nil
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3411
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3415
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3429
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3433
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3438
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3442
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3468
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3472
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3482
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3486
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3490
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3496
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3509
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3513
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3517
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3521
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3526
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3535
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3539
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3550
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.str = JoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3560
		{
			yyVAL.str = JoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3564
		{
			yyVAL.str = JoinStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3568
		{
			yyVAL.str = StraightJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3574
		{
			yyVAL.str = LeftJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3578
		{
			yyVAL.str = LeftJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3582
		{
			yyVAL.str = RightJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3586
		{
			yyVAL.str = RightJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3592
		{
			yyVAL.str = NaturalJoinStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3596
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3616
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3620
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3625
		{
			yyVAL.indexHints = nil
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3643
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3666
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3670
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3674
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3678
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3686
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3692
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3696
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3712
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3740
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3744
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3754
		{
			yyVAL.str = IsNullStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3758
		{
			yyVAL.str = IsNotNullStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.str = IsTrueStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.str = IsNotTrueStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.str = IsFalseStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.str = IsNotFalseStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3780
		{
			yyVAL.str = EqualStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3784
		{
			yyVAL.str = LessThanStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.str = GreaterThanStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3792
		{
			yyVAL.str = LessEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.str = GreaterEqualStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3800
		{
			yyVAL.str = NotEqualStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3809
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3813
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3819
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3823
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3827
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3833
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3839
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3849
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3853
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3861
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3869
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3873
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3925
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3929
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3933
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3941
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3959
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3963
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3985
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3989
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 574:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4058
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4068
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4073
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4088
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4092
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4100
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4110
		{
			yyVAL.str = BooleanModeStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4114
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4118
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4122
		{
			yyVAL.str = QueryExpansionStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4142
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4146
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4154
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4158
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4168
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4172
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4176
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4180
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4184
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4193
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4197
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4202
		{
			yyVAL.str = string("")
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4206
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4212
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4216
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4227
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4231
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4237
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4241
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4245
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4251
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4255
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4259
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4263
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4267
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.expr = &NullVal{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4281
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4299
		{
			yyVAL.exprs = nil
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4303
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4308
		{
			yyVAL.expr = nil
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4312
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4317
		{
			yyVAL.orderBy = nil
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4321
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4342
		{
			yyVAL.str = AscScr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4346
		{
			yyVAL.str = AscScr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4350
		{
			yyVAL.str = DescScr
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4355
		{
			yyVAL.limit = nil
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4359
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4363
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4367
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4372
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4376
		{
			yyVAL.str = ForUpdateStr
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.str = ShareModeStr
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4393
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4397
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4401
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4414
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4421
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4425
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4429
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4438
		{
			yyVAL.updateExprs = nil
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4442
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4448
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4452
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4458
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4468
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4474
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4484
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4494
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4500
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4504
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4514
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4525
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4529
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4533
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4537
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4544
		{
			yyVAL.bytes = []byte("charset")
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4550
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4554
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4558
		{
			yyVAL.expr = &Default{}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4564
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4568
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4574
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4578
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4584
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4588
		{
			yyVAL.str = yyDollar[2].str
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.str = yyDollar[3].str
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4600
		{
			yyVAL.str = RepeatableRead
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4604
		{
			yyVAL.str = ReadCommitted
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4608
		{
			yyVAL.str = ReadUncommitted
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4612
		{
			yyVAL.str = Serializable
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4618
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.str = yyDollar[2].str
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4628
		{
			yyVAL.str = TxReadWrite
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.str = TxReadOnly
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4638
		{
			yyVAL.str = SessionStr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.str = SessionStr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.str = GlobalStr
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4655
		{
			yyVAL.byt = 0
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4659
		{
			yyVAL.byt = 1
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4664
		{
			yyVAL.byt = 0
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4668
		{
			yyVAL.byt = 1
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4673
		{
			yyVAL.str = ""
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4677
		{
			yyVAL.str = IgnoreStr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4683
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4687
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4691
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4695
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4699
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4703
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4707
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4711
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4715
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4719
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4724
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4728
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4732
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4738
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4742
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4747
		{
			yyVAL.str = IndexStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4751
		{
			yyVAL.str = UniqueStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4757
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4761
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4768
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4774
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4778
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4785
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4791
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4795
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5026
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5035
		{
			decNesting(yylex)
		}
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5040
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
