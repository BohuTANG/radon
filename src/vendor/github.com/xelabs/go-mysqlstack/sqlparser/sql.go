//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const INDEXES = 57366
const KEY_BLOCK_SIZE = 57367
const KEYS = 57368
const PARSER = 57369
const RTREE = 57370
const SPATIAL = 57371
const SYMBOL = 57372
const UNIQUE = 57373
const KEY = 57374
const ALL = 57375
const DISTINCT = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const SET = 57384
const LOCK = 57385
const FULL = 57386
const CHECKSUM = 57387
const VALUES = 57388
const LAST_INSERT_ID = 57389
const NEXT = 57390
const VALUE = 57391
const SHARE = 57392
const MODE = 57393
const SQL_NO_CACHE = 57394
const SQL_CACHE = 57395
const JOIN = 57396
const STRAIGHT_JOIN = 57397
const LEFT = 57398
const RIGHT = 57399
const INNER = 57400
const OUTER = 57401
const CROSS = 57402
const NATURAL = 57403
const USE = 57404
const FORCE = 57405
const ON = 57406
const ID = 57407
const HEX = 57408
const STRING = 57409
const INTEGRAL = 57410
const FLOAT = 57411
const HEXNUM = 57412
const VALUE_ARG = 57413
const LIST_ARG = 57414
const COMMENT = 57415
const COMMENT_KEYWORD = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const AND = 57422
const NOT = 57423
const BETWEEN = 57424
const CASE = 57425
const WHEN = 57426
const THEN = 57427
const ELSE = 57428
const END = 57429
const LE = 57430
const GE = 57431
const NE = 57432
const NULL_SAFE_EQUAL = 57433
const IS = 57434
const LIKE = 57435
const REGEXP = 57436
const IN = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const MODIFY = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const USING = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SHOW = 57464
const DESCRIBE = 57465
const EXPLAIN = 57466
const DATE = 57467
const ESCAPE = 57468
const REPAIR = 57469
const OPTIMIZE = 57470
const TRUNCATE = 57471
const BIT = 57472
const TINYINT = 57473
const SMALLINT = 57474
const MEDIUMINT = 57475
const INT = 57476
const INTEGER = 57477
const BIGINT = 57478
const INTNUM = 57479
const REAL = 57480
const DOUBLE = 57481
const FLOAT_TYPE = 57482
const DECIMAL = 57483
const NUMERIC = 57484
const TIME = 57485
const TIMESTAMP = 57486
const DATETIME = 57487
const YEAR = 57488
const CHAR = 57489
const VARCHAR = 57490
const BOOL = 57491
const CHARACTER = 57492
const VARBINARY = 57493
const NCHAR = 57494
const CHARSET = 57495
const TEXT = 57496
const TINYTEXT = 57497
const MEDIUMTEXT = 57498
const LONGTEXT = 57499
const BLOB = 57500
const TINYBLOB = 57501
const MEDIUMBLOB = 57502
const LONGBLOB = 57503
const JSON = 57504
const ENUM = 57505
const GEOMETRY = 57506
const POINT = 57507
const LINESTRING = 57508
const POLYGON = 57509
const GEOMETRYCOLLECTION = 57510
const MULTIPOINT = 57511
const MULTILINESTRING = 57512
const MULTIPOLYGON = 57513
const NULLX = 57514
const AUTO_INCREMENT = 57515
const APPROXNUM = 57516
const SIGNED = 57517
const UNSIGNED = 57518
const ZEROFILL = 57519
const FIXED = 57520
const DYNAMIC = 57521
const STORAGE = 57522
const DISK = 57523
const MEMORY = 57524
const COLUMN_FORMAT = 57525
const AVG_ROW_LENGTH = 57526
const COMPRESSION = 57527
const CONNECTION = 57528
const DATA = 57529
const DIRECTORY = 57530
const DELAY_KEY_WRITE = 57531
const ENCRYPTION = 57532
const INSERT_METHOD = 57533
const MAX_ROWS = 57534
const MIN_ROWS = 57535
const PACK_KEYS = 57536
const PASSWORD = 57537
const ROW_FORMAT = 57538
const STATS_AUTO_RECALC = 57539
const STATS_PERSISTENT = 57540
const STATS_SAMPLE_PAGES = 57541
const TABLESPACE = 57542
const COMPRESSED = 57543
const REDUNDANT = 57544
const COMPACT = 57545
const TOKUDB_DEFAULT = 57546
const TOKUDB_FAST = 57547
const TOKUDB_SMALL = 57548
const TOKUDB_ZLIB = 57549
const TOKUDB_QUICKLZ = 57550
const TOKUDB_LZMA = 57551
const TOKUDB_SNAPPY = 57552
const TOKUDB_UNCOMPRESSED = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const WARNINGS = 57557
const VARIABLES = 57558
const EVENTS = 57559
const BINLOG = 57560
const GTID = 57561
const STATUS = 57562
const COLUMNS = 57563
const FIELDS = 57564
const CURRENT_TIMESTAMP = 57565
const CURRENT_DATE = 57566
const DATABASE = 57567
const SCHEMA = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const MATCH = 57580
const AGAINST = 57581
const BOOLEAN = 57582
const LANGUAGE = 57583
const WITH = 57584
const QUERY = 57585
const EXPANSION = 57586
const UNUSED = 57587
const PARTITION = 57588
const PARTITIONS = 57589
const LIST = 57590
const XA = 57591
const DISTRIBUTED = 57592
const ENGINES = 57593
const VERSIONS = 57594
const PROCESSLIST = 57595
const QUERYZ = 57596
const TXNZ = 57597
const KILL = 57598
const ENGINE = 57599
const SINGLE = 57600
const BEGIN = 57601
const START = 57602
const TRANSACTION = 57603
const COMMIT = 57604
const ROLLBACK = 57605
const GLOBAL = 57606
const LOCAL = 57607
const SESSION = 57608
const NAMES = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const RADON = 57619
const ATTACH = 57620
const ATTACHLIST = 57621
const DETACH = 57622
const RESHARD = 57623
const CLEANUP = 57624
const RECOVER = 57625
const REBALANCE = 57626

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4829

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 227,
	92, 856,
	-2, 669,
	-1, 233,
	92, 717,
	-2, 647,
	-1, 476,
	120, 699,
	-2, 695,
	-1, 477,
	120, 700,
	-2, 696,
	-1, 511,
	117, 85,
	164, 85,
	167, 85,
	170, 85,
	-2, 97,
	-1, 562,
	1, 78,
	302, 78,
	-2, 85,
	-1, 685,
	5, 27,
	-2, 618,
	-1, 719,
	117, 85,
	164, 85,
	167, 85,
	170, 85,
	-2, 98,
	-1, 777,
	32, 305,
	65, 305,
	68, 305,
	131, 305,
	-2, 853,
	-1, 830,
	1, 79,
	302, 79,
	-2, 85,
	-1, 918,
	120, 702,
	-2, 698,
	-1, 1091,
	5, 28,
	-2, 497,
	-1, 1115,
	5, 28,
	-2, 619,
	-1, 1245,
	5, 27,
	-2, 621,
	-1, 1371,
	5, 28,
	-2, 622,
}

const yyPrivate = 57344

const yyLast = 10086

var yyAct = [...]int{

	477, 454, 1374, 1400, 452, 1406, 1277, 1269, 1447, 1404,
	430, 1276, 1304, 1235, 688, 588, 228, 826, 432, 1318,
	947, 812, 971, 1430, 999, 1236, 948, 1215, 1084, 698,
	1315, 902, 56, 912, 1076, 858, 232, 917, 107, 66,
	909, 1012, 364, 1022, 1001, 944, 202, 1174, 689, 365,
	455, 50, 645, 3, 928, 591, 879, 580, 975, 733,
	1037, 1241, 429, 781, 107, 1002, 236, 485, 367, 747,
	231, 720, 831, 497, 224, 822, 581, 211, 495, 562,
	417, 223, 107, 107, 55, 419, 496, 428, 1124, 221,
	479, 196, 415, 416, 964, 1125, 1126, 963, 707, 708,
	965, 50, 498, 201, 499, 107, 499, 706, 498, 207,
	187, 717, 1328, 414, 1375, 1473, 1429, 1446, 1408, 656,
	190, 192, 191, 193, 194, 216, 195, 1472, 24, 51,
	26, 27, 185, 1420, 362, 425, 1470, 1445, 361, 1228,
	1298, 78, 79, 379, 380, 855, 360, 1419, 1015, 396,
	381, 911, 359, 1016, 1017, 386, 503, 382, 985, 984,
	46, 1032, 388, 389, 28, 390, 404, 36, 1431, 805,
	1409, 60, 1008, 1009, 1010, 1344, 974, 1199, 1293, 813,
	1011, 450, 451, 1291, 37, 1058, 1043, 53, 1028, 184,
	1057, 806, 407, 409, 107, 534, 1408, 62, 63, 64,
	65, 1027, 1056, 1366, 1368, 77, 1176, 376, 914, 369,
	1055, 1396, 1395, 1394, 1004, 372, 107, 1325, 371, 107,
	370, 1283, 374, 978, 236, 593, 977, 1176, 231, 976,
	236, 236, 1118, 978, 504, 504, 977, 1090, 481, 976,
	104, 408, 408, 82, 81, 30, 31, 32, 1409, 34,
	70, 1088, 775, 73, 74, 411, 957, 71, 50, 75,
	482, 35, 47, 39, 635, 636, 48, 49, 33, 383,
	644, 522, 1275, 623, 813, 1367, 756, 490, 492, 714,
	493, 1386, 612, 611, 621, 622, 614, 615, 616, 617,
	618, 619, 620, 613, 613, 535, 623, 623, 500, 1273,
	548, 551, 552, 553, 554, 555, 556, 1410, 557, 558,
	559, 560, 561, 536, 537, 538, 539, 520, 521, 549,
	1003, 523, 860, 592, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 540, 541, 542, 543, 544, 545,
	546, 547, 1015, 1418, 1094, 1029, 1030, 1016, 1017, 1274,
	1432, 774, 1414, 716, 1183, 1025, 1026, 391, 72, 1451,
	600, 599, 1053, 598, 601, 593, 599, 972, 603, 564,
	929, 1054, 52, 956, 107, 107, 107, 601, 886, 564,
	483, 1216, 601, 107, 107, 671, 672, 507, 38, 600,
	599, 107, 884, 885, 883, 40, 1232, 502, 41, 42,
	1230, 44, 43, 565, 1184, 1218, 601, 600, 599, 1007,
	550, 859, 422, 480, 1095, 487, 45, 602, 368, 375,
	929, 1220, 1101, 1224, 601, 1219, 1466, 1217, 1096, 1458,
	600, 599, 1222, 600, 599, 569, 570, 572, 1387, 872,
	874, 875, 1221, 1171, 578, 873, 633, 601, 1376, 392,
	601, 1268, 583, 1408, 584, 1223, 1225, 1267, 575, 53,
	1023, 1052, 1024, 592, 582, 1069, 1070, 1071, 1264, 882,
	73, 74, 1265, 1170, 1169, 600, 599, 632, 634, 616,
	617, 618, 619, 620, 613, 236, 903, 623, 904, 677,
	107, 373, 601, 107, 1148, 236, 691, 1167, 1147, 231,
	378, 1146, 690, 643, 1168, 1409, 646, 647, 648, 649,
	650, 651, 652, 367, 655, 657, 657, 657, 657, 657,
	657, 657, 657, 665, 666, 667, 668, 1166, 673, 695,
	693, 444, 443, 445, 446, 447, 448, 1150, 1143, 686,
	449, 685, 1138, 1137, 1136, 1041, 1040, 814, 815, 816,
	1033, 687, 405, 1453, 1439, 769, 1347, 1266, 1255, 1254,
	715, 675, 1151, 674, 1144, 1140, 418, 1149, 1139, 637,
	638, 639, 640, 641, 642, 107, 701, 1130, 771, 828,
	709, 1062, 107, 107, 700, 658, 659, 660, 661, 662,
	663, 664, 107, 612, 611, 621, 622, 614, 615, 616,
	617, 618, 619, 620, 613, 1061, 1038, 623, 880, 614,
	615, 616, 617, 618, 619, 620, 613, 589, 1020, 623,
	1467, 1271, 1459, 854, 1399, 881, 1462, 418, 1337, 1434,
	1337, 1402, 832, 604, 824, 825, 853, 1397, 418, 1337,
	1378, 863, 1341, 236, 862, 1337, 1377, 908, 1270, 231,
	1302, 418, 1335, 867, 1337, 418, 236, 798, 797, 1000,
	930, 916, 1082, 418, 589, 1201, 1198, 794, 1145, 866,
	966, 654, 1306, 1309, 1310, 1311, 1307, 905, 1308, 1312,
	568, 918, 1391, 567, 1152, 50, 949, 236, 691, 566,
	800, 953, 377, 865, 690, 1190, 1189, 646, 946, 920,
	1186, 1187, 236, 799, 792, 1334, 231, 933, 1186, 1185,
	793, 712, 808, 809, 810, 811, 367, 1333, 954, 1182,
	926, 1117, 418, 906, 907, 945, 919, 955, 819, 820,
	821, 958, 865, 418, 955, 950, 1113, 50, 931, 951,
	1110, 878, 699, 801, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 937,
	936, 57, 24, 796, 1302, 967, 24, 968, 969, 973,
	24, 979, 980, 981, 982, 983, 500, 960, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 970, 961, 512, 511, 1188, 1082, 955, 683, 921,
	922, 1082, 684, 925, 852, 705, 1244, 703, 869, 870,
	669, 876, 877, 1082, 494, 208, 795, 932, 53, 934,
	935, 53, 1380, 803, 807, 53, 802, 1331, 827, 53,
	1034, 1035, 943, 1261, 1256, 107, 107, 107, 1154, 1153,
	67, 1180, 823, 818, 1006, 1306, 1309, 1310, 1311, 1307,
	817, 1308, 1312, 107, 1390, 589, 945, 1013, 923, 924,
	836, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 835, 76, 53, 834, 574, 1359, 480, 1039,
	681, 1357, 1360, 1393, 1392, 880, 1358, 1361, 1356, 1310,
	1311, 1044, 1045, 1065, 1050, 1355, 1046, 1047, 1048, 22,
	832, 1460, 881, 1042, 212, 213, 1444, 1068, 959, 868,
	1427, 942, 941, 1437, 1059, 236, 1281, 1135, 1134, 1086,
	1064, 612, 611, 621, 622, 614, 615, 616, 617, 618,
	619, 620, 613, 1036, 420, 623, 215, 1436, 486, 107,
	1072, 611, 621, 622, 614, 615, 616, 617, 618, 619,
	620, 613, 484, 508, 623, 491, 768, 1111, 206, 421,
	691, 1077, 231, 833, 573, 1314, 690, 1089, 486, 367,
	367, 209, 210, 1242, 1122, 1178, 68, 1019, 1018, 1005,
	1259, 1454, 1100, 1258, 1443, 203, 1079, 1119, 1260, 453,
	1080, 1350, 1112, 1442, 918, 510, 1441, 1132, 1133, 1173,
	1108, 1091, 1092, 1093, 1120, 1123, 1097, 1141, 1142, 80,
	509, 1103, 204, 1104, 1105, 1106, 1107, 1131, 1128, 1129,
	1073, 1074, 1075, 1175, 57, 1349, 1177, 105, 1301, 699,
	577, 1114, 1115, 1116, 621, 622, 614, 615, 616, 617,
	618, 619, 620, 613, 940, 218, 623, 1322, 1127, 1179,
	1021, 107, 939, 217, 597, 59, 61, 54, 1, 367,
	358, 1373, 1081, 1181, 830, 829, 1191, 1192, 780, 1063,
	779, 217, 217, 1440, 1066, 69, 1428, 1405, 1098, 1435,
	1407, 1412, 1384, 1381, 1383, 719, 236, 718, 363, 770,
	1086, 236, 786, 231, 217, 231, 1200, 1193, 1194, 1195,
	1203, 1202, 785, 784, 782, 916, 1031, 1214, 1204, 804,
	1272, 107, 1196, 791, 1210, 949, 1209, 790, 236, 236,
	713, 744, 1247, 1248, 1227, 918, 1212, 1226, 743, 1239,
	1213, 1229, 742, 741, 740, 739, 738, 737, 1102, 1233,
	1243, 1234, 736, 735, 734, 732, 731, 730, 729, 728,
	727, 726, 725, 721, 724, 723, 1327, 722, 789, 589,
	787, 1240, 1208, 783, 950, 1121, 1249, 1246, 517, 1245,
	515, 516, 514, 519, 518, 513, 1252, 1253, 1313, 1317,
	1083, 183, 1051, 217, 837, 631, 938, 1014, 229, 962,
	704, 702, 220, 219, 236, 236, 236, 952, 1278, 1278,
	1278, 670, 1175, 478, 1263, 217, 1279, 1280, 217, 1250,
	1251, 1348, 1300, 1206, 1207, 1099, 653, 927, 431, 871,
	442, 439, 441, 440, 676, 682, 1262, 605, 423, 1365,
	1238, 571, 88, 87, 387, 488, 1305, 1303, 1289, 1237,
	1109, 107, 107, 576, 1297, 1385, 949, 680, 788, 25,
	58, 214, 14, 21, 15, 13, 12, 236, 29, 1239,
	10, 1278, 236, 9, 8, 1323, 1278, 7, 1329, 6,
	5, 4, 205, 1330, 23, 2, 20, 19, 18, 1296,
	17, 16, 11, 772, 236, 773, 1257, 1175, 231, 0,
	0, 1316, 0, 0, 1284, 950, 1285, 50, 0, 1324,
	1214, 1326, 0, 107, 107, 107, 107, 1294, 1295, 1343,
	1231, 1332, 0, 0, 107, 0, 1351, 107, 1353, 0,
	107, 1239, 1239, 1239, 1239, 1362, 236, 691, 0, 1352,
	1372, 1354, 236, 690, 0, 1239, 1278, 1370, 236, 1369,
	0, 1282, 1278, 1379, 1382, 0, 0, 0, 0, 0,
	0, 0, 0, 1240, 1240, 1240, 1240, 1336, 0, 0,
	1339, 1340, 0, 217, 217, 217, 1389, 1316, 0, 920,
	0, 0, 217, 579, 0, 0, 0, 0, 1346, 0,
	217, 236, 1401, 0, 0, 1278, 0, 0, 0, 1413,
	1416, 0, 1403, 1411, 1415, 0, 1364, 0, 0, 0,
	1426, 0, 0, 0, 0, 1371, 1433, 0, 1286, 1287,
	0, 1288, 0, 0, 1290, 0, 1292, 103, 0, 102,
	0, 0, 0, 0, 236, 236, 236, 0, 1448, 1448,
	1448, 1438, 1345, 1449, 1450, 0, 0, 100, 1455, 0,
	0, 1299, 0, 0, 0, 1423, 1424, 1425, 0, 0,
	0, 0, 1452, 1465, 1398, 0, 0, 0, 0, 1456,
	1457, 99, 0, 236, 1468, 1469, 1417, 1471, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 692, 694, 1205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 408, 612, 611, 621, 622, 614, 615, 616,
	617, 618, 619, 620, 613, 0, 84, 623, 0, 0,
	0, 0, 0, 92, 101, 0, 0, 0, 1461, 0,
	1463, 1464, 0, 0, 0, 0, 182, 0, 186, 0,
	188, 189, 0, 197, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1388, 589,
	0, 0, 0, 98, 217, 0, 0, 0, 0, 0,
	0, 861, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 384, 385, 0, 0, 393, 394, 395, 0,
	397, 398, 399, 400, 401, 402, 403, 0, 0, 1421,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 109, 0, 0, 133, 0, 137, 140, 141, 0,
	0, 0, 97, 85, 0, 96, 94, 0, 83, 0,
	91, 0, 125, 915, 694, 0, 0, 915, 915, 143,
	0, 915, 161, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 915, 915, 915, 915, 0,
	235, 86, 95, 89, 90, 93, 0, 0, 0, 115,
	915, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 410,
	0, 412, 413, 0, 0, 612, 611, 621, 622, 614,
	615, 616, 617, 618, 619, 620, 613, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 159, 0, 170, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 132,
	0, 0, 168, 169, 120, 173, 0, 0, 112, 0,
	0, 152, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 139, 127, 134, 156, 144, 157, 135, 150, 149,
	151, 0, 0, 0, 162, 0, 1078, 131, 126, 166,
	123, 147, 116, 110, 0, 117, 118, 122, 121, 0,
	138, 145, 148, 154, 155, 160, 612, 611, 621, 622,
	614, 615, 616, 617, 618, 619, 620, 613, 0, 0,
	623, 0, 0, 0, 217, 217, 217, 0, 0, 165,
	0, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 108, 113,
	142, 0, 158, 129, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 163, 0, 164,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 177, 176,
	178, 114, 179, 180, 0, 0, 0, 0, 0, 0,
	915, 585, 586, 0, 587, 0, 590, 0, 0, 0,
	0, 594, 595, 596, 0, 0, 915, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 109, 0, 0, 133, 0, 137, 140, 141, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 427, 0,
	0, 0, 125, 426, 758, 0, 0, 0, 463, 143,
	0, 0, 161, 146, 0, 0, 0, 0, 456, 457,
	768, 0, 0, 0, 750, 0, 0, 53, 0, 0,
	476, 444, 443, 445, 446, 447, 448, 0, 0, 115,
	449, 450, 451, 0, 0, 0, 424, 437, 0, 462,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 434,
	435, 913, 0, 0, 0, 474, 0, 436, 0, 0,
	433, 438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 172, 856, 857, 472, 694, 915,
	0, 864, 0, 0, 119, 0, 159, 0, 170, 111,
	754, 0, 0, 0, 0, 0, 0, 0, 124, 132,
	217, 0, 168, 169, 120, 173, 0, 0, 112, 0,
	0, 152, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 139, 127, 134, 156, 144, 157, 135, 150, 149,
	151, 0, 0, 0, 162, 0, 0, 131, 126, 166,
	123, 147, 116, 110, 0, 117, 118, 122, 121, 748,
	138, 145, 148, 154, 155, 160, 0, 0, 0, 0,
	749, 751, 752, 753, 0, 755, 756, 757, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 0, 0, 165,
	0, 130, 464, 470, 473, 0, 471, 468, 469, 467,
	466, 465, 475, 458, 459, 461, 0, 460, 108, 113,
	142, 0, 158, 129, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 163, 0, 164,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	217, 1320, 0, 746, 0, 0, 174, 175, 177, 176,
	178, 114, 179, 180, 607, 0, 610, 0, 0, 0,
	0, 0, 624, 625, 626, 627, 628, 629, 630, 0,
	608, 609, 606, 612, 611, 621, 622, 614, 615, 616,
	617, 618, 619, 620, 613, 0, 0, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 217, 217, 217, 0, 0, 0, 0,
	0, 0, 0, 1363, 0, 0, 217, 0, 0, 1320,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 341, 326, 285, 344,
	261, 276, 356, 278, 279, 315, 245, 295, 153, 274,
	109, 1060, 0, 133, 0, 137, 140, 141, 0, 0,
	0, 0, 342, 292, 1067, 264, 238, 271, 239, 262,
	289, 125, 260, 328, 298, 277, 0, 350, 143, 307,
	0, 161, 146, 0, 0, 291, 331, 293, 324, 284,
	316, 253, 306, 345, 275, 312, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 309,
	339, 273, 311, 314, 237, 308, 0, 241, 246, 355,
	337, 267, 268, 0, 0, 0, 0, 0, 0, 0,
	290, 294, 321, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 305, 0, 0, 0, 248, 243,
	288, 0, 0, 0, 252, 0, 266, 322, 0, 0,
	0, 332, 283, 172, 338, 281, 280, 346, 318, 0,
	329, 263, 272, 119, 270, 159, 313, 170, 111, 335,
	330, 303, 286, 287, 242, 0, 320, 124, 132, 259,
	310, 168, 169, 120, 173, 247, 352, 112, 234, 351,
	152, 233, 167, 336, 304, 300, 244, 334, 302, 299,
	139, 127, 134, 156, 144, 157, 135, 150, 149, 151,
	0, 240, 0, 162, 343, 357, 131, 126, 166, 123,
	147, 116, 110, 250, 117, 118, 122, 121, 0, 138,
	145, 148, 154, 155, 160, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 333, 0, 0, 0, 0, 0, 165, 249,
	130, 256, 254, 257, 325, 255, 296, 297, 347, 348,
	349, 323, 251, 0, 0, 327, 301, 108, 113, 142,
	354, 158, 129, 171, 0, 0, 0, 0, 0, 269,
	353, 319, 317, 340, 0, 128, 163, 0, 164, 222,
	0, 0, 227, 225, 226, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 177, 176, 178,
	114, 179, 180, 341, 326, 285, 344, 261, 276, 356,
	278, 279, 315, 245, 295, 153, 274, 109, 0, 0,
	133, 0, 137, 140, 141, 0, 0, 0, 0, 342,
	292, 0, 264, 238, 271, 239, 262, 289, 125, 260,
	328, 298, 277, 0, 350, 143, 307, 0, 161, 146,
	0, 0, 291, 331, 293, 324, 284, 316, 253, 306,
	345, 275, 312, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 309, 339, 273, 311,
	314, 237, 308, 0, 241, 246, 355, 337, 267, 268,
	0, 0, 0, 0, 0, 0, 0, 290, 294, 321,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 305, 0, 0, 0, 248, 243, 288, 0, 0,
	0, 252, 0, 266, 322, 0, 0, 0, 332, 283,
	172, 338, 281, 280, 346, 318, 0, 329, 263, 272,
	119, 270, 159, 313, 170, 111, 335, 330, 303, 286,
	287, 242, 0, 320, 124, 132, 259, 310, 168, 169,
	120, 173, 247, 352, 112, 234, 351, 152, 233, 167,
	336, 304, 300, 244, 334, 302, 299, 139, 127, 134,
	156, 144, 157, 135, 150, 149, 151, 0, 240, 0,
	162, 343, 357, 131, 126, 166, 123, 147, 116, 110,
	250, 117, 118, 122, 121, 0, 138, 145, 148, 154,
	155, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 333,
	0, 0, 0, 0, 0, 165, 249, 130, 256, 254,
	257, 325, 255, 296, 297, 347, 348, 349, 323, 251,
	0, 0, 327, 301, 108, 113, 142, 354, 158, 129,
	171, 0, 0, 0, 0, 0, 269, 353, 319, 317,
	340, 0, 128, 163, 0, 164, 0, 0, 0, 227,
	225, 226, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 177, 176, 178, 114, 179, 180,
	341, 326, 285, 344, 261, 276, 356, 278, 279, 315,
	245, 295, 153, 274, 109, 0, 0, 133, 0, 137,
	140, 141, 0, 0, 0, 0, 342, 292, 0, 264,
	238, 271, 239, 262, 289, 125, 260, 328, 298, 277,
	0, 350, 143, 307, 0, 161, 146, 0, 0, 291,
	331, 293, 324, 284, 316, 253, 306, 345, 275, 312,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 309, 339, 273, 311, 314, 237, 308,
	0, 241, 246, 355, 337, 267, 268, 0, 0, 0,
	0, 0, 0, 0, 290, 294, 321, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 305, 0,
	0, 0, 248, 243, 288, 0, 0, 0, 252, 0,
	266, 322, 0, 0, 0, 332, 283, 172, 338, 281,
	280, 346, 318, 0, 329, 263, 272, 119, 270, 159,
	313, 170, 111, 335, 330, 303, 286, 287, 242, 0,
	320, 124, 132, 259, 310, 168, 169, 120, 173, 247,
	352, 112, 234, 351, 152, 233, 167, 336, 304, 300,
	244, 334, 302, 299, 139, 127, 134, 156, 144, 157,
	135, 150, 149, 151, 0, 240, 0, 162, 343, 357,
	131, 126, 166, 123, 147, 116, 110, 250, 117, 118,
	122, 121, 0, 138, 145, 148, 154, 155, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 333, 0, 0, 0,
	0, 0, 165, 249, 130, 256, 254, 257, 325, 255,
	296, 297, 347, 348, 349, 323, 251, 0, 0, 327,
	301, 108, 113, 142, 354, 158, 129, 171, 0, 0,
	0, 0, 0, 269, 353, 319, 317, 340, 0, 128,
	163, 0, 164, 501, 0, 0, 136, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 177, 176, 178, 114, 179, 180, 341, 326, 285,
	344, 261, 276, 356, 278, 279, 315, 245, 295, 153,
	274, 109, 0, 0, 133, 0, 137, 140, 141, 0,
	0, 0, 0, 342, 292, 0, 264, 238, 271, 239,
	262, 289, 125, 260, 328, 298, 277, 0, 350, 143,
	307, 0, 161, 146, 0, 0, 291, 331, 293, 324,
	284, 316, 253, 306, 345, 275, 312, 0, 0, 0,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	309, 339, 273, 311, 314, 237, 308, 0, 241, 246,
	355, 337, 267, 268, 0, 0, 0, 0, 0, 0,
	0, 290, 294, 321, 282, 0, 0, 0, 0, 0,
	0, 1342, 0, 265, 0, 305, 0, 0, 0, 248,
	243, 288, 0, 0, 0, 252, 0, 266, 322, 0,
	0, 0, 332, 283, 172, 338, 281, 280, 346, 318,
	0, 329, 263, 272, 119, 270, 159, 313, 170, 111,
	335, 330, 303, 286, 287, 242, 0, 320, 124, 132,
	259, 310, 168, 169, 120, 173, 247, 352, 112, 696,
	351, 152, 697, 167, 336, 304, 300, 244, 334, 302,
	299, 139, 127, 134, 156, 144, 157, 135, 150, 149,
	151, 0, 240, 0, 162, 343, 357, 131, 126, 166,
	123, 147, 116, 110, 250, 117, 118, 122, 121, 0,
	138, 145, 148, 154, 155, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 333, 0, 0, 0, 0, 0, 165,
	249, 130, 256, 254, 257, 325, 255, 296, 297, 347,
	348, 349, 323, 251, 0, 0, 327, 301, 108, 113,
	142, 354, 158, 129, 171, 0, 0, 0, 0, 0,
	269, 353, 319, 317, 340, 0, 128, 163, 0, 164,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 177, 176,
	178, 114, 179, 180, 341, 326, 285, 344, 261, 276,
	356, 278, 279, 315, 245, 295, 153, 274, 109, 0,
	0, 133, 0, 137, 140, 141, 0, 0, 0, 0,
	342, 292, 0, 264, 238, 271, 239, 262, 289, 125,
	260, 328, 298, 277, 0, 350, 143, 307, 0, 161,
	146, 0, 0, 291, 331, 293, 324, 284, 316, 253,
	306, 345, 275, 312, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 309, 339, 273,
	311, 314, 237, 308, 0, 241, 246, 355, 337, 267,
	268, 0, 0, 0, 0, 0, 0, 0, 290, 294,
	321, 282, 0, 0, 0, 0, 0, 0, 1211, 0,
	265, 0, 305, 0, 0, 0, 248, 243, 288, 0,
	0, 0, 252, 0, 266, 322, 0, 0, 0, 332,
	283, 172, 338, 281, 280, 346, 318, 0, 329, 263,
	272, 119, 270, 159, 313, 170, 111, 335, 330, 303,
	286, 287, 242, 0, 320, 124, 132, 259, 310, 168,
	169, 120, 173, 247, 352, 112, 696, 351, 152, 697,
	167, 336, 304, 300, 244, 334, 302, 299, 139, 127,
	134, 156, 144, 157, 135, 150, 149, 151, 0, 240,
	0, 162, 343, 357, 131, 126, 166, 123, 147, 116,
	110, 250, 117, 118, 122, 121, 0, 138, 145, 148,
	154, 155, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	333, 0, 0, 0, 0, 0, 165, 249, 130, 256,
	254, 257, 325, 255, 296, 297, 347, 348, 349, 323,
	251, 0, 0, 327, 301, 108, 113, 142, 354, 158,
	129, 171, 0, 0, 0, 0, 0, 269, 353, 319,
	317, 340, 0, 128, 163, 0, 164, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 177, 176, 178, 114, 179,
	180, 341, 326, 285, 344, 261, 276, 356, 278, 279,
	315, 245, 295, 153, 274, 109, 0, 0, 133, 0,
	137, 140, 141, 0, 0, 0, 0, 342, 292, 0,
	264, 238, 271, 239, 262, 289, 125, 260, 328, 298,
	277, 0, 350, 143, 307, 0, 161, 146, 0, 0,
	291, 331, 293, 324, 284, 316, 253, 306, 345, 275,
	312, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 309, 339, 273, 311, 314, 237,
	308, 0, 241, 246, 355, 337, 267, 268, 0, 0,
	0, 0, 0, 0, 0, 290, 294, 321, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 305,
	0, 0, 0, 248, 243, 288, 0, 0, 0, 252,
	0, 266, 322, 0, 0, 0, 332, 283, 172, 338,
	281, 280, 346, 318, 0, 329, 263, 272, 119, 270,
	159, 313, 170, 111, 335, 330, 303, 286, 287, 242,
	0, 320, 124, 132, 259, 310, 168, 169, 120, 173,
	247, 352, 112, 234, 351, 152, 233, 167, 336, 304,
	300, 244, 334, 302, 299, 139, 127, 134, 156, 144,
	157, 135, 150, 149, 151, 0, 240, 0, 162, 343,
	357, 131, 126, 166, 123, 147, 116, 110, 250, 117,
	118, 122, 121, 0, 138, 145, 148, 154, 155, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 333, 0, 0,
	0, 0, 0, 165, 249, 130, 256, 254, 257, 325,
	255, 296, 297, 347, 348, 349, 323, 251, 0, 0,
	327, 301, 108, 113, 142, 354, 158, 129, 171, 0,
	0, 0, 0, 0, 269, 353, 319, 317, 340, 0,
	128, 163, 0, 164, 0, 0, 0, 136, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 177, 176, 178, 114, 179, 180, 341, 326,
	285, 344, 261, 276, 356, 278, 279, 315, 245, 295,
	153, 274, 109, 0, 0, 133, 0, 137, 140, 141,
	0, 0, 0, 0, 342, 292, 0, 264, 238, 271,
	239, 262, 289, 125, 260, 328, 298, 277, 0, 350,
	143, 307, 0, 161, 146, 0, 0, 291, 331, 293,
	324, 284, 316, 253, 306, 345, 275, 312, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 309, 339, 273, 311, 314, 237, 308, 0, 241,
	246, 355, 337, 267, 268, 0, 0, 0, 0, 0,
	0, 0, 290, 294, 321, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 305, 0, 0, 0,
	248, 243, 288, 0, 0, 0, 252, 0, 266, 322,
	0, 0, 0, 332, 283, 172, 338, 281, 280, 346,
	318, 0, 329, 263, 272, 119, 270, 159, 313, 170,
	111, 335, 330, 303, 286, 287, 242, 0, 320, 124,
	132, 259, 310, 168, 169, 120, 173, 247, 352, 112,
	696, 351, 152, 697, 167, 336, 304, 300, 244, 334,
	302, 299, 139, 127, 134, 156, 144, 157, 135, 150,
	149, 151, 0, 240, 0, 162, 343, 357, 131, 126,
	166, 123, 147, 116, 110, 250, 117, 118, 122, 121,
	0, 138, 145, 148, 154, 155, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 333, 0, 0, 0, 0, 0,
	165, 249, 130, 256, 254, 257, 325, 255, 296, 297,
	347, 348, 349, 323, 251, 0, 0, 327, 301, 108,
	113, 142, 354, 158, 129, 171, 0, 0, 0, 0,
	0, 269, 353, 319, 317, 340, 0, 128, 163, 0,
	164, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 177,
	176, 178, 114, 179, 180, 341, 326, 285, 344, 261,
	276, 356, 278, 279, 315, 245, 295, 153, 274, 109,
	0, 0, 133, 0, 137, 140, 141, 0, 0, 0,
	0, 342, 292, 0, 264, 238, 271, 239, 262, 289,
	125, 260, 328, 298, 277, 0, 350, 143, 307, 0,
	161, 146, 0, 0, 291, 331, 293, 324, 284, 316,
	253, 306, 345, 275, 312, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 309, 339,
	273, 311, 314, 237, 308, 0, 241, 246, 355, 337,
	267, 268, 0, 0, 0, 0, 0, 0, 0, 290,
	294, 321, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 305, 0, 0, 0, 248, 243, 288,
	0, 0, 0, 252, 0, 266, 322, 0, 0, 0,
	332, 283, 172, 338, 281, 280, 346, 318, 0, 329,
	263, 272, 119, 270, 159, 313, 170, 111, 335, 330,
	303, 286, 287, 242, 0, 320, 124, 132, 259, 310,
	168, 169, 120, 173, 247, 352, 112, 696, 351, 152,
	697, 167, 336, 304, 300, 244, 334, 302, 299, 139,
	127, 134, 156, 144, 157, 135, 150, 149, 151, 0,
	240, 0, 162, 343, 357, 131, 126, 166, 123, 147,
	116, 110, 250, 117, 118, 122, 121, 0, 138, 145,
	148, 154, 155, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 333, 0, 0, 0, 0, 0, 165, 249, 130,
	256, 254, 257, 325, 255, 296, 297, 347, 348, 349,
	323, 251, 0, 0, 327, 301, 108, 113, 142, 354,
	158, 129, 171, 0, 0, 0, 0, 0, 269, 353,
	319, 317, 340, 0, 128, 163, 0, 164, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 177, 176, 178, 114,
	179, 180, 341, 326, 285, 344, 261, 276, 356, 278,
	279, 315, 245, 295, 153, 274, 109, 0, 0, 133,
	0, 137, 140, 141, 0, 0, 0, 0, 342, 292,
	0, 264, 238, 271, 239, 262, 289, 125, 260, 328,
	298, 277, 0, 350, 143, 307, 0, 161, 146, 0,
	0, 291, 331, 293, 324, 284, 316, 253, 306, 345,
	275, 312, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 309, 339, 273, 311, 314,
	237, 308, 0, 241, 246, 355, 337, 267, 268, 0,
	0, 0, 0, 0, 0, 0, 290, 294, 321, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	305, 0, 0, 0, 248, 243, 288, 0, 0, 0,
	252, 0, 266, 322, 0, 0, 0, 332, 283, 172,
	338, 281, 280, 346, 318, 0, 329, 263, 272, 119,
	270, 159, 313, 170, 111, 335, 330, 303, 286, 287,
	242, 0, 320, 124, 132, 259, 310, 168, 169, 120,
	173, 247, 352, 112, 696, 351, 152, 697, 167, 336,
	304, 300, 244, 334, 302, 299, 139, 127, 134, 156,
	144, 157, 135, 150, 149, 151, 0, 240, 0, 162,
	343, 357, 131, 126, 166, 123, 147, 116, 110, 250,
	117, 118, 122, 121, 0, 138, 145, 148, 154, 155,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 333, 0,
	0, 0, 0, 0, 165, 249, 130, 256, 254, 257,
	325, 255, 296, 297, 347, 348, 349, 323, 251, 0,
	0, 327, 301, 108, 113, 142, 354, 158, 129, 171,
	0, 0, 0, 0, 0, 269, 353, 319, 317, 340,
	0, 128, 163, 0, 164, 0, 0, 0, 136, 0,
	153, 0, 109, 0, 0, 133, 0, 137, 140, 141,
	0, 174, 175, 177, 176, 178, 114, 179, 180, 427,
	0, 0, 0, 125, 426, 0, 0, 0, 0, 463,
	143, 0, 0, 161, 146, 0, 0, 0, 0, 456,
	457, 0, 0, 0, 0, 0, 0, 710, 53, 0,
	0, 476, 444, 443, 445, 446, 447, 448, 0, 0,
	115, 449, 450, 451, 711, 0, 0, 424, 437, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	434, 435, 0, 849, 0, 0, 474, 0, 436, 0,
	0, 433, 438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 472, 0,
	848, 0, 0, 0, 0, 119, 0, 159, 0, 170,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	132, 0, 0, 168, 169, 120, 173, 851, 0, 112,
	0, 0, 152, 0, 167, 0, 847, 0, 0, 0,
	0, 0, 139, 127, 134, 156, 144, 157, 135, 150,
	149, 151, 0, 0, 0, 162, 0, 0, 131, 126,
	166, 123, 147, 116, 110, 0, 117, 118, 122, 121,
	0, 138, 145, 148, 154, 155, 160, 0, 0, 0,
	0, 0, 0, 844, 842, 838, 0, 841, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 130, 464, 470, 473, 0, 471, 468, 469,
	467, 466, 465, 475, 458, 459, 461, 0, 460, 108,
	113, 142, 0, 158, 129, 171, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 163, 0,
	164, 0, 0, 0, 136, 0, 153, 0, 109, 845,
	0, 133, 0, 137, 140, 141, 0, 174, 175, 177,
	176, 178, 114, 179, 180, 427, 0, 0, 0, 125,
	426, 0, 0, 0, 0, 463, 143, 0, 0, 161,
	146, 0, 0, 0, 0, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 476, 444, 443,
	445, 446, 447, 448, 0, 0, 115, 449, 450, 451,
	840, 0, 0, 424, 437, 0, 462, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 0, 0, 434, 435, 913, 0,
	0, 0, 474, 0, 436, 0, 0, 433, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 472, 0, 0, 0, 0, 0,
	0, 119, 0, 159, 0, 170, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 132, 0, 0, 168,
	169, 120, 173, 0, 0, 112, 0, 0, 152, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 139, 127,
	134, 156, 144, 157, 135, 150, 149, 151, 0, 0,
	0, 162, 0, 0, 131, 126, 166, 123, 147, 116,
	110, 0, 117, 118, 122, 121, 0, 138, 145, 148,
	154, 155, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 130, 464,
	470, 473, 0, 471, 468, 469, 467, 466, 465, 475,
	458, 459, 461, 0, 460, 108, 113, 142, 0, 158,
	129, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 163, 0, 164, 0, 0, 0,
	136, 0, 153, 0, 109, 0, 0, 133, 0, 137,
	140, 141, 0, 174, 175, 177, 176, 178, 114, 179,
	180, 427, 0, 0, 0, 125, 426, 0, 0, 0,
	0, 463, 143, 0, 0, 161, 146, 0, 0, 0,
	0, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 418, 476, 444, 443, 445, 446, 447, 448,
	0, 0, 115, 449, 450, 451, 0, 0, 0, 424,
	437, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 434, 435, 0, 0, 0, 0, 474, 0,
	436, 0, 0, 433, 438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	472, 0, 0, 0, 0, 0, 0, 119, 0, 159,
	0, 170, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 132, 0, 0, 168, 169, 120, 173, 0,
	0, 112, 0, 0, 152, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 139, 127, 134, 156, 144, 157,
	135, 150, 149, 151, 0, 0, 0, 162, 0, 0,
	131, 126, 166, 123, 147, 116, 110, 0, 117, 118,
	122, 121, 0, 138, 145, 148, 154, 155, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 130, 464, 470, 473, 0, 471,
	468, 469, 467, 466, 465, 475, 458, 459, 461, 0,
	460, 108, 113, 142, 0, 158, 129, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 0, 128,
	163, 0, 164, 0, 0, 0, 136, 0, 153, 0,
	109, 0, 0, 133, 0, 137, 140, 141, 0, 174,
	175, 177, 176, 178, 114, 179, 180, 427, 0, 0,
	0, 125, 426, 0, 0, 0, 0, 463, 143, 0,
	0, 161, 146, 0, 0, 0, 0, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 476,
	444, 443, 445, 446, 447, 448, 0, 0, 115, 449,
	450, 451, 0, 0, 0, 424, 437, 0, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 434, 435,
	0, 0, 0, 0, 474, 0, 436, 0, 0, 433,
	438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 472, 0, 0, 0,
	0, 0, 0, 119, 0, 159, 0, 170, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 132, 0,
	0, 168, 169, 120, 173, 0, 0, 112, 0, 0,
	152, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	139, 127, 134, 156, 144, 157, 135, 150, 149, 151,
	0, 0, 0, 162, 0, 0, 131, 126, 166, 123,
	147, 116, 110, 0, 117, 118, 122, 121, 0, 138,
	145, 148, 154, 155, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	130, 464, 470, 473, 0, 471, 468, 469, 467, 466,
	465, 475, 458, 459, 461, 0, 460, 108, 113, 142,
	0, 158, 129, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 163, 0, 164, 0,
	0, 0, 136, 0, 153, 0, 109, 0, 0, 133,
	0, 137, 140, 141, 0, 174, 175, 177, 176, 178,
	114, 179, 180, 427, 0, 0, 0, 125, 426, 0,
	0, 0, 0, 463, 143, 0, 0, 161, 146, 0,
	0, 0, 0, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 476, 444, 443, 445, 446,
	447, 448, 0, 0, 115, 449, 450, 451, 0, 0,
	0, 424, 437, 0, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 434, 435, 0, 0, 0, 0,
	474, 0, 436, 0, 0, 433, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 119,
	0, 159, 0, 170, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 132, 0, 0, 168, 169, 120,
	173, 0, 0, 112, 0, 0, 152, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 139, 127, 134, 156,
	144, 157, 135, 150, 149, 151, 0, 0, 0, 162,
	0, 0, 131, 126, 166, 123, 147, 116, 110, 0,
	117, 118, 122, 121, 0, 138, 145, 148, 154, 155,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 130, 464, 470, 473,
	0, 471, 468, 469, 467, 466, 465, 475, 458, 459,
	461, 0, 460, 108, 113, 142, 0, 158, 129, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 163, 0, 164, 0, 0, 153, 136, 109,
	0, 0, 133, 0, 137, 140, 141, 0, 0, 0,
	0, 174, 175, 177, 176, 178, 114, 179, 180, 0,
	125, 0, 0, 0, 0, 0, 463, 143, 0, 0,
	161, 146, 0, 0, 0, 0, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 476, 444,
	443, 445, 446, 447, 448, 0, 0, 115, 449, 450,
	451, 0, 0, 0, 0, 437, 0, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 434, 435, 0,
	0, 0, 0, 474, 0, 436, 0, 0, 433, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 472, 0, 0, 0, 0,
	0, 0, 119, 0, 159, 0, 170, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 132, 0, 0,
	168, 169, 120, 173, 0, 0, 112, 0, 0, 152,
	0, 167, 0, 0, 0, 0, 0, 0, 0, 139,
	127, 134, 156, 144, 157, 135, 150, 149, 151, 0,
	0, 0, 162, 0, 0, 131, 126, 166, 123, 147,
	116, 110, 0, 117, 118, 122, 121, 0, 138, 145,
	148, 154, 155, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 130,
	464, 470, 473, 0, 471, 468, 469, 467, 466, 465,
	475, 458, 459, 461, 0, 460, 108, 113, 142, 0,
	158, 129, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 163, 0, 164, 0, 0,
	0, 136, 0, 0, 153, 0, 109, 0, 0, 133,
	0, 137, 140, 141, 174, 175, 177, 176, 178, 114,
	179, 180, 1085, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 161, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 235, 0, 1087, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 600,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 159, 0, 170, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 132, 0, 0, 168, 169, 120,
	173, 0, 0, 112, 0, 0, 152, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 139, 127, 134, 156,
	144, 157, 135, 150, 149, 151, 0, 0, 0, 162,
	0, 0, 131, 126, 166, 123, 147, 116, 110, 0,
	117, 118, 122, 121, 0, 138, 145, 148, 154, 155,
	160, 0, 0, 0, 0, 153, 0, 109, 0, 778,
	777, 0, 137, 140, 141, 0, 0, 776, 0, 0,
	775, 0, 0, 0, 165, 0, 130, 0, 125, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 161, 146,
	0, 0, 0, 108, 113, 142, 0, 158, 129, 171,
	0, 0, 0, 0, 0, 0, 366, 0, 0, 0,
	0, 128, 163, 0, 164, 115, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 177, 176, 178, 114, 179, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 774,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 159, 0, 170, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 132, 0, 0, 168, 169,
	120, 173, 0, 0, 112, 0, 0, 152, 0, 167,
	0, 0, 0, 0, 0, 0, 0, 139, 127, 134,
	156, 144, 157, 135, 150, 149, 151, 0, 0, 0,
	162, 0, 0, 131, 126, 166, 123, 147, 116, 110,
	0, 117, 118, 122, 121, 24, 138, 145, 148, 154,
	155, 160, 0, 0, 0, 0, 153, 0, 109, 0,
	0, 133, 0, 137, 140, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 130, 0, 125,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 161,
	146, 0, 0, 0, 108, 113, 142, 0, 158, 129,
	171, 0, 0, 0, 53, 0, 0, 106, 0, 0,
	0, 0, 128, 163, 0, 164, 115, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 177, 176, 178, 114, 179, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 159, 0, 170, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 132, 0, 0, 168,
	169, 120, 173, 0, 0, 112, 0, 0, 152, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 139, 127,
	134, 156, 144, 157, 135, 150, 149, 151, 0, 0,
	0, 162, 0, 0, 131, 126, 166, 123, 147, 116,
	110, 0, 117, 118, 122, 121, 0, 138, 145, 148,
	154, 155, 160, 0, 0, 0, 0, 153, 0, 109,
	0, 0, 133, 0, 137, 140, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 165, 0, 130, 0,
	125, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	161, 146, 0, 0, 0, 108, 113, 142, 0, 158,
	129, 171, 0, 0, 0, 0, 0, 0, 106, 0,
	1321, 0, 0, 128, 163, 0, 164, 115, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 177, 176, 178, 114, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 159, 0, 170, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 132, 0, 0,
	168, 169, 120, 173, 0, 0, 112, 0, 0, 152,
	0, 167, 0, 0, 0, 0, 0, 0, 0, 139,
	127, 134, 156, 144, 157, 135, 150, 149, 151, 0,
	0, 0, 162, 0, 0, 131, 126, 166, 123, 147,
	116, 110, 0, 117, 118, 122, 121, 24, 138, 145,
	148, 154, 155, 160, 0, 0, 0, 0, 153, 0,
	109, 0, 0, 133, 0, 137, 140, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 130,
	0, 125, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 161, 146, 0, 0, 0, 108, 113, 142, 0,
	158, 129, 171, 0, 0, 0, 53, 0, 0, 235,
	0, 0, 0, 0, 128, 163, 0, 164, 115, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 177, 176, 178, 114,
	179, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 159, 0, 170, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 132, 0,
	0, 168, 169, 120, 173, 0, 0, 112, 0, 0,
	152, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	139, 127, 134, 156, 144, 157, 135, 150, 149, 151,
	0, 0, 0, 162, 0, 0, 131, 126, 166, 123,
	147, 116, 110, 0, 117, 118, 122, 121, 0, 138,
	145, 148, 154, 155, 160, 0, 0, 0, 0, 0,
	153, 0, 109, 0, 0, 133, 0, 137, 140, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	130, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 161, 146, 0, 0, 108, 113, 142,
	0, 158, 129, 171, 0, 0, 0, 0, 0, 0,
	0, 235, 0, 0, 678, 128, 163, 679, 164, 0,
	115, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 177, 176, 178,
	114, 179, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 159, 0, 170,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	132, 0, 0, 168, 169, 120, 173, 0, 0, 112,
	0, 0, 152, 0, 167, 0, 0, 0, 0, 0,
	0, 0, 139, 127, 134, 156, 144, 157, 135, 150,
	149, 151, 0, 0, 0, 162, 0, 0, 131, 126,
	166, 123, 147, 116, 110, 0, 117, 118, 122, 121,
	0, 138, 145, 148, 154, 155, 160, 0, 0, 0,
	0, 153, 0, 109, 0, 0, 133, 0, 137, 140,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 130, 0, 125, 506, 0, 0, 0, 0,
	0, 143, 0, 0, 161, 146, 0, 0, 0, 108,
	113, 142, 0, 158, 129, 171, 0, 0, 0, 0,
	0, 0, 235, 0, 505, 0, 0, 128, 163, 0,
	164, 115, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 177,
	176, 178, 114, 179, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 159, 0,
	170, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 132, 0, 0, 168, 169, 120, 173, 0, 0,
	112, 0, 0, 152, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 139, 127, 134, 156, 144, 157, 135,
	150, 149, 151, 0, 0, 0, 162, 0, 0, 131,
	126, 166, 123, 147, 116, 110, 0, 117, 118, 122,
	121, 0, 138, 145, 148, 154, 155, 160, 0, 0,
	0, 0, 153, 0, 109, 0, 0, 133, 0, 137,
	140, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 130, 0, 125, 0, 0, 0, 0,
	0, 0, 143, 0, 0, 161, 146, 0, 0, 0,
	108, 113, 142, 0, 158, 129, 171, 0, 0, 0,
	0, 0, 0, 106, 0, 1321, 0, 0, 128, 163,
	0, 164, 115, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	177, 176, 178, 114, 179, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 159,
	0, 170, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 132, 0, 0, 168, 169, 120, 173, 0,
	0, 112, 0, 0, 152, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 139, 127, 134, 156, 144, 157,
	135, 150, 149, 151, 0, 0, 0, 162, 0, 0,
	131, 126, 166, 123, 147, 116, 110, 0, 117, 118,
	122, 121, 0, 138, 145, 148, 154, 155, 160, 0,
	0, 0, 0, 153, 0, 109, 0, 0, 133, 0,
	137, 140, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 130, 0, 125, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 161, 146, 0, 0,
	0, 108, 113, 142, 0, 158, 129, 171, 0, 0,
	0, 53, 0, 0, 106, 0, 0, 0, 0, 128,
	163, 0, 164, 115, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	175, 177, 176, 178, 114, 179, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	159, 0, 170, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 132, 0, 0, 168, 169, 120, 173,
	0, 0, 112, 0, 0, 152, 0, 167, 0, 0,
	0, 0, 0, 0, 0, 139, 127, 134, 156, 144,
	157, 135, 150, 149, 151, 0, 0, 0, 162, 0,
	0, 131, 126, 166, 123, 147, 116, 110, 0, 117,
	118, 122, 121, 0, 138, 145, 148, 154, 155, 160,
	0, 0, 0, 0, 153, 0, 109, 0, 0, 133,
	0, 137, 140, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 130, 0, 125, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 161, 146, 0,
	0, 0, 108, 113, 142, 0, 158, 129, 171, 0,
	0, 0, 0, 0, 0, 235, 0, 1087, 0, 0,
	128, 163, 0, 164, 115, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 175, 177, 176, 178, 114, 179, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 159, 0, 170, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 132, 0, 0, 168, 169, 120,
	173, 0, 0, 112, 0, 0, 152, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 139, 127, 134, 156,
	144, 157, 135, 150, 149, 151, 0, 0, 0, 162,
	0, 0, 131, 126, 166, 123, 147, 116, 110, 0,
	117, 118, 122, 121, 0, 138, 145, 148, 154, 155,
	160, 0, 0, 0, 0, 153, 0, 109, 0, 0,
	133, 0, 137, 140, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 130, 489, 125, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 161, 146,
	0, 0, 0, 108, 113, 142, 0, 158, 129, 171,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 128, 163, 0, 164, 115, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 175, 177, 176, 178, 114, 179, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 159, 0, 170, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 132, 0, 0, 168, 169,
	120, 173, 0, 0, 112, 0, 0, 152, 0, 167,
	0, 0, 0, 0, 0, 0, 0, 139, 127, 134,
	156, 144, 157, 135, 150, 149, 151, 0, 0, 0,
	162, 0, 0, 131, 126, 166, 123, 147, 116, 110,
	0, 117, 118, 122, 121, 0, 138, 145, 148, 154,
	155, 160, 0, 0, 0, 0, 153, 0, 109, 0,
	0, 133, 0, 137, 140, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 130, 0, 125,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 161,
	146, 0, 0, 0, 108, 113, 142, 0, 158, 129,
	171, 0, 0, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 128, 163, 0, 164, 115, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 175, 177, 176, 178, 114, 179, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 159, 0, 170, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 132, 0, 0, 168,
	169, 120, 173, 0, 0, 112, 0, 0, 152, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 139, 127,
	134, 156, 144, 157, 135, 150, 149, 151, 0, 0,
	0, 162, 0, 0, 131, 126, 166, 123, 147, 116,
	110, 0, 117, 118, 122, 121, 0, 138, 145, 148,
	154, 155, 160, 0, 0, 0, 0, 153, 0, 109,
	0, 0, 133, 0, 137, 140, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 130, 0,
	125, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	161, 146, 0, 0, 0, 108, 113, 142, 0, 158,
	129, 171, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 128, 163, 0, 164, 115, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 175, 177, 176, 178, 114, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 159, 0, 170, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 132, 0, 0,
	168, 169, 120, 173, 0, 0, 112, 0, 0, 152,
	0, 167, 0, 0, 0, 0, 0, 0, 0, 139,
	127, 134, 156, 144, 157, 135, 150, 149, 151, 0,
	0, 0, 162, 0, 0, 131, 126, 166, 123, 147,
	116, 110, 0, 117, 118, 122, 121, 0, 138, 145,
	148, 154, 155, 160, 0, 0, 0, 0, 153, 0,
	109, 0, 0, 133, 0, 137, 140, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 130,
	0, 125, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 161, 146, 0, 0, 0, 108, 113, 142, 0,
	158, 129, 171, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 128, 163, 0, 164, 115, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 175, 177, 176, 178, 114,
	179, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 159, 0, 170, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 132, 0,
	0, 168, 169, 120, 173, 0, 0, 112, 0, 0,
	152, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	139, 127, 134, 156, 144, 157, 135, 150, 149, 151,
	0, 0, 0, 162, 0, 0, 131, 126, 166, 123,
	147, 116, 110, 0, 117, 118, 122, 121, 0, 138,
	145, 148, 154, 155, 160, 0, 0, 0, 0, 153,
	0, 109, 0, 0, 133, 0, 137, 140, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	130, 0, 125, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 161, 146, 0, 0, 0, 108, 113, 142,
	0, 158, 129, 171, 0, 0, 0, 0, 0, 0,
	366, 0, 0, 0, 0, 128, 163, 0, 164, 115,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 175, 177, 176, 178,
	114, 179, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 159, 0, 170, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 132,
	0, 0, 168, 169, 120, 173, 0, 0, 112, 0,
	0, 152, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 139, 127, 134, 156, 144, 157, 135, 150, 149,
	151, 0, 0, 0, 162, 0, 0, 131, 126, 166,
	123, 147, 116, 110, 0, 117, 118, 122, 121, 0,
	138, 145, 148, 154, 155, 160, 0, 0, 0, 0,
	153, 0, 109, 0, 0, 133, 0, 137, 140, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 130, 0, 125, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 161, 146, 0, 0, 0, 108, 113,
	142, 0, 158, 129, 171, 0, 0, 0, 0, 0,
	0, 1172, 0, 0, 0, 0, 128, 163, 0, 164,
	115, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 175, 177, 176,
	178, 114, 179, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 159, 0, 170,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	132, 0, 0, 168, 169, 120, 173, 0, 0, 112,
	0, 0, 152, 0, 167, 0, 0, 0, 0, 0,
	0, 0, 139, 127, 134, 156, 144, 157, 135, 150,
	149, 151, 0, 0, 0, 162, 0, 0, 131, 126,
	166, 123, 147, 116, 110, 0, 117, 118, 122, 121,
	0, 138, 145, 148, 154, 155, 160, 0, 0, 0,
	0, 153, 0, 109, 0, 0, 133, 0, 137, 140,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 130, 0, 125, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 161, 146, 0, 0, 0, 108,
	113, 142, 0, 158, 129, 171, 0, 0, 0, 0,
	0, 0, 563, 0, 0, 0, 0, 128, 163, 0,
	164, 115, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 175, 177,
	176, 178, 114, 179, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 159, 0,
	170, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 132, 0, 0, 168, 169, 120, 173, 0, 0,
	112, 0, 0, 152, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 139, 127, 134, 156, 144, 157, 135,
	150, 149, 151, 0, 0, 0, 162, 0, 0, 131,
	126, 166, 123, 147, 116, 110, 0, 117, 118, 122,
	121, 0, 138, 145, 148, 154, 155, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 113, 142, 0, 158, 129, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 163,
	0, 164, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	177, 176, 178, 114, 179, 180,
}
var yyPact = [...]int{

	122, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1010, 1050, -1000, -1000, -1000, -1000, -1000, 775,
	228, 71, 11, 114, 113, 1393, 110, 9181, -1000, -1000,
	-71, -1000, -168, -1000, -1000, -175, -1000, -1000, -1000, -1000,
	764, -1000, -1000, -1000, -1000, -1000, 969, 997, 809, 938,
	852, -1000, 71, 9181, 1035, 2331, -129, 9382, 74, 89,
	87, 84, 74, -1000, -1000, -1000, 92, -1000, 72, 624,
	72, 9181, 9181, -84, 27, -1000, -1000, -76, 347, -1000,
	-1000, -1000, -88, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9181, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 481, -1000, -1000, -1000, -1000, -1000, -1000,
	753, 753, -1000, 9181, -1000, -1000, -187, -1000, -1000, -1000,
	-1000, 499, 916, 6037, 6037, 1010, -1000, 764, -1000, -1000,
	-1000, 904, -1000, -1000, 339, 8578, 913, 158, 9181, 748,
	-1000, -1000, -183, 2925, -1000, -1000, -1000, -1000, 305, 7774,
	7774, -1000, -1000, -1000, 911, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 995, 980, 727, -1000, 153, -1000, -1000, 9784, 319,
	621, 615, 612, 9181, 9181, 9181, 928, 812, 9784, -1000,
	-1000, 1020, 9181, 9181, -1000, -1000, 347, 347, -1000, -1000,
	9181, -1000, -1000, -1000, -1000, -1000, 347, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6037, -1000,
	-1000, 190, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1046, 261, 351, -1000, 6037, 2160, 753, 753, -1000, -1000,
	143, -1000, -1000, 6300, 6300, 6300, 6300, 6300, 6300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 753, 150, -1000, 5771, 753, 753, 753, 753,
	753, 753, 6037, 753, 753, 753, 753, 753, 753, 753,
	753, 753, 753, 753, 753, 753, -1000, -1000, 744, -1000,
	348, 969, 499, 852, 7573, 825, -1000, -1000, 756, 9181,
	-1000, 8980, 4707, 1018, 2628, -1000, 741, 739, -179, -190,
	-1000, -183, 4973, -1000, -1000, -1000, -1000, 162, -1000, 753,
	88, 1959, 6768, 626, -24, -1000, -1000, -1000, 759, -1000,
	759, 759, 759, 759, 12, 12, 12, 12, -1000, -1000,
	-1000, -1000, -1000, 785, 778, -1000, 759, 759, 759, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 777, 777, 777,
	763, 763, 915, -1000, -1000, 927, 811, 808, 796, -1000,
	5069, 738, -1000, -1000, 9181, -1000, 969, -91, -1000, -1000,
	311, 9181, 9181, 347, -1000, -1000, -1000, -1000, 666, 325,
	-1000, 9181, -1000, -1000, -1000, -1000, -1000, -1000, 859, 6037,
	6037, 361, 6037, 6037, 265, 6300, 394, 292, 6300, 6300,
	6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300,
	6300, 6300, 6300, 418, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 609, -1000, 764, 462, 462, 156, 156, 156,
	156, 156, 1592, 1942, 4410, 499, 5771, 5239, 5239, 6037,
	6037, 5239, 934, 282, 325, 8779, -1000, 499, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5239, 5239, 5239, 5239, 6037,
	-1000, -1000, -1000, 916, -1000, 934, 1034, -1000, 866, 865,
	5239, -1000, 792, 8980, 753, -1000, 7371, -1000, 731, -1000,
	281, -1000, 136, -1000, -1000, -1000, -1000, -1000, 1010, 6037,
	-1000, 3816, -1000, -181, -1000, -177, -193, -1000, -1000, -1000,
	-1000, -1000, 325, -1000, 602, 9382, 753, 753, -1000, 1959,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 275, 275, 59, 275, 275,
	275, 275, 275, -46, -47, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, -1000, -1000,
	-1000, 591, 220, 183, -1000, -1000, -1000, -1000, 949, -1000,
	626, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 331, 102, -1000, 946, -1000, 945, 548,
	1042, 392, 160, 147, -33, -1000, -1000, 479, 12, 12,
	-1000, -1000, -1000, 891, -1000, -1000, -1000, 536, 536, -1000,
	-1000, -1000, -1000, 475, -1000, -1000, -1000, 474, -1000, -1000,
	915, -1000, 69, -1000, 9181, 9181, 9181, -1000, 330, 279,
	77, 64, 52, 47, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9181, -1000, -1000, 535, -1000, -1000, -1000, 511,
	6037, -1000, 347, 1018, -1000, 6037, -1000, -1000, 856, 265,
	283, -1000, -1000, 387, -1000, -1000, 325, 325, 490, -1000,
	-1000, -1000, -1000, 394, 6300, 6300, 6300, 818, 490, 1703,
	929, 837, 156, 370, 370, 180, 180, 180, 180, 180,
	502, 502, -1000, -1000, -1000, 499, -1000, -1000, -1000, 499,
	5239, 735, -1000, -1000, 6567, 131, 753, 117, -1000, -1000,
	499, 596, 596, 278, 393, 596, 5239, 332, -1000, 6037,
	499, -1000, 596, 499, 596, 596, -1000, -1000, 9181, -1000,
	-1000, -1000, -1000, 730, -1000, 917, 661, 670, -1000, -1000,
	5505, 499, 655, 112, 1010, 8980, 6037, 4410, 969, 325,
	-1000, -1000, -1000, -199, -196, -1000, -1000, 499, 9382, 9382,
	-1000, 507, -1000, 392, 275, 275, -1000, 876, 875, 473,
	472, 471, 498, 495, 275, 275, 467, 494, 600, 430,
	427, 423, 496, 492, 643, 456, 433, 402, 9583, 70,
	-1000, 591, -1000, 943, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 776, -1000, -1000, -1000, -1000, -1000,
	-1000, -92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 652, -1000, -1000, 286, 642, -1000, 634,
	729, 629, -1000, 275, 275, -1000, 753, 753, 753, -1000,
	9181, -1000, -1000, -1000, 598, 10, 775, 597, 9382, -1000,
	-1000, -1000, -1000, 325, 311, -1000, 325, -1000, -1000, -1000,
	-1000, -1000, -1000, 818, 490, 1400, -1000, 6300, 6300, -1000,
	-1000, 596, 5239, -1000, -1000, 8377, -1000, -1000, 3519, 5239,
	4113, -1000, -1000, -1000, 263, 418, 263, -117, 747, 309,
	-1000, 6037, 307, -1000, -1000, -1000, -1000, -1000, -1000, 1018,
	8176, 941, -1000, 753, -1000, -1000, 760, 8779, 8779, 969,
	-1000, 325, -1000, -1000, -1000, -1000, -1000, -1000, 499, 499,
	-1000, -1000, 392, 392, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 489, 488, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 769, -1000, 960, 768, 70, 591,
	401, -1000, -1000, -1000, -1000, -1000, 487, -1000, 386, -1000,
	380, 580, 231, 8779, 8779, 8779, -1000, -1000, -1000, 874,
	-1000, -1000, -1000, -1000, -1000, 6300, 490, 490, -1000, -1000,
	-1000, -1000, 101, 499, -1000, 499, 759, 759, -1000, 759,
	763, -1000, 759, 31, 759, 26, 499, 499, 753, -114,
	-1000, 325, 6037, 1016, 698, 791, -1000, -1000, -1000, 930,
	6969, 7170, 1039, -1000, 753, -1000, 764, 97, -1000, -1000,
	753, -152, -1000, -1000, -1000, -1000, 8779, -1000, -1000, -1000,
	-1000, 8779, 762, 70, -1000, 650, -1000, 638, 585, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 588, -1000, 759, 588,
	588, 574, 490, 3222, -1000, -1000, -1000, 107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6300, 499, 486, 325,
	1012, 976, 8176, 8176, 8176, 8176, -1000, 841, 834, -1000,
	827, 823, 833, 9181, -1000, 584, 6969, 141, -1000, 7975,
	-1000, -1000, 8980, 670, 499, 8779, -149, -1000, 377, 579,
	573, 8779, 757, -1000, -1000, -1000, -1000, 8779, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 179, -1000, -1000, -1000, 6037,
	6037, 791, 790, 618, -1000, -1000, -1000, -1000, 830, -1000,
	829, -1000, -1000, -1000, -1000, -1000, 82, 81, 80, -1000,
	668, -1000, -1000, 571, -1000, 556, -1000, -1000, -1000, 564,
	8779, 171, -1000, 93, 428, 499, 86, -127, 325, 627,
	6037, 6037, -1000, -1000, 753, 753, 753, -149, -1000, 864,
	91, 91, -1000, 562, 894, -1000, -1000, -1000, 275, 484,
	973, 894, -1000, -1000, 957, 894, -1000, -1000, 855, -121,
	-144, 325, 325, 8779, 8779, 8779, -1000, 257, -1000, 275,
	-1000, 483, 954, 91, -1000, -1000, 275, 275, 358, -1000,
	-1000, -1000, -1000, 554, -1000, 850, -1000, 560, -1000, 560,
	560, 753, 355, -1000, 552, 91, 580, 580, -1000, -1000,
	-123, -1000, 8779, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-133, -1000, -146, -1000,
}
var yyPgo = [...]int{

	0, 23, 47, 1286, 1285, 1283, 24, 976, 1282, 1281,
	1280, 1278, 1277, 1276, 1275, 52, 899, 1274, 1272, 1271,
	1270, 1269, 1267, 1264, 1263, 1260, 1258, 1256, 1255, 1254,
	1253, 1252, 171, 1251, 1250, 1249, 41, 1248, 67, 1247,
	77, 1245, 1244, 1243, 34, 151, 40, 33, 208, 1240,
	30, 13, 25, 1239, 1237, 12, 1236, 61, 1235, 1234,
	57, 76, 1233, 1232, 35, 1231, 1230, 1229, 8, 29,
	1228, 62, 1227, 1225, 87, 135, 1224, 1223, 1222, 1221,
	1220, 1219, 56, 15, 20, 1, 26, 1218, 18, 10,
	1217, 54, 1216, 1215, 1212, 1211, 32, 1203, 90, 1201,
	46, 85, 1197, 45, 14, 48, 1193, 1192, 74, 89,
	78, 73, 1191, 86, 1190, 1189, 156, 1188, 1187, 1186,
	873, 1185, 419, 418, 1184, 55, 1182, 1181, 36, 0,
	4, 16, 28, 1180, 49, 989, 37, 19, 1179, 79,
	1178, 1496, 31, 81, 27, 1175, 1174, 1173, 1172, 1171,
	1170, 1168, 191, 1163, 1160, 1158, 1157, 1156, 1155, 1154,
	1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 59,
	1144, 1143, 1142, 1137, 1136, 1135, 1134, 1133, 1132, 1128,
	1121, 21, 1120, 1117, 1113, 43, 58, 22, 69, 1110,
	1109, 1106, 75, 17, 1104, 1103, 1102, 1092, 60, 42,
	1089, 65, 44, 39, 1088, 1087, 1085, 71, 6, 11,
	1084, 9, 1083, 1082, 3, 5, 1081, 1080, 1079, 1077,
	1076, 1075, 1073, 7, 1070, 1068, 63, 1065, 1064, 72,
	2, 1061, 1060, 1058, 1057, 50, 80, 1056, 119,
}
var yyR1 = [...]int{

	0, 233, 234, 234, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 17, 17, 18,
	18, 19, 19, 35, 35, 20, 21, 22, 22, 231,
	231, 230, 157, 157, 7, 7, 23, 23, 23, 23,
	23, 232, 232, 232, 232, 232, 232, 222, 222, 223,
	223, 217, 215, 215, 212, 212, 219, 219, 210, 210,
	216, 216, 213, 213, 211, 211, 218, 218, 227, 227,
	228, 228, 229, 229, 229, 188, 188, 187, 187, 186,
	186, 186, 189, 189, 189, 26, 203, 205, 205, 206,
	206, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 159, 161, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 174,
	175, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 177, 177, 178, 178, 179,
	179, 180, 180, 162, 185, 185, 160, 156, 158, 204,
	204, 204, 199, 134, 134, 145, 145, 145, 145, 224,
	224, 225, 225, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 148, 148, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 147, 147, 147, 147, 147, 149,
	149, 149, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 151,
	151, 151, 151, 151, 151, 151, 151, 198, 198, 152,
	152, 192, 192, 193, 193, 193, 190, 190, 191, 191,
	194, 194, 153, 153, 153, 153, 153, 153, 37, 36,
	36, 36, 118, 118, 118, 195, 181, 181, 181, 155,
	182, 182, 183, 183, 183, 184, 184, 184, 196, 196,
	197, 197, 154, 200, 200, 200, 200, 6, 6, 220,
	220, 220, 220, 214, 214, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 5, 5, 202, 202, 201, 201,
	209, 209, 208, 24, 24, 24, 24, 24, 24, 24,
	24, 25, 25, 25, 65, 65, 8, 27, 9, 10,
	127, 127, 127, 11, 12, 12, 12, 12, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 43, 43, 63, 63,
	63, 60, 60, 61, 61, 62, 62, 59, 59, 64,
	64, 64, 31, 29, 30, 30, 30, 30, 237, 32,
	33, 33, 34, 34, 34, 40, 40, 40, 38, 38,
	39, 39, 46, 46, 45, 45, 47, 47, 47, 47,
	133, 133, 133, 132, 132, 49, 49, 50, 50, 51,
	51, 52, 52, 52, 66, 53, 53, 53, 53, 140,
	140, 138, 138, 138, 137, 137, 54, 54, 54, 54,
	55, 55, 55, 55, 56, 56, 58, 58, 57, 57,
	67, 67, 67, 67, 68, 68, 69, 69, 48, 48,
	48, 48, 48, 48, 48, 121, 121, 71, 71, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 81,
	81, 81, 81, 81, 81, 72, 72, 72, 72, 72,
	72, 72, 44, 44, 82, 82, 82, 88, 83, 83,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	79, 79, 79, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 78, 78, 78, 78, 78, 78, 78, 78,
	238, 238, 80, 80, 80, 80, 41, 41, 41, 41,
	41, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 92, 92, 42, 42,
	90, 90, 91, 93, 93, 89, 89, 89, 74, 74,
	74, 74, 74, 74, 74, 76, 76, 76, 94, 94,
	95, 95, 96, 96, 97, 97, 98, 99, 99, 99,
	100, 100, 100, 100, 101, 101, 101, 73, 73, 73,
	73, 73, 73, 102, 102, 102, 102, 103, 103, 84,
	84, 86, 86, 85, 87, 104, 104, 105, 106, 106,
	109, 109, 108, 108, 108, 108, 108, 117, 117, 116,
	116, 116, 107, 107, 110, 110, 114, 114, 113, 115,
	115, 115, 115, 112, 112, 111, 111, 143, 143, 143,
	119, 119, 122, 122, 123, 123, 120, 120, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 125, 125,
	125, 126, 126, 221, 221, 130, 130, 131, 131, 135,
	135, 136, 136, 139, 139, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 235, 236, 141,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 1, 1, 3, 5, 11, 11,
	11, 0, 1, 1, 5, 9, 7, 1, 1, 1,
	1, 2, 3, 2, 0, 2, 1, 1, 0, 2,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	1, 2, 4, 4, 2, 0, 1, 0, 1, 1,
	2, 2, 1, 1, 1, 4, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 4, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 3, 3, 4, 1,
	3, 3, 3, 1, 1, 3, 1, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 3, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	3, 4, 1, 1, 1, 1, 0, 3, 3, 2,
	0, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 1, 2, 7, 7, 8, 9, 0, 1, 3,
	1, 2, 3, 0, 2, 0, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	0, 1, 1, 4, 2, 3, 2, 2, 4, 4,
	3, 6, 3, 3, 4, 4, 4, 6, 5, 5,
	3, 3, 5, 6, 7, 3, 3, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 0, 3, 1, 1,
	1, 0, 2, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 4, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	1, 2, 3, 3, 3, 2, 3, 1, 2, 1,
	1, 1, 2, 3, 2, 2, 0, 2, 3, 2,
	2, 2, 1, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -233, -14, -15, -19, -20, -21, -22, -23, -24,
	-25, -8, -27, -28, -31, -29, -9, -10, -11, -12,
	-13, -30, -16, -17, 6, -35, 8, 9, 42, -26,
	123, 124, 125, 146, 127, 139, 45, 62, 266, 141,
	273, 276, 277, 280, 279, 294, 38, 140, 144, 145,
	-235, 7, 250, 65, -234, 302, -96, 14, -34, 5,
	-32, -237, -32, -32, -32, -32, -203, 65, -7, -221,
	22, 29, 130, 242, 243, 31, -120, 134, 130, 131,
	-7, 130, 130, 235, 123, 230, 268, -62, -63, 270,
	271, 237, 130, 272, 233, 269, 232, 229, 170, 68,
	44, 131, 26, 24, 130, -135, 68, -129, 256, 19,
	201, 147, 166, 257, 299, 77, 200, 203, 204, 142,
	162, 206, 205, 198, 156, 40, 196, 180, 274, 261,
	239, 195, 157, 22, 181, 185, 281, 24, 208, 179,
	25, 26, 258, 47, 183, 209, 51, 199, 210, 187,
	186, 188, 169, 17, 211, 212, 182, 184, 260, 144,
	213, 50, 192, 275, 277, 237, 197, 171, 160, 161,
	146, 262, 132, 163, 294, 295, 297, 296, 298, 300,
	301, -141, -141, -127, 260, 203, -141, 278, -141, -141,
	295, 297, 296, 298, 299, 301, 266, -141, -141, -141,
	-141, -15, -100, 16, 15, -18, -16, -235, 6, 33,
	34, -40, 52, 53, -33, -120, -57, -135, 10, -106,
	-107, -109, 278, -143, -108, 282, 283, 281, -131, -117,
	284, -130, -128, 170, 167, 68, -129, 83, 35, 37,
	190, 86, 153, 118, 175, 15, 87, 164, 117, 238,
	202, 251, 123, 60, 241, 244, 240, 242, 230, 158,
	41, 9, 38, 140, 34, 111, 125, 90, 91, 268,
	143, 36, 141, 80, 18, 63, 10, 44, 12, 13,
	135, 134, 102, 131, 58, 7, 151, 152, 119, 39,
	99, 54, 32, 56, 100, 16, 245, 246, 43, 178,
	174, 255, 177, 150, 173, 113, 61, 48, 84, 78,
	159, 81, 64, 145, 82, 14, 59, 271, 137, 270,
	155, 101, 126, 250, 57, 243, 6, 254, 42, 139,
	149, 55, 130, 231, 176, 148, 172, 89, 133, 79,
	272, 5, 31, 193, 8, 62, 136, 247, 248, 249,
	46, 168, 165, 269, 259, 88, 11, 194, -232, 281,
	275, 267, 263, -204, -199, -134, 68, -129, -123, 135,
	131, 131, 131, -123, 130, -122, 135, 68, -122, -57,
	-57, 234, 130, 242, -141, -141, 231, -59, 238, 239,
	-61, 10, 102, -141, -141, -141, 237, -141, -141, -141,
	-141, -141, -141, -141, -57, 71, -141, -85, -235, -85,
	-141, -57, -141, -141, 300, 279, 280, -236, 67, -101,
	18, 43, -48, -70, 84, -75, 41, 36, -74, -71,
	-89, -87, -88, 118, 107, 108, 115, 85, 119, -79,
	-77, -78, -80, 70, 69, 71, 72, 73, 74, 78,
	79, 80, -130, -135, -85, -235, 56, 57, 251, 252,
	255, 253, 87, 46, 240, 249, 248, 247, 245, 246,
	241, 244, 135, 242, 113, 250, 68, -129, -97, -98,
	-48, -96, -15, -32, 48, -38, 34, 76, -58, 39,
	-57, 42, 120, -57, 66, -110, -113, -111, 285, 287,
	-108, 278, 92, -116, -130, 70, 41, -116, 42, 15,
	15, 67, 66, -145, -148, -150, -149, -151, -146, -147,
	164, 165, 118, 168, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 42, 142, 160, 161, 162, 163,
	181, 182, 183, 184, 185, 186, 187, 188, 147, 166,
	257, 148, 149, 150, 151, 152, 153, 155, 156, 157,
	158, 159, -139, 68, -129, 84, 68, 68, 68, -57,
	-57, -65, -57, 36, 64, -139, -43, 10, -57, -135,
	-60, -61, -61, -57, -60, -141, -141, -141, -83, -48,
	-141, -125, 133, 35, -141, -141, -141, 8, 102, 83,
	82, 99, 66, 17, -48, -72, 102, 84, 100, 101,
	86, 104, 103, 114, 107, 108, 109, 110, 111, 112,
	113, 105, 106, 117, 92, 93, 94, 95, 96, 97,
	98, -121, -235, -88, -235, 121, 122, -75, -75, -75,
	-75, -75, -75, -235, 120, -15, -235, -235, -235, -235,
	-235, -235, -235, -92, -48, -235, -238, -235, -238, -238,
	-238, -238, -238, -238, -238, -235, -235, -235, -235, 66,
	-99, 37, 38, -100, -236, -40, -76, -130, 71, 74,
	-39, 55, -73, 42, 46, -15, -235, -57, -104, -105,
	-89, -130, -135, -136, -135, -128, 167, 170, -69, 11,
	-109, -143, -112, 66, -114, 66, 286, 288, 289, -110,
	64, 81, -48, -182, 117, -235, 265, 23, -205, -206,
	-207, -160, -156, -158, -159, -161, -162, -163, -164, -165,
	-166, -167, -168, -169, -170, -171, -172, -173, -174, -175,
	-176, -177, -178, -179, -180, 77, 274, -188, 190, 201,
	45, 202, 203, 204, 131, 206, 207, 208, 25, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 41, -199,
	-200, -201, -5, -4, 131, 32, 29, 22, 21, -224,
	-225, -226, -194, -153, -195, -196, -197, -154, -37, -155,
	-183, -184, 78, 84, 41, 190, 137, 32, 31, 77,
	64, 117, 200, 197, -190, 193, -152, 65, -152, -152,
	-152, -152, -181, 167, -181, -181, -181, 65, 65, -152,
	-152, -152, -192, 65, -192, -192, -193, 65, -193, -227,
	-228, -229, -188, 36, 64, 64, 64, -124, 126, 274,
	251, 128, 125, 129, 124, 190, 167, 77, 41, 14,
	262, 68, 66, -57, -100, 236, -141, -141, -64, 100,
	11, -135, -57, -60, -141, 66, -236, -57, 50, -48,
	-48, -81, 78, 84, 79, 80, -48, -48, -75, -82,
	-85, -88, 75, 102, 100, 101, 86, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -142, 68, 70, 68, -74, -74, -130, -46,
	34, -45, -47, 109, -48, -135, -131, -136, -128, -236,
	-15, -45, -45, -48, -48, -45, -38, -90, -91, 88,
	-130, -236, -45, -46, -45, -45, -98, -101, -119, 18,
	10, 46, 46, -45, -103, 64, -104, -84, -86, -85,
	-235, -15, -102, -130, -69, 66, 92, 120, -96, -48,
	-111, -113, -115, 290, 287, 293, 68, -134, -235, -235,
	-207, -187, 92, -187, 117, -186, 170, 167, 164, -187,
	-187, -187, -187, -187, 205, 205, -187, -187, -187, -187,
	-187, -187, -187, -187, -187, -187, -187, -187, -187, -6,
	68, -202, -201, 137, 31, 30, -226, 78, 70, 71,
	72, 78, -36, -71, -118, 240, 245, 246, 32, 32,
	70, 8, -185, 68, 70, 195, 196, 41, 41, 198,
	199, -191, 194, 71, -181, -181, 42, -198, 70, -198,
	71, 71, -229, 117, -186, -169, -57, -57, -57, -141,
	-125, -126, 131, 32, 92, 133, 138, 138, 138, -57,
	-141, 70, 70, -48, -60, -69, -48, -141, 51, 78,
	79, 80, -82, -75, -75, -75, -44, 143, 83, -236,
	-236, -45, 66, -133, -132, 35, -130, 70, 120, -235,
	120, -236, -236, -236, 66, 136, 35, -236, -45, -93,
	-91, 90, -48, -236, -236, -236, -236, -236, -57, -49,
	10, 40, -103, 66, -236, -236, -236, 66, 120, -96,
	-105, -48, -131, -100, 287, 291, 292, -236, -134, -134,
	70, -185, -187, -187, 42, 42, 71, 71, 71, 70,
	70, -187, -187, 71, 70, 68, 71, 71, 71, 71,
	41, 70, 41, 196, 195, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 71, 41, 71, 41,
	71, 41, 68, -129, -2, -1, 136, -6, 32, -202,
	65, -36, 67, 68, 118, 67, 66, 67, 66, 67,
	66, -187, -187, -235, -235, -235, -57, -141, 68, 167,
	-203, 68, -199, -64, -44, 83, -75, -75, -236, -47,
	-132, 109, -136, -46, -131, -144, 118, 164, 142, 162,
	158, 179, 169, 192, 160, 193, -142, -144, 256, -96,
	91, -48, 89, -69, -50, -51, -52, -53, -66, -88,
	-235, -57, 32, -86, 46, -15, -235, -130, -130, -100,
	-236, -236, -185, -185, 70, 70, 65, -3, 23, 20,
	28, 65, -2, -6, 67, 71, 70, 71, 71, -223,
	68, 41, -189, 68, 118, 41, -209, -208, -130, -209,
	-209, 42, -75, 120, -236, -236, -152, -152, -152, -193,
	-152, 152, -152, 152, -236, -236, -235, -42, 254, -48,
	-94, 12, 66, -54, -55, -56, 54, 58, 60, 55,
	56, 57, 61, -140, 35, -50, -235, -138, -137, 35,
	-135, 70, 8, -84, -15, 120, -235, -157, 264, -209,
	-209, 65, -2, 67, 67, 67, -236, 66, -152, -236,
	-236, 68, 109, -181, 68, -75, -236, 70, -95, 13,
	15, -51, -52, -51, -52, 54, 54, 54, 59, 54,
	59, 54, -55, -135, -236, -67, 62, 134, 63, -137,
	-104, -236, -130, -231, -230, 263, 71, 67, 67, -209,
	65, -212, -208, -210, -213, -41, 102, 259, -48, -83,
	64, 64, 54, 54, 131, 131, 131, 66, -236, 68,
	-214, -214, 67, -209, -211, -219, -215, -217, 25, 77,
	136, -211, -216, -215, 259, -211, -215, -236, 257, 61,
	260, -48, -48, -235, -235, -235, -230, 46, -220, 25,
	-1, 77, 259, -214, 67, -218, 43, 19, -187, 70,
	-222, 23, 20, 27, 51, 258, 261, -68, -130, -68,
	-68, 102, -187, 70, 27, -214, -187, -187, 71, 68,
	51, -236, 66, -236, -236, -85, 71, 68, -223, -223,
	259, -130, 260, 261,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 602, 0, 388, 388, 388, 388, 388, 0,
	693, 676, 0, 0, 0, 375, 0, 0, 903, 903,
	330, 903, 0, 903, 903, 0, 903, 903, 903, 903,
	0, 33, 34, 901, 1, 3, 610, 0, 0, 392,
	395, 390, 676, 0, 0, 0, 51, 0, 674, 0,
	0, 0, 674, 44, 45, 694, 0, 677, 672, 0,
	672, 0, 0, 0, 0, 903, 903, 0, 0, 903,
	903, 903, 0, 903, 903, 903, 903, 903, 903, 903,
	376, 368, 369, 370, 0, 383, 699, 700, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 328, 329, 0, 331, 332, 334, 903, 336, 337,
	0, 0, 903, 0, 903, 903, 0, 384, 385, 386,
	387, 27, 614, 0, 0, 602, 29, 0, 388, 393,
	394, 398, 396, 397, 389, 0, 0, 448, 0, 37,
	38, 638, 0, 0, 640, 667, 668, -2, 0, 0,
	0, 697, 698, -2, 716, 695, 696, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 46, 52,
	53, 0, 0, 0, 169, 0, 173, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	327, 366, 0, 0, 350, 351, 371, 0, 377, 378,
	0, 373, 374, 355, 356, 357, 371, 359, 360, 361,
	362, 363, 364, 365, 903, 903, 335, 903, 0, 903,
	340, 688, 342, 343, 903, 903, 903, 28, 902, 23,
	0, 0, 611, 458, 0, 463, 465, 0, 500, 501,
	502, 503, 504, 0, 0, 0, 0, 0, 0, 526,
	527, 528, 529, 588, 589, 590, 591, 592, 593, 594,
	467, 468, 585, 0, 634, 0, 0, 0, 0, 0,
	0, 0, 576, 0, 550, 550, 550, 550, 550, 550,
	550, 550, 0, 0, 0, 0, -2, -2, 603, 604,
	607, 610, 27, 395, 0, 400, 399, 391, 0, 0,
	447, 0, 0, 456, 0, 652, 663, 656, 0, 0,
	641, 0, 0, 645, 649, 650, 651, 270, 648, 0,
	0, -2, 295, 179, 246, 176, 177, 178, 239, 194,
	239, 239, 239, 239, 266, 266, 266, 266, 222, 223,
	224, 225, 226, 0, 0, 209, 239, 239, 239, 213,
	229, 230, 231, 232, 233, 234, 235, 236, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 241, 241, 241,
	243, 243, -2, 703, 704, 0, 0, 0, 0, 95,
	0, 321, 324, 673, 0, 323, 610, 0, 903, 903,
	379, 0, 0, 371, 903, 382, 333, 338, 0, 498,
	339, 0, 689, 690, 344, 345, 346, 615, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 486, 487, 488, 489, 490,
	491, 464, 0, 478, 0, 0, 0, 520, 521, 522,
	523, 524, 0, 402, 0, 27, 0, 0, 0, 0,
	0, 0, 398, 0, 577, 0, 542, 0, 543, 544,
	545, 546, 547, 548, 549, 0, 402, 0, 0, 0,
	606, 608, 609, 614, 30, 398, 0, 595, 0, 0,
	0, 401, 627, 0, 0, -2, 0, 446, 456, 635,
	0, 585, 0, 449, 701, 702, 716, 717, 602, 0,
	639, 0, 654, 0, 655, 0, 0, 665, 666, 653,
	642, 643, 644, 646, 0, 0, 0, 0, 96, -2,
	99, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 87, 87, 0, 87, 87,
	87, 87, 87, 0, 0, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 86, 170,
	171, 287, 306, 0, 308, 309, 304, -2, 296, 172,
	180, 181, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 250, 0, 0, 265, 0, 279, 281, 0,
	0, 0, 0, 0, 248, 247, 193, 0, 266, 266,
	216, 217, 218, 0, 219, 220, 221, 0, 0, 210,
	211, 212, 204, 0, 205, 206, 207, 0, 208, 47,
	-2, 80, 0, 675, 0, 0, 0, 903, 688, 0,
	685, 0, 683, 0, 678, 679, 680, 681, 682, 684,
	686, 687, 0, 322, 903, 0, 348, 349, 352, 0,
	0, 372, 371, 456, 358, 0, 633, 903, 0, 459,
	460, 462, 479, 0, 481, 483, 612, 613, 469, 470,
	494, 495, 496, 0, 0, 0, 0, 492, 474, 0,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 519, 561, 562, 0, 517, 518, 525, 0,
	0, 403, 404, 406, 410, 0, 586, 0, -2, 497,
	27, 0, 0, 0, 0, 0, 0, 583, 580, 0,
	0, 551, 0, 0, 0, 0, 605, 24, 0, 670,
	671, 596, 597, 415, 31, 0, 627, 617, 629, 631,
	0, 27, 0, 623, 602, 0, 0, 0, 610, 457,
	664, 657, 658, 0, 0, 662, 271, 0, 0, 0,
	100, 0, 88, 0, 87, 87, 89, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	288, 287, 307, 0, 306, 297, 182, 251, 252, 253,
	254, 255, 256, 257, 259, 262, 263, 264, 278, 280,
	282, 0, 269, 164, 165, 272, 273, 274, 275, 276,
	277, 175, 249, 0, 214, 215, 0, 0, 237, 0,
	0, 0, 81, 87, 87, 84, 0, 0, 0, 313,
	0, 903, 691, 692, 0, 0, 0, 0, 0, 325,
	347, 367, 380, 381, 379, 353, 499, 341, 616, 480,
	482, 484, 471, 492, 475, 0, 472, 0, 0, 466,
	530, 0, 0, 407, 411, 0, 413, 414, 0, 402,
	0, -2, 533, 534, 0, 0, 0, 0, 602, 0,
	581, 0, 0, 541, 552, 553, 554, 555, 25, 456,
	0, 0, 32, 0, 632, -2, 0, 0, 0, 610,
	636, 637, 586, 36, 659, 660, 661, 54, 0, 0,
	166, 167, 0, 0, 90, 91, 125, 126, 163, 128,
	129, 0, 0, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 0, 300, 0, 0, 299, 287,
	0, 258, 240, 267, 268, 227, 0, 228, 0, 244,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 0,
	318, 319, 320, 354, 473, 0, 493, 476, 531, 405,
	412, 408, 0, 0, 587, 0, 239, 239, 566, 239,
	243, 569, 239, 571, 239, 574, 0, 0, 0, 578,
	540, 584, 0, 598, 416, 417, 419, 420, 421, 429,
	0, 431, 0, 630, 0, -2, 0, 625, 624, 35,
	0, 42, 127, 168, 130, 131, 0, 298, 301, 302,
	303, 0, 0, 299, 260, 0, 238, 0, 0, 82,
	59, 60, 83, 92, 93, 94, 0, 310, 239, 0,
	0, 0, 477, 0, 532, 535, 563, 266, 567, 568,
	570, 572, 573, 575, 537, 536, 0, 0, 0, 582,
	600, 0, 0, 0, 0, 0, 436, 0, 0, 439,
	0, 0, 0, 0, 430, 0, 0, 450, 432, 0,
	434, 435, 0, 620, 27, 0, 0, 56, 0, 0,
	0, 0, 0, 261, 242, 245, 64, 0, 312, 68,
	72, 317, 409, 564, 565, 556, 539, 579, 26, 0,
	0, 418, 425, 0, 428, 437, 438, 440, 0, 442,
	0, 444, 445, 422, 423, 424, 0, 0, 0, 433,
	628, -2, 626, 0, 39, 0, 43, 293, 293, 0,
	0, 74, 311, 74, 74, 0, 0, 0, 601, 599,
	0, 0, 441, 443, 0, 0, 0, 0, 55, 0,
	283, 284, 293, 0, 48, 65, 66, 67, 87, 0,
	0, 49, 69, 70, 0, 50, 73, 538, 0, 0,
	0, 426, 427, 0, 0, 0, 40, 0, 294, 87,
	290, 0, 0, 285, 293, 75, 87, 87, 0, 63,
	61, 57, 58, 0, 557, 0, 560, 0, 454, 0,
	0, 0, 0, 291, 0, 286, 0, 0, 62, 71,
	558, 451, 0, 452, 453, 41, 289, 292, 76, 77,
	0, 455, 0, 559,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 112, 104, 3,
	65, 67, 109, 107, 66, 108, 120, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 302,
	93, 92, 94, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	86, 87, 88, 89, 90, 91, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1019
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1027
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1055
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1100
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1111
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1175
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1195
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1202
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.str = "hash"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.str = "btree"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.str = "default"
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1433
		{
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1436
		{
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.str = "character set"
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.str = "char set"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.str = "default"
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1470
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1752
		{
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1768
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1805
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1821
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.optVal = nil
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2446
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.str = yyDollar[3].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2542
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2587
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2599
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2613
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 286:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2624
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2689
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2692
		{
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2695
		{
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2706
		{
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2738
		{
			// set empty
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.str = yyDollar[1].str
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2780
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2785
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2812
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2820
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2825
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2835
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2857
		{
			yyVAL.statement = &Xa{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.statement = &Explain{}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2868
		{
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2870
		{
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2962
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2973
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3069
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.str = "full "
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.showFilter = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.statement = &OtherRead{}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.statement = &OtherRead{}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3132
		{
			setAllowComments(yylex, true)
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3141
		{
			yyVAL.bytes2 = nil
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.str = UnionStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.str = UnionAllStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.str = UnionDistinctStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.str = SQLCacheStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3177
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.str = DistinctStr
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3186
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.str = StraightJoinHint
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.selectExprs = nil
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3303
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3344
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.str = JoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3354
		{
			yyVAL.str = JoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3358
		{
			yyVAL.str = JoinStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.str = StraightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3368
		{
			yyVAL.str = LeftJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3372
		{
			yyVAL.str = LeftJoinStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.str = RightJoinStr
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3380
		{
			yyVAL.str = RightJoinStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3386
		{
			yyVAL.str = NaturalJoinStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3390
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3400
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3404
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3437
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3441
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3450
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3460
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3464
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3468
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3472
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3476
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3486
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3490
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3496
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3510
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3514
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3518
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3526
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3542
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3548
		{
			yyVAL.str = IsNullStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3552
		{
			yyVAL.str = IsNotNullStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.str = IsTrueStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3560
		{
			yyVAL.str = IsNotTrueStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3564
		{
			yyVAL.str = IsFalseStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3568
		{
			yyVAL.str = IsNotFalseStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3574
		{
			yyVAL.str = EqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3578
		{
			yyVAL.str = LessThanStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3582
		{
			yyVAL.str = GreaterThanStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3586
		{
			yyVAL.str = LessEqualStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3590
		{
			yyVAL.str = GreaterEqualStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3594
		{
			yyVAL.str = NotEqualStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3598
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3603
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3607
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3613
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3617
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3621
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3627
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3643
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3651
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3695
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3707
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3711
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3715
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3719
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3723
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3727
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3735
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3749
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3753
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3757
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3775
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3779
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3783
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3793
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3801
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3805
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3809
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 538:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3813
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 539:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3817
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3821
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3825
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3890
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3900
		{
			yyVAL.str = ""
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.str = BooleanModeStr
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 559:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3916
		{
			yyVAL.str = QueryExpansionStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3922
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3926
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3987
		{
			yyVAL.expr = nil
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3996
		{
			yyVAL.str = string("")
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4000
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4006
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4010
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4016
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.expr = nil
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4025
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4053
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.expr = &NullVal{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4075
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4084
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4088
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4093
		{
			yyVAL.exprs = nil
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4097
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4102
		{
			yyVAL.expr = nil
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.orderBy = nil
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4115
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4121
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4125
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4131
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.str = AscScr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4140
		{
			yyVAL.str = AscScr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.str = DescScr
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4149
		{
			yyVAL.limit = nil
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4153
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4157
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4161
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4166
		{
			yyVAL.str = ""
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4170
		{
			yyVAL.str = ForUpdateStr
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4174
		{
			yyVAL.str = ShareModeStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4187
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4191
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4195
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4204
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4208
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4215
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4219
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4223
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4227
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4232
		{
			yyVAL.updateExprs = nil
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4236
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4242
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4246
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4252
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4256
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4262
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4268
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4278
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4282
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4288
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4294
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4298
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4304
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4308
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4315
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4319
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4338
		{
			yyVAL.bytes = []byte("charset")
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4352
		{
			yyVAL.expr = &Default{}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4358
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4362
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4368
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4372
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4378
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4382
		{
			yyVAL.str = yyDollar[2].str
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.str = yyDollar[3].str
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4394
		{
			yyVAL.str = RepeatableRead
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4398
		{
			yyVAL.str = ReadCommitted
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4402
		{
			yyVAL.str = ReadUncommitted
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4406
		{
			yyVAL.str = Serializable
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4412
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4416
		{
			yyVAL.str = yyDollar[2].str
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.str = TxReadWrite
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4426
		{
			yyVAL.str = TxReadOnly
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4432
		{
			yyVAL.str = SessionStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4436
		{
			yyVAL.str = SessionStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4440
		{
			yyVAL.str = GlobalStr
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4449
		{
			yyVAL.byt = 0
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.byt = 1
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4458
		{
			yyVAL.byt = 0
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4462
		{
			yyVAL.byt = 1
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4471
		{
			yyVAL.str = IgnoreStr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4477
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4485
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4489
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4505
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4509
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4513
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4518
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4522
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4526
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4532
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4541
		{
			yyVAL.str = IndexStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4545
		{
			yyVAL.str = UniqueStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4551
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4555
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4562
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4568
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4572
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4579
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4589
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4812
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4821
		{
			decNesting(yylex)
		}
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4826
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
