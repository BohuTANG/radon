// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CONSTRAINT = 57363
const FULLTEXT = 57364
const HASH = 57365
const INDEXES = 57366
const KEY_BLOCK_SIZE = 57367
const KEYS = 57368
const PARSER = 57369
const RTREE = 57370
const SPATIAL = 57371
const SYMBOL = 57372
const UNIQUE = 57373
const KEY = 57374
const ALL = 57375
const DISTINCT = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const SET = 57384
const LOCK = 57385
const FULL = 57386
const CHECKSUM = 57387
const VALUES = 57388
const LAST_INSERT_ID = 57389
const NEXT = 57390
const VALUE = 57391
const SHARE = 57392
const MODE = 57393
const SQL_NO_CACHE = 57394
const SQL_CACHE = 57395
const JOIN = 57396
const STRAIGHT_JOIN = 57397
const LEFT = 57398
const RIGHT = 57399
const INNER = 57400
const OUTER = 57401
const CROSS = 57402
const NATURAL = 57403
const USE = 57404
const FORCE = 57405
const ON = 57406
const ID = 57407
const HEX = 57408
const STRING = 57409
const INTEGRAL = 57410
const FLOAT = 57411
const HEXNUM = 57412
const VALUE_ARG = 57413
const LIST_ARG = 57414
const COMMENT = 57415
const COMMENT_KEYWORD = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const AND = 57422
const NOT = 57423
const BETWEEN = 57424
const CASE = 57425
const WHEN = 57426
const THEN = 57427
const ELSE = 57428
const END = 57429
const LE = 57430
const GE = 57431
const NE = 57432
const NULL_SAFE_EQUAL = 57433
const IS = 57434
const LIKE = 57435
const REGEXP = 57436
const IN = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const MODIFY = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const USING = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SHOW = 57464
const DESCRIBE = 57465
const EXPLAIN = 57466
const DATE = 57467
const ESCAPE = 57468
const REPAIR = 57469
const OPTIMIZE = 57470
const TRUNCATE = 57471
const BIT = 57472
const TINYINT = 57473
const SMALLINT = 57474
const MEDIUMINT = 57475
const INT = 57476
const INTEGER = 57477
const BIGINT = 57478
const INTNUM = 57479
const REAL = 57480
const DOUBLE = 57481
const FLOAT_TYPE = 57482
const DECIMAL = 57483
const NUMERIC = 57484
const TIME = 57485
const TIMESTAMP = 57486
const DATETIME = 57487
const YEAR = 57488
const CHAR = 57489
const VARCHAR = 57490
const BOOL = 57491
const CHARACTER = 57492
const VARBINARY = 57493
const NCHAR = 57494
const CHARSET = 57495
const TEXT = 57496
const TINYTEXT = 57497
const MEDIUMTEXT = 57498
const LONGTEXT = 57499
const BLOB = 57500
const TINYBLOB = 57501
const MEDIUMBLOB = 57502
const LONGBLOB = 57503
const JSON = 57504
const ENUM = 57505
const GEOMETRY = 57506
const POINT = 57507
const LINESTRING = 57508
const POLYGON = 57509
const GEOMETRYCOLLECTION = 57510
const MULTIPOINT = 57511
const MULTILINESTRING = 57512
const MULTIPOLYGON = 57513
const NULLX = 57514
const AUTO_INCREMENT = 57515
const APPROXNUM = 57516
const SIGNED = 57517
const UNSIGNED = 57518
const ZEROFILL = 57519
const FIXED = 57520
const DYNAMIC = 57521
const STORAGE = 57522
const DISK = 57523
const MEMORY = 57524
const COLUMN_FORMAT = 57525
const AVG_ROW_LENGTH = 57526
const COMPRESSION = 57527
const CONNECTION = 57528
const DATA = 57529
const DIRECTORY = 57530
const DELAY_KEY_WRITE = 57531
const ENCRYPTION = 57532
const INSERT_METHOD = 57533
const MAX_ROWS = 57534
const MIN_ROWS = 57535
const PACK_KEYS = 57536
const PASSWORD = 57537
const ROW_FORMAT = 57538
const STATS_AUTO_RECALC = 57539
const STATS_PERSISTENT = 57540
const STATS_SAMPLE_PAGES = 57541
const TABLESPACE = 57542
const COMPRESSED = 57543
const REDUNDANT = 57544
const COMPACT = 57545
const TOKUDB_DEFAULT = 57546
const TOKUDB_FAST = 57547
const TOKUDB_SMALL = 57548
const TOKUDB_ZLIB = 57549
const TOKUDB_QUICKLZ = 57550
const TOKUDB_LZMA = 57551
const TOKUDB_SNAPPY = 57552
const TOKUDB_UNCOMPRESSED = 57553
const DATABASES = 57554
const TABLES = 57555
const WARNINGS = 57556
const VARIABLES = 57557
const EVENTS = 57558
const BINLOG = 57559
const GTID = 57560
const STATUS = 57561
const COLUMNS = 57562
const FIELDS = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const GROUP_CONCAT = 57576
const SEPARATOR = 57577
const MATCH = 57578
const AGAINST = 57579
const BOOLEAN = 57580
const LANGUAGE = 57581
const WITH = 57582
const QUERY = 57583
const EXPANSION = 57584
const UNUSED = 57585
const PARTITION = 57586
const PARTITIONS = 57587
const LIST = 57588
const XA = 57589
const DISTRIBUTED = 57590
const ENGINES = 57591
const VERSIONS = 57592
const PROCESSLIST = 57593
const QUERYZ = 57594
const TXNZ = 57595
const KILL = 57596
const ENGINE = 57597
const SINGLE = 57598
const BEGIN = 57599
const START = 57600
const TRANSACTION = 57601
const COMMIT = 57602
const ROLLBACK = 57603
const GLOBAL = 57604
const LOCAL = 57605
const SESSION = 57606
const NAMES = 57607
const ISOLATION = 57608
const LEVEL = 57609
const READ = 57610
const WRITE = 57611
const ONLY = 57612
const REPEATABLE = 57613
const COMMITTED = 57614
const UNCOMMITTED = 57615
const SERIALIZABLE = 57616
const RADON = 57617
const ATTACH = 57618
const ATTACHLIST = 57619
const DETACH = 57620
const RESHARD = 57621
const CLEANUP = 57622
const RECOVER = 57623
const REBALANCE = 57624

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4778

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 222,
	92, 845,
	-2, 661,
	-1, 228,
	92, 707,
	-2, 639,
	-1, 469,
	120, 691,
	-2, 687,
	-1, 470,
	120, 692,
	-2, 688,
	-1, 504,
	117, 82,
	167, 82,
	170, 82,
	-2, 93,
	-1, 555,
	1, 76,
	300, 76,
	-2, 82,
	-1, 676,
	5, 27,
	-2, 610,
	-1, 710,
	117, 82,
	167, 82,
	170, 82,
	-2, 94,
	-1, 768,
	32, 301,
	65, 301,
	68, 301,
	131, 301,
	-2, 842,
	-1, 821,
	1, 77,
	300, 77,
	-2, 82,
	-1, 909,
	120, 694,
	-2, 690,
	-1, 1080,
	5, 28,
	-2, 489,
	-1, 1104,
	5, 28,
	-2, 611,
	-1, 1233,
	5, 27,
	-2, 613,
	-1, 1359,
	5, 28,
	-2, 614,
}

const yyPrivate = 57344

const yyLast = 9960

var yyAct = [...]int{
	470, 1257, 1435, 1362, 1388, 1394, 579, 1265, 447, 1306,
	1292, 1162, 1418, 938, 817, 1012, 445, 223, 1392, 1223,
	423, 679, 689, 1264, 1203, 989, 939, 893, 905, 1073,
	1303, 908, 197, 903, 962, 227, 636, 3, 103, 900,
	803, 1002, 1229, 1065, 56, 849, 425, 991, 680, 935,
	919, 359, 1224, 870, 571, 66, 738, 582, 966, 822,
	422, 772, 711, 1027, 103, 489, 231, 412, 361, 358,
	219, 490, 472, 478, 813, 992, 421, 488, 572, 218,
	103, 103, 226, 191, 55, 206, 1113, 196, 216, 448,
	50, 955, 1114, 1115, 954, 698, 699, 956, 492, 408,
	409, 103, 697, 491, 491, 492, 211, 182, 708, 1316,
	1363, 1461, 185, 187, 186, 188, 189, 356, 190, 410,
	407, 355, 373, 374, 1434, 647, 1417, 1396, 179, 354,
	1460, 1408, 1458, 1433, 1216, 353, 1286, 840, 375, 390,
	50, 1005, 846, 396, 975, 1006, 1007, 974, 202, 380,
	1407, 749, 998, 999, 1000, 1022, 382, 383, 496, 796,
	1001, 443, 444, 70, 839, 384, 1187, 759, 76, 77,
	71, 741, 73, 376, 804, 1281, 1279, 1047, 1419, 1397,
	1033, 1332, 1396, 1046, 24, 51, 26, 27, 1018, 103,
	1045, 842, 994, 370, 400, 402, 1017, 1164, 1042, 363,
	838, 584, 584, 736, 75, 1044, 1384, 1354, 1356, 418,
	1383, 103, 766, 368, 103, 1382, 46, 366, 365, 231,
	28, 364, 100, 36, 965, 231, 231, 415, 473, 797,
	968, 404, 902, 967, 1397, 226, 80, 1164, 79, 475,
	37, 497, 497, 53, 1313, 474, 614, 835, 833, 829,
	1271, 832, 834, 483, 1140, 1107, 486, 745, 1374, 603,
	602, 612, 613, 605, 606, 607, 608, 609, 610, 611,
	604, 72, 1079, 614, 968, 401, 401, 967, 78, 1355,
	804, 60, 1077, 377, 626, 627, 705, 1263, 948, 493,
	837, 635, 50, 1398, 485, 385, 1439, 1041, 993, 583,
	583, 30, 31, 32, 589, 34, 592, 62, 63, 64,
	65, 765, 1171, 836, 1261, 180, 739, 35, 47, 39,
	963, 1005, 48, 49, 33, 1006, 1007, 740, 742, 743,
	744, 851, 746, 747, 748, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 1406, 1019, 1020, 1043, 707, 947,
	1015, 1016, 607, 608, 609, 610, 611, 604, 1420, 1402,
	614, 495, 1172, 103, 1262, 591, 590, 1218, 103, 103,
	103, 369, 831, 103, 1083, 920, 604, 103, 103, 614,
	590, 68, 592, 841, 500, 103, 877, 386, 997, 556,
	591, 590, 920, 480, 1090, 830, 592, 1454, 737, 594,
	875, 876, 874, 1058, 1059, 1060, 1396, 592, 1142, 1141,
	560, 561, 563, 1375, 362, 1446, 1441, 662, 663, 569,
	850, 1364, 1256, 863, 865, 866, 52, 574, 1085, 864,
	580, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 38, 1252, 1084, 575, 595, 1253, 593, 40,
	372, 53, 41, 42, 1255, 44, 43, 1427, 1397, 1159,
	573, 873, 591, 590, 591, 590, 1157, 624, 1155, 1138,
	45, 1136, 1135, 591, 590, 591, 590, 580, 231, 592,
	1220, 592, 1134, 103, 645, 476, 103, 367, 231, 1158,
	592, 1013, 592, 1014, 668, 1131, 1156, 1126, 1154, 1137,
	894, 682, 895, 1335, 226, 681, 361, 664, 1125, 623,
	625, 437, 436, 438, 439, 440, 441, 684, 676, 1124,
	442, 686, 1031, 1030, 703, 678, 605, 606, 607, 608,
	609, 610, 611, 604, 1023, 634, 614, 398, 637, 638,
	639, 640, 641, 642, 643, 1254, 646, 648, 648, 648,
	648, 648, 648, 648, 648, 656, 657, 658, 659, 805,
	806, 807, 666, 1243, 1242, 1139, 103, 692, 1132, 819,
	1128, 677, 700, 103, 103, 760, 691, 1127, 1119, 1051,
	1050, 762, 1028, 103, 649, 650, 651, 652, 653, 654,
	655, 1010, 706, 1455, 1259, 665, 1450, 411, 856, 1447,
	845, 1325, 1422, 1325, 1390, 411, 871, 1387, 844, 1385,
	411, 1323, 823, 1325, 1366, 1322, 853, 1325, 1365, 860,
	861, 1258, 867, 868, 1329, 858, 815, 816, 990, 854,
	1290, 411, 1325, 411, 231, 1189, 628, 629, 630, 631,
	632, 633, 1071, 411, 872, 1186, 1133, 231, 1178, 1177,
	899, 957, 226, 907, 1294, 1297, 1298, 1299, 1295, 896,
	1296, 1300, 559, 921, 1379, 24, 580, 1174, 1175, 914,
	915, 909, 1174, 1173, 911, 1106, 411, 1321, 231, 856,
	411, 24, 558, 557, 940, 505, 504, 946, 371, 473,
	1170, 682, 1099, 231, 944, 681, 937, 924, 57, 857,
	690, 674, 945, 897, 898, 675, 936, 361, 946, 226,
	1102, 24, 1290, 1176, 942, 50, 1071, 917, 843, 950,
	696, 1232, 694, 660, 53, 1378, 487, 637, 53, 1368,
	798, 1319, 928, 927, 949, 1294, 1297, 1298, 1299, 1295,
	53, 1296, 1300, 799, 800, 801, 802, 936, 1071, 203,
	1071, 818, 1249, 1244, 827, 946, 910, 67, 958, 810,
	811, 812, 952, 493, 1168, 941, 951, 50, 922, 814,
	53, 809, 964, 961, 969, 970, 971, 972, 973, 808,
	826, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 825, 565, 1347, 959, 960, 672,
	74, 1348, 1345, 1381, 1380, 22, 869, 1346, 53, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 1344, 1343, 103, 103, 103, 1349,
	1448, 1298, 1299, 996, 207, 208, 1432, 1057, 1415, 859,
	1024, 1025, 933, 932, 103, 1269, 1003, 479, 603, 602,
	612, 613, 605, 606, 607, 608, 609, 610, 611, 604,
	1425, 477, 614, 210, 201, 413, 1123, 1026, 1035, 1036,
	1037, 912, 913, 1029, 501, 916, 484, 1054, 823, 759,
	1052, 1032, 1034, 871, 1424, 1055, 1048, 1039, 1066, 923,
	414, 925, 926, 612, 613, 605, 606, 607, 608, 609,
	610, 611, 604, 1100, 934, 614, 231, 824, 1053, 564,
	1302, 1193, 204, 205, 479, 1230, 1166, 1009, 1008, 995,
	1442, 872, 1075, 1431, 1430, 198, 1338, 1429, 1061, 503,
	103, 603, 602, 612, 613, 605, 606, 607, 608, 609,
	610, 611, 604, 1247, 931, 614, 1246, 502, 199, 1091,
	57, 1248, 930, 1337, 1289, 690, 568, 213, 1310, 1011,
	361, 361, 588, 682, 59, 226, 1111, 681, 61, 1089,
	580, 54, 1097, 1, 352, 1361, 1110, 821, 820, 771,
	1120, 770, 1112, 1428, 909, 69, 1416, 1101, 1393, 1161,
	1108, 1423, 1395, 1400, 1372, 1109, 1369, 1078, 1371, 710,
	1121, 1122, 1163, 709, 357, 761, 777, 776, 775, 1129,
	1130, 1117, 1118, 773, 1021, 795, 1068, 1165, 1260, 782,
	1069, 781, 704, 735, 734, 733, 732, 731, 730, 729,
	728, 1080, 1081, 1082, 727, 726, 1086, 725, 724, 723,
	103, 1092, 1167, 1093, 1094, 1095, 1096, 722, 361, 721,
	720, 719, 718, 1169, 717, 716, 712, 715, 714, 1315,
	713, 1103, 1104, 1105, 780, 778, 774, 510, 1179, 1180,
	508, 509, 507, 512, 511, 231, 506, 1301, 1116, 1305,
	231, 1072, 1184, 1040, 828, 1062, 1063, 1064, 622, 929,
	1004, 1075, 224, 446, 226, 907, 226, 1202, 953, 1191,
	103, 1188, 695, 693, 1198, 1197, 1192, 231, 231, 1200,
	1215, 940, 1214, 909, 215, 214, 943, 1190, 1201, 1219,
	661, 1221, 471, 1235, 1236, 1181, 1182, 1183, 1336, 1231,
	1222, 101, 1217, 1288, 1070, 1088, 644, 1240, 1241, 918,
	424, 1237, 1233, 862, 435, 432, 1227, 434, 433, 667,
	1087, 673, 596, 416, 1353, 1226, 562, 212, 603, 602,
	612, 613, 605, 606, 607, 608, 609, 610, 611, 604,
	86, 85, 614, 212, 212, 381, 481, 1293, 1250, 1163,
	1291, 1225, 231, 231, 231, 1098, 567, 1285, 1067, 1228,
	1196, 1373, 941, 1251, 212, 1234, 671, 779, 1266, 1266,
	1266, 25, 58, 209, 14, 21, 1267, 1268, 603, 602,
	612, 613, 605, 606, 607, 608, 609, 610, 611, 604,
	15, 13, 614, 1277, 12, 29, 10, 9, 8, 103,
	103, 7, 6, 5, 4, 200, 23, 1238, 1239, 2,
	20, 940, 19, 18, 17, 231, 1311, 16, 11, 1287,
	231, 763, 764, 1245, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 1320, 1163, 0, 1266, 0, 1317, 0,
	0, 1312, 231, 1318, 0, 1227, 1194, 1195, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 226, 1202,
	0, 103, 103, 103, 103, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 212, 103, 1284, 212, 103, 0,
	1339, 1350, 1341, 0, 231, 0, 1331, 1357, 1304, 0,
	231, 1272, 941, 1273, 50, 0, 231, 682, 1314, 0,
	1360, 681, 1358, 1370, 1282, 1283, 1266, 1227, 1227, 1227,
	1227, 911, 1266, 1367, 1340, 1377, 1342, 0, 0, 0,
	0, 1227, 602, 612, 613, 605, 606, 607, 608, 609,
	610, 611, 604, 0, 0, 614, 1376, 580, 0, 231,
	0, 1389, 0, 0, 0, 0, 0, 1401, 1404, 0,
	1228, 1228, 1228, 1228, 1324, 1266, 0, 1327, 1328, 1414,
	1399, 1403, 1391, 0, 1304, 1421, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 1334, 0, 1409, 1410, 0,
	0, 0, 231, 231, 231, 1437, 1438, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 1443, 1436, 1436,
	1436, 1426, 1359, 0, 1274, 1275, 0, 1276, 0, 0,
	1278, 0, 1280, 0, 0, 0, 1456, 1457, 1453, 0,
	0, 231, 1440, 0, 0, 177, 555, 0, 0, 1444,
	1445, 212, 212, 212, 0, 0, 566, 1459, 0, 0,
	212, 570, 1411, 1412, 1413, 789, 788, 527, 212, 0,
	0, 1386, 0, 0, 0, 785, 0, 0, 0, 0,
	0, 1204, 0, 1405, 1333, 178, 1326, 181, 0, 183,
	184, 0, 192, 193, 194, 195, 0, 0, 791, 0,
	0, 0, 0, 0, 0, 1206, 0, 0, 0, 0,
	0, 790, 783, 0, 0, 0, 0, 0, 784, 401,
	0, 1208, 0, 1212, 0, 1207, 0, 1205, 0, 378,
	379, 0, 1210, 387, 388, 389, 0, 391, 392, 393,
	394, 395, 1209, 515, 0, 1449, 0, 1451, 1452, 0,
	0, 792, 0, 0, 0, 1211, 1213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 528, 683, 685,
	0, 787, 541, 544, 545, 546, 547, 548, 549, 0,
	550, 551, 552, 553, 554, 529, 530, 531, 532, 513,
	514, 542, 0, 516, 0, 0, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 533, 534, 535, 536,
	537, 538, 539, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 786, 397, 0, 0, 399, 0,
	0, 794, 0, 403, 793, 405, 406, 0, 149, 0,
	105, 0, 769, 768, 0, 133, 136, 137, 0, 212,
	767, 0, 0, 766, 0, 0, 852, 212, 0, 0,
	0, 121, 0, 0, 0, 0, 212, 0, 139, 0,
	0, 157, 142, 0, 0, 0, 0, 0, 0, 0,
	543, 0, 0, 598, 0, 601, 0, 0, 0, 360,
	0, 615, 616, 617, 618, 619, 620, 621, 111, 599,
	600, 597, 603, 602, 612, 613, 605, 606, 607, 608,
	609, 610, 611, 604, 0, 0, 614, 0, 906, 685,
	0, 0, 906, 906, 0, 0, 906, 0, 0, 99,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	906, 906, 906, 906, 0, 0, 0, 0, 0, 96,
	0, 0, 765, 168, 0, 906, 0, 0, 683, 0,
	0, 0, 0, 115, 0, 155, 0, 166, 107, 0,
	0, 0, 0, 95, 0, 0, 0, 120, 128, 0,
	0, 164, 165, 116, 169, 0, 0, 108, 0, 0,
	148, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	135, 123, 130, 152, 140, 153, 131, 146, 145, 147,
	0, 0, 0, 158, 0, 0, 127, 122, 162, 119,
	143, 112, 106, 0, 113, 114, 118, 117, 82, 134,
	141, 144, 150, 151, 156, 90, 97, 0, 0, 0,
	0, 0, 576, 0, 577, 0, 578, 0, 581, 0,
	0, 0, 0, 585, 586, 587, 0, 161, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 109, 138, 0, 154,
	125, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 159, 0, 160, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	212, 212, 0, 170, 171, 173, 172, 174, 110, 175,
	176, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 83, 0, 94, 92, 0, 81,
	0, 89, 0, 0, 0, 0, 0, 149, 0, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 84, 93, 87, 88, 91, 0, 139, 0, 0,
	157, 142, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 906, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 212, 0, 847, 848, 0, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 685, 603, 602, 612, 613, 605, 606, 607,
	608, 609, 610, 611, 604, 0, 0, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 155, 0, 166, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 128, 0, 0,
	164, 165, 116, 169, 0, 0, 108, 0, 0, 148,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	0, 0, 158, 212, 0, 127, 122, 162, 119, 143,
	112, 106, 0, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 685, 906, 0, 0, 0, 161, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 104, 109, 138, 0, 154, 125,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 159, 0, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 0, 0, 0, 0, 0,
	0, 0, 212, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 212, 212, 212, 0, 0,
	0, 0, 0, 0, 0, 1351, 0, 0, 212, 0,
	0, 1308, 0, 0, 683, 335, 320, 280, 338, 256,
	271, 350, 273, 274, 310, 240, 290, 149, 269, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 336, 287, 0, 259, 233, 266, 234, 257, 284,
	121, 255, 322, 293, 272, 0, 344, 139, 302, 0,
	157, 142, 0, 0, 286, 325, 288, 319, 279, 311,
	248, 301, 339, 270, 307, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 304, 333,
	268, 306, 309, 232, 303, 0, 236, 241, 349, 331,
	262, 263, 0, 0, 0, 0, 1185, 0, 0, 285,
	289, 316, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 300, 0, 0, 0, 243, 238, 283,
	0, 0, 0, 247, 0, 261, 317, 0, 0, 0,
	326, 278, 168, 332, 276, 275, 340, 313, 0, 323,
	258, 267, 115, 265, 155, 308, 166, 107, 329, 324,
	298, 281, 282, 237, 0, 315, 120, 128, 254, 305,
	164, 165, 116, 169, 242, 346, 108, 229, 345, 148,
	228, 163, 330, 299, 295, 239, 328, 297, 294, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	235, 0, 158, 337, 351, 127, 122, 162, 119, 143,
	112, 106, 245, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	327, 0, 0, 0, 0, 0, 161, 244, 126, 251,
	252, 249, 250, 291, 292, 341, 342, 343, 318, 246,
	0, 0, 321, 296, 104, 109, 138, 348, 154, 125,
	167, 0, 0, 0, 0, 0, 264, 347, 314, 312,
	334, 0, 124, 159, 0, 160, 217, 0, 0, 222,
	220, 221, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	335, 320, 280, 338, 256, 271, 350, 273, 274, 310,
	240, 290, 149, 269, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 336, 287, 0, 259,
	233, 266, 234, 257, 284, 121, 255, 322, 293, 272,
	0, 344, 139, 302, 0, 157, 142, 0, 0, 286,
	325, 288, 319, 279, 311, 248, 301, 339, 270, 307,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 304, 333, 268, 306, 309, 232, 303,
	0, 236, 241, 349, 331, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 316, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 0, 300, 0,
	0, 0, 243, 238, 283, 0, 0, 0, 247, 0,
	261, 317, 0, 0, 0, 326, 278, 168, 332, 276,
	275, 340, 313, 0, 323, 258, 267, 115, 265, 155,
	308, 166, 107, 329, 324, 298, 281, 282, 237, 0,
	315, 120, 128, 254, 305, 164, 165, 116, 169, 242,
	346, 108, 229, 345, 148, 228, 163, 330, 299, 295,
	239, 328, 297, 294, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 235, 0, 158, 337, 351,
	127, 122, 162, 119, 143, 112, 106, 245, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 327, 0, 0, 0, 0,
	0, 161, 244, 126, 251, 252, 249, 250, 291, 292,
	341, 342, 343, 318, 246, 0, 0, 321, 296, 104,
	109, 138, 348, 154, 125, 167, 0, 0, 0, 0,
	0, 264, 347, 314, 312, 334, 0, 124, 159, 0,
	160, 0, 0, 0, 222, 220, 221, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 335, 320, 280, 338, 256,
	271, 350, 273, 274, 310, 240, 290, 149, 269, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 336, 287, 0, 259, 233, 266, 234, 257, 284,
	121, 255, 322, 293, 272, 0, 344, 139, 302, 0,
	157, 142, 0, 0, 286, 325, 288, 319, 279, 311,
	248, 301, 339, 270, 307, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 304, 333,
	268, 306, 309, 232, 303, 0, 236, 241, 349, 331,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 316, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 300, 0, 0, 0, 243, 238, 283,
	0, 0, 0, 247, 0, 261, 317, 0, 0, 0,
	326, 278, 168, 332, 276, 275, 340, 313, 0, 323,
	258, 267, 115, 265, 155, 308, 166, 107, 329, 324,
	298, 281, 282, 237, 0, 315, 120, 128, 254, 305,
	164, 165, 116, 169, 242, 346, 108, 229, 345, 148,
	228, 163, 330, 299, 295, 239, 328, 297, 294, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	235, 0, 158, 337, 351, 127, 122, 162, 119, 143,
	112, 106, 245, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	327, 0, 0, 0, 0, 0, 161, 244, 126, 251,
	252, 249, 250, 291, 292, 341, 342, 343, 318, 246,
	0, 0, 321, 296, 104, 109, 138, 348, 154, 125,
	167, 0, 0, 0, 0, 0, 264, 347, 314, 312,
	334, 0, 124, 159, 0, 160, 494, 0, 0, 132,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	335, 320, 280, 338, 256, 271, 350, 273, 274, 310,
	240, 290, 149, 269, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 336, 287, 0, 259,
	233, 266, 234, 257, 284, 121, 255, 322, 293, 272,
	0, 344, 139, 302, 0, 157, 142, 0, 0, 286,
	325, 288, 319, 279, 311, 248, 301, 339, 270, 307,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 304, 333, 268, 306, 309, 232, 303,
	0, 236, 241, 349, 331, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 316, 277, 0, 0,
	0, 0, 0, 0, 1330, 0, 260, 0, 300, 0,
	0, 0, 243, 238, 283, 0, 0, 0, 247, 0,
	261, 317, 0, 0, 0, 326, 278, 168, 332, 276,
	275, 340, 313, 0, 323, 258, 267, 115, 265, 155,
	308, 166, 107, 329, 324, 298, 281, 282, 237, 0,
	315, 120, 128, 254, 305, 164, 165, 116, 169, 242,
	346, 108, 687, 345, 148, 688, 163, 330, 299, 295,
	239, 328, 297, 294, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 235, 0, 158, 337, 351,
	127, 122, 162, 119, 143, 112, 106, 245, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 327, 0, 0, 0, 0,
	0, 161, 244, 126, 251, 252, 249, 250, 291, 292,
	341, 342, 343, 318, 246, 0, 0, 321, 296, 104,
	109, 138, 348, 154, 125, 167, 0, 0, 0, 0,
	0, 264, 347, 314, 312, 334, 0, 124, 159, 0,
	160, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 335, 320, 280, 338, 256,
	271, 350, 273, 274, 310, 240, 290, 149, 269, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 336, 287, 0, 259, 233, 266, 234, 257, 284,
	121, 255, 322, 293, 272, 0, 344, 139, 302, 0,
	157, 142, 0, 0, 286, 325, 288, 319, 279, 311,
	248, 301, 339, 270, 307, 0, 0, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 304, 333,
	268, 306, 309, 232, 303, 0, 236, 241, 349, 331,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 316, 277, 0, 0, 0, 0, 0, 0, 1199,
	0, 260, 0, 300, 0, 0, 0, 243, 238, 283,
	0, 0, 0, 247, 0, 261, 317, 0, 0, 0,
	326, 278, 168, 332, 276, 275, 340, 313, 0, 323,
	258, 267, 115, 265, 155, 308, 166, 107, 329, 324,
	298, 281, 282, 237, 0, 315, 120, 128, 254, 305,
	164, 165, 116, 169, 242, 346, 108, 687, 345, 148,
	688, 163, 330, 299, 295, 239, 328, 297, 294, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	235, 0, 158, 337, 351, 127, 122, 162, 119, 143,
	112, 106, 245, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	327, 0, 0, 0, 0, 0, 161, 244, 126, 251,
	252, 249, 250, 291, 292, 341, 342, 343, 318, 246,
	0, 0, 321, 296, 104, 109, 138, 348, 154, 125,
	167, 0, 0, 0, 0, 0, 264, 347, 314, 312,
	334, 0, 124, 159, 0, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	335, 320, 280, 338, 256, 271, 350, 273, 274, 310,
	240, 290, 149, 269, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 336, 287, 0, 259,
	233, 266, 234, 257, 284, 121, 255, 322, 293, 272,
	0, 344, 139, 302, 0, 157, 142, 0, 0, 286,
	325, 288, 319, 279, 311, 248, 301, 339, 270, 307,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 304, 333, 268, 306, 309, 232, 303,
	0, 236, 241, 349, 331, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 316, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 0, 300, 0,
	0, 0, 243, 238, 283, 0, 0, 0, 247, 0,
	261, 317, 0, 0, 0, 326, 278, 168, 332, 276,
	275, 340, 313, 0, 323, 258, 267, 115, 265, 155,
	308, 166, 107, 329, 324, 298, 281, 282, 237, 0,
	315, 120, 128, 254, 305, 164, 165, 116, 169, 242,
	346, 108, 229, 345, 148, 228, 163, 330, 299, 295,
	239, 328, 297, 294, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 235, 0, 158, 337, 351,
	127, 122, 162, 119, 143, 112, 106, 245, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 327, 0, 0, 0, 0,
	0, 161, 244, 126, 251, 252, 249, 250, 291, 292,
	341, 342, 343, 318, 246, 0, 0, 321, 296, 104,
	109, 138, 348, 154, 125, 167, 0, 0, 0, 0,
	0, 264, 347, 314, 312, 334, 0, 124, 159, 0,
	160, 0, 0, 0, 132, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 335, 320, 280, 338, 256,
	271, 350, 273, 274, 310, 240, 290, 149, 269, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 336, 287, 0, 259, 233, 266, 234, 257, 284,
	121, 255, 322, 293, 272, 0, 344, 139, 302, 0,
	157, 142, 0, 0, 286, 325, 288, 319, 279, 311,
	248, 301, 339, 270, 307, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 304, 333,
	268, 306, 309, 232, 303, 0, 236, 241, 349, 331,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 316, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 300, 0, 0, 0, 243, 238, 283,
	0, 0, 0, 247, 0, 261, 317, 0, 0, 0,
	326, 278, 168, 332, 276, 275, 340, 313, 0, 323,
	258, 267, 115, 265, 155, 308, 166, 107, 329, 324,
	298, 281, 282, 237, 0, 315, 120, 128, 254, 305,
	164, 165, 116, 169, 242, 346, 108, 687, 345, 148,
	688, 163, 330, 299, 295, 239, 328, 297, 294, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	235, 0, 158, 337, 351, 127, 122, 162, 119, 143,
	112, 106, 245, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	327, 0, 0, 0, 0, 0, 161, 244, 126, 251,
	252, 249, 250, 291, 292, 341, 342, 343, 318, 246,
	0, 0, 321, 296, 104, 109, 138, 348, 154, 125,
	167, 0, 0, 0, 0, 0, 264, 347, 314, 312,
	334, 0, 124, 159, 0, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	335, 320, 280, 338, 256, 271, 350, 273, 274, 310,
	240, 290, 149, 269, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 336, 287, 0, 259,
	233, 266, 234, 257, 284, 121, 255, 322, 293, 272,
	0, 344, 139, 302, 0, 157, 142, 0, 0, 286,
	325, 288, 319, 279, 311, 248, 301, 339, 270, 307,
	0, 0, 0, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 304, 333, 268, 306, 309, 232, 303,
	0, 236, 241, 349, 331, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 316, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 0, 300, 0,
	0, 0, 243, 238, 283, 0, 0, 0, 247, 0,
	261, 317, 0, 0, 0, 326, 278, 168, 332, 276,
	275, 340, 313, 0, 323, 258, 267, 115, 265, 155,
	308, 166, 107, 329, 324, 298, 281, 282, 237, 0,
	315, 120, 128, 254, 305, 164, 165, 116, 169, 242,
	346, 108, 687, 345, 148, 688, 163, 330, 299, 295,
	239, 328, 297, 294, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 235, 0, 158, 337, 351,
	127, 122, 162, 119, 143, 112, 106, 245, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 327, 0, 0, 0, 0,
	0, 161, 244, 126, 251, 252, 249, 250, 291, 292,
	341, 342, 343, 318, 246, 0, 0, 321, 296, 104,
	109, 138, 348, 154, 125, 167, 0, 0, 0, 0,
	0, 264, 347, 314, 312, 334, 0, 124, 159, 0,
	160, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 335, 320, 280, 338, 256,
	271, 350, 273, 274, 310, 240, 290, 149, 269, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 336, 287, 0, 259, 233, 266, 234, 257, 284,
	121, 255, 322, 293, 272, 0, 344, 139, 302, 0,
	157, 142, 0, 0, 286, 325, 288, 319, 279, 311,
	248, 301, 339, 270, 307, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 304, 333,
	268, 306, 309, 232, 303, 0, 236, 241, 349, 331,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 316, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 300, 0, 0, 0, 243, 238, 283,
	0, 0, 0, 247, 0, 261, 317, 0, 0, 0,
	326, 278, 168, 332, 276, 275, 340, 313, 0, 323,
	258, 267, 115, 265, 155, 308, 166, 107, 329, 324,
	298, 281, 282, 237, 0, 315, 120, 128, 254, 305,
	164, 165, 116, 169, 242, 346, 108, 687, 345, 148,
	688, 163, 330, 299, 295, 239, 328, 297, 294, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	235, 0, 158, 337, 351, 127, 122, 162, 119, 143,
	112, 106, 245, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	327, 0, 0, 0, 0, 0, 161, 244, 126, 251,
	252, 249, 250, 291, 292, 341, 342, 343, 318, 246,
	0, 0, 321, 296, 104, 109, 138, 348, 154, 125,
	167, 0, 0, 0, 0, 0, 264, 347, 314, 312,
	334, 0, 124, 159, 0, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	149, 0, 105, 0, 0, 129, 0, 133, 136, 137,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 420,
	0, 0, 0, 121, 419, 0, 0, 0, 0, 456,
	139, 0, 0, 157, 142, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 469, 437, 436, 438, 439, 440, 441, 0, 0,
	111, 442, 443, 444, 0, 0, 0, 417, 430, 0,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 428, 904, 0, 0, 0, 467, 0, 429, 0,
	0, 426, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 465, 0,
	0, 0, 0, 0, 0, 115, 0, 155, 0, 166,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	128, 0, 0, 164, 165, 116, 169, 0, 0, 108,
	0, 0, 148, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 135, 123, 130, 152, 140, 153, 131, 146,
	145, 147, 0, 0, 0, 158, 0, 0, 127, 122,
	162, 119, 143, 112, 106, 0, 113, 114, 118, 117,
	0, 134, 141, 144, 150, 151, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 126, 457, 466, 463, 464, 461, 462, 460, 459,
	458, 468, 451, 452, 454, 0, 453, 104, 109, 138,
	0, 154, 125, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 159, 0, 160, 0,
	0, 0, 132, 0, 149, 0, 105, 0, 0, 129,
	0, 133, 136, 137, 0, 170, 171, 173, 172, 174,
	110, 175, 176, 420, 0, 0, 0, 121, 419, 0,
	0, 0, 0, 456, 139, 0, 0, 157, 142, 0,
	0, 0, 0, 449, 450, 0, 0, 0, 0, 0,
	0, 701, 53, 0, 0, 469, 437, 436, 438, 439,
	440, 441, 0, 0, 111, 442, 443, 444, 702, 0,
	0, 417, 430, 0, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 428, 0, 0, 0, 0,
	467, 0, 429, 0, 0, 426, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 115,
	0, 155, 0, 166, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 128, 0, 0, 164, 165, 116,
	169, 0, 0, 108, 0, 0, 148, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 135, 123, 130, 152,
	140, 153, 131, 146, 145, 147, 0, 0, 0, 158,
	0, 0, 127, 122, 162, 119, 143, 112, 106, 0,
	113, 114, 118, 117, 0, 134, 141, 144, 150, 151,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 126, 457, 466, 463, 464,
	461, 462, 460, 459, 458, 468, 451, 452, 454, 0,
	453, 104, 109, 138, 0, 154, 125, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	159, 0, 160, 0, 0, 0, 132, 0, 149, 0,
	105, 0, 0, 129, 0, 133, 136, 137, 0, 170,
	171, 173, 172, 174, 110, 175, 176, 420, 0, 0,
	0, 121, 419, 0, 0, 0, 0, 456, 139, 0,
	0, 157, 142, 0, 0, 0, 0, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 469,
	437, 436, 438, 439, 440, 441, 0, 0, 111, 442,
	443, 444, 0, 0, 0, 417, 430, 0, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 428,
	904, 0, 0, 0, 467, 0, 429, 0, 0, 426,
	431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 115, 0, 155, 0, 166, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 128, 0,
	0, 164, 165, 116, 169, 0, 0, 108, 0, 0,
	148, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	135, 123, 130, 152, 140, 153, 131, 146, 145, 147,
	0, 0, 0, 158, 0, 0, 127, 122, 162, 119,
	143, 112, 106, 0, 113, 114, 118, 117, 0, 134,
	141, 144, 150, 151, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 126,
	457, 466, 463, 464, 461, 462, 460, 459, 458, 468,
	451, 452, 454, 0, 453, 104, 109, 138, 0, 154,
	125, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 159, 0, 160, 0, 0, 0,
	132, 0, 149, 0, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 170, 171, 173, 172, 174, 110, 175,
	176, 420, 0, 0, 0, 121, 419, 0, 0, 0,
	0, 456, 139, 0, 0, 157, 142, 0, 0, 0,
	0, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 411, 469, 437, 436, 438, 439, 440, 441,
	0, 0, 111, 442, 443, 444, 0, 0, 0, 417,
	430, 0, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 427, 428, 0, 0, 0, 0, 467, 0,
	429, 0, 0, 426, 431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	465, 0, 0, 0, 0, 0, 0, 115, 0, 155,
	0, 166, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 128, 0, 0, 164, 165, 116, 169, 0,
	0, 108, 0, 0, 148, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 0, 0, 158, 0, 0,
	127, 122, 162, 119, 143, 112, 106, 0, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 126, 457, 466, 463, 464, 461, 462,
	460, 459, 458, 468, 451, 452, 454, 0, 453, 104,
	109, 138, 0, 154, 125, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 24, 0, 124, 159, 0,
	160, 0, 0, 0, 132, 0, 149, 0, 105, 0,
	0, 129, 0, 133, 136, 137, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 420, 0, 0, 0, 121,
	419, 0, 0, 0, 0, 456, 139, 0, 0, 157,
	142, 0, 0, 0, 0, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 469, 437, 436,
	438, 439, 440, 441, 0, 0, 111, 442, 443, 444,
	0, 0, 0, 417, 430, 0, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 428, 0, 0,
	0, 0, 467, 0, 429, 0, 0, 426, 431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 465, 0, 0, 0, 0, 0,
	0, 115, 0, 155, 0, 166, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 128, 0, 0, 164,
	165, 116, 169, 0, 0, 108, 0, 0, 148, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 135, 123,
	130, 152, 140, 153, 131, 146, 145, 147, 0, 0,
	0, 158, 0, 0, 127, 122, 162, 119, 143, 112,
	106, 0, 113, 114, 118, 117, 0, 134, 141, 144,
	150, 151, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 126, 457, 466,
	463, 464, 461, 462, 460, 459, 458, 468, 451, 452,
	454, 0, 453, 104, 109, 138, 0, 154, 125, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 159, 0, 160, 0, 0, 0, 132, 0,
	149, 0, 105, 0, 0, 129, 0, 133, 136, 137,
	0, 170, 171, 173, 172, 174, 110, 175, 176, 420,
	0, 0, 0, 121, 419, 0, 0, 0, 0, 456,
	139, 0, 0, 157, 142, 0, 0, 0, 0, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 469, 437, 436, 438, 439, 440, 441, 0, 0,
	111, 442, 443, 444, 0, 0, 0, 417, 430, 0,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 428, 0, 0, 0, 0, 467, 0, 429, 0,
	0, 426, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 465, 0,
	0, 0, 0, 0, 0, 115, 0, 155, 0, 166,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	128, 0, 0, 164, 165, 116, 169, 0, 0, 108,
	0, 0, 148, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 135, 123, 130, 152, 140, 153, 131, 146,
	145, 147, 0, 0, 0, 158, 0, 0, 127, 122,
	162, 119, 143, 112, 106, 0, 113, 114, 118, 117,
	0, 134, 141, 144, 150, 151, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 126, 457, 466, 463, 464, 461, 462, 460, 459,
	458, 468, 451, 452, 454, 0, 453, 104, 109, 138,
	0, 154, 125, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 159, 0, 160, 0,
	0, 149, 132, 105, 0, 0, 129, 0, 133, 136,
	137, 0, 0, 0, 0, 170, 171, 173, 172, 174,
	110, 175, 176, 0, 121, 0, 0, 0, 0, 0,
	456, 139, 0, 0, 157, 142, 0, 0, 0, 0,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 469, 437, 436, 438, 439, 440, 441, 0,
	0, 111, 442, 443, 444, 0, 0, 0, 0, 430,
	0, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 467, 0, 429,
	0, 0, 426, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 465,
	0, 0, 0, 0, 0, 0, 115, 0, 155, 0,
	166, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 128, 0, 0, 164, 165, 116, 169, 0, 0,
	108, 0, 0, 148, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 135, 123, 130, 152, 140, 153, 131,
	146, 145, 147, 0, 0, 0, 158, 0, 0, 127,
	122, 162, 119, 143, 112, 106, 0, 113, 114, 118,
	117, 0, 134, 141, 144, 150, 151, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 126, 457, 466, 463, 464, 461, 462, 460,
	459, 458, 468, 451, 452, 454, 0, 453, 104, 109,
	138, 0, 154, 125, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 159, 0, 160,
	0, 0, 0, 132, 0, 0, 149, 0, 105, 0,
	0, 129, 0, 133, 136, 137, 170, 171, 173, 172,
	174, 110, 175, 176, 1074, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 157,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 1076,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 591, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 155, 0, 166, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 128, 0, 0, 164,
	165, 116, 169, 0, 0, 108, 0, 0, 148, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 135, 123,
	130, 152, 140, 153, 131, 146, 145, 147, 0, 0,
	0, 158, 0, 0, 127, 122, 162, 119, 143, 112,
	106, 0, 113, 114, 118, 117, 24, 134, 141, 144,
	150, 151, 156, 0, 0, 0, 0, 149, 0, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 126, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	157, 142, 0, 104, 109, 138, 0, 154, 125, 167,
	0, 0, 0, 0, 0, 53, 0, 0, 102, 0,
	0, 124, 159, 0, 160, 0, 0, 111, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 171, 173, 172, 174, 110, 175, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 155, 0, 166, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 128, 0, 0,
	164, 165, 116, 169, 0, 0, 108, 0, 0, 148,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	0, 0, 158, 0, 0, 127, 122, 162, 119, 143,
	112, 106, 0, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 149, 0, 105, 0, 0, 129,
	0, 133, 136, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 161, 121, 126, 0,
	0, 0, 0, 0, 139, 0, 0, 157, 142, 0,
	0, 0, 0, 0, 104, 109, 138, 0, 154, 125,
	167, 0, 0, 0, 0, 102, 0, 1309, 0, 0,
	0, 0, 124, 159, 111, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 155, 0, 166, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 128, 0, 0, 164, 165, 116,
	169, 0, 0, 108, 0, 0, 148, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 135, 123, 130, 152,
	140, 153, 131, 146, 145, 147, 0, 0, 0, 158,
	0, 0, 127, 122, 162, 119, 143, 112, 106, 0,
	113, 114, 118, 117, 24, 134, 141, 144, 150, 151,
	156, 0, 0, 0, 0, 149, 0, 105, 0, 0,
	129, 0, 133, 136, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 126, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 157, 142,
	0, 104, 109, 138, 0, 154, 125, 167, 0, 0,
	0, 0, 0, 53, 0, 0, 230, 0, 0, 124,
	159, 0, 160, 0, 0, 111, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	171, 173, 172, 174, 110, 175, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 155, 0, 166, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 128, 0, 0, 164, 165,
	116, 169, 0, 0, 108, 0, 0, 148, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 135, 123, 130,
	152, 140, 153, 131, 146, 145, 147, 0, 0, 0,
	158, 0, 0, 127, 122, 162, 119, 143, 112, 106,
	0, 113, 114, 118, 117, 0, 134, 141, 144, 150,
	151, 156, 149, 0, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 121, 126, 0, 0, 0,
	0, 0, 139, 0, 0, 157, 142, 0, 0, 0,
	0, 0, 104, 109, 138, 0, 154, 125, 167, 0,
	0, 0, 0, 230, 0, 0, 669, 0, 0, 670,
	124, 159, 111, 160, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 171, 173, 172, 174, 110, 175, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 155,
	0, 166, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 128, 0, 0, 164, 165, 116, 169, 0,
	0, 108, 0, 0, 148, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 0, 0, 158, 0, 0,
	127, 122, 162, 119, 143, 112, 106, 0, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 149, 0, 105, 0, 0, 129, 0, 133, 136,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 126, 121, 499, 0, 0, 0, 0,
	0, 139, 0, 0, 157, 142, 0, 0, 0, 104,
	109, 138, 0, 154, 125, 167, 0, 0, 0, 0,
	0, 0, 230, 0, 498, 0, 0, 124, 159, 0,
	160, 111, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 155, 0,
	166, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 128, 0, 0, 164, 165, 116, 169, 0, 0,
	108, 0, 0, 148, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 135, 123, 130, 152, 140, 153, 131,
	146, 145, 147, 0, 0, 0, 158, 0, 0, 127,
	122, 162, 119, 143, 112, 106, 0, 113, 114, 118,
	117, 0, 134, 141, 144, 150, 151, 156, 149, 0,
	105, 0, 0, 129, 0, 133, 136, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 121, 126, 0, 0, 0, 0, 0, 139, 0,
	0, 157, 142, 0, 0, 0, 0, 0, 104, 109,
	138, 0, 154, 125, 167, 0, 0, 0, 0, 102,
	0, 1309, 0, 0, 0, 0, 124, 159, 111, 160,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 171, 173, 172,
	174, 110, 175, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 155, 0, 166, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 128, 0,
	0, 164, 165, 116, 169, 0, 0, 108, 0, 0,
	148, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	135, 123, 130, 152, 140, 153, 131, 146, 145, 147,
	0, 0, 0, 158, 0, 0, 127, 122, 162, 119,
	143, 112, 106, 0, 113, 114, 118, 117, 0, 134,
	141, 144, 150, 151, 156, 149, 0, 105, 0, 0,
	129, 0, 133, 136, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 121, 126,
	0, 0, 0, 0, 0, 139, 0, 0, 157, 142,
	0, 0, 0, 0, 0, 104, 109, 138, 0, 154,
	125, 167, 0, 53, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 124, 159, 111, 160, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 171, 173, 172, 174, 110, 175,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 155, 0, 166, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 128, 0, 0, 164, 165,
	116, 169, 0, 0, 108, 0, 0, 148, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 135, 123, 130,
	152, 140, 153, 131, 146, 145, 147, 0, 0, 0,
	158, 0, 0, 127, 122, 162, 119, 143, 112, 106,
	0, 113, 114, 118, 117, 0, 134, 141, 144, 150,
	151, 156, 149, 0, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 121, 126, 0, 0, 0,
	0, 0, 139, 0, 0, 157, 142, 0, 0, 0,
	0, 0, 104, 109, 138, 0, 154, 125, 167, 0,
	0, 0, 0, 230, 0, 1076, 0, 0, 0, 0,
	124, 159, 111, 160, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 171, 173, 172, 174, 110, 175, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 155,
	0, 166, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 128, 0, 0, 164, 165, 116, 169, 0,
	0, 108, 0, 0, 148, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 0, 0, 158, 0, 0,
	127, 122, 162, 119, 143, 112, 106, 0, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 0,
	0, 0, 149, 0, 105, 0, 0, 129, 0, 133,
	136, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 126, 482, 121, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 157, 142, 0, 0, 104,
	109, 138, 0, 154, 125, 167, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 124, 159, 0,
	160, 0, 111, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 155,
	0, 166, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 128, 0, 0, 164, 165, 116, 169, 0,
	0, 108, 0, 0, 148, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 135, 123, 130, 152, 140, 153,
	131, 146, 145, 147, 0, 0, 0, 158, 0, 0,
	127, 122, 162, 119, 143, 112, 106, 0, 113, 114,
	118, 117, 0, 134, 141, 144, 150, 151, 156, 149,
	0, 105, 0, 0, 129, 0, 133, 136, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 121, 126, 0, 0, 0, 0, 0, 139,
	0, 0, 157, 142, 0, 0, 0, 0, 0, 104,
	109, 138, 0, 154, 125, 167, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 124, 159, 111,
	160, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 171, 173,
	172, 174, 110, 175, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 155, 0, 166, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 128,
	0, 0, 164, 165, 116, 169, 0, 0, 108, 0,
	0, 148, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 135, 123, 130, 152, 140, 153, 131, 146, 145,
	147, 0, 0, 0, 158, 0, 0, 127, 122, 162,
	119, 143, 112, 106, 0, 113, 114, 118, 117, 0,
	134, 141, 144, 150, 151, 156, 149, 0, 105, 0,
	0, 129, 0, 133, 136, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 121,
	126, 0, 0, 0, 0, 0, 139, 0, 0, 157,
	142, 0, 0, 0, 0, 0, 104, 109, 138, 0,
	154, 125, 167, 0, 0, 0, 0, 469, 0, 0,
	0, 0, 0, 0, 124, 159, 111, 160, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 171, 173, 172, 174, 110,
	175, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 155, 0, 166, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 128, 0, 0, 164,
	165, 116, 169, 0, 0, 108, 0, 0, 148, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 135, 123,
	130, 152, 140, 153, 131, 146, 145, 147, 0, 0,
	0, 158, 0, 0, 127, 122, 162, 119, 143, 112,
	106, 0, 113, 114, 118, 117, 0, 134, 141, 144,
	150, 151, 156, 149, 0, 105, 0, 0, 129, 0,
	133, 136, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 121, 126, 0, 0,
	0, 0, 0, 139, 0, 0, 157, 142, 0, 0,
	0, 0, 0, 104, 109, 138, 0, 154, 125, 167,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 124, 159, 111, 160, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 171, 173, 172, 174, 110, 175, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	155, 0, 166, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 128, 0, 0, 164, 165, 116, 169,
	0, 0, 108, 0, 0, 148, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 135, 123, 130, 152, 140,
	153, 131, 146, 145, 147, 0, 0, 0, 158, 0,
	0, 127, 122, 162, 119, 143, 112, 106, 0, 113,
	114, 118, 117, 0, 134, 141, 144, 150, 151, 156,
	149, 0, 105, 0, 0, 129, 0, 133, 136, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 121, 126, 0, 0, 0, 0, 0,
	139, 0, 0, 157, 142, 0, 0, 0, 0, 0,
	104, 109, 138, 0, 154, 125, 167, 0, 0, 0,
	0, 360, 0, 0, 0, 0, 0, 0, 124, 159,
	111, 160, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 171,
	173, 172, 174, 110, 175, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 155, 0, 166,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	128, 0, 0, 164, 165, 116, 169, 0, 0, 108,
	0, 0, 148, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 135, 123, 130, 152, 140, 153, 131, 146,
	145, 147, 0, 0, 0, 158, 0, 0, 127, 122,
	162, 119, 143, 112, 106, 0, 113, 114, 118, 117,
	0, 134, 141, 144, 150, 151, 156, 149, 0, 105,
	0, 0, 129, 0, 133, 136, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	121, 126, 0, 0, 0, 0, 0, 139, 0, 0,
	157, 142, 0, 0, 0, 0, 0, 104, 109, 138,
	0, 154, 125, 167, 0, 0, 0, 0, 1160, 0,
	0, 0, 0, 0, 0, 124, 159, 111, 160, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 171, 173, 172, 174,
	110, 175, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 155, 0, 166, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 128, 0, 0,
	164, 165, 116, 169, 0, 0, 108, 0, 0, 148,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 135,
	123, 130, 152, 140, 153, 131, 146, 145, 147, 0,
	0, 0, 158, 0, 0, 127, 122, 162, 119, 143,
	112, 106, 0, 113, 114, 118, 117, 0, 134, 141,
	144, 150, 151, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 109, 138, 0, 154, 125,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 159, 0, 160, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 171, 173, 172, 174, 110, 175, 176,
}

var yyPact = [...]int{
	178, -1000, -216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 936, 959, -1000, -1000, -1000, -1000, -1000, 692,
	141, 70, 38, 108, 106, 1715, 92, 9266, -1000, -1000,
	57, -1000, -169, -1000, -1000, -181, -1000, -1000, -1000, -1000,
	705, -1000, -1000, -1000, -1000, -1000, 909, 933, 743, 879,
	782, -1000, 70, 9266, 947, 2400, -144, 9463, 64, 90,
	87, 86, 64, -1000, 83, -1000, 58, 620, 58, 9266,
	9266, -95, 43, -1000, -1000, -81, 285, -1000, -1000, -1000,
	-97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	466, -1000, -1000, -1000, -1000, 663, 663, -1000, 9266, -1000,
	-1000, -178, -1000, -1000, -1000, -1000, 538, 847, 6363, 6363,
	936, -1000, 705, -1000, -1000, -1000, 813, -1000, -1000, 317,
	8675, 834, 174, 9266, 660, -1000, -1000, -180, 2990, -1000,
	-1000, -1000, -1000, 269, 7884, 7884, -1000, -1000, -1000, 832,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 932, 914, 619, -1000, 1435,
	-1000, -1000, 9266, 305, 615, 614, 594, 9266, 9266, 9266,
	873, 731, 9266, -1000, -1000, 946, 9266, 9266, -1000, -1000,
	285, 285, -1000, -1000, 9266, -1000, -1000, -1000, -1000, -1000,
	285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6363, -1000, -1000, 167, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 954, 202, 382, -1000, 6363, 1609, 663,
	663, -1000, -1000, 163, -1000, -1000, 6624, 6624, 6624, 6624,
	6624, 6624, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 663, 171, -1000, 6099, 663,
	663, 663, 663, 663, 663, 6363, 663, 663, 663, 663,
	663, 663, 663, 663, 663, 663, 663, 663, 663, -1000,
	-1000, 657, -1000, 380, 909, 538, 782, 7685, 744, -1000,
	-1000, 659, 9266, -1000, 9069, 4760, 944, 2695, -1000, 656,
	654, -182, -191, -1000, -180, 5307, -1000, -1000, -1000, -1000,
	169, -1000, 663, 85, 126, 1631, 1444, -34, -1000, -1000,
	-1000, 665, -1000, 665, 665, 665, 665, 7, 7, 7,
	7, -1000, -1000, -1000, -1000, -1000, 714, 706, -1000, 665,
	665, 665, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	704, 704, 704, 686, 686, 838, 871, 730, 716, 690,
	-1000, 123, 652, -1000, -1000, 9266, -1000, 909, -93, -1000,
	-1000, 320, 9266, 9266, 285, -1000, -1000, -1000, -1000, 613,
	283, -1000, 9266, -1000, -1000, -1000, -1000, -1000, -1000, 789,
	6363, 6363, 345, 6363, 6363, 207, 6624, 386, 300, 6624,
	6624, 6624, 6624, 6624, 6624, 6624, 6624, 6624, 6624, 6624,
	6624, 6624, 6624, 6624, 432, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 591, -1000, 705, 442, 442, 129, 129,
	129, 129, 129, 1940, 5043, 4465, 538, 6099, 5571, 5571,
	6363, 6363, 5571, 880, 287, 283, 8872, -1000, 538, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5571, 5571, 5571, 5571,
	6363, -1000, -1000, -1000, 847, -1000, 880, 934, -1000, 797,
	796, 5571, -1000, 683, 9069, 663, -1000, 7488, -1000, 689,
	-1000, 257, -1000, 168, -1000, -1000, -1000, -1000, -1000, 936,
	6363, -1000, 3875, -1000, -187, -1000, -179, -194, -1000, -1000,
	-1000, -1000, -1000, 283, -1000, 583, 9463, 663, 663, -1000,
	126, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 228, 228, 107, 228,
	228, 228, 228, 228, -58, -61, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, -1000,
	-1000, -1000, 560, 180, 161, -1000, -1000, -1000, -1000, 889,
	-1000, 1444, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 310, 82, -1000, 886, -1000, 885,
	521, 951, 423, 155, 147, -39, -1000, -1000, 463, 7,
	7, -1000, -1000, -1000, 825, -1000, -1000, -1000, 512, 512,
	-1000, -1000, -1000, -1000, 452, -1000, -1000, -1000, 451, -1000,
	-1000, 838, -1000, 63, -1000, 9266, 9266, 9266, -1000, 166,
	255, 72, 52, 45, 39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9266, -1000, -1000, 510, -1000, -1000, -1000,
	509, 6363, -1000, 285, 944, -1000, 6363, -1000, -1000, 786,
	207, 297, -1000, -1000, 325, -1000, -1000, 283, 283, 1055,
	-1000, -1000, -1000, -1000, 386, 6624, 6624, 6624, 745, 1055,
	1105, 788, 1248, 129, 243, 243, 262, 262, 262, 262,
	262, 419, 419, -1000, -1000, -1000, 538, -1000, -1000, -1000,
	538, 5571, 650, -1000, -1000, 6889, 162, 663, 152, -1000,
	-1000, 538, 576, 576, 308, 393, 576, 5571, 304, -1000,
	6363, 538, -1000, 576, 538, 576, 576, -1000, -1000, 9266,
	-1000, -1000, -1000, -1000, 682, -1000, 863, 642, 644, -1000,
	-1000, 5835, 538, 609, 135, 936, 9069, 6363, 4465, 909,
	283, -1000, -1000, -1000, -199, -197, -1000, -1000, 538, 9463,
	9463, -1000, 508, -1000, 423, 228, 228, -1000, 824, 448,
	437, 426, 507, 500, 228, 228, 424, 498, 578, 411,
	401, 400, 428, 495, 213, 427, 425, 418, 9660, 61,
	-1000, 560, -1000, 884, 180, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 699, -1000, -1000, -1000, -1000, -1000,
	-1000, -98, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 623, -1000, -1000, 244, 606, -1000, 601,
	647, 582, -1000, 228, 228, 663, 663, 663, -1000, 9266,
	-1000, -1000, -1000, 577, -1, 692, 567, 9463, -1000, -1000,
	-1000, -1000, 283, 320, -1000, 283, -1000, -1000, -1000, -1000,
	-1000, -1000, 745, 1055, 828, -1000, 6624, 6624, -1000, -1000,
	576, 5571, -1000, -1000, 8475, -1000, -1000, 3580, 5571, 4170,
	-1000, -1000, -1000, 1373, 432, 1373, -120, 684, 276, -1000,
	6363, 391, -1000, -1000, -1000, -1000, -1000, -1000, 944, 8278,
	883, -1000, 663, -1000, -1000, 675, 8872, 8872, 909, -1000,
	283, -1000, -1000, -1000, -1000, -1000, -1000, 538, 538, -1000,
	-1000, 423, 423, -1000, -1000, -1000, -1000, -1000, -1000, 494,
	493, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 688, -1000, 923, 687, 61, 560, 376, -1000,
	-1000, -1000, -1000, -1000, 475, -1000, 383, -1000, 351, 553,
	246, 8872, 8872, 8872, -1000, -1000, -1000, 803, -1000, -1000,
	-1000, -1000, -1000, 6624, 1055, 1055, -1000, -1000, -1000, -1000,
	130, 538, -1000, 538, 665, 665, -1000, 665, 686, -1000,
	665, 24, 665, 23, 538, 538, 663, -116, -1000, 283,
	6363, 942, 646, 681, -1000, -1000, -1000, 875, 7090, 7287,
	950, -1000, 663, -1000, 705, 124, -1000, -1000, 663, -153,
	-1000, -1000, -1000, -1000, 8872, -1000, -1000, -1000, -1000, 8872,
	666, 61, -1000, 610, -1000, 548, 544, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 566, -1000, 665, 566, 566, 556,
	1055, 3285, -1000, -1000, -1000, 113, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6624, 538, 433, 283, 940, 911,
	8278, 8278, 8278, 8278, -1000, 771, 770, -1000, 748, 742,
	775, 9266, -1000, 564, 7090, 145, -1000, 8081, -1000, -1000,
	9069, 644, 538, 8872, -151, -1000, 350, 551, 547, 8872,
	664, -1000, -1000, -1000, -1000, 8872, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 156, -1000, -1000, -1000, 6363, 6363, 681,
	661, 600, -1000, -1000, -1000, -1000, 750, -1000, 749, -1000,
	-1000, -1000, -1000, -1000, 84, 79, 75, -1000, 621, -1000,
	-1000, 543, -1000, 539, -1000, -1000, -1000, 537, 8872, 157,
	-1000, 102, 381, 538, 89, -127, 283, 532, 6363, 6363,
	-1000, -1000, 663, 663, 663, -151, -1000, 792, 101, 101,
	-1000, 535, 841, -1000, -1000, -1000, 228, 387, 904, 841,
	-1000, -1000, 896, 841, -1000, -1000, 785, -123, -135, 283,
	283, 8872, 8872, 8872, -1000, 194, -1000, 228, -1000, 346,
	893, 101, -1000, -1000, 228, 228, 344, -1000, -1000, -1000,
	-1000, 531, -1000, 779, -1000, 530, -1000, 530, 530, 663,
	326, -1000, 525, 101, 553, 553, -1000, -1000, -125, -1000,
	8872, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -128, -1000,
	-148, -1000,
}

var yyPgo = [...]int{
	0, 12, 11, 1253, 1252, 1251, 25, 1248, 1247, 1244,
	1243, 1242, 1240, 1239, 36, 805, 1236, 1235, 1234, 1233,
	1232, 1231, 1228, 1227, 1226, 1225, 1224, 1221, 1220, 1205,
	1204, 281, 1203, 1202, 1201, 41, 1197, 73, 1196, 85,
	1191, 1187, 1186, 43, 232, 39, 33, 28, 1185, 30,
	19, 52, 1181, 1180, 10, 1177, 42, 1176, 1175, 54,
	78, 1171, 1170, 45, 1156, 1155, 1154, 2, 22, 1153,
	60, 1152, 1151, 76, 209, 1149, 1148, 1147, 1145, 1144,
	1143, 53, 6, 13, 8, 26, 1140, 46, 20, 1139,
	50, 1136, 1135, 1133, 1128, 44, 1122, 72, 1120, 32,
	67, 1116, 49, 21, 48, 1115, 1114, 70, 88, 77,
	71, 1103, 65, 1102, 1098, 158, 1092, 1090, 1089, 800,
	1088, 371, 414, 1084, 57, 1083, 35, 0, 16, 17,
	29, 1081, 51, 1093, 31, 9, 1079, 1077, 1455, 27,
	79, 24, 1076, 1074, 1073, 1072, 1071, 1070, 1067, 229,
	1066, 1065, 1064, 1060, 1059, 1058, 1057, 1056, 1055, 1054,
	1052, 1051, 1050, 1049, 1047, 1039, 1038, 1037, 1035, 1034,
	1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 40, 1022,
	1021, 1019, 15, 58, 34, 56, 1018, 1015, 1014, 74,
	14, 1013, 1008, 1007, 1006, 63, 69, 1005, 75, 47,
	55, 1004, 1003, 999, 62, 7, 23, 998, 18, 996,
	994, 4, 5, 993, 992, 991, 988, 986, 985, 983,
	1, 981, 979, 61, 978, 977, 59, 3, 975, 974,
	973, 971, 89, 119, 968, 125,
}

var yyR1 = [...]int{
	0, 230, 231, 231, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 15, 16, 16, 17,
	17, 18, 18, 34, 34, 19, 20, 21, 21, 228,
	228, 227, 154, 154, 22, 22, 22, 22, 22, 229,
	229, 229, 229, 229, 229, 219, 219, 220, 220, 214,
	212, 212, 209, 209, 216, 216, 207, 207, 213, 213,
	210, 210, 208, 208, 215, 215, 224, 224, 225, 225,
	226, 226, 185, 185, 184, 184, 183, 183, 186, 186,
	186, 25, 200, 202, 202, 203, 203, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 156, 158, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 171, 172, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 175, 175, 176, 176, 177, 177, 159,
	182, 182, 157, 153, 155, 201, 201, 201, 196, 132,
	132, 142, 142, 142, 142, 221, 221, 222, 222, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 145,
	145, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	144, 144, 144, 144, 144, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	148, 148, 148, 195, 195, 149, 149, 189, 189, 190,
	190, 190, 187, 187, 188, 188, 191, 191, 150, 150,
	150, 150, 150, 150, 36, 35, 35, 35, 117, 117,
	117, 192, 178, 178, 178, 152, 179, 179, 180, 180,
	180, 181, 181, 181, 193, 193, 194, 194, 151, 197,
	197, 197, 197, 6, 6, 217, 217, 217, 217, 211,
	211, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	5, 5, 199, 199, 198, 198, 206, 206, 205, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
	64, 64, 7, 26, 8, 9, 10, 10, 11, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 42, 42,
	62, 62, 62, 59, 59, 60, 60, 61, 61, 58,
	58, 63, 63, 63, 30, 28, 29, 29, 29, 29,
	234, 31, 32, 32, 33, 33, 33, 39, 39, 39,
	37, 37, 38, 38, 45, 45, 44, 44, 46, 46,
	46, 46, 131, 131, 131, 130, 130, 48, 48, 49,
	49, 50, 50, 51, 51, 51, 65, 52, 52, 52,
	52, 137, 137, 136, 136, 136, 135, 135, 53, 53,
	53, 53, 54, 54, 54, 54, 55, 55, 57, 57,
	56, 56, 66, 66, 66, 66, 67, 67, 68, 68,
	47, 47, 47, 47, 47, 47, 47, 120, 120, 70,
	70, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 80, 80, 80, 80, 80, 80, 71, 71, 71,
	71, 71, 71, 71, 43, 43, 81, 81, 81, 87,
	82, 82, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 78, 78, 78, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 77, 77, 77, 77, 77, 77,
	77, 77, 235, 235, 79, 79, 79, 79, 40, 40,
	40, 40, 40, 139, 139, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 91, 91,
	41, 41, 89, 89, 90, 92, 92, 88, 88, 88,
	73, 73, 73, 73, 73, 73, 73, 75, 75, 75,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 98,
	98, 98, 99, 99, 99, 99, 100, 100, 100, 72,
	72, 72, 72, 72, 72, 101, 101, 101, 101, 102,
	102, 83, 83, 85, 85, 84, 86, 103, 103, 104,
	105, 105, 108, 108, 107, 107, 107, 107, 107, 116,
	116, 115, 115, 115, 106, 106, 109, 109, 113, 113,
	112, 114, 114, 114, 114, 111, 111, 110, 110, 140,
	140, 140, 118, 118, 121, 121, 122, 122, 119, 119,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	124, 124, 124, 125, 125, 218, 218, 128, 128, 129,
	129, 133, 133, 134, 134, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	232, 233, 138,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 1, 1, 1, 1, 2,
	3, 2, 0, 2, 1, 1, 0, 2, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 4, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 4, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 3, 3, 4, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 3, 4, 1, 1,
	1, 1, 0, 3, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 2, 7,
	7, 8, 9, 0, 1, 3, 1, 2, 3, 0,
	2, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 3, 2, 6,
	7, 7, 7, 9, 7, 7, 7, 4, 5, 4,
	1, 3, 3, 3, 2, 2, 3, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 6, 7, 3,
	3, 3, 5, 3, 3, 3, 3, 3, 0, 3,
	1, 1, 1, 0, 2, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 4, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 1, 2, 3, 3, 3, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 2, 2, 0, 2,
	3, 2, 2, 2, 1, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0,
}

var yyChk = [...]int{
	-1000, -230, -13, -14, -18, -19, -20, -21, -22, -23,
	-24, -7, -26, -27, -30, -28, -8, -9, -10, -11,
	-12, -29, -15, -16, 6, -34, 8, 9, 42, -25,
	123, 124, 125, 146, 127, 139, 45, 62, 264, 141,
	271, 274, 275, 278, 277, 292, 38, 140, 144, 145,
	-232, 7, 248, 65, -231, 300, -95, 14, -33, 5,
	-31, -234, -31, -31, -31, -31, -200, 65, 240, -218,
	22, 29, 130, 31, -119, 134, 130, 131, 240, 130,
	130, 234, 123, 229, 266, -61, -62, 268, 269, 236,
	130, 270, 232, 267, 231, 68, 44, 131, 26, 24,
	130, -133, 68, -127, 254, 19, 201, 147, 166, 255,
	297, 77, 200, 203, 204, 142, 162, 206, 205, 198,
	156, 40, 196, 180, 272, 259, 238, 195, 157, 22,
	181, 185, 279, 24, 208, 179, 25, 26, 256, 47,
	183, 209, 51, 199, 210, 187, 186, 188, 169, 17,
	211, 212, 182, 184, 258, 144, 213, 50, 192, 273,
	275, 236, 197, 171, 160, 161, 146, 260, 132, 163,
	292, 293, 295, 294, 296, 298, 299, -138, -138, 71,
	258, -138, 276, -138, -138, 293, 295, 294, 296, 297,
	299, 264, -138, -138, -138, -138, -14, -99, 16, 15,
	-17, -15, -232, 6, 33, 34, -39, 52, 53, -32,
	-119, -56, -133, 10, -105, -106, -108, 276, -140, -107,
	280, 281, 279, -129, -116, 282, -128, -126, 170, 167,
	68, -127, 83, 35, 37, 190, 86, 153, 118, 175,
	15, 87, 164, 117, 237, 202, 249, 123, 60, 241,
	242, 239, 240, 229, 158, 41, 9, 38, 140, 34,
	111, 125, 90, 91, 266, 143, 36, 141, 80, 18,
	63, 10, 44, 12, 13, 135, 134, 102, 131, 58,
	7, 151, 152, 119, 39, 99, 54, 32, 56, 100,
	16, 243, 244, 43, 178, 174, 253, 177, 150, 173,
	113, 61, 48, 84, 78, 159, 81, 64, 145, 82,
	14, 59, 269, 137, 268, 155, 101, 126, 248, 57,
	6, 252, 42, 139, 149, 55, 130, 230, 176, 148,
	172, 89, 133, 79, 270, 5, 31, 193, 8, 62,
	136, 245, 246, 247, 46, 168, 165, 267, 257, 88,
	11, 194, -229, 279, 273, 265, 261, -201, -196, -132,
	68, -127, -122, 135, 131, 131, 131, -122, 130, -121,
	135, 68, -121, -56, -56, 233, 130, 240, -138, -138,
	230, -58, 237, 238, -60, 10, 102, -138, -138, -138,
	236, -138, -138, -138, -138, -138, -56, -138, 71, -138,
	-84, -232, -84, -138, -56, -138, -138, 298, 277, 278,
	-233, 67, -100, 18, 43, -47, -69, 84, -74, 41,
	36, -73, -70, -88, -86, -87, 118, 107, 108, 115,
	85, 119, -78, -76, -77, -79, 70, 69, 71, 72,
	73, 74, 78, 79, 80, -128, -133, -84, -232, 56,
	57, 249, 250, 253, 251, 87, 46, 239, 247, 246,
	245, 243, 244, 241, 242, 135, 240, 113, 248, 68,
	-127, -96, -97, -47, -95, -14, -31, 48, -37, 34,
	76, -57, 39, -56, 42, 120, -56, 66, -109, -112,
	-110, 283, 285, -107, 276, 92, -115, -128, 70, 41,
	-115, 42, 15, 15, 67, 66, -142, -145, -147, -146,
	-148, -143, -144, 164, 165, 118, 168, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 42, 142, 160,
	161, 162, 163, 181, 182, 183, 184, 185, 186, 187,
	188, 147, 166, 255, 148, 149, 150, 151, 152, 153,
	155, 156, 157, 158, 159, -133, 84, 68, 68, 68,
	-56, -56, -64, -56, 36, 64, -133, -42, 10, -56,
	-133, -59, -60, -60, -56, -59, -138, -138, -138, -82,
	-47, -138, -124, 133, 35, -138, -138, -138, 8, 102,
	83, 82, 99, 66, 17, -47, -71, 102, 84, 100,
	101, 86, 104, 103, 114, 107, 108, 109, 110, 111,
	112, 113, 105, 106, 117, 92, 93, 94, 95, 96,
	97, 98, -120, -232, -87, -232, 121, 122, -74, -74,
	-74, -74, -74, -74, -232, 120, -14, -232, -232, -232,
	-232, -232, -232, -232, -91, -47, -232, -235, -232, -235,
	-235, -235, -235, -235, -235, -235, -232, -232, -232, -232,
	66, -98, 37, 38, -99, -233, -39, -75, -128, 71,
	74, -38, 55, -72, 42, 46, -14, -232, -56, -103,
	-104, -88, -128, -133, -134, -133, -126, 167, 170, -68,
	11, -108, -140, -111, 66, -113, 66, 284, 286, 287,
	-109, 64, 81, -47, -179, 117, -232, 263, 23, -202,
	-203, -204, -157, -153, -155, -156, -158, -159, -160, -161,
	-162, -163, -164, -165, -166, -167, -168, -169, -170, -171,
	-172, -173, -174, -175, -176, -177, 77, 272, -185, 190,
	201, 45, 202, 203, 204, 131, 206, 207, 208, 25,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 41,
	-196, -197, -198, -5, -4, 131, 32, 29, 22, 21,
	-221, -222, -223, -191, -150, -192, -193, -194, -151, -36,
	-152, -180, -181, 78, 84, 41, 190, 137, 32, 31,
	77, 64, 117, 200, 197, -187, 193, -149, 65, -149,
	-149, -149, -149, -178, 167, -178, -178, -178, 65, 65,
	-149, -149, -149, -189, 65, -189, -189, -190, 65, -190,
	-224, -225, -226, -185, 36, 64, 64, 64, -123, 126,
	272, 249, 128, 125, 129, 124, 190, 167, 77, 41,
	14, 260, 68, 66, -56, -99, 235, -138, -138, -63,
	100, 11, -133, -56, -59, -138, 66, -233, -56, 50,
	-47, -47, -80, 78, 84, 79, 80, -47, -47, -74,
	-81, -84, -87, 75, 102, 100, 101, 86, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -139, 68, 70, 68, -73, -73, -128,
	-45, 34, -44, -46, 109, -47, -133, -129, -134, -126,
	-233, -14, -44, -44, -47, -47, -44, -37, -89, -90,
	88, -128, -233, -44, -45, -44, -44, -97, -100, -118,
	18, 10, 46, 46, -44, -102, 64, -103, -83, -85,
	-84, -232, -14, -101, -128, -68, 66, 92, 120, -95,
	-47, -110, -112, -114, 288, 285, 291, 68, -132, -232,
	-232, -204, -184, 92, -184, 117, -183, 170, 167, -184,
	-184, -184, -184, -184, 205, 205, -184, -184, -184, -184,
	-184, -184, -184, -184, -184, -184, -184, -184, -184, -6,
	68, -199, -198, 137, 31, 30, -223, 78, 70, 71,
	72, 78, -35, -70, -117, 239, 243, 244, 32, 32,
	70, 8, -182, 68, 70, 195, 196, 41, 41, 198,
	199, -188, 194, 71, -178, -178, 42, -195, 70, -195,
	71, 71, -226, 117, -183, -56, -56, -56, -138, -124,
	-125, 131, 32, 92, 133, 138, 138, 138, -56, -138,
	70, 70, -47, -59, -68, -47, -138, 51, 78, 79,
	80, -81, -74, -74, -74, -43, 143, 83, -233, -233,
	-44, 66, -131, -130, 35, -128, 70, 120, -232, 120,
	-233, -233, -233, 66, 136, 35, -233, -44, -92, -90,
	90, -47, -233, -233, -233, -233, -233, -56, -48, 10,
	40, -102, 66, -233, -233, -233, 66, 120, -95, -104,
	-47, -129, -99, 285, 289, 290, -233, -132, -132, 70,
	-182, -184, -184, 42, 71, 71, 71, 70, 70, -184,
	-184, 71, 70, 68, 71, 71, 71, 71, 41, 70,
	41, 196, 195, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 71, 41, 71, 41, 71, 41,
	68, -127, -2, -1, 136, -6, 32, -199, 65, -35,
	67, 68, 118, 67, 66, 67, 66, 67, 66, -184,
	-184, -232, -232, -232, -56, -138, 68, 167, -200, 68,
	-196, -63, -43, 83, -74, -74, -233, -46, -130, 109,
	-134, -45, -129, -141, 118, 164, 142, 162, 158, 179,
	169, 192, 160, 193, -139, -141, 254, -95, 91, -47,
	89, -68, -49, -50, -51, -52, -65, -87, -232, -56,
	32, -85, 46, -14, -232, -128, -128, -99, -233, -233,
	-182, -182, 70, 70, 65, -3, 23, 20, 28, 65,
	-2, -6, 67, 71, 70, 71, 71, -220, 68, 41,
	-186, 68, 118, 41, -206, -205, -128, -206, -206, 42,
	-74, 120, -233, -233, -149, -149, -149, -190, -149, 152,
	-149, 152, -233, -233, -232, -41, 252, -47, -93, 12,
	66, -53, -54, -55, 54, 58, 60, 55, 56, 57,
	61, -137, 35, -49, -232, -136, -135, 35, -133, 70,
	8, -83, -14, 120, -232, -154, 262, -206, -206, 65,
	-2, 67, 67, 67, -233, 66, -149, -233, -233, 68,
	109, -178, 68, -74, -233, 70, -94, 13, 15, -50,
	-51, -50, -51, 54, 54, 54, 59, 54, 59, 54,
	-54, -133, -233, -66, 62, 134, 63, -135, -103, -233,
	-128, -228, -227, 261, 71, 67, 67, -206, 65, -209,
	-205, -207, -210, -40, 102, 257, -47, -82, 64, 64,
	54, 54, 131, 131, 131, 66, -233, 68, -211, -211,
	67, -206, -208, -216, -212, -214, 25, 77, 136, -208,
	-213, -212, 257, -208, -212, -233, 255, 61, 258, -47,
	-47, -232, -232, -232, -227, 46, -217, 25, -1, 77,
	257, -211, 67, -215, 43, 19, -184, 70, -219, 23,
	20, 27, 51, 256, 259, -67, -128, -67, -67, 102,
	-184, 70, 27, -211, -184, -184, 71, 68, 51, -233,
	66, -233, -233, -84, 71, 68, -220, -220, 257, -128,
	258, 259,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 594, 0, 380, 380, 380, 380, 380, 0,
	685, 668, 0, 0, 0, 367, 0, 0, 892, 892,
	0, 892, 0, 892, 892, 0, 892, 892, 892, 892,
	0, 33, 34, 890, 1, 3, 602, 0, 0, 384,
	387, 382, 668, 0, 0, 0, 49, 0, 666, 0,
	0, 0, 666, 686, 0, 669, 664, 0, 664, 0,
	0, 0, 0, 892, 892, 0, 0, 892, 892, 892,
	0, 892, 892, 892, 892, 892, 368, 360, 361, 362,
	0, 375, 691, 692, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 324, 325, 892,
	0, 328, 892, 330, 331, 0, 0, 892, 0, 892,
	892, 0, 376, 377, 378, 379, 27, 606, 0, 0,
	594, 29, 0, 380, 385, 386, 390, 388, 389, 381,
	0, 0, 440, 0, 37, 38, 630, 0, 0, 632,
	659, 660, -2, 0, 0, 0, 689, 690, -2, 706,
	687, 688, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 44, 50, 51, 0, 0, 0, 165, 0,
	169, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 358, 0, 0, 344, 345,
	363, 0, 369, 370, 0, 365, 366, 349, 350, 351,
	363, 353, 354, 355, 356, 357, 892, 326, 892, 329,
	892, 0, 892, 334, 680, 336, 337, 892, 892, 892,
	28, 891, 23, 0, 0, 603, 450, 0, 455, 457,
	0, 492, 493, 494, 495, 496, 0, 0, 0, 0,
	0, 0, 518, 519, 520, 521, 580, 581, 582, 583,
	584, 585, 586, 459, 460, 577, 0, 626, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 542, 542, 542,
	542, 542, 542, 542, 542, 0, 0, 0, 0, -2,
	-2, 595, 596, 599, 602, 27, 387, 0, 392, 391,
	383, 0, 0, 439, 0, 0, 448, 0, 644, 655,
	648, 0, 0, 633, 0, 0, 637, 641, 642, 643,
	266, 640, 0, 0, -2, 291, 175, 242, 172, 173,
	174, 235, 190, 235, 235, 235, 235, 262, 262, 262,
	262, 218, 219, 220, 221, 222, 0, 0, 205, 235,
	235, 235, 209, 225, 226, 227, 228, 229, 230, 231,
	232, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	237, 237, 237, 239, 239, -2, 0, 0, 0, 0,
	91, 0, 317, 320, 665, 0, 319, 602, 0, 892,
	892, 371, 0, 0, 363, 892, 374, 327, 332, 0,
	490, 333, 0, 681, 682, 338, 339, 340, 607, 0,
	0, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 477, 478, 479, 480, 481,
	482, 483, 456, 0, 470, 0, 0, 0, 512, 513,
	514, 515, 516, 0, 394, 0, 27, 0, 0, 0,
	0, 0, 0, 390, 0, 569, 0, 534, 0, 535,
	536, 537, 538, 539, 540, 541, 0, 394, 0, 0,
	0, 598, 600, 601, 606, 30, 390, 0, 587, 0,
	0, 0, 393, 619, 0, 0, -2, 0, 438, 448,
	627, 0, 577, 0, 441, 693, 694, 706, 707, 594,
	0, 631, 0, 646, 0, 647, 0, 0, 657, 658,
	645, 634, 635, 636, 638, 0, 0, 0, 0, 92,
	-2, 95, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 84, 84, 0, 84,
	84, 84, 84, 84, 0, 0, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 83,
	166, 167, 283, 302, 0, 304, 305, 300, -2, 292,
	168, 176, 177, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 246, 0, 0, 261, 0, 275, 277,
	0, 0, 0, 0, 0, 244, 243, 189, 0, 262,
	262, 212, 213, 214, 0, 215, 216, 217, 0, 0,
	206, 207, 208, 200, 0, 201, 202, 203, 0, 204,
	45, -2, 78, 0, 667, 0, 0, 0, 892, 680,
	0, 677, 0, 675, 0, 670, 671, 672, 673, 674,
	676, 678, 679, 0, 318, 892, 0, 342, 343, 346,
	0, 0, 364, 363, 448, 352, 0, 625, 892, 0,
	451, 452, 454, 471, 0, 473, 475, 604, 605, 461,
	462, 486, 487, 488, 0, 0, 0, 0, 484, 466,
	0, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 511, 553, 554, 0, 509, 510, 517,
	0, 0, 395, 396, 398, 402, 0, 578, 0, -2,
	489, 27, 0, 0, 0, 0, 0, 0, 575, 572,
	0, 0, 543, 0, 0, 0, 0, 597, 24, 0,
	662, 663, 588, 589, 407, 31, 0, 619, 609, 621,
	623, 0, 27, 0, 615, 594, 0, 0, 0, 602,
	449, 656, 649, 650, 0, 0, 654, 267, 0, 0,
	0, 96, 0, 85, 0, 84, 84, 86, 0, 0,
	0, 0, 0, 0, 84, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	284, 283, 303, 0, 302, 293, 178, 247, 248, 249,
	250, 251, 252, 253, 255, 258, 259, 260, 274, 276,
	278, 0, 265, 160, 161, 268, 269, 270, 271, 272,
	273, 171, 245, 0, 210, 211, 0, 0, 233, 0,
	0, 0, 79, 84, 84, 0, 0, 0, 309, 0,
	892, 683, 684, 0, 0, 0, 0, 0, 321, 341,
	359, 372, 373, 371, 347, 491, 335, 608, 472, 474,
	476, 463, 484, 467, 0, 464, 0, 0, 458, 522,
	0, 0, 399, 403, 0, 405, 406, 0, 394, 0,
	-2, 525, 526, 0, 0, 0, 0, 594, 0, 573,
	0, 0, 533, 544, 545, 546, 547, 25, 448, 0,
	0, 32, 0, 624, -2, 0, 0, 0, 602, 628,
	629, 578, 36, 651, 652, 653, 52, 0, 0, 162,
	163, 0, 0, 87, 121, 122, 159, 124, 125, 0,
	0, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 0, 296, 0, 0, 295, 283, 0, 254,
	236, 263, 264, 223, 0, 224, 0, 240, 0, 0,
	0, 0, 0, 0, 310, 311, 312, 0, 314, 315,
	316, 348, 465, 0, 485, 468, 523, 397, 404, 400,
	0, 0, 579, 0, 235, 235, 558, 235, 239, 561,
	235, 563, 235, 566, 0, 0, 0, 570, 532, 576,
	0, 590, 408, 409, 411, 412, 413, 421, 0, 423,
	0, 622, 0, -2, 0, 617, 616, 35, 0, 42,
	123, 164, 126, 127, 0, 294, 297, 298, 299, 0,
	0, 295, 256, 0, 234, 0, 0, 80, 57, 58,
	81, 88, 89, 90, 0, 306, 235, 0, 0, 0,
	469, 0, 524, 527, 555, 262, 559, 560, 562, 564,
	565, 567, 529, 528, 0, 0, 0, 574, 592, 0,
	0, 0, 0, 0, 428, 0, 0, 431, 0, 0,
	0, 0, 422, 0, 0, 442, 424, 0, 426, 427,
	0, 612, 27, 0, 0, 54, 0, 0, 0, 0,
	0, 257, 238, 241, 62, 0, 308, 66, 70, 313,
	401, 556, 557, 548, 531, 571, 26, 0, 0, 410,
	417, 0, 420, 429, 430, 432, 0, 434, 0, 436,
	437, 414, 415, 416, 0, 0, 0, 425, 620, -2,
	618, 0, 39, 0, 43, 289, 289, 0, 0, 72,
	307, 72, 72, 0, 0, 0, 593, 591, 0, 0,
	433, 435, 0, 0, 0, 0, 53, 0, 279, 280,
	289, 0, 46, 63, 64, 65, 84, 0, 0, 47,
	67, 68, 0, 48, 71, 530, 0, 0, 0, 418,
	419, 0, 0, 0, 40, 0, 290, 84, 286, 0,
	0, 281, 289, 73, 84, 84, 0, 61, 59, 55,
	56, 0, 549, 0, 552, 0, 446, 0, 0, 0,
	0, 287, 0, 282, 0, 0, 60, 69, 550, 443,
	0, 444, 445, 41, 285, 288, 74, 75, 0, 447,
	0, 551,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 112, 104, 3,
	65, 67, 109, 107, 66, 108, 120, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 300,
	93, 92, 94, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	86, 87, 88, 89, 90, 91, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}
type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}
func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}
func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4
	if !yyErrorVerbose {
		return "syntax error"
	}
	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)
	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)
	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}
	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}
		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}
	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}
func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}
out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}
func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}
yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}
		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}
	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}
	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1
	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1050
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1058
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1062
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1069
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1089
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1095
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1106
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1128
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1134
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1144
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1160
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1187
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 47:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1199
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1203
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1209
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1221
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1227
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1234
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = "hash"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = "btree"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = "default"
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1273
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1302
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1333
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1359
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1371
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1391
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1406
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1411
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1421
		{
			yyVAL.str = "character set"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1431
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1435
		{
			yyVAL.str = "default"
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1533
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1588
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1602
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1723
		{
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1733
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1758
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1764
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1770
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1805
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1817
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1845
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1853
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1865
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1869
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1909
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1970
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2328
		{
			yyVAL.optVal = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2337
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2341
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2349
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2359
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2376
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2391
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2441
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2464
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2552
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2558
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2570
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2584
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2595
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2611
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2660
		{
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2677
		{
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			// set empty
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2735
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2747
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2751
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2756
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2761
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2765
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2769
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2773
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2777
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2783
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2791
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2796
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.statement = &Xa{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			yyVAL.statement = &Explain{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2840
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2844
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2854
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2868
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2876
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2880
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2892
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2906
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2910
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2914
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2922
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2926
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2930
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2941
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2952
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2956
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2960
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2972
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2976
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2980
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2989
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3009
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3029
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = "full "
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3049
		{
			yyVAL.showFilter = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3063
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3069
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.statement = &OtherRead{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3079
		{
			yyVAL.statement = &OtherRead{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3087
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3092
		{
			setAllowComments(yylex, true)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3101
		{
			yyVAL.bytes2 = nil
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3105
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.str = UnionStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.str = UnionAllStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = UnionDistinctStr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3124
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.str = SQLCacheStr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3137
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.str = DistinctStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = StraightJoinHint
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.selectExprs = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3169
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3187
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3192
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3200
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3212
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3216
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3240
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3244
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3250
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3267
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3271
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3289
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.str = JoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3314
		{
			yyVAL.str = JoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3318
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.str = StraightJoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3328
		{
			yyVAL.str = LeftJoinStr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.str = LeftJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3336
		{
			yyVAL.str = RightJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.str = RightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3346
		{
			yyVAL.str = NaturalJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3350
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3374
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3379
		{
			yyVAL.indexHints = nil
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3383
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3387
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3391
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3401
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3406
		{
			yyVAL.expr = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3410
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3446
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3450
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3482
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3486
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3490
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3494
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3502
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3508
		{
			yyVAL.str = IsNullStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3512
		{
			yyVAL.str = IsNotNullStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			yyVAL.str = IsTrueStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3520
		{
			yyVAL.str = IsNotTrueStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.str = IsFalseStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3528
		{
			yyVAL.str = IsNotFalseStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.str = EqualStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3538
		{
			yyVAL.str = LessThanStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3542
		{
			yyVAL.str = GreaterThanStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3546
		{
			yyVAL.str = LessEqualStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.str = GreaterEqualStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.str = NotEqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3563
		{
			yyVAL.expr = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3581
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3587
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3593
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3603
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3607
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3611
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3679
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3683
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3687
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3695
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3709
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3713
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3717
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3735
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3739
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3743
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3761
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3765
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 530:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3773
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 531:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3777
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3781
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3785
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3860
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3864
		{
			yyVAL.str = BooleanModeStr
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3868
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 551:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3872
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3876
		{
			yyVAL.str = QueryExpansionStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3882
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3886
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3947
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3951
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3956
		{
			yyVAL.str = string("")
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3960
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3970
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3976
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3981
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3985
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3991
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3995
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3999
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4005
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4009
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4013
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4017
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4021
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4025
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4029
		{
			yyVAL.expr = &NullVal{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4035
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4044
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4048
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4053
		{
			yyVAL.exprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4057
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4062
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4066
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4071
		{
			yyVAL.orderBy = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4075
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4081
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4085
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4091
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4096
		{
			yyVAL.str = AscScr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4100
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4104
		{
			yyVAL.str = DescScr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4109
		{
			yyVAL.limit = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4113
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4117
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4121
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4126
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4130
		{
			yyVAL.str = ForUpdateStr
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4134
		{
			yyVAL.str = ShareModeStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4147
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4151
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4155
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4160
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4164
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4168
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4175
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4179
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4183
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4187
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4192
		{
			yyVAL.updateExprs = nil
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4196
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4202
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4206
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4212
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4216
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4222
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4228
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4238
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4242
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4248
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4254
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4258
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4264
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4268
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4275
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4279
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4283
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4287
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4291
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4298
		{
			yyVAL.bytes = []byte("charset")
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4304
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4308
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4312
		{
			yyVAL.expr = &Default{}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4318
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4322
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4328
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4332
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4338
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4342
		{
			yyVAL.str = yyDollar[2].str
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4348
		{
			yyVAL.str = yyDollar[3].str
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4354
		{
			yyVAL.str = RepeatableRead
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4358
		{
			yyVAL.str = ReadCommitted
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4362
		{
			yyVAL.str = ReadUncommitted
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4366
		{
			yyVAL.str = Serializable
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4372
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4376
		{
			yyVAL.str = yyDollar[2].str
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4382
		{
			yyVAL.str = TxReadWrite
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4386
		{
			yyVAL.str = TxReadOnly
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4392
		{
			yyVAL.str = SessionStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4396
		{
			yyVAL.str = SessionStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4400
		{
			yyVAL.str = GlobalStr
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4409
		{
			yyVAL.byt = 0
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4413
		{
			yyVAL.byt = 1
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4418
		{
			yyVAL.byt = 0
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4422
		{
			yyVAL.byt = 1
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4427
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4431
		{
			yyVAL.str = IgnoreStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4437
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4441
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4445
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4449
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4453
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4457
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4461
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4465
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4469
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4473
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4478
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4482
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4486
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4492
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4496
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4501
		{
			yyVAL.str = IndexStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4505
		{
			yyVAL.str = UniqueStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4511
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4515
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4522
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4528
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4532
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4539
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4761
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4770
		{
			decNesting(yylex)
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4775
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
