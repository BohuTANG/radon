//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const USING = 57463
const PRIMARY = 57464
const COLUMN = 57465
const DESC = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const SHOW = 57469
const DATE = 57470
const ESCAPE = 57471
const HELP = 57472
const REPAIR = 57473
const TRUNCATE = 57474
const OPTIMIZE = 57475
const BIT = 57476
const TINYINT = 57477
const SMALLINT = 57478
const MEDIUMINT = 57479
const INT = 57480
const INTEGER = 57481
const BIGINT = 57482
const INTNUM = 57483
const REAL = 57484
const DOUBLE = 57485
const FLOAT_TYPE = 57486
const DECIMAL = 57487
const NUMERIC = 57488
const TIME = 57489
const TIMESTAMP = 57490
const DATETIME = 57491
const YEAR = 57492
const CHAR = 57493
const VARCHAR = 57494
const BOOL = 57495
const CHARACTER = 57496
const VARBINARY = 57497
const NCHAR = 57498
const CHARSET = 57499
const TEXT = 57500
const TINYTEXT = 57501
const MEDIUMTEXT = 57502
const LONGTEXT = 57503
const BLOB = 57504
const TINYBLOB = 57505
const MEDIUMBLOB = 57506
const LONGBLOB = 57507
const JSON = 57508
const ENUM = 57509
const GEOMETRY = 57510
const POINT = 57511
const LINESTRING = 57512
const POLYGON = 57513
const GEOMETRYCOLLECTION = 57514
const MULTIPOINT = 57515
const MULTILINESTRING = 57516
const MULTIPOLYGON = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const FIXED = 57524
const DYNAMIC = 57525
const STORAGE = 57526
const DISK = 57527
const MEMORY = 57528
const COLUMN_FORMAT = 57529
const AVG_ROW_LENGTH = 57530
const COMPRESSION = 57531
const CONNECTION = 57532
const DATA = 57533
const DIRECTORY = 57534
const DELAY_KEY_WRITE = 57535
const ENCRYPTION = 57536
const INSERT_METHOD = 57537
const MAX_ROWS = 57538
const MIN_ROWS = 57539
const PACK_KEYS = 57540
const PASSWORD = 57541
const ROW_FORMAT = 57542
const STATS_AUTO_RECALC = 57543
const STATS_PERSISTENT = 57544
const STATS_SAMPLE_PAGES = 57545
const TABLESPACE = 57546
const COMPRESSED = 57547
const REDUNDANT = 57548
const COMPACT = 57549
const TOKUDB_DEFAULT = 57550
const TOKUDB_FAST = 57551
const TOKUDB_SMALL = 57552
const TOKUDB_ZLIB = 57553
const TOKUDB_QUICKLZ = 57554
const TOKUDB_LZMA = 57555
const TOKUDB_SNAPPY = 57556
const TOKUDB_UNCOMPRESSED = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const WARNINGS = 57561
const VARIABLES = 57562
const EVENTS = 57563
const BINLOG = 57564
const GTID = 57565
const STATUS = 57566
const COLUMNS = 57567
const FIELDS = 57568
const CURRENT_TIMESTAMP = 57569
const CURRENT_DATE = 57570
const DATABASE = 57571
const SCHEMA = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const FORMAT = 57592
const TREE = 57593
const TRADITIONAL = 57594
const EXTENDED = 57595
const PARTITION = 57596
const PARTITIONS = 57597
const LIST = 57598
const XA = 57599
const DISTRIBUTED = 57600
const ENGINES = 57601
const VERSIONS = 57602
const PROCESSLIST = 57603
const QUERYZ = 57604
const TXNZ = 57605
const KILL = 57606
const ENGINE = 57607
const SINGLE = 57608
const BEGIN = 57609
const START = 57610
const TRANSACTION = 57611
const COMMIT = 57612
const ROLLBACK = 57613
const GLOBAL = 57614
const LOCAL = 57615
const SESSION = 57616
const NAMES = 57617
const ISOLATION = 57618
const LEVEL = 57619
const READ = 57620
const WRITE = 57621
const ONLY = 57622
const REPEATABLE = 57623
const COMMITTED = 57624
const UNCOMMITTED = 57625
const SERIALIZABLE = 57626
const RADON = 57627
const ATTACH = 57628
const ATTACHLIST = 57629
const DETACH = 57630
const RESHARD = 57631
const CLEANUP = 57632
const RECOVER = 57633
const REBALANCE = 57634

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5081

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 198,
	6, 362,
	7, 362,
	8, 362,
	9, 362,
	18, 362,
	67, 362,
	254, 362,
	-2, 896,
	-1, 373,
	94, 904,
	-2, 711,
	-1, 379,
	94, 760,
	-2, 689,
	-1, 400,
	1, 83,
	310, 83,
	-2, 93,
	-1, 439,
	5, 29,
	-2, 354,
	-1, 518,
	122, 741,
	-2, 737,
	-1, 519,
	122, 742,
	-2, 738,
	-1, 552,
	119, 93,
	168, 93,
	171, 93,
	174, 93,
	-2, 105,
	-1, 603,
	1, 83,
	310, 83,
	-2, 93,
	-1, 611,
	1, 84,
	310, 84,
	-2, 93,
	-1, 737,
	5, 29,
	-2, 660,
	-1, 766,
	119, 93,
	168, 93,
	171, 93,
	174, 93,
	-2, 106,
	-1, 823,
	35, 313,
	67, 313,
	70, 313,
	133, 313,
	-2, 901,
	-1, 972,
	122, 744,
	-2, 740,
	-1, 1152,
	5, 30,
	-2, 539,
	-1, 1176,
	5, 30,
	-2, 661,
	-1, 1317,
	5, 29,
	-2, 663,
	-1, 1438,
	5, 30,
	-2, 664,
}

const yyPrivate = 57344

const yyLast = 11157

var yyAct = [...]int{

	519, 496, 1115, 1467, 494, 1441, 1025, 1511, 1473, 640,
	1342, 1001, 472, 1385, 740, 1341, 1371, 439, 3, 858,
	1497, 1233, 1260, 1050, 1073, 349, 1002, 872, 1382, 1287,
	1145, 971, 745, 1137, 956, 1308, 60, 1116, 966, 910,
	114, 1117, 114, 204, 378, 70, 963, 1052, 474, 1063,
	741, 982, 998, 1307, 933, 437, 624, 1088, 643, 389,
	471, 374, 390, 827, 461, 897, 521, 613, 114, 348,
	382, 767, 392, 538, 377, 537, 780, 612, 527, 610,
	370, 1053, 403, 369, 625, 868, 470, 203, 114, 536,
	114, 401, 367, 544, 497, 51, 59, 358, 406, 457,
	458, 64, 1018, 192, 345, 1017, 902, 615, 1019, 1186,
	1187, 1185, 114, 754, 755, 539, 540, 540, 753, 539,
	456, 336, 764, 1395, 968, 1442, 635, 918, 708, 66,
	67, 68, 69, 339, 341, 340, 342, 343, 1496, 344,
	387, 1533, 1510, 1532, 386, 1487, 51, 1530, 335, 965,
	337, 338, 385, 346, 347, 1509, 459, 354, 384, 334,
	1486, 26, 52, 28, 29, 1300, 1365, 1066, 425, 411,
	82, 907, 1067, 1068, 110, 410, 109, 1036, 86, 74,
	419, 415, 852, 26, 52, 28, 29, 75, 417, 418,
	79, 1498, 1119, 1035, 392, 107, 413, 414, 630, 1475,
	422, 423, 424, 1083, 426, 427, 428, 429, 430, 431,
	432, 636, 637, 851, 1411, 1256, 333, 859, 1118, 106,
	896, 30, 57, 1360, 38, 1453, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 1079, 1078,
	675, 39, 1358, 1028, 57, 1105, 26, 52, 28, 29,
	1235, 443, 1476, 1104, 1103, 1235, 435, 1055, 438, 407,
	394, 26, 52, 28, 29, 82, 1102, 1433, 1435, 901,
	645, 821, 900, 1463, 91, 899, 1462, 675, 84, 1461,
	81, 99, 108, 412, 397, 396, 395, 1266, 76, 51,
	51, 467, 901, 404, 399, 900, 111, 89, 899, 88,
	723, 1392, 32, 33, 34, 1350, 36, 57, 1100, 687,
	688, 645, 803, 1179, 1264, 859, 1151, 761, 56, 55,
	54, 37, 57, 105, 42, 49, 35, 50, 1059, 1060,
	1061, 1149, 1011, 696, 445, 1515, 1062, 492, 493, 1434,
	653, 449, 451, 114, 652, 651, 664, 663, 673, 674,
	666, 667, 668, 669, 670, 671, 672, 665, 1485, 614,
	675, 653, 1054, 114, 1265, 114, 1242, 644, 650, 820,
	382, 763, 524, 420, 377, 1499, 382, 382, 912, 1026,
	545, 545, 104, 92, 1454, 103, 101, 1138, 90, 523,
	98, 77, 78, 1101, 403, 1076, 1077, 1080, 1081, 114,
	114, 724, 77, 78, 652, 651, 1099, 403, 644, 53,
	1010, 1119, 114, 114, 665, 631, 1243, 675, 1475, 543,
	114, 653, 444, 651, 446, 93, 102, 96, 97, 100,
	1302, 53, 983, 604, 450, 450, 1481, 1118, 940, 653,
	448, 983, 1058, 1162, 529, 452, 114, 454, 455, 51,
	541, 40, 938, 939, 937, 1336, 1155, 525, 43, 1337,
	1528, 44, 45, 1269, 47, 46, 655, 421, 57, 911,
	548, 1476, 652, 651, 1230, 464, 522, 632, 936, 48,
	652, 651, 628, 1228, 1226, 603, 1520, 1304, 1443, 653,
	634, 1211, 1340, 1268, 53, 1157, 1339, 653, 618, 393,
	1066, 626, 1207, 616, 1229, 1067, 1068, 1206, 1205, 53,
	926, 928, 929, 1227, 1225, 697, 927, 654, 685, 1202,
	668, 669, 670, 671, 672, 665, 1156, 382, 675, 1209,
	1477, 729, 114, 652, 651, 1197, 382, 629, 743, 1196,
	377, 652, 651, 1130, 1131, 1132, 742, 1195, 737, 725,
	653, 638, 1092, 639, 392, 642, 1091, 1084, 653, 1208,
	646, 647, 648, 684, 686, 673, 674, 666, 667, 668,
	669, 670, 671, 672, 665, 641, 398, 675, 1074, 957,
	1075, 958, 1529, 917, 447, 1517, 860, 861, 862, 695,
	1503, 656, 698, 699, 700, 701, 702, 703, 704, 1414,
	707, 709, 709, 709, 709, 709, 709, 709, 709, 717,
	718, 719, 720, 815, 1338, 1521, 1327, 114, 114, 748,
	794, 1326, 641, 727, 1210, 738, 114, 114, 747, 706,
	874, 1203, 756, 1199, 1198, 817, 710, 711, 712, 713,
	714, 715, 716, 1191, 114, 762, 906, 1213, 1212, 663,
	673, 674, 666, 667, 668, 669, 670, 671, 672, 665,
	934, 1122, 675, 1121, 1089, 1071, 1262, 1466, 759, 1408,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	1224, 726, 1051, 875, 915, 870, 871, 1524, 460, 895,
	898, 1119, 1258, 1261, 1255, 382, 1404, 1501, 1475, 962,
	1204, 377, 1404, 1469, 697, 1464, 460, 935, 382, 1404,
	1445, 460, 984, 1404, 1444, 1402, 974, 1118, 666, 667,
	668, 669, 670, 671, 672, 665, 908, 909, 675, 1369,
	460, 1401, 916, 1404, 460, 1143, 460, 1400, 1003, 382,
	743, 972, 61, 1007, 854, 855, 856, 857, 742, 382,
	1000, 1476, 1020, 377, 1249, 1248, 1005, 959, 970, 607,
	865, 866, 867, 392, 606, 987, 605, 689, 690, 691,
	692, 693, 694, 1008, 960, 961, 923, 924, 405, 930,
	931, 51, 1012, 980, 1245, 1246, 1245, 1244, 990, 1241,
	991, 1178, 460, 698, 919, 460, 1143, 920, 553, 552,
	1027, 919, 1030, 1031, 1032, 1033, 1034, 1171, 1009, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1174, 641, 1014, 1021, 977, 978, 1015, 541,
	999, 1004, 1009, 51, 794, 26, 26, 1114, 1024, 486,
	485, 487, 488, 489, 490, 1113, 522, 26, 491, 975,
	976, 1369, 1247, 979, 973, 1143, 746, 752, 1022, 1023,
	1029, 750, 721, 535, 355, 1143, 985, 986, 1288, 988,
	989, 1013, 57, 735, 1085, 1086, 1447, 736, 114, 114,
	114, 853, 997, 80, 1112, 1398, 873, 1333, 1328, 1316,
	1057, 844, 843, 1290, 71, 1239, 57, 57, 869, 864,
	840, 1064, 863, 1106, 1107, 1457, 999, 24, 57, 1110,
	1292, 733, 1296, 1009, 1291, 879, 1289, 878, 877, 617,
	1460, 1294, 1090, 846, 1459, 57, 1373, 1376, 1377, 1378,
	1374, 1293, 1375, 1379, 1423, 1422, 845, 838, 1494, 934,
	1097, 1426, 1424, 839, 1295, 1297, 1427, 1425, 1125, 932,
	362, 1522, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 359, 360, 382,
	353, 1124, 1508, 1147, 1126, 1129, 847, 1277, 495, 1428,
	922, 1377, 1378, 996, 1096, 995, 935, 1118, 1346, 1109,
	1108, 1119, 1133, 114, 462, 1087, 842, 664, 663, 673,
	674, 666, 667, 668, 669, 670, 671, 672, 665, 549,
	1120, 675, 533, 51, 743, 528, 377, 1118, 112, 1172,
	196, 463, 742, 392, 392, 1128, 876, 619, 526, 1381,
	356, 357, 528, 1161, 1314, 1193, 1194, 1123, 1184, 1237,
	1070, 1069, 1200, 1201, 1127, 1180, 196, 72, 1056, 1119,
	1232, 841, 1192, 1173, 1518, 1507, 972, 350, 849, 1331,
	1181, 848, 1417, 1330, 994, 1150, 196, 551, 196, 1332,
	1506, 1234, 993, 1183, 1505, 550, 1236, 1373, 1376, 1377,
	1378, 1374, 85, 1375, 1379, 1189, 1190, 1458, 351, 61,
	196, 1416, 1368, 746, 621, 364, 1389, 1072, 114, 649,
	63, 442, 6, 1238, 440, 5, 392, 65, 1163, 441,
	4, 58, 1, 114, 1142, 383, 1140, 1440, 611, 826,
	1141, 825, 1240, 1504, 73, 1273, 1274, 1495, 1472, 641,
	1159, 1152, 1153, 1154, 1474, 1182, 1158, 1479, 1451, 1448,
	1450, 1164, 766, 1165, 1166, 1167, 1168, 382, 765, 1257,
	388, 1147, 382, 816, 377, 1272, 377, 832, 1271, 831,
	830, 1175, 1176, 1177, 1275, 1259, 828, 1082, 1276, 850,
	1263, 200, 114, 1313, 1267, 837, 1003, 1282, 1188, 382,
	382, 1284, 1281, 1319, 1320, 836, 760, 1299, 1250, 1251,
	1252, 1298, 791, 790, 972, 1317, 1301, 1285, 789, 788,
	1306, 1315, 1254, 1305, 787, 786, 1321, 785, 784, 783,
	782, 970, 781, 1286, 779, 193, 778, 777, 1324, 1325,
	1311, 776, 775, 774, 773, 772, 768, 771, 770, 1394,
	1134, 1135, 1136, 769, 835, 833, 829, 558, 556, 557,
	555, 363, 560, 559, 554, 1380, 400, 1384, 1144, 87,
	1111, 382, 382, 382, 332, 1343, 1343, 1343, 1234, 1334,
	1098, 408, 1335, 409, 880, 41, 1312, 1344, 1345, 1004,
	83, 683, 1318, 992, 1065, 375, 1016, 751, 749, 366,
	365, 1139, 1006, 722, 520, 433, 1415, 1303, 1367, 1160,
	705, 981, 473, 925, 484, 481, 1347, 1348, 483, 1280,
	482, 664, 663, 673, 674, 666, 667, 668, 669, 670,
	671, 672, 665, 114, 114, 675, 728, 734, 1003, 657,
	1356, 196, 465, 1432, 892, 1310, 903, 194, 1390, 382,
	697, 434, 95, 1343, 382, 94, 1391, 416, 1343, 530,
	1372, 196, 1370, 196, 1396, 1309, 1322, 1323, 1170, 1397,
	620, 382, 1364, 891, 1452, 377, 1234, 1399, 732, 834,
	27, 1311, 62, 361, 14, 23, 15, 13, 12, 31,
	114, 114, 114, 114, 1410, 10, 9, 196, 196, 8,
	894, 114, 7, 352, 114, 25, 2, 114, 21, 890,
	196, 623, 22, 382, 743, 1363, 1429, 1439, 196, 382,
	1436, 974, 742, 1343, 1437, 382, 1419, 1383, 1421, 1343,
	20, 1004, 1286, 51, 1446, 1449, 19, 1393, 1311, 1311,
	1311, 1311, 18, 1418, 633, 1420, 17, 1456, 16, 1366,
	1278, 1279, 1311, 11, 818, 819, 887, 885, 881, 1329,
	884, 886, 1351, 0, 1352, 0, 0, 0, 382, 1468,
	0, 1471, 1343, 1478, 1482, 1361, 1362, 0, 0, 1480,
	1483, 0, 0, 1470, 1312, 1312, 1312, 1312, 0, 0,
	1493, 1353, 1354, 1500, 1355, 0, 0, 1357, 1383, 1359,
	0, 889, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 382, 382, 382, 0, 1512, 1512, 1512, 1403, 1513,
	1514, 1406, 1407, 1516, 888, 1519, 0, 0, 0, 0,
	196, 0, 744, 0, 0, 0, 453, 1527, 0, 0,
	0, 1413, 0, 0, 0, 382, 1405, 0, 0, 1531,
	0, 0, 0, 0, 0, 0, 532, 0, 534, 1431,
	0, 1455, 641, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 0, 1349,
	0, 0, 608, 609, 0, 0, 893, 0, 0, 0,
	0, 0, 1488, 1489, 0, 622, 0, 0, 0, 0,
	0, 0, 882, 627, 0, 196, 196, 1465, 0, 0,
	0, 0, 0, 0, 913, 196, 0, 0, 0, 1484,
	450, 0, 0, 0, 0, 659, 0, 662, 0, 0,
	0, 0, 196, 676, 677, 678, 679, 680, 681, 682,
	0, 660, 661, 658, 664, 663, 673, 674, 666, 667,
	668, 669, 670, 671, 672, 665, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 0,
	1525, 1526, 0, 0, 969, 633, 0, 0, 969, 969,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 969, 969, 969,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 969, 0, 0, 744, 664, 663, 673, 674, 666,
	667, 668, 669, 670, 671, 672, 665, 0, 0, 675,
	0, 162, 0, 116, 0, 0, 0, 142, 0, 146,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 170, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 381, 0, 0, 0, 0, 0,
	904, 905, 0, 122, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 664,
	663, 673, 674, 666, 667, 668, 669, 670, 671, 672,
	665, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 196, 196, 196, 126,
	0, 0, 168, 181, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 140, 0, 0, 177, 178,
	127, 184, 0, 0, 119, 0, 0, 161, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 0, 0,
	171, 0, 0, 139, 133, 175, 130, 156, 123, 117,
	805, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 797, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 138, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 792, 115, 120, 151, 0, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 744, 0,
	633, 0, 0, 0, 0, 0, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 0, 0, 0, 801, 0, 0,
	162, 0, 116, 0, 0, 824, 823, 0, 146, 149,
	150, 0, 0, 0, 822, 0, 0, 0, 821, 0,
	0, 1093, 1094, 1095, 0, 132, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 170, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 391, 0, 0, 0, 0, 795, 0,
	0, 196, 122, 0, 0, 0, 0, 0, 0, 796,
	798, 799, 800, 0, 802, 803, 804, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 633, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 183, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 168, 181, 0, 118, 0, 1169, 0, 0, 0,
	0, 0, 0, 131, 140, 0, 793, 177, 178, 127,
	184, 0, 0, 119, 0, 0, 161, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 148, 134, 143, 165,
	153, 166, 144, 159, 158, 160, 0, 0, 0, 171,
	0, 0, 139, 133, 175, 130, 156, 123, 117, 0,
	124, 125, 129, 128, 0, 147, 154, 157, 163, 164,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 115, 120, 151, 0, 167, 136, 182,
	141, 180, 179, 137, 0, 0, 1270, 0, 0, 0,
	0, 196, 1387, 0, 0, 135, 172, 0, 173, 0,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 188, 187, 189,
	121, 190, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 196,
	196, 196, 0, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 196, 0, 0, 1387, 0, 0, 744, 315,
	299, 257, 318, 232, 247, 330, 249, 250, 287, 213,
	267, 162, 245, 116, 0, 214, 0, 142, 0, 146,
	149, 150, 0, 296, 0, 0, 0, 307, 316, 264,
	0, 235, 206, 242, 207, 261, 132, 231, 301, 270,
	248, 0, 324, 152, 279, 0, 170, 155, 0, 0,
	263, 304, 265, 297, 256, 288, 224, 278, 319, 246,
	284, 0, 0, 0, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 281, 313, 244, 283, 286, 205,
	280, 0, 209, 215, 329, 311, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 262, 266, 293, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 277,
	0, 0, 0, 219, 211, 260, 0, 0, 0, 223,
	0, 237, 294, 0, 0, 0, 305, 255, 183, 312,
	253, 252, 320, 290, 0, 233, 234, 243, 302, 126,
	241, 251, 168, 181, 285, 118, 309, 303, 275, 258,
	259, 210, 0, 292, 131, 140, 230, 282, 177, 178,
	127, 184, 216, 326, 119, 380, 325, 161, 379, 176,
	310, 276, 272, 212, 308, 274, 271, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 208, 0,
	171, 317, 331, 139, 133, 175, 130, 156, 123, 117,
	221, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 306,
	0, 0, 0, 0, 0, 174, 220, 138, 227, 225,
	228, 298, 226, 268, 269, 321, 322, 323, 295, 222,
	0, 0, 300, 273, 115, 120, 151, 328, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	240, 327, 291, 289, 314, 0, 135, 172, 0, 173,
	368, 0, 0, 373, 371, 372, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 315, 299, 257, 318, 232, 247,
	330, 249, 250, 287, 213, 267, 162, 245, 116, 0,
	214, 0, 142, 0, 146, 149, 150, 0, 296, 0,
	0, 0, 307, 316, 264, 0, 235, 206, 242, 207,
	261, 132, 231, 301, 270, 248, 0, 324, 152, 279,
	0, 170, 155, 0, 0, 263, 304, 265, 297, 256,
	288, 224, 278, 319, 246, 284, 0, 0, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 281,
	313, 244, 283, 286, 205, 280, 0, 209, 215, 329,
	311, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	262, 266, 293, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 277, 0, 0, 0, 219, 211,
	260, 0, 0, 0, 223, 0, 237, 294, 0, 0,
	0, 305, 255, 183, 312, 253, 252, 320, 290, 0,
	233, 234, 243, 302, 126, 241, 251, 168, 181, 285,
	118, 309, 303, 275, 258, 259, 210, 0, 292, 131,
	140, 230, 282, 177, 178, 127, 184, 216, 326, 119,
	380, 325, 161, 379, 176, 310, 276, 272, 212, 308,
	274, 271, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 208, 0, 171, 317, 331, 139, 133,
	175, 130, 156, 123, 117, 221, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 306, 0, 0, 0, 0, 0,
	174, 220, 138, 227, 225, 228, 298, 226, 268, 269,
	321, 322, 323, 295, 222, 0, 0, 300, 273, 115,
	120, 151, 328, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 0, 240, 327, 291, 289, 314,
	0, 135, 172, 0, 173, 0, 0, 0, 373, 371,
	372, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 315,
	299, 257, 318, 232, 247, 330, 249, 250, 287, 213,
	267, 162, 245, 116, 0, 214, 0, 142, 0, 146,
	149, 150, 0, 296, 0, 0, 0, 307, 316, 264,
	0, 235, 206, 242, 207, 261, 132, 231, 301, 270,
	248, 0, 324, 152, 279, 0, 170, 155, 0, 0,
	263, 304, 265, 297, 256, 288, 224, 278, 319, 246,
	284, 0, 0, 0, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 281, 313, 244, 283, 286, 205,
	280, 0, 209, 215, 329, 311, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 262, 266, 293, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 277,
	0, 0, 0, 219, 211, 260, 0, 0, 0, 223,
	0, 237, 294, 0, 0, 0, 305, 255, 183, 312,
	253, 252, 320, 290, 0, 233, 234, 243, 302, 126,
	241, 251, 168, 181, 285, 118, 309, 303, 275, 258,
	259, 210, 0, 292, 131, 140, 230, 282, 177, 178,
	127, 184, 216, 326, 119, 380, 325, 161, 379, 176,
	310, 276, 272, 212, 308, 274, 271, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 208, 0,
	171, 317, 331, 139, 133, 175, 130, 156, 123, 117,
	221, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 306,
	0, 0, 0, 0, 0, 174, 220, 138, 227, 225,
	228, 298, 226, 268, 269, 321, 322, 323, 295, 222,
	0, 0, 300, 273, 115, 120, 151, 328, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	240, 327, 291, 289, 314, 0, 135, 172, 0, 173,
	542, 0, 0, 145, 0, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 315, 299, 257, 318, 232, 247,
	330, 249, 250, 287, 213, 267, 162, 245, 116, 0,
	214, 0, 142, 0, 146, 149, 150, 0, 296, 0,
	0, 0, 307, 316, 264, 0, 235, 206, 242, 207,
	261, 132, 231, 301, 270, 248, 0, 324, 152, 279,
	0, 170, 155, 0, 0, 263, 304, 265, 297, 256,
	288, 224, 278, 319, 246, 284, 0, 0, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 281,
	313, 244, 283, 286, 205, 280, 0, 209, 215, 329,
	311, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	262, 266, 293, 254, 0, 0, 0, 0, 0, 0,
	1409, 0, 236, 0, 277, 0, 0, 0, 219, 211,
	260, 0, 0, 0, 223, 0, 237, 294, 0, 0,
	0, 305, 255, 183, 312, 253, 252, 320, 290, 0,
	233, 234, 243, 302, 126, 241, 251, 168, 181, 285,
	118, 309, 303, 275, 258, 259, 210, 0, 292, 131,
	140, 230, 282, 177, 178, 127, 184, 216, 326, 119,
	217, 325, 161, 218, 176, 310, 276, 272, 212, 308,
	274, 271, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 208, 0, 171, 317, 331, 139, 133,
	175, 130, 156, 123, 117, 221, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 306, 0, 0, 0, 0, 0,
	174, 220, 138, 227, 225, 228, 298, 226, 268, 269,
	321, 322, 323, 295, 222, 0, 0, 300, 273, 115,
	120, 151, 328, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 0, 240, 327, 291, 289, 314,
	0, 135, 172, 0, 173, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 315,
	299, 257, 318, 232, 247, 330, 249, 250, 287, 213,
	267, 162, 245, 116, 0, 214, 0, 142, 0, 146,
	149, 150, 0, 296, 0, 0, 0, 307, 316, 264,
	0, 235, 206, 242, 207, 261, 132, 231, 301, 270,
	248, 0, 324, 152, 279, 0, 170, 155, 0, 0,
	263, 304, 265, 297, 256, 288, 224, 278, 319, 246,
	284, 0, 0, 0, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 281, 313, 244, 283, 286, 205,
	280, 0, 209, 215, 329, 311, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 262, 266, 293, 254, 0,
	0, 0, 0, 0, 0, 1283, 0, 236, 0, 277,
	0, 0, 0, 219, 211, 260, 0, 0, 0, 223,
	0, 237, 294, 0, 0, 0, 305, 255, 183, 312,
	253, 252, 320, 290, 0, 233, 234, 243, 302, 126,
	241, 251, 168, 181, 285, 118, 309, 303, 275, 258,
	259, 210, 0, 292, 131, 140, 230, 282, 177, 178,
	127, 184, 216, 326, 119, 217, 325, 161, 218, 176,
	310, 276, 272, 212, 308, 274, 271, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 208, 0,
	171, 317, 331, 139, 133, 175, 130, 156, 123, 117,
	221, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 306,
	0, 0, 0, 0, 0, 174, 220, 138, 227, 225,
	228, 298, 226, 268, 269, 321, 322, 323, 295, 222,
	0, 0, 300, 273, 115, 120, 151, 328, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	240, 327, 291, 289, 314, 0, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 315, 299, 257, 318, 232, 247,
	330, 249, 250, 287, 213, 267, 162, 245, 116, 0,
	214, 0, 142, 0, 146, 149, 150, 0, 296, 0,
	0, 0, 307, 316, 264, 0, 235, 206, 242, 207,
	261, 132, 231, 301, 270, 248, 0, 324, 152, 279,
	0, 170, 155, 0, 0, 263, 304, 265, 297, 256,
	288, 224, 278, 319, 246, 284, 0, 0, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 281,
	313, 244, 283, 286, 205, 280, 0, 209, 215, 329,
	311, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	262, 266, 293, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 277, 0, 0, 0, 219, 211,
	260, 0, 0, 0, 223, 0, 237, 294, 0, 0,
	0, 305, 255, 183, 312, 253, 252, 320, 290, 0,
	233, 234, 243, 302, 126, 241, 251, 168, 181, 285,
	118, 309, 303, 275, 258, 259, 210, 0, 292, 131,
	140, 230, 282, 177, 178, 127, 184, 216, 326, 119,
	380, 325, 161, 379, 176, 310, 276, 272, 212, 308,
	274, 271, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 208, 0, 171, 317, 331, 139, 133,
	175, 130, 156, 123, 117, 221, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 306, 0, 0, 0, 0, 0,
	174, 220, 138, 227, 225, 228, 298, 226, 268, 269,
	321, 322, 323, 295, 222, 0, 0, 300, 273, 115,
	120, 151, 328, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 0, 240, 327, 291, 289, 314,
	0, 135, 172, 0, 173, 0, 0, 0, 145, 0,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 315,
	299, 257, 318, 232, 247, 330, 249, 250, 287, 213,
	267, 162, 245, 116, 0, 214, 0, 142, 0, 146,
	149, 150, 0, 296, 0, 0, 0, 307, 316, 264,
	0, 235, 206, 242, 207, 261, 132, 231, 301, 270,
	248, 0, 324, 152, 279, 0, 170, 155, 0, 0,
	263, 304, 265, 297, 256, 288, 224, 278, 319, 246,
	284, 0, 0, 0, 201, 0, 202, 0, 0, 0,
	0, 0, 0, 122, 281, 313, 244, 283, 286, 205,
	280, 0, 209, 215, 329, 311, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 262, 266, 293, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 277,
	0, 0, 0, 219, 211, 260, 0, 0, 0, 223,
	0, 237, 294, 0, 0, 0, 305, 255, 183, 312,
	253, 252, 320, 290, 0, 233, 234, 243, 302, 126,
	241, 251, 168, 181, 285, 118, 309, 303, 275, 258,
	259, 210, 0, 292, 131, 140, 230, 282, 177, 178,
	127, 184, 216, 326, 119, 217, 325, 161, 218, 176,
	310, 276, 272, 212, 308, 274, 271, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 208, 0,
	171, 317, 331, 139, 133, 175, 130, 156, 123, 117,
	221, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 306,
	0, 0, 0, 0, 0, 174, 220, 138, 227, 225,
	228, 298, 226, 268, 269, 321, 322, 323, 295, 222,
	0, 0, 300, 273, 115, 120, 151, 328, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	240, 327, 291, 289, 314, 0, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 315, 299, 257, 318, 232, 247,
	330, 249, 250, 287, 213, 267, 162, 245, 116, 0,
	214, 0, 142, 0, 146, 149, 150, 0, 296, 0,
	0, 0, 307, 316, 264, 0, 235, 206, 242, 207,
	261, 132, 231, 301, 270, 248, 0, 324, 152, 279,
	0, 170, 155, 0, 0, 263, 304, 265, 297, 256,
	288, 224, 278, 319, 246, 284, 0, 0, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 281,
	313, 244, 283, 286, 205, 280, 0, 209, 215, 329,
	311, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	262, 266, 293, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 277, 0, 0, 0, 219, 211,
	260, 0, 0, 0, 223, 0, 237, 294, 0, 0,
	0, 305, 255, 183, 312, 253, 252, 320, 290, 0,
	233, 234, 243, 302, 126, 241, 251, 168, 181, 285,
	118, 309, 303, 275, 258, 259, 210, 0, 292, 131,
	140, 230, 282, 177, 178, 127, 184, 216, 326, 119,
	217, 325, 161, 218, 176, 310, 276, 272, 212, 308,
	274, 271, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 208, 0, 171, 317, 331, 139, 133,
	175, 130, 156, 123, 117, 221, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 306, 0, 0, 0, 0, 0,
	174, 220, 138, 227, 225, 228, 298, 226, 268, 269,
	321, 322, 323, 295, 222, 0, 0, 300, 273, 115,
	120, 151, 328, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 0, 240, 327, 291, 289, 314,
	0, 135, 172, 0, 173, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 315,
	299, 257, 318, 232, 247, 330, 249, 250, 287, 213,
	267, 162, 245, 116, 0, 214, 0, 142, 0, 146,
	149, 150, 0, 296, 0, 0, 0, 307, 316, 264,
	0, 235, 206, 242, 207, 261, 132, 231, 301, 270,
	248, 0, 324, 152, 279, 0, 170, 155, 0, 0,
	263, 304, 265, 297, 256, 288, 224, 278, 319, 246,
	284, 0, 0, 0, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 281, 313, 244, 283, 286, 205,
	280, 0, 209, 215, 329, 311, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 262, 266, 293, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 277,
	0, 0, 0, 219, 211, 260, 0, 0, 0, 223,
	0, 237, 294, 0, 0, 0, 305, 255, 183, 312,
	253, 252, 320, 290, 0, 233, 234, 243, 302, 126,
	241, 251, 168, 181, 285, 118, 309, 303, 275, 258,
	259, 210, 0, 292, 131, 140, 230, 282, 177, 178,
	127, 184, 216, 326, 119, 217, 325, 161, 218, 176,
	310, 276, 272, 212, 308, 274, 271, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 208, 0,
	171, 317, 331, 139, 133, 175, 130, 156, 123, 117,
	221, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 306,
	0, 0, 0, 0, 0, 174, 220, 138, 227, 225,
	228, 298, 226, 268, 269, 321, 322, 323, 295, 222,
	0, 0, 300, 273, 115, 120, 151, 328, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	240, 327, 291, 289, 314, 0, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 315, 299, 257, 318, 232, 247,
	330, 249, 250, 287, 213, 267, 162, 245, 116, 0,
	214, 0, 142, 0, 146, 149, 150, 0, 296, 0,
	0, 0, 307, 316, 264, 0, 235, 206, 242, 207,
	261, 132, 231, 301, 270, 248, 0, 324, 152, 279,
	0, 170, 155, 0, 0, 263, 304, 265, 297, 256,
	288, 224, 278, 319, 246, 284, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 281,
	313, 244, 283, 286, 205, 280, 0, 209, 215, 329,
	311, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	262, 266, 293, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 277, 0, 0, 0, 219, 211,
	260, 0, 0, 0, 223, 0, 237, 294, 0, 0,
	0, 305, 255, 183, 312, 253, 252, 320, 290, 0,
	233, 234, 243, 302, 126, 241, 251, 168, 181, 285,
	118, 309, 303, 275, 258, 259, 210, 0, 292, 131,
	140, 230, 282, 177, 178, 127, 184, 216, 326, 119,
	217, 325, 161, 218, 176, 310, 276, 272, 212, 308,
	274, 271, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 208, 0, 171, 317, 331, 139, 133,
	175, 130, 156, 123, 117, 221, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 229, 306, 0, 0, 0, 0, 0,
	174, 220, 138, 227, 225, 228, 298, 226, 268, 269,
	321, 322, 323, 295, 222, 0, 0, 300, 273, 115,
	120, 151, 328, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 0, 240, 327, 291, 289, 314,
	0, 135, 172, 0, 173, 0, 0, 0, 145, 162,
	0, 116, 0, 0, 0, 142, 0, 146, 149, 150,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 964,
	0, 469, 0, 0, 132, 468, 0, 0, 0, 0,
	505, 152, 0, 0, 170, 155, 0, 0, 0, 0,
	498, 499, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 518, 486, 485, 487, 488, 489, 490, 0,
	0, 122, 491, 492, 493, 0, 0, 0, 466, 479,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 476, 477, 967, 0, 0, 0, 516, 0, 478,
	0, 0, 475, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	168, 181, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 140, 0, 0, 177, 178, 127, 184,
	0, 0, 119, 0, 0, 161, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 148, 134, 143, 165, 153,
	166, 144, 159, 158, 160, 0, 0, 0, 171, 0,
	0, 139, 133, 175, 130, 156, 123, 117, 0, 124,
	125, 129, 128, 0, 147, 154, 157, 163, 164, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 138, 506, 512, 515, 0,
	513, 510, 511, 509, 508, 507, 517, 500, 501, 503,
	0, 502, 115, 120, 151, 0, 167, 136, 182, 141,
	180, 179, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 172, 0, 173, 0, 0,
	162, 145, 116, 0, 0, 0, 142, 0, 146, 149,
	150, 0, 0, 0, 185, 186, 188, 187, 189, 121,
	190, 191, 469, 0, 0, 132, 468, 0, 0, 0,
	0, 505, 152, 0, 0, 170, 155, 0, 0, 0,
	0, 498, 499, 0, 0, 0, 0, 0, 0, 757,
	57, 0, 0, 518, 486, 485, 487, 488, 489, 490,
	0, 0, 122, 491, 492, 493, 758, 0, 0, 466,
	479, 0, 504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 477, 0, 0, 0, 0, 516, 0,
	478, 0, 0, 475, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 168, 181, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 140, 0, 0, 177, 178, 127,
	184, 0, 0, 119, 0, 0, 161, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 148, 134, 143, 165,
	153, 166, 144, 159, 158, 160, 0, 0, 0, 171,
	0, 0, 139, 133, 175, 130, 156, 123, 117, 0,
	124, 125, 129, 128, 0, 147, 154, 157, 163, 164,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 138, 506, 512, 515,
	0, 513, 510, 511, 509, 508, 507, 517, 500, 501,
	503, 0, 502, 115, 120, 151, 0, 167, 136, 182,
	141, 180, 179, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 172, 0, 173, 0,
	0, 162, 145, 116, 0, 0, 0, 142, 0, 146,
	149, 150, 0, 0, 0, 185, 186, 188, 187, 189,
	121, 190, 191, 469, 0, 0, 132, 468, 0, 0,
	0, 0, 505, 152, 0, 0, 170, 155, 0, 0,
	0, 0, 498, 499, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 518, 486, 485, 487, 488, 489,
	490, 0, 0, 122, 491, 492, 493, 0, 0, 0,
	466, 479, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 477, 967, 0, 0, 0, 516,
	0, 478, 0, 0, 475, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 168, 181, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 140, 0, 0, 177, 178,
	127, 184, 0, 0, 119, 0, 0, 161, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 0, 0,
	171, 0, 0, 139, 133, 175, 130, 156, 123, 117,
	0, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 138, 506, 512,
	515, 0, 513, 510, 511, 509, 508, 507, 517, 500,
	501, 503, 0, 502, 115, 120, 151, 0, 167, 136,
	182, 141, 180, 179, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 172, 0, 173,
	0, 0, 162, 145, 116, 0, 0, 0, 142, 0,
	146, 149, 150, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 469, 0, 0, 132, 468, 0,
	0, 0, 0, 505, 152, 0, 0, 170, 155, 0,
	0, 0, 0, 498, 499, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 460, 518, 486, 485, 487, 488,
	489, 490, 0, 0, 122, 491, 492, 493, 0, 0,
	0, 466, 479, 0, 504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 477, 0, 0, 0, 0,
	516, 0, 478, 0, 0, 475, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 168, 181, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 140, 0, 0, 177,
	178, 127, 184, 0, 0, 119, 0, 0, 161, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 148, 134,
	143, 165, 153, 166, 144, 159, 158, 160, 0, 0,
	0, 171, 0, 0, 139, 133, 175, 130, 156, 123,
	117, 0, 124, 125, 129, 128, 0, 147, 154, 157,
	163, 164, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 138, 506,
	512, 515, 0, 513, 510, 511, 509, 508, 507, 517,
	500, 501, 503, 0, 502, 115, 120, 151, 0, 167,
	136, 182, 141, 180, 179, 137, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 0, 135, 172, 0,
	173, 0, 0, 162, 145, 116, 0, 0, 0, 142,
	0, 146, 149, 150, 0, 0, 0, 185, 186, 188,
	187, 189, 121, 190, 191, 469, 0, 0, 132, 468,
	0, 0, 0, 0, 505, 152, 0, 0, 170, 155,
	0, 0, 0, 0, 498, 499, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 518, 486, 485, 487,
	488, 489, 490, 0, 0, 122, 491, 492, 493, 0,
	0, 0, 466, 479, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 477, 0, 0, 0,
	0, 516, 0, 478, 0, 0, 475, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 168, 181, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 140, 0, 0,
	177, 178, 127, 184, 0, 0, 119, 0, 0, 161,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 148,
	134, 143, 165, 153, 166, 144, 159, 158, 160, 0,
	0, 0, 171, 0, 0, 139, 133, 175, 130, 156,
	123, 117, 0, 124, 125, 129, 128, 0, 147, 154,
	157, 163, 164, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 138,
	506, 512, 515, 0, 513, 510, 511, 509, 508, 507,
	517, 500, 501, 503, 0, 502, 115, 120, 151, 0,
	167, 136, 182, 141, 180, 179, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 172,
	0, 173, 0, 0, 162, 145, 116, 0, 0, 0,
	142, 0, 146, 149, 150, 0, 0, 0, 185, 186,
	188, 187, 189, 121, 190, 191, 469, 0, 0, 132,
	468, 0, 0, 0, 0, 505, 152, 0, 0, 170,
	155, 0, 0, 0, 0, 498, 499, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 518, 486, 485,
	487, 488, 489, 490, 0, 0, 122, 491, 492, 493,
	0, 0, 0, 466, 479, 0, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 477, 0, 0,
	0, 0, 516, 0, 478, 0, 0, 475, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 168, 181, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 140, 0,
	0, 177, 178, 127, 184, 0, 0, 119, 0, 0,
	161, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	148, 134, 143, 165, 153, 166, 144, 159, 158, 160,
	0, 0, 0, 171, 0, 0, 139, 133, 175, 130,
	156, 123, 117, 0, 124, 125, 129, 128, 0, 147,
	154, 157, 163, 164, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	138, 506, 512, 515, 0, 513, 510, 511, 509, 508,
	507, 517, 500, 501, 503, 0, 502, 115, 120, 151,
	0, 167, 136, 182, 141, 180, 179, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	172, 0, 173, 162, 0, 116, 145, 0, 0, 142,
	0, 146, 149, 150, 0, 0, 0, 0, 0, 185,
	186, 188, 187, 189, 121, 190, 191, 0, 132, 0,
	0, 0, 0, 0, 505, 152, 0, 0, 170, 155,
	0, 0, 0, 0, 498, 499, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 518, 486, 485, 487,
	488, 489, 490, 0, 0, 122, 491, 492, 493, 0,
	0, 0, 0, 479, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 477, 0, 0, 0,
	0, 516, 0, 478, 0, 0, 475, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 168, 181, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 140, 0, 0,
	177, 178, 127, 184, 0, 0, 119, 0, 0, 161,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 148,
	134, 143, 165, 153, 166, 144, 159, 158, 160, 0,
	0, 0, 171, 0, 0, 139, 133, 175, 130, 156,
	123, 117, 0, 124, 125, 129, 128, 0, 147, 154,
	157, 163, 164, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 138,
	506, 512, 515, 0, 513, 510, 511, 509, 508, 507,
	517, 500, 501, 503, 0, 502, 115, 120, 151, 0,
	167, 136, 182, 141, 180, 179, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 172,
	0, 173, 0, 0, 0, 145, 162, 0, 116, 0,
	0, 0, 142, 0, 146, 149, 150, 0, 185, 186,
	188, 187, 189, 121, 190, 191, 0, 1146, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 170, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 381,
	0, 1148, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 652, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 168, 181, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	140, 0, 0, 177, 178, 127, 184, 0, 0, 119,
	0, 0, 161, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 0, 0, 171, 0, 0, 139, 133,
	175, 130, 156, 123, 117, 0, 124, 125, 129, 128,
	26, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 162, 0, 116, 0, 0, 0, 142, 0, 146,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 138, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 170, 155, 0, 115,
	120, 151, 0, 167, 136, 182, 141, 180, 179, 137,
	0, 57, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 135, 172, 122, 173, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 168, 181, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 140, 0, 0, 177, 178,
	127, 184, 0, 0, 119, 0, 0, 161, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 0, 0,
	171, 0, 0, 139, 133, 175, 130, 156, 123, 117,
	0, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 162, 0, 116, 0, 0, 0, 142,
	0, 146, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 174, 0, 138, 132, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 170, 155,
	0, 0, 0, 0, 115, 120, 151, 0, 167, 136,
	182, 141, 180, 179, 137, 0, 113, 0, 1388, 0,
	0, 0, 0, 0, 0, 122, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 168, 181, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 140, 0, 0,
	177, 178, 127, 184, 0, 0, 119, 0, 0, 161,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 148,
	134, 143, 165, 153, 166, 144, 159, 158, 160, 0,
	0, 0, 171, 0, 0, 139, 133, 175, 130, 156,
	123, 117, 0, 124, 125, 129, 128, 26, 147, 154,
	157, 163, 164, 169, 0, 0, 0, 0, 162, 0,
	116, 0, 0, 0, 142, 0, 146, 149, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 138,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 170, 155, 0, 115, 120, 151, 0,
	167, 136, 182, 141, 180, 179, 137, 0, 57, 0,
	0, 381, 0, 0, 0, 0, 0, 0, 135, 172,
	122, 173, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	188, 187, 189, 121, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 168,
	181, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 140, 0, 0, 177, 178, 127, 184, 0,
	0, 119, 0, 0, 161, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 148, 134, 143, 165, 153, 166,
	144, 159, 158, 160, 0, 0, 0, 171, 0, 0,
	139, 133, 175, 130, 156, 123, 117, 0, 124, 125,
	129, 128, 0, 147, 154, 157, 163, 164, 169, 0,
	162, 0, 116, 0, 0, 0, 142, 0, 146, 149,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 138, 132, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 170, 155, 0, 0, 0,
	0, 115, 120, 151, 0, 167, 136, 182, 141, 180,
	179, 137, 0, 381, 0, 0, 730, 0, 0, 731,
	0, 0, 122, 135, 172, 0, 173, 0, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 188, 187, 189, 121, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 168, 181, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 140, 0, 0, 177, 178, 127,
	184, 0, 0, 119, 0, 0, 161, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 148, 134, 143, 165,
	153, 166, 144, 159, 158, 160, 0, 0, 0, 171,
	0, 0, 139, 133, 175, 130, 156, 123, 117, 0,
	124, 125, 129, 128, 0, 147, 154, 157, 163, 164,
	169, 0, 162, 0, 116, 0, 0, 0, 142, 0,
	146, 149, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 138, 132, 547, 0,
	0, 0, 0, 0, 152, 0, 0, 170, 155, 0,
	0, 0, 0, 115, 120, 151, 0, 167, 136, 182,
	141, 180, 179, 137, 0, 381, 0, 546, 0, 0,
	0, 0, 0, 0, 122, 135, 172, 0, 173, 0,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 188, 187, 189,
	121, 190, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 168, 181, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 140, 0, 0, 177,
	178, 127, 184, 0, 0, 119, 0, 0, 161, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 148, 134,
	143, 165, 153, 166, 144, 159, 158, 160, 0, 0,
	0, 171, 0, 0, 139, 133, 175, 130, 156, 123,
	117, 0, 124, 125, 129, 128, 0, 147, 154, 157,
	163, 164, 169, 0, 162, 0, 116, 0, 0, 0,
	142, 0, 146, 149, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 138, 132,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 170,
	155, 0, 0, 0, 0, 115, 120, 151, 0, 167,
	136, 182, 141, 180, 179, 137, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 135, 172, 0,
	173, 0, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 188,
	187, 189, 121, 190, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 168, 181, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 140, 0,
	0, 177, 178, 127, 184, 0, 0, 119, 0, 0,
	161, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	148, 134, 143, 165, 153, 166, 144, 159, 158, 160,
	0, 0, 0, 171, 0, 0, 139, 133, 175, 130,
	156, 123, 117, 0, 124, 125, 129, 128, 0, 147,
	154, 157, 163, 164, 169, 0, 0, 0, 0, 162,
	0, 116, 0, 0, 0, 142, 0, 146, 149, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	138, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 170, 155, 0, 115, 120, 151,
	0, 167, 136, 182, 197, 180, 179, 198, 0, 199,
	0, 0, 113, 0, 1388, 0, 0, 0, 0, 135,
	172, 122, 173, 0, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 188, 187, 189, 121, 190, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	168, 181, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 140, 0, 0, 177, 178, 127, 184,
	0, 0, 119, 0, 0, 161, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 148, 134, 143, 165, 153,
	166, 144, 159, 158, 160, 0, 0, 0, 171, 0,
	0, 139, 133, 175, 130, 156, 123, 117, 0, 124,
	125, 129, 128, 0, 147, 154, 157, 163, 164, 169,
	0, 0, 0, 0, 162, 0, 116, 0, 0, 0,
	142, 0, 146, 149, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 138, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 170,
	155, 0, 115, 120, 151, 0, 167, 136, 182, 141,
	180, 179, 137, 0, 57, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 135, 172, 122, 173, 0, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 188, 187, 189, 121,
	190, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 168, 181, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 140, 0,
	0, 177, 178, 127, 184, 0, 0, 119, 0, 0,
	161, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	148, 134, 143, 165, 153, 166, 144, 159, 158, 160,
	0, 0, 0, 171, 0, 0, 139, 133, 175, 130,
	156, 123, 117, 0, 124, 125, 129, 128, 0, 147,
	154, 157, 163, 164, 169, 0, 162, 0, 116, 0,
	0, 0, 142, 0, 146, 149, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	138, 132, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 170, 155, 0, 0, 0, 0, 115, 120, 151,
	0, 167, 136, 182, 141, 180, 179, 137, 0, 381,
	0, 1148, 0, 0, 0, 0, 0, 0, 122, 135,
	172, 0, 173, 0, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 188, 187, 189, 121, 190, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 168, 181, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	140, 0, 0, 177, 178, 127, 184, 0, 0, 119,
	0, 0, 161, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 148, 134, 143, 165, 153, 166, 144, 159,
	158, 160, 0, 0, 0, 171, 0, 0, 139, 133,
	175, 130, 156, 123, 117, 0, 124, 125, 129, 128,
	0, 147, 154, 157, 163, 164, 169, 0, 0, 0,
	0, 162, 0, 116, 0, 0, 0, 142, 0, 146,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 138, 0, 0, 531, 132, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 170, 155, 0, 115,
	120, 151, 0, 167, 136, 182, 141, 180, 179, 137,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 135, 172, 122, 173, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 188, 187, 189, 121, 190, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 168, 181, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 140, 0, 0, 177, 178,
	127, 184, 0, 0, 119, 0, 0, 161, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 0, 0,
	171, 0, 0, 139, 133, 175, 130, 156, 123, 117,
	0, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 162, 0, 116, 0, 0, 0, 142,
	0, 146, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 138, 132, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 170, 155,
	0, 0, 0, 0, 115, 120, 151, 0, 167, 136,
	182, 141, 180, 179, 137, 0, 391, 0, 436, 0,
	0, 0, 0, 0, 0, 122, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 168, 181, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 140, 0, 0,
	177, 178, 127, 184, 0, 0, 119, 0, 0, 161,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 148,
	134, 143, 165, 153, 166, 144, 159, 158, 160, 0,
	0, 0, 171, 0, 0, 139, 133, 175, 130, 156,
	123, 117, 0, 124, 125, 129, 128, 0, 147, 154,
	157, 163, 164, 169, 0, 162, 0, 116, 0, 0,
	0, 142, 0, 146, 149, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 138,
	132, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	170, 155, 0, 0, 0, 0, 115, 120, 151, 0,
	167, 136, 182, 141, 180, 179, 137, 0, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 135, 172,
	0, 173, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	188, 187, 189, 121, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 168, 181, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 140,
	0, 0, 177, 178, 127, 184, 0, 0, 119, 0,
	0, 161, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 148, 134, 143, 165, 153, 166, 144, 159, 158,
	160, 0, 0, 0, 171, 0, 0, 139, 133, 175,
	130, 156, 123, 117, 0, 124, 125, 129, 128, 0,
	147, 154, 157, 163, 164, 169, 0, 162, 0, 116,
	0, 0, 0, 142, 0, 146, 149, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 138, 132, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 170, 155, 0, 0, 0, 0, 115, 120,
	151, 0, 167, 136, 182, 141, 180, 179, 137, 0,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	135, 172, 0, 173, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 188, 187, 189, 121, 190, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 168, 181,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 140, 0, 0, 177, 178, 127, 184, 0, 0,
	119, 0, 0, 161, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 148, 134, 143, 165, 153, 166, 144,
	159, 158, 160, 0, 0, 0, 171, 0, 0, 139,
	133, 175, 130, 156, 123, 117, 0, 124, 125, 129,
	128, 0, 147, 154, 157, 163, 164, 169, 0, 162,
	0, 116, 0, 0, 0, 142, 0, 146, 149, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 138, 132, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 170, 155, 0, 0, 0, 0,
	115, 120, 151, 0, 167, 136, 182, 141, 180, 179,
	137, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 135, 172, 0, 173, 0, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 188, 187, 189, 121, 190, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	168, 181, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 140, 0, 0, 177, 178, 127, 184,
	0, 0, 119, 0, 0, 161, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 148, 134, 143, 165, 153,
	166, 144, 159, 158, 160, 0, 0, 0, 171, 0,
	0, 139, 133, 175, 130, 156, 123, 117, 0, 124,
	125, 129, 128, 0, 147, 154, 157, 163, 164, 169,
	0, 162, 0, 116, 0, 0, 0, 142, 0, 146,
	149, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 138, 132, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 170, 155, 0, 0,
	0, 0, 115, 120, 151, 0, 167, 136, 182, 141,
	180, 179, 137, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 135, 172, 0, 173, 0, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 188, 187, 189, 121,
	190, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 168, 181, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 140, 0, 0, 177, 178,
	127, 184, 0, 0, 119, 0, 0, 161, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 148, 134, 143,
	165, 153, 166, 144, 159, 158, 160, 0, 0, 0,
	171, 0, 0, 139, 133, 175, 130, 156, 123, 117,
	0, 124, 125, 129, 128, 0, 147, 154, 157, 163,
	164, 169, 0, 162, 0, 116, 0, 0, 0, 142,
	0, 146, 149, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 138, 132, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 170, 155,
	0, 0, 0, 0, 115, 120, 151, 0, 167, 136,
	182, 141, 180, 179, 137, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 135, 172, 0, 173,
	0, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 188, 187,
	189, 121, 190, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 168, 181, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 140, 0, 0,
	177, 178, 127, 184, 0, 0, 119, 0, 0, 161,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 148,
	134, 143, 165, 153, 166, 144, 159, 158, 160, 0,
	0, 0, 171, 0, 0, 139, 133, 175, 130, 156,
	123, 117, 0, 124, 125, 129, 128, 0, 147, 154,
	157, 163, 164, 169, 0, 162, 0, 116, 0, 0,
	0, 142, 0, 146, 149, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 138,
	132, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	170, 155, 0, 0, 0, 0, 115, 120, 151, 0,
	167, 136, 182, 141, 180, 179, 137, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 135, 172,
	0, 173, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	188, 187, 189, 121, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 168, 181, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 140,
	0, 0, 177, 178, 127, 184, 0, 0, 119, 0,
	0, 161, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 148, 134, 143, 165, 153, 166, 144, 159, 158,
	160, 0, 0, 0, 171, 0, 0, 139, 133, 175,
	130, 156, 123, 117, 0, 124, 125, 129, 128, 575,
	147, 154, 157, 163, 164, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 120,
	151, 0, 167, 136, 182, 141, 180, 179, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 172, 0, 173, 0, 563, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 188, 187, 189, 121, 190, 191, 0, 0,
	576, 0, 0, 0, 0, 0, 589, 592, 593, 594,
	595, 596, 597, 0, 598, 599, 600, 601, 602, 577,
	578, 579, 580, 561, 562, 590, 0, 564, 0, 0,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	581, 582, 583, 584, 585, 586, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591,
}
var yyPact = [...]int{

	177, -1000, -214, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1075, 1095, -1000, -1000, -1000, -1000,
	-1000, 827, 156, 34, 145, 167, 165, 149, 164, 10122,
	-1000, 8497, 4194, -48, -1000, -165, -1000, -1000, -170, -1000,
	-1000, 830, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1041, 1073, 858, 994, 913, -1000, 129, 10122, 1085, 2364,
	-131, 10324, 123, 153, 152, 151, 123, -1000, -1000, -1000,
	162, 10728, -1000, 161, 708, 122, -1000, 10122, -1000, 10122,
	-63, 37, -1000, -1000, -54, 363, -1000, -1000, -1000, -73,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9516, 240, 155, 212, 330, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 511, -1000, -1000, -1000, -1000, -1000, -1000, 805,
	805, -1000, 10122, -1000, -1000, -188, -1000, -1000, 642, 976,
	6737, 6737, 1075, -1000, 830, -1000, -1000, -1000, 978, -1000,
	-1000, 366, 9314, 968, 10122, 795, -1000, -1000, -178, 2974,
	-1000, -1000, -1000, -1000, 325, 8295, 8295, -1000, -1000, -1000,
	965, -1000, -1000, -1000, -1000, -1000, 1060, 1052, 730, -1000,
	10895, -1000, -1000, 10728, 347, 696, 694, 689, 10122, 10122,
	64, -1000, -1000, -1000, 122, 853, 10728, 988, -1000, -1000,
	1084, 10122, 10122, -1000, -1000, 363, 363, -1000, -1000, 10122,
	-1000, -1000, -1000, -1000, -1000, 363, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -9, -1000,
	-1000, -1000, -1000, -1000, 321, 5109, -57, -1000, -1000, -1000,
	6737, -1000, -1000, 232, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1091, 264, 449, -1000, 6737, 1529, 805, 805,
	-1000, -1000, 186, -1000, -1000, 7006, 7006, 7006, 7006, 7006,
	7006, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 805, 211, -1000, 6466, 805, 805,
	805, 805, 805, 805, 6737, 805, 805, 805, 805, 805,
	805, 805, 805, 805, 805, 805, 805, 805, -1000, -1000,
	794, -1000, 260, 1041, 642, 913, 8093, 854, -1000, -1000,
	829, 10122, -1000, 9920, 1082, 2669, -1000, 793, 789, -176,
	-183, -1000, -178, 5653, -1000, -1000, -1000, -1000, 198, -1000,
	805, 98, 1894, 2013, 857, 16, -1000, -1000, -1000, 814,
	-1000, 814, 814, 814, 814, 46, 46, 46, 46, -1000,
	-1000, -1000, -1000, -1000, 835, 832, -1000, 814, 814, 814,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 831, 831,
	831, 819, 819, 64, 987, 852, 851, 849, -1000, 1310,
	-1000, 64, -1000, 101, -191, -1000, 10122, 10122, -1000, -1000,
	1041, -69, -1000, -1000, 367, 10122, 10122, 363, -1000, -1000,
	510, -141, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	726, 320, -1000, 10122, -1000, -1000, -1000, -1000, -1000, -1000,
	928, 6737, 6737, 430, 6737, 6737, 239, 7006, 401, 350,
	7006, 7006, 7006, 7006, 7006, 7006, 7006, 7006, 7006, 7006,
	7006, 7006, 7006, 7006, 7006, 509, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 687, -1000, 830, 768, 768, 158,
	158, 158, 158, 158, 1714, 5382, 4804, 642, 6466, 5924,
	5924, 6737, 6737, 5924, 995, 342, 320, 9718, -1000, 642,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5924, 5924, 5924,
	5924, 6737, -1000, -1000, -1000, 976, -1000, 995, 1054, -1000,
	937, 935, 5924, -1000, 840, 9920, 805, -1000, 7891, -1000,
	845, -1000, 316, -1000, 210, 1075, 6737, -1000, 3889, -1000,
	-179, -1000, -174, -193, -1000, -1000, -1000, -1000, -1000, 320,
	-1000, 682, 10324, 805, 805, -1000, 1894, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 285, 285, 124, 285, 285, 285, 285, 285,
	-16, -32, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, -1000, -1000, 612, 236, 223,
	-1000, -1000, -1000, -1000, 1016, -1000, 857, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 362,
	256, -1000, 1006, -1000, 1005, 593, 1089, 508, 196, 195,
	5, -1000, -1000, 484, 46, 46, -1000, -1000, -1000, 951,
	-1000, -1000, -1000, 592, 592, -1000, -1000, -1000, -1000, 483,
	-1000, -1000, -1000, 479, -1000, -1000, -1000, 10122, 10122, 10122,
	-1000, 273, 299, 131, 114, 113, 105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 285, 285, -1000, -1000,
	946, 945, 285, 816, -1000, 972, -1000, 591, -1000, -1000,
	-1000, 589, 6737, -1000, 363, 1082, -1000, -1000, 255, 6737,
	-1000, -1000, 922, 239, 338, -1000, -1000, 463, -1000, -1000,
	320, 320, 1610, -1000, -1000, -1000, -1000, 401, 7006, 7006,
	7006, 241, 1610, 1196, 458, 543, 158, 409, 409, 298,
	298, 298, 298, 298, 609, 609, -1000, -1000, -1000, 642,
	-1000, -1000, -1000, 642, 5924, 787, -1000, -1000, 7279, 209,
	805, 194, -1000, -1000, 642, 667, 667, 388, 457, 667,
	5924, 351, -1000, 6737, 642, -1000, 667, 642, 667, 667,
	-1000, -1000, 10122, -1000, -1000, -1000, -1000, 797, -1000, 977,
	764, 754, -1000, -1000, 6195, 642, 723, 191, 1075, 9920,
	6737, 4804, 1041, 320, -1000, -1000, -1000, -184, -190, -1000,
	-1000, 642, 10324, 10324, -1000, 571, -1000, 508, 285, 285,
	474, 466, 462, 562, 561, 285, 285, 446, 559, 630,
	435, 434, 429, 486, 552, 448, 441, 440, 431, 10526,
	117, -1000, 612, -1000, 1004, 236, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 828, -1000, -1000, -1000, -1000,
	-1000, -1000, -77, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 720, -1000, -1000, 296, 718, -1000,
	716, 784, 686, 805, 805, 805, -1000, 10122, -1000, -1000,
	-1000, 624, 44, 827, 622, 10324, 623, 244, -1000, -1000,
	420, -1000, 10122, -1000, -1000, -1000, 1030, 942, 285, 285,
	-1000, -1000, -1000, 320, 367, -1000, -1000, 320, -1000, -1000,
	-1000, -1000, -1000, -1000, 241, 1610, 892, -1000, 7006, 7006,
	-1000, -1000, 667, 5924, -1000, -1000, 9109, -1000, -1000, 3584,
	5924, 4499, -1000, -1000, -1000, 748, 509, 748, -95, 728,
	337, -1000, 6737, 396, -1000, -1000, -1000, -1000, -1000, -1000,
	1082, 8907, 999, -1000, 805, -1000, -1000, 841, 9718, 9718,
	1041, -1000, 320, -1000, -1000, -1000, -1000, -1000, -1000, 642,
	642, -1000, -1000, 508, 508, -1000, -1000, -1000, -1000, -1000,
	549, 544, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 821, -1000, 1039, 820, 117, 612, 386,
	-1000, -1000, -1000, -1000, -1000, 542, -1000, 423, -1000, 419,
	9718, 9718, 9718, -1000, -1000, -1000, 944, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 623, 623, -1000, -1000, 7006, 1610, 1610,
	-1000, -1000, -1000, -1000, 183, 642, -1000, 642, 814, 814,
	-1000, 814, 819, -1000, 814, 86, 814, 67, 642, 642,
	805, -92, -1000, 320, 6737, 1080, 783, 870, -1000, -1000,
	-1000, 991, 7484, 7686, 1088, -1000, 805, -1000, 830, 179,
	-1000, -1000, 805, -149, -1000, -1000, -1000, -1000, 9718, -1000,
	-1000, -1000, -1000, 9718, 818, 117, -1000, 668, -1000, 662,
	646, 665, -1000, 814, 665, 665, 599, -1000, -1000, 1610,
	3279, -1000, -1000, -1000, 144, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7006, 642, 527, 320, 1078, 1047, 8907,
	8907, 8907, 8907, -1000, 879, 878, -1000, 886, 885, 923,
	10122, -1000, 661, 7484, 203, -1000, 8702, -1000, -1000, 9920,
	754, 642, 9718, -146, -1000, 415, 645, 641, 9718, 809,
	-1000, -1000, -1000, -1000, 9718, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 121, -1000, -1000, -1000, 6737, 6737, 870, 839,
	1021, -1000, -1000, -1000, -1000, 868, -1000, 864, -1000, -1000,
	-1000, -1000, -1000, 146, 143, 140, -1000, 740, -1000, -1000,
	637, -1000, 597, -1000, -1000, -1000, 634, 9718, 392, -1000,
	173, 672, 642, 97, -119, 320, 733, 6737, 6737, -1000,
	-1000, 805, 805, 805, -146, -1000, 890, 112, 112, -1000,
	628, -1000, -1000, -1000, -1000, 285, 518, 1050, -1000, -1000,
	-1000, 1027, -1000, -1000, -1000, 919, -107, -123, 320, 320,
	9718, 9718, 9718, -1000, 231, -1000, 285, -1000, 513, 1026,
	112, -1000, 413, -1000, -1000, -1000, -1000, 545, -1000, 898,
	-1000, 619, -1000, 619, 619, 805, 387, -1000, 512, 112,
	-1000, -1000, -116, -1000, 9718, -1000, -1000, -1000, -1000, -1000,
	-121, -1000, -124, -1000,
}
var yyPgo = [...]int{

	0, 20, 21, 1439, 1435, 1434, 23, 1047, 1433, 1428,
	1426, 1422, 55, 1416, 1410, 1392, 1388, 1386, 17, 907,
	1385, 1383, 1109, 1104, 1101, 1382, 1379, 1376, 1375, 1369,
	1368, 1367, 1366, 1365, 1364, 101, 1363, 1362, 1360, 49,
	1359, 78, 1358, 97, 1354, 1352, 1350, 33, 149, 46,
	38, 124, 1348, 28, 53, 35, 1345, 1342, 16, 1340,
	1173, 1339, 1337, 56, 84, 1335, 1332, 39, 1331, 1327,
	1326, 1325, 1323, 7, 32, 1322, 60, 1319, 1317, 86,
	291, 1316, 1300, 1298, 1295, 1294, 1293, 54, 9, 11,
	1, 26, 1292, 48, 12, 1291, 51, 1290, 1289, 1288,
	1286, 36, 1284, 66, 1283, 25, 64, 1282, 52, 14,
	50, 1280, 1279, 80, 92, 89, 73, 1278, 75, 1277,
	1276, 93, 1275, 1274, 1273, 883, 1271, 98, 499, 1270,
	1265, 1264, 1260, 1254, 1250, 1249, 58, 44, 0, 4,
	61, 30, 1248, 62, 978, 31, 13, 1247, 91, 1246,
	1245, 103, 34, 83, 29, 1244, 1243, 1242, 1240, 1239,
	1238, 1237, 182, 1236, 1235, 1234, 1233, 1229, 1228, 1227,
	1226, 1225, 1224, 1223, 1222, 1221, 1217, 1216, 1214, 76,
	1212, 1210, 1209, 1208, 1207, 1205, 1204, 1199, 1198, 1193,
	1192, 19, 1186, 1185, 1175, 1174, 24, 1171, 65, 6,
	67, 1170, 1169, 1167, 85, 27, 1166, 1160, 1159, 1157,
	57, 59, 1153, 81, 47, 45, 1150, 1148, 1142, 71,
	10, 15, 1140, 1139, 1138, 3, 8, 1137, 1134, 1128,
	1127, 2, 37, 41, 1124, 1123, 22, 1121, 1119, 63,
	79, 1118, 77, 5, 1117, 1115, 1112, 1111, 94, 156,
	1107, 128,
}
var yyR1 = [...]int{

	0, 246, 247, 247, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 18, 18, 18, 19, 20,
	20, 21, 21, 22, 22, 38, 38, 23, 24, 25,
	25, 244, 244, 243, 167, 167, 7, 7, 26, 26,
	26, 26, 26, 245, 245, 245, 245, 245, 245, 235,
	235, 236, 236, 228, 226, 226, 223, 223, 229, 229,
	222, 222, 227, 227, 224, 224, 231, 231, 231, 231,
	231, 232, 233, 240, 240, 241, 241, 195, 195, 242,
	242, 242, 242, 200, 200, 199, 199, 198, 198, 198,
	201, 201, 201, 29, 215, 217, 217, 218, 218, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 169, 171, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 184, 185, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 187, 187, 188, 188, 189, 189, 190,
	190, 172, 196, 196, 170, 166, 168, 216, 216, 216,
	211, 143, 143, 155, 155, 155, 155, 237, 237, 238,
	238, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 158, 158, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 157, 157, 157, 157, 157, 159, 159, 159,
	159, 159, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 161, 161, 161,
	161, 161, 161, 161, 161, 210, 210, 162, 162, 204,
	204, 205, 205, 205, 202, 202, 203, 203, 206, 206,
	163, 163, 163, 163, 163, 163, 40, 39, 39, 39,
	123, 123, 123, 207, 191, 191, 191, 165, 192, 192,
	193, 193, 193, 194, 194, 194, 208, 208, 209, 209,
	164, 212, 212, 212, 212, 6, 6, 230, 230, 230,
	230, 225, 225, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 5, 5, 214, 214, 213, 213, 221, 221,
	220, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	149, 149, 129, 129, 134, 134, 134, 28, 28, 28,
	70, 70, 135, 135, 8, 30, 9, 130, 130, 130,
	68, 68, 68, 10, 12, 12, 12, 12, 69, 69,
	69, 69, 69, 69, 11, 11, 11, 11, 197, 197,
	197, 197, 197, 13, 133, 133, 133, 14, 16, 16,
	16, 16, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	46, 46, 66, 66, 66, 63, 63, 64, 64, 65,
	65, 62, 62, 67, 67, 67, 34, 32, 33, 33,
	250, 35, 36, 36, 37, 37, 37, 43, 43, 43,
	41, 41, 42, 42, 49, 49, 48, 48, 50, 50,
	50, 50, 142, 142, 142, 141, 141, 52, 52, 53,
	53, 54, 54, 55, 55, 55, 71, 56, 56, 56,
	56, 150, 150, 147, 147, 147, 146, 146, 57, 57,
	57, 57, 58, 58, 58, 58, 59, 59, 61, 61,
	60, 60, 72, 72, 72, 72, 73, 73, 74, 74,
	51, 51, 51, 51, 51, 51, 51, 126, 126, 76,
	76, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 86, 86, 86, 86, 86, 86, 77, 77, 77,
	77, 77, 77, 77, 47, 47, 87, 87, 87, 93,
	88, 88, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 84, 84, 84, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 83, 83, 83, 83, 83, 83,
	83, 83, 251, 251, 85, 85, 85, 85, 44, 44,
	44, 44, 44, 152, 152, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 97, 97,
	45, 45, 95, 95, 96, 98, 98, 94, 94, 94,
	79, 79, 79, 79, 79, 79, 79, 81, 81, 81,
	99, 99, 100, 100, 101, 101, 102, 102, 103, 104,
	104, 104, 105, 105, 105, 105, 106, 106, 106, 78,
	78, 78, 78, 78, 78, 107, 107, 107, 107, 108,
	108, 89, 89, 91, 91, 90, 92, 109, 109, 110,
	111, 111, 114, 114, 113, 113, 113, 113, 113, 122,
	122, 121, 121, 121, 112, 112, 115, 115, 119, 119,
	118, 120, 120, 120, 120, 117, 117, 116, 116, 153,
	153, 153, 124, 124, 127, 127, 128, 128, 125, 125,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	136, 136, 136, 132, 132, 234, 234, 139, 139, 140,
	140, 144, 144, 145, 145, 148, 148, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 248, 249, 151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 10, 1,
	3, 1, 3, 6, 7, 1, 1, 8, 7, 3,
	3, 1, 3, 5, 0, 2, 1, 1, 3, 5,
	11, 11, 11, 0, 1, 1, 5, 9, 7, 1,
	1, 1, 1, 2, 3, 2, 0, 2, 1, 1,
	0, 2, 1, 3, 0, 2, 0, 1, 1, 2,
	2, 3, 3, 0, 1, 1, 2, 1, 1, 4,
	4, 2, 4, 0, 1, 0, 1, 1, 2, 2,
	1, 1, 1, 4, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 4, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 3, 3, 4, 1, 3, 3,
	3, 1, 1, 3, 1, 1, 1, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 4, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 3, 4,
	1, 1, 1, 1, 0, 3, 3, 2, 0, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 2, 1,
	2, 7, 7, 8, 9, 0, 1, 3, 1, 2,
	3, 0, 2, 0, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 3,
	2, 6, 7, 7, 7, 9, 7, 7, 7, 4,
	0, 1, 0, 1, 0, 1, 1, 6, 6, 4,
	1, 3, 0, 1, 3, 3, 2, 1, 1, 1,
	0, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 3, 1, 1, 3, 5, 3, 6, 0, 1,
	1, 1, 1, 2, 0, 1, 1, 4, 2, 3,
	2, 2, 4, 4, 3, 6, 3, 3, 4, 4,
	4, 6, 5, 5, 3, 3, 5, 6, 7, 3,
	3, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	0, 3, 1, 1, 1, 0, 2, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 4, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 1, 2, 3, 3, 3, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 2, 2, 0, 2,
	3, 2, 2, 2, 1, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -246, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -8, -30, -31, -34, -32, -9, -10, -11, -13,
	-14, -16, -15, -33, -19, -20, 6, -38, 8, 9,
	44, -29, 125, 126, 127, 149, 129, 144, 47, 64,
	274, -130, 147, 281, 284, 285, 288, 287, 302, 148,
	150, -248, 7, 254, 143, 142, 141, 67, -247, 310,
	-101, 14, -37, 5, -35, -250, -35, -35, -35, -35,
	-215, 67, -7, -234, 23, 31, 132, 246, 247, 34,
	-125, 246, 136, -129, 133, -7, 33, -135, 132, 132,
	239, 125, 234, 276, -65, -66, 278, 279, 241, 132,
	280, 237, 277, 236, 233, 174, 70, 46, 133, 27,
	25, 132, -144, 70, -138, 260, 19, 205, 151, 170,
	261, 307, 79, 204, 207, 208, 145, 166, 210, 209,
	202, 160, 42, 200, 184, 282, 265, 270, 243, 199,
	161, 267, 23, 185, 189, 289, 25, 212, 183, 26,
	27, 262, 49, 187, 213, 53, 203, 214, 191, 190,
	192, 173, 17, 215, 216, 186, 188, 264, 148, 217,
	52, 196, 283, 285, 241, 201, 175, 164, 165, 269,
	268, 149, 266, 134, 167, 302, 303, 305, 304, 306,
	308, 309, -151, -60, -69, 129, -144, 267, 270, 272,
	-197, 70, 72, -137, -138, 85, 38, 40, 194, 88,
	157, 120, 179, 15, 21, 89, 168, 171, 174, 119,
	242, 206, 255, 125, 62, 245, 248, 244, 246, 234,
	162, 43, 9, 141, 142, 37, 113, 127, 92, 93,
	276, 146, 39, 143, 82, 18, 65, 10, 46, 12,
	13, 147, 137, 136, 104, 133, 60, 7, 155, 156,
	121, 41, 101, 56, 35, 58, 102, 16, 249, 250,
	45, 182, 178, 259, 181, 154, 177, 115, 63, 50,
	86, 80, 163, 83, 66, 150, 84, 14, 61, 279,
	139, 278, 159, 103, 128, 254, 29, 59, 247, 6,
	258, 44, 144, 153, 57, 132, 235, 33, 180, 152,
	176, 91, 135, 81, 280, 5, 34, 197, 8, 64,
	138, 251, 252, 253, 48, 172, 169, 277, 263, 90,
	11, 198, -133, 264, 207, -151, 286, -151, -151, 303,
	305, 304, 306, 307, 309, 274, -151, -151, -18, -105,
	16, 15, -21, -19, -248, 6, 36, 37, -43, 54,
	55, -36, -125, -60, 10, -111, -112, -114, 286, -153,
	-113, 290, 291, 289, -140, -122, 292, -139, -137, 174,
	171, 70, -138, -245, 289, 283, 275, 271, -216, -211,
	-143, 70, -138, -128, 137, 133, 133, 133, -128, 132,
	-149, -148, 70, -138, 132, 70, -127, 137, -60, -60,
	238, 132, 246, -151, -151, 235, -62, 242, 243, -64,
	10, 104, -151, -151, -151, 241, -151, -151, -151, -151,
	-151, -151, -151, -60, -68, -143, 72, -12, 18, -18,
	-23, -22, -24, -12, 267, 122, 94, 73, -151, -90,
	-248, -90, -151, -60, -151, -151, 308, 287, 288, -249,
	69, -106, 18, 45, -51, -75, 86, -80, 43, 39,
	-79, -76, -94, -92, -93, 120, 109, 110, 117, 87,
	121, -84, -82, -83, -85, 72, 71, 73, 74, 75,
	76, 80, 81, 82, -139, -144, -90, -248, 58, 59,
	255, 256, 259, 257, 89, 48, 244, 253, 252, 251,
	249, 250, 245, 248, 137, 246, 115, 254, 70, -138,
	-102, -103, -51, -101, -18, -35, 50, -41, 37, 78,
	-61, 41, -60, 44, -60, 68, -115, -118, -116, 293,
	295, -113, 286, 94, -121, -139, 72, 43, -121, 44,
	15, 15, 69, 68, -155, -158, -160, -159, -161, -156,
	-157, 168, 169, 120, 172, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 44, 145, 164, 165, 166,
	167, 185, 186, 187, 188, 189, 190, 191, 192, 151,
	170, 261, 152, 153, 154, 155, 156, 157, 159, 160,
	161, 162, 163, -148, 86, 70, 70, 70, -60, -60,
	-240, -241, -242, -200, 295, 43, -127, 66, -148, 39,
	-46, 10, -60, -144, -63, -64, -64, -60, -63, -151,
	207, 94, -145, -144, -137, 183, 268, 269, -151, -151,
	-88, -51, -151, -136, 135, 38, -151, -151, -151, 8,
	104, 85, 84, 101, 68, 17, -51, -77, 104, 86,
	102, 103, 88, 106, 105, 116, 109, 110, 111, 112,
	113, 114, 115, 107, 108, 119, 94, 95, 96, 97,
	98, 99, 100, -126, -248, -93, -248, 123, 124, -80,
	-80, -80, -80, -80, -80, -248, 122, -18, -248, -248,
	-248, -248, -248, -248, -248, -97, -51, -248, -251, -248,
	-251, -251, -251, -251, -251, -251, -251, -248, -248, -248,
	-248, 68, -104, 40, 141, -105, -249, -43, -81, -139,
	73, 76, -42, 57, -78, 44, 48, -18, -248, -60,
	-109, -110, -94, -139, -144, -74, 11, -114, -153, -117,
	68, -119, 68, 294, 296, 297, -115, 66, 83, -51,
	-192, 119, -248, 273, 24, -217, -218, -219, -170, -166,
	-168, -169, -171, -172, -173, -174, -175, -176, -177, -178,
	-179, -180, -181, -182, -183, -184, -185, -186, -187, -188,
	-189, -190, 79, 282, -200, 194, 205, 47, 206, 207,
	208, 133, 210, 211, 212, 26, 213, 214, 215, 216,
	217, 218, 219, 220, 221, -211, -212, -213, -5, -4,
	133, 35, 31, 23, 22, -237, -238, -239, -206, -163,
	-207, -208, -209, -164, -40, -165, -193, -194, 80, 86,
	43, 194, 139, 35, 34, 79, 66, 119, 204, 201,
	-202, 197, -162, 67, -162, -162, -162, -162, -191, 171,
	-191, -191, -191, 67, 67, -162, -162, -162, -204, 67,
	-204, -204, -205, 67, -205, -240, 39, 66, 66, 66,
	-131, 128, 282, 255, 130, 127, 131, 126, 194, 171,
	79, 43, 14, 266, 70, -242, 119, -198, -179, 174,
	171, 168, 297, -70, -60, -60, -105, 240, -151, -151,
	-67, 102, 11, -144, -60, -63, -151, 73, 268, 68,
	-249, -60, 52, -51, -51, -86, 80, 86, 81, 82,
	-51, -51, -80, -87, -90, -93, 77, 104, 102, 103,
	88, -80, -80, -80, -80, -80, -80, -80, -80, -80,
	-80, -80, -80, -80, -80, -80, -152, 70, 72, 70,
	-79, -79, -139, -49, 37, -48, -50, 111, -51, -144,
	-140, -145, -137, -249, -18, -48, -48, -51, -51, -48,
	-41, -95, -96, 90, -139, -249, -48, -49, -48, -48,
	-103, -106, -124, 18, 10, 48, 48, -48, -108, 66,
	-109, -89, -91, -90, -248, -18, -107, -139, -74, 68,
	94, 122, -101, -51, -116, -118, -120, 298, 295, 301,
	70, -143, -248, -248, -219, -199, 94, -199, 119, -198,
	-199, -199, -199, -199, -199, 209, 209, -199, -199, -199,
	-199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-6, 70, -214, -213, 139, 34, 32, -239, 80, 72,
	73, 74, 80, -39, -76, -123, 244, 249, 250, 35,
	35, 72, 8, -196, 70, 72, 199, 200, 43, 43,
	202, 203, -203, 198, 73, -191, -191, 44, -210, 72,
	-210, 73, 73, -60, -60, -60, -151, -136, -132, 133,
	35, 94, 135, 140, 140, 140, -199, -199, 44, 44,
	-199, -134, 68, 29, 21, -231, -232, -233, 45, 19,
	-151, 72, 72, -51, -63, -74, -12, -51, -151, 53,
	80, 81, 82, -87, -80, -80, -80, -47, 146, 85,
	-249, -249, -48, 68, -142, -141, 38, -139, 72, 122,
	-248, 122, -249, -249, -249, 68, 138, 38, -249, -48,
	-98, -96, 92, -51, -249, -249, -249, -249, -249, -60,
	-52, 10, 42, -108, 68, -249, -249, -249, 68, 122,
	-101, -110, -51, -140, -105, 295, 299, 300, -249, -143,
	-143, 72, -196, -199, -199, 73, 73, 73, 72, 72,
	-199, -199, 73, 72, 70, 73, 73, 73, 73, 43,
	72, 43, 200, 199, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 73, 43, 73, 43, 73,
	43, 70, -138, -2, -1, 138, -6, 35, -214, 67,
	-39, 69, 70, 120, 69, 68, 69, 68, 69, 68,
	-248, -248, -248, -60, -151, 70, 171, -215, 70, -211,
	-236, 70, 43, -201, 70, 120, 43, -195, 73, 43,
	-60, -233, -232, -199, -199, -67, -47, 85, -80, -80,
	-249, -50, -141, 111, -145, -49, -140, -154, 120, 168,
	145, 166, 162, 183, 173, 196, 164, 197, -152, -154,
	260, -101, 93, -51, 91, -74, -53, -54, -55, -56,
	-71, -93, -248, -60, 35, -91, 48, -18, -248, -139,
	-139, -105, -249, -249, -196, -196, 72, 72, 67, -3,
	24, 20, 30, 67, -2, -6, 69, 73, 72, 73,
	73, -221, -220, -139, -221, -221, 44, -236, -236, -80,
	122, -249, -249, -162, -162, -162, -205, -162, 156, -162,
	156, -249, -249, -248, -45, 258, -51, -99, 12, 68,
	-57, -58, -59, 56, 60, 62, 57, 58, 59, 63,
	-150, 38, -53, -248, -147, -146, 38, -144, 72, 8,
	-89, -18, 122, -248, -167, 272, -221, -221, 67, -2,
	69, 69, 69, -249, 68, -162, -249, -249, 70, 111,
	-191, 70, -80, -249, 72, -100, 13, 15, -54, -55,
	-54, -55, 56, 56, 56, 61, 56, 61, 56, -58,
	-144, -249, -72, 64, 136, 65, -146, -109, -249, -139,
	-244, -243, 271, 73, 69, 69, -221, 67, -223, -220,
	-222, -224, -44, 104, 263, -51, -88, 66, 66, 56,
	56, 133, 133, 133, 68, -249, 70, -225, -225, 69,
	-221, -231, -229, -226, -228, 26, 79, 138, -231, -227,
	-226, 263, -231, -226, -249, 261, 63, 264, -51, -51,
	-248, -248, -248, -243, 48, -230, 26, -1, 79, 263,
	-225, 69, -199, 72, -235, 24, 20, 28, 53, 262,
	265, -73, -139, -73, -73, 104, -199, 72, 28, -225,
	73, 70, 53, -249, 68, -249, -249, -90, 73, 70,
	263, -139, 264, 265,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 644, 0, 430, 430, 430, 430,
	430, 0, 735, 718, 332, 342, 0, 419, 0, 0,
	953, 358, 368, 374, 953, 0, 953, 953, 0, 953,
	953, 0, 35, 36, 347, 348, 349, 951, 1, 3,
	652, 0, 0, 434, 437, 432, 718, 0, 0, 0,
	53, 0, 716, 0, 0, 0, 716, 46, 47, 736,
	0, 330, 719, 0, 0, 714, 333, 0, 343, 0,
	0, 0, 953, 953, 0, 0, 953, 953, 953, 0,
	953, 953, 953, 953, 953, 953, 953, 420, 412, 413,
	414, 0, 427, 741, 742, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 346, 350, 0, 0, 490, 900, -2, 363,
	373, 369, 370, 371, 372, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 0, 375, 376, 378, 953, 380, 381, 0,
	0, 953, 0, 953, 953, 0, 428, 429, 29, 656,
	0, 0, 644, 31, 0, 430, 435, 436, 440, 438,
	439, 431, 0, 0, 0, 39, 40, 680, 0, 0,
	682, 709, 710, -2, 0, 0, 0, 739, 740, -2,
	759, 737, 738, 48, 54, 55, 0, 0, 0, 177,
	0, 181, 182, 0, 0, 0, 0, 0, 0, 0,
	-2, 331, 745, 746, 714, 0, 0, 0, 344, 345,
	410, 0, 0, 394, 395, 415, 0, 421, 422, 0,
	417, 418, 399, 400, 401, 415, 403, 404, 405, 406,
	407, 408, 409, 953, 353, 351, 352, 364, 0, -2,
	355, 356, 357, 366, 0, 0, 0, 953, 379, 953,
	0, 953, 384, 730, 386, 387, 953, 953, 953, 30,
	952, 25, 0, 0, 653, 500, 0, 505, 507, 0,
	542, 543, 544, 545, 546, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 571, 630, 631, 632, 633, 634,
	635, 636, 509, 510, 627, 0, 676, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 592, 592, 592, 592,
	592, 592, 592, 592, 0, 0, 0, 0, -2, -2,
	645, 646, 649, 652, 29, 437, 0, 442, 441, 433,
	0, 0, 489, 0, 498, 0, 694, 705, 698, 0,
	0, 683, 0, 0, 687, 691, 692, 693, 278, 690,
	0, 0, -2, 303, 187, 254, 184, 185, 186, 247,
	202, 247, 247, 247, 247, 274, 274, 274, 274, 230,
	231, 232, 233, 234, 0, 0, 217, 247, 247, 247,
	221, 237, 238, 239, 240, 241, 242, 243, 244, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 249, 249,
	249, 251, 251, -2, 0, 0, 0, 0, 103, 0,
	329, -2, 85, 0, 0, 94, 0, 0, 339, 715,
	652, 0, 953, 953, 423, 0, 0, 415, 953, 426,
	0, 0, 491, 743, 744, 359, 360, 361, 377, 382,
	0, 540, 383, 0, 731, 732, 388, 389, 390, 657,
	0, 0, 0, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 529, 530,
	531, 532, 533, 506, 0, 520, 0, 0, 0, 562,
	563, 564, 565, 566, 0, 444, 0, 29, 0, 0,
	0, 0, 0, 0, 440, 0, 619, 0, 584, 0,
	585, 586, 587, 588, 589, 590, 591, 0, 444, 0,
	0, 0, 648, 650, 651, 656, 32, 440, 0, 637,
	0, 0, 0, 443, 669, 0, 0, -2, 0, 488,
	498, 677, 0, 627, 0, 644, 0, 681, 0, 696,
	0, 697, 0, 0, 707, 708, 695, 684, 685, 686,
	688, 0, 0, 0, 0, 104, -2, 107, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 95, 95, 0, 95, 95, 95, 95, 95,
	0, 0, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 178, 179, 295, 314, 0,
	316, 317, 312, -2, 304, 180, 188, 189, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 258, 0,
	0, 273, 0, 287, 289, 0, 0, 0, 0, 0,
	256, 255, 201, 0, 274, 274, 224, 225, 226, 0,
	227, 228, 229, 0, 0, 218, 219, 220, 212, 0,
	213, 214, 215, 0, 216, 49, 717, 0, 0, 0,
	953, 730, 0, 727, 0, 725, 0, 720, 721, 722,
	723, 724, 726, 728, 729, 86, 95, 95, 91, 97,
	0, 0, 95, 334, 340, 76, 953, 0, 392, 393,
	396, 0, 0, 416, 415, 498, 402, 365, 0, 0,
	675, 953, 0, 501, 502, 504, 521, 0, 523, 525,
	654, 655, 511, 512, 536, 537, 538, 0, 0, 0,
	0, 534, 516, 0, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 561, 603, 604, 0,
	559, 560, 567, 0, 0, 445, 446, 448, 452, 0,
	628, 0, -2, 539, 29, 0, 0, 0, 0, 0,
	0, 625, 622, 0, 0, 593, 0, 0, 0, 0,
	647, 26, 0, 712, 713, 638, 639, 457, 33, 0,
	669, 659, 671, 673, 0, 29, 0, 665, 644, 0,
	0, 0, 652, 499, 706, 699, 700, 0, 0, 704,
	279, 0, 0, 0, 108, 0, 96, 0, 95, 95,
	0, 0, 0, 0, 0, 95, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 296, 295, 315, 0, 314, 305, 190, 259, 260,
	261, 262, 263, 264, 265, 267, 270, 271, 272, 286,
	288, 290, 0, 277, 172, 173, 280, 281, 282, 283,
	284, 285, 183, 257, 0, 222, 223, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 321, 0, 953, 733,
	734, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 337, 0, 335, 336, 338, 77, 78, 95, 95,
	391, 411, 424, 425, 423, 397, 367, 541, 385, 658,
	522, 524, 526, 513, 534, 517, 0, 514, 0, 0,
	508, 572, 0, 0, 449, 453, 0, 455, 456, 0,
	444, 0, -2, 575, 576, 0, 0, 0, 0, 644,
	0, 623, 0, 0, 583, 594, 595, 596, 597, 27,
	498, 0, 0, 34, 0, 674, -2, 0, 0, 0,
	652, 678, 679, 628, 38, 701, 702, 703, 56, 0,
	0, 174, 175, 0, 0, 133, 134, 171, 136, 137,
	0, 0, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 0, 308, 0, 0, 307, 295, 0,
	266, 248, 275, 276, 235, 0, 236, 0, 252, 0,
	0, 0, 0, 322, 323, 324, 0, 326, 327, 328,
	89, 61, 62, 90, 100, 101, 102, 92, 87, 88,
	341, 79, 80, 0, 0, 398, 515, 0, 535, 518,
	573, 447, 454, 450, 0, 0, 629, 0, 247, 247,
	608, 247, 251, 611, 247, 613, 247, 616, 0, 0,
	0, 620, 582, 626, 0, 640, 458, 459, 461, 462,
	463, 471, 0, 473, 0, 672, 0, -2, 0, 667,
	666, 37, 0, 44, 135, 176, 138, 139, 0, 306,
	309, 310, 311, 0, 0, 307, 268, 0, 246, 0,
	0, 0, 318, 247, 0, 0, 0, 81, 82, 519,
	0, 574, 577, 605, 274, 609, 610, 612, 614, 615,
	617, 579, 578, 0, 0, 0, 624, 642, 0, 0,
	0, 0, 0, 478, 0, 0, 481, 0, 0, 0,
	0, 472, 0, 0, 492, 474, 0, 476, 477, 0,
	662, 29, 0, 0, 58, 0, 0, 0, 0, 0,
	269, 250, 253, 66, 0, 320, 70, 74, 325, 451,
	606, 607, 598, 581, 621, 28, 0, 0, 460, 467,
	0, 470, 479, 480, 482, 0, 484, 0, 486, 487,
	464, 465, 466, 0, 0, 0, 475, 670, -2, 668,
	0, 41, 0, 45, 301, 301, 0, 0, 76, 319,
	76, 76, 0, 0, 0, 643, 641, 0, 0, 483,
	485, 0, 0, 0, 0, 57, 0, 291, 292, 301,
	0, 50, 67, 68, 69, 95, 0, 0, 51, 71,
	72, 0, 52, 75, 580, 0, 0, 0, 468, 469,
	0, 0, 0, 42, 0, 302, 95, 298, 0, 0,
	293, 301, 0, 65, 63, 59, 60, 0, 599, 0,
	602, 0, 496, 0, 0, 0, 0, 299, 0, 294,
	64, 73, 600, 493, 0, 494, 495, 43, 297, 300,
	0, 497, 0, 601,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 310,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1063
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1095
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1140
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1151
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.optVal = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1215
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1235
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1242
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = "hash"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = "btree"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.str = "default"
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = "default"
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1533
		{
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1538
		{
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1540
		{
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.str = "character set"
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.str = "char set"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.str = "default"
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1870
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2122
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.optVal = nil
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.str = yyDollar[3].str
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2638
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2689
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2701
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2715
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 294:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2726
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2759
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2791
		{
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2794
		{
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2797
		{
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2808
		{
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2831
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2835
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2840
		{
			// set empty
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2882
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2887
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.byt = 0
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.byt = 1
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2935
		{
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2939
		{
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2943
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2959
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2979
		{
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2981
		{
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.statement = &Xa{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3003
		{
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3005
		{
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3007
		{
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.showFilter = nil
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3038
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3077
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.optVal = nil
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3095
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3100
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3120
		{
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3122
		{
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3124
		{
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3146
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3214
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3225
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3305
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3321
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3325
		{
			yyVAL.str = "full "
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.showFilter = nil
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3355
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3367
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3376
		{
			setAllowComments(yylex, true)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.bytes2 = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.str = UnionStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3399
		{
			yyVAL.str = UnionAllStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3403
		{
			yyVAL.str = UnionDistinctStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3408
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3412
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3416
		{
			yyVAL.str = SQLCacheStr
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.str = DistinctStr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3430
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3434
		{
			yyVAL.str = StraightJoinHint
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.selectExprs = nil
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3459
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3463
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3467
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3471
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3476
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3484
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3496
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3506
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3510
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3520
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3524
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3528
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3559
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3564
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3568
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3573
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3577
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3581
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3588
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3594
		{
			yyVAL.str = JoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3598
		{
			yyVAL.str = JoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3602
		{
			yyVAL.str = JoinStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.str = StraightJoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3612
		{
			yyVAL.str = LeftJoinStr
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3616
		{
			yyVAL.str = LeftJoinStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3620
		{
			yyVAL.str = RightJoinStr
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3624
		{
			yyVAL.str = RightJoinStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3630
		{
			yyVAL.str = NaturalJoinStr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3634
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3644
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3648
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3654
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3658
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.indexHints = nil
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3671
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3675
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3704
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3708
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3712
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3730
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3734
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3778
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3782
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3786
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3792
		{
			yyVAL.str = IsNullStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.str = IsNotNullStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3800
		{
			yyVAL.str = IsTrueStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.str = IsNotTrueStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.str = IsFalseStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.str = IsNotFalseStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3818
		{
			yyVAL.str = EqualStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3822
		{
			yyVAL.str = LessThanStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3826
		{
			yyVAL.str = GreaterThanStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.str = LessEqualStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3834
		{
			yyVAL.str = GreaterEqualStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3838
		{
			yyVAL.str = NotEqualStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3842
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3847
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3851
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3857
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3861
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3865
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3871
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3877
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3881
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3887
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3891
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3895
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3899
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3903
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3963
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3967
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3979
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3993
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4001
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4027
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4053
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 580:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4126
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4130
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4138
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.str = BooleanModeStr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4152
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 601:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4156
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.str = QueryExpansionStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4176
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4180
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4184
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4202
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4206
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4210
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4214
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4218
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4231
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4240
		{
			yyVAL.str = string("")
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4244
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4250
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4254
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.expr = nil
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4279
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4283
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4289
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4293
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4297
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4301
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4305
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4309
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4313
		{
			yyVAL.expr = &NullVal{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4319
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4328
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4332
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.exprs = nil
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4341
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4346
		{
			yyVAL.expr = nil
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4350
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4355
		{
			yyVAL.orderBy = nil
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4359
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4365
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4369
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4375
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.str = AscScr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4384
		{
			yyVAL.str = AscScr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4388
		{
			yyVAL.str = DescScr
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4393
		{
			yyVAL.limit = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4397
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4410
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4414
		{
			yyVAL.str = ForUpdateStr
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.str = ShareModeStr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4431
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4435
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4439
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4448
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4452
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4471
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.updateExprs = nil
		}
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4480
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4486
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4490
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4496
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4500
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4512
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4522
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4526
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4532
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4538
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4542
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4552
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4559
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4563
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4567
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4571
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4575
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4582
		{
			yyVAL.bytes = []byte("charset")
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4588
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4592
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4596
		{
			yyVAL.expr = &Default{}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4602
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4606
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4612
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4616
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.str = ""
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.str = yyDollar[2].str
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.str = yyDollar[3].str
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4638
		{
			yyVAL.str = RepeatableRead
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.str = ReadCommitted
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.str = ReadUncommitted
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.str = Serializable
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4656
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4660
		{
			yyVAL.str = yyDollar[2].str
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4666
		{
			yyVAL.str = TxReadWrite
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4670
		{
			yyVAL.str = TxReadOnly
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4676
		{
			yyVAL.str = SessionStr
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4680
		{
			yyVAL.str = SessionStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4684
		{
			yyVAL.str = GlobalStr
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4693
		{
			yyVAL.byt = 0
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4697
		{
			yyVAL.byt = 1
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4702
		{
			yyVAL.byt = 0
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4706
		{
			yyVAL.byt = 1
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4711
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4715
		{
			yyVAL.str = IgnoreStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4721
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4725
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4729
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4733
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4737
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4741
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4745
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4749
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4753
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4757
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4762
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4766
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4770
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4776
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4780
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4785
		{
			yyVAL.str = IndexStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4789
		{
			yyVAL.str = UniqueStr
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4795
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4799
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4806
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4812
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4816
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4823
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4829
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4833
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5064
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5073
		{
			decNesting(yylex)
		}
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5078
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
