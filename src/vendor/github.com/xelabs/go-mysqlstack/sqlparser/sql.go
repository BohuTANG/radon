//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const DESC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHECKSUM = 57390
const VALUES = 57391
const LAST_INSERT_ID = 57392
const NEXT = 57393
const VALUE = 57394
const SHARE = 57395
const MODE = 57396
const SQL_NO_CACHE = 57397
const SQL_CACHE = 57398
const JOIN = 57399
const STRAIGHT_JOIN = 57400
const LEFT = 57401
const RIGHT = 57402
const INNER = 57403
const OUTER = 57404
const CROSS = 57405
const NATURAL = 57406
const USE = 57407
const FORCE = 57408
const ON = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const NULL = 57420
const TRUE = 57421
const FALSE = 57422
const OFF = 57423
const OR = 57424
const AND = 57425
const NOT = 57426
const BETWEEN = 57427
const CASE = 57428
const WHEN = 57429
const THEN = 57430
const ELSE = 57431
const END = 57432
const LE = 57433
const GE = 57434
const NE = 57435
const NULL_SAFE_EQUAL = 57436
const IS = 57437
const LIKE = 57438
const REGEXP = 57439
const IN = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const MODIFY = 57457
const TABLE = 57458
const INDEX = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const USING = 57464
const PRIMARY = 57465
const COLUMN = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const BIT = 57475
const TINYINT = 57476
const SMALLINT = 57477
const MEDIUMINT = 57478
const INT = 57479
const INTEGER = 57480
const BIGINT = 57481
const INTNUM = 57482
const REAL = 57483
const DOUBLE = 57484
const FLOAT_TYPE = 57485
const DECIMAL = 57486
const NUMERIC = 57487
const TIME = 57488
const TIMESTAMP = 57489
const DATETIME = 57490
const YEAR = 57491
const CHAR = 57492
const VARCHAR = 57493
const BOOL = 57494
const CHARACTER = 57495
const VARBINARY = 57496
const NCHAR = 57497
const CHARSET = 57498
const TEXT = 57499
const TINYTEXT = 57500
const MEDIUMTEXT = 57501
const LONGTEXT = 57502
const BLOB = 57503
const TINYBLOB = 57504
const MEDIUMBLOB = 57505
const LONGBLOB = 57506
const JSON = 57507
const ENUM = 57508
const GEOMETRY = 57509
const POINT = 57510
const LINESTRING = 57511
const POLYGON = 57512
const GEOMETRYCOLLECTION = 57513
const MULTIPOINT = 57514
const MULTILINESTRING = 57515
const MULTIPOLYGON = 57516
const NULLX = 57517
const AUTO_INCREMENT = 57518
const APPROXNUM = 57519
const SIGNED = 57520
const UNSIGNED = 57521
const ZEROFILL = 57522
const FIXED = 57523
const DYNAMIC = 57524
const STORAGE = 57525
const DISK = 57526
const MEMORY = 57527
const COLUMN_FORMAT = 57528
const AVG_ROW_LENGTH = 57529
const COMPRESSION = 57530
const CONNECTION = 57531
const DATA = 57532
const DIRECTORY = 57533
const DELAY_KEY_WRITE = 57534
const ENCRYPTION = 57535
const INSERT_METHOD = 57536
const MAX_ROWS = 57537
const MIN_ROWS = 57538
const PACK_KEYS = 57539
const PASSWORD = 57540
const ROW_FORMAT = 57541
const STATS_AUTO_RECALC = 57542
const STATS_PERSISTENT = 57543
const STATS_SAMPLE_PAGES = 57544
const TABLESPACE = 57545
const COMPRESSED = 57546
const REDUNDANT = 57547
const COMPACT = 57548
const TOKUDB_DEFAULT = 57549
const TOKUDB_FAST = 57550
const TOKUDB_SMALL = 57551
const TOKUDB_ZLIB = 57552
const TOKUDB_QUICKLZ = 57553
const TOKUDB_LZMA = 57554
const TOKUDB_SNAPPY = 57555
const TOKUDB_UNCOMPRESSED = 57556
const COLLATION = 57557
const DATABASES = 57558
const TABLES = 57559
const WARNINGS = 57560
const VARIABLES = 57561
const EVENTS = 57562
const BINLOG = 57563
const GTID = 57564
const STATUS = 57565
const COLUMNS = 57566
const FIELDS = 57567
const CURRENT_TIMESTAMP = 57568
const CURRENT_DATE = 57569
const DATABASE = 57570
const SCHEMA = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const PARTITION = 57591
const PARTITIONS = 57592
const LIST = 57593
const XA = 57594
const DISTRIBUTED = 57595
const ENGINES = 57596
const VERSIONS = 57597
const PROCESSLIST = 57598
const QUERYZ = 57599
const TXNZ = 57600
const KILL = 57601
const ENGINE = 57602
const SINGLE = 57603
const BEGIN = 57604
const START = 57605
const TRANSACTION = 57606
const COMMIT = 57607
const ROLLBACK = 57608
const GLOBAL = 57609
const LOCAL = 57610
const SESSION = 57611
const NAMES = 57612
const ISOLATION = 57613
const LEVEL = 57614
const READ = 57615
const WRITE = 57616
const ONLY = 57617
const REPEATABLE = 57618
const COMMITTED = 57619
const UNCOMMITTED = 57620
const SERIALIZABLE = 57621
const RADON = 57622
const ATTACH = 57623
const ATTACHLIST = 57624
const DETACH = 57625
const RESHARD = 57626
const CLEANUP = 57627
const RECOVER = 57628
const REBALANCE = 57629

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4913

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 229,
	95, 869,
	-2, 679,
	-1, 235,
	95, 728,
	-2, 657,
	-1, 481,
	123, 709,
	-2, 705,
	-1, 482,
	123, 710,
	-2, 706,
	-1, 516,
	120, 88,
	167, 88,
	170, 88,
	173, 88,
	-2, 100,
	-1, 567,
	1, 81,
	305, 81,
	-2, 88,
	-1, 689,
	5, 27,
	-2, 628,
	-1, 723,
	120, 88,
	167, 88,
	170, 88,
	173, 88,
	-2, 101,
	-1, 781,
	35, 308,
	68, 308,
	71, 308,
	134, 308,
	-2, 866,
	-1, 834,
	1, 82,
	305, 82,
	-2, 88,
	-1, 923,
	123, 712,
	-2, 708,
	-1, 1104,
	5, 28,
	-2, 507,
	-1, 1128,
	5, 28,
	-2, 629,
	-1, 1263,
	5, 27,
	-2, 631,
	-1, 1391,
	5, 28,
	-2, 632,
}

const yyPrivate = 57344

const yyLast = 10335

var yyAct = [...]int{

	482, 1420, 1068, 1394, 457, 592, 1464, 1426, 692, 1338,
	459, 1295, 1294, 230, 952, 1324, 435, 1254, 430, 1287,
	1027, 953, 830, 1187, 204, 1450, 1004, 56, 702, 1335,
	1233, 649, 3, 907, 1097, 1089, 863, 1070, 109, 66,
	1253, 1069, 917, 922, 914, 1017, 693, 976, 370, 816,
	949, 933, 884, 1006, 369, 595, 980, 737, 234, 1042,
	835, 584, 919, 785, 109, 434, 238, 724, 372, 501,
	233, 226, 484, 460, 50, 1007, 502, 424, 751, 225,
	213, 490, 203, 109, 500, 109, 433, 660, 585, 567,
	826, 55, 223, 382, 420, 421, 198, 916, 969, 1138,
	1139, 968, 711, 712, 970, 1137, 503, 109, 504, 504,
	710, 503, 189, 721, 1348, 419, 1395, 1486, 367, 1463,
	187, 422, 366, 1485, 50, 192, 194, 193, 195, 196,
	365, 197, 209, 1440, 1483, 1462, 364, 1246, 1318, 1449,
	401, 1072, 860, 387, 386, 105, 810, 104, 1428, 1406,
	616, 615, 625, 626, 618, 619, 620, 621, 622, 623,
	624, 617, 990, 1439, 627, 1020, 1048, 102, 1071, 437,
	1021, 1022, 508, 1013, 1014, 1015, 70, 186, 391, 395,
	989, 1016, 455, 456, 71, 393, 394, 75, 81, 1033,
	1032, 101, 1037, 1451, 539, 809, 109, 979, 1212, 1364,
	817, 1072, 1429, 412, 414, 1313, 1311, 1107, 1428, 1063,
	1062, 1061, 1189, 983, 383, 77, 982, 374, 109, 981,
	1060, 109, 1416, 604, 603, 1415, 238, 1414, 1071, 377,
	233, 60, 238, 238, 380, 486, 509, 509, 376, 375,
	605, 487, 379, 597, 983, 1009, 86, 982, 1165, 106,
	981, 84, 1189, 94, 103, 388, 760, 62, 63, 64,
	65, 627, 1429, 83, 779, 1345, 413, 413, 427, 485,
	527, 639, 640, 1303, 1131, 1103, 718, 1108, 1386, 1388,
	1101, 962, 648, 50, 497, 617, 72, 396, 627, 79,
	1468, 602, 1196, 100, 540, 865, 605, 505, 817, 553,
	556, 557, 558, 559, 560, 561, 1407, 562, 563, 564,
	565, 566, 541, 542, 543, 544, 525, 526, 554, 977,
	528, 1430, 183, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 545, 546, 547, 548, 549, 550, 551,
	552, 596, 1197, 1020, 1030, 1031, 1034, 1035, 1021, 1022,
	1387, 1008, 99, 87, 1059, 98, 96, 720, 85, 1438,
	93, 961, 184, 778, 188, 1058, 190, 191, 597, 199,
	200, 201, 202, 507, 569, 1452, 1248, 1293, 934, 109,
	109, 603, 397, 569, 1434, 570, 1012, 864, 109, 109,
	492, 88, 97, 91, 92, 95, 109, 605, 73, 74,
	73, 74, 1167, 1166, 1291, 512, 934, 53, 1114, 555,
	389, 390, 1481, 1470, 398, 399, 400, 887, 402, 403,
	404, 405, 406, 407, 408, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1082, 1083, 1084, 1473,
	1456, 607, 488, 615, 625, 626, 618, 619, 620, 621,
	622, 623, 624, 617, 1292, 891, 627, 641, 642, 643,
	644, 645, 646, 588, 1057, 1396, 596, 1184, 1109, 889,
	890, 888, 578, 1282, 576, 1286, 593, 1283, 1285, 604,
	603, 586, 1161, 620, 621, 622, 623, 624, 617, 1160,
	238, 627, 608, 606, 681, 109, 605, 1183, 109, 1159,
	238, 695, 1156, 1182, 233, 636, 638, 604, 603, 604,
	603, 677, 411, 694, 1250, 604, 603, 415, 372, 417,
	418, 1151, 1150, 593, 605, 689, 605, 1180, 675, 676,
	658, 647, 605, 1181, 650, 651, 652, 653, 654, 655,
	656, 697, 659, 661, 661, 661, 661, 661, 661, 661,
	661, 669, 670, 671, 672, 1163, 699, 1179, 662, 663,
	664, 665, 666, 667, 668, 1149, 1046, 690, 1072, 679,
	716, 1045, 773, 604, 603, 1428, 1367, 109, 109, 705,
	818, 819, 820, 1038, 410, 1162, 109, 109, 719, 832,
	605, 713, 704, 775, 1284, 1071, 109, 877, 879, 880,
	1273, 1272, 637, 878, 1028, 859, 1029, 1164, 1157, 678,
	625, 626, 618, 619, 620, 621, 622, 623, 624, 617,
	1153, 885, 627, 908, 1152, 909, 1143, 1075, 883, 1429,
	1074, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 836, 238, 1043, 868,
	1025, 913, 373, 233, 828, 829, 1289, 1482, 1477, 423,
	238, 1474, 921, 1419, 935, 1361, 874, 875, 1005, 881,
	882, 1214, 812, 813, 814, 815, 449, 448, 450, 451,
	452, 453, 925, 1288, 1211, 454, 1357, 1454, 823, 824,
	825, 238, 695, 1357, 1422, 958, 951, 1417, 423, 954,
	1357, 1398, 1357, 1397, 694, 1158, 238, 923, 1322, 423,
	233, 971, 50, 593, 871, 938, 928, 929, 1357, 423,
	372, 959, 956, 910, 650, 378, 911, 912, 1095, 423,
	963, 423, 589, 590, 573, 591, 485, 594, 931, 1203,
	1202, 1355, 598, 599, 600, 572, 941, 1199, 1200, 926,
	927, 1199, 1198, 930, 571, 942, 1130, 423, 870, 423,
	517, 516, 955, 381, 50, 1354, 964, 937, 972, 939,
	940, 924, 1353, 1195, 1123, 870, 57, 505, 1067, 966,
	886, 1234, 948, 936, 965, 24, 1066, 24, 950, 960,
	960, 975, 1126, 703, 973, 974, 1259, 24, 978, 1322,
	984, 985, 986, 987, 988, 1236, 1201, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1095, 1238, 709, 1242, 687, 1237, 1065, 1235, 688, 210,
	1262, 1095, 1240, 1095, 707, 673, 499, 53, 1400, 109,
	109, 109, 1239, 811, 1351, 831, 1223, 53, 1011, 53,
	1410, 960, 1279, 1274, 67, 1241, 1243, 1193, 827, 53,
	218, 822, 1039, 1040, 1018, 821, 616, 615, 625, 626,
	618, 619, 620, 621, 622, 623, 624, 617, 950, 384,
	627, 385, 1044, 1326, 1329, 1330, 1331, 1327, 840, 1328,
	1332, 53, 839, 1049, 1050, 1047, 838, 1078, 1055, 885,
	577, 76, 1379, 409, 22, 861, 862, 1380, 1086, 1087,
	1088, 869, 685, 836, 1413, 1326, 1329, 1330, 1331, 1327,
	238, 1328, 1332, 1412, 1099, 1411, 1377, 1376, 1076, 1077,
	1375, 1378, 1381, 1079, 1330, 1331, 214, 215, 1475, 1461,
	1081, 1085, 873, 491, 109, 616, 615, 625, 626, 618,
	619, 620, 621, 622, 623, 624, 617, 489, 1447, 627,
	947, 946, 1072, 208, 217, 695, 425, 233, 1071, 1299,
	1148, 1147, 1041, 513, 372, 372, 1135, 694, 496, 772,
	1124, 837, 491, 579, 1113, 1090, 1260, 1132, 1136, 1071,
	1334, 1191, 416, 1024, 426, 1102, 1023, 1115, 68, 1144,
	211, 212, 1125, 1010, 1186, 1277, 458, 1133, 1471, 1276,
	1460, 205, 1459, 1094, 495, 1278, 1458, 498, 593, 1072,
	1370, 923, 1141, 1142, 1134, 515, 945, 1145, 1146, 1111,
	1188, 80, 1092, 1190, 944, 514, 1093, 1154, 1155, 206,
	57, 1369, 1321, 703, 107, 581, 220, 1104, 1105, 1106,
	1342, 1026, 1110, 601, 59, 61, 109, 1116, 886, 1117,
	1118, 1119, 1120, 1192, 372, 54, 109, 1, 363, 1393,
	219, 834, 1194, 833, 784, 783, 1457, 1127, 1128, 1129,
	618, 619, 620, 621, 622, 623, 624, 617, 69, 219,
	627, 219, 1448, 1425, 1140, 1427, 1204, 1205, 1432, 238,
	1404, 1213, 1401, 1099, 238, 1403, 233, 1217, 233, 1224,
	1225, 723, 1218, 219, 1221, 921, 722, 1232, 1215, 1219,
	1220, 368, 1222, 774, 109, 1206, 1207, 1208, 790, 789,
	788, 238, 238, 1228, 786, 1265, 1266, 954, 1227, 1247,
	1245, 1036, 1244, 808, 1290, 1230, 795, 1231, 1261, 794,
	717, 1251, 748, 1252, 747, 746, 745, 1267, 744, 743,
	923, 1263, 742, 741, 1054, 740, 1270, 1271, 739, 738,
	736, 735, 734, 733, 732, 574, 575, 1249, 731, 730,
	729, 725, 1073, 728, 582, 727, 1347, 726, 793, 791,
	787, 522, 587, 520, 521, 1080, 519, 1258, 524, 523,
	955, 518, 219, 1264, 1333, 1337, 1096, 238, 238, 238,
	82, 1296, 1296, 1296, 1064, 1280, 1226, 1188, 185, 1281,
	1297, 1298, 1056, 1091, 219, 841, 78, 219, 635, 943,
	1019, 231, 967, 708, 706, 222, 221, 957, 674, 1300,
	1301, 483, 1302, 616, 615, 625, 626, 618, 619, 620,
	621, 622, 623, 624, 617, 1368, 1320, 627, 1112, 109,
	109, 1309, 657, 1268, 1269, 932, 436, 876, 447, 444,
	446, 445, 680, 954, 686, 238, 609, 1343, 428, 1296,
	238, 1385, 1256, 856, 1296, 90, 89, 1349, 392, 493,
	1325, 691, 1350, 1257, 1323, 1255, 1344, 1122, 580, 1317,
	1405, 684, 792, 25, 238, 1352, 58, 1188, 233, 216,
	14, 21, 15, 1319, 13, 12, 29, 1232, 10, 9,
	1316, 8, 7, 109, 109, 109, 109, 6, 5, 4,
	207, 23, 1336, 2, 109, 1365, 955, 109, 50, 20,
	109, 1372, 1346, 1374, 19, 18, 238, 695, 1382, 1389,
	1392, 1390, 238, 1304, 17, 1305, 1296, 1363, 238, 694,
	16, 11, 1296, 1371, 1399, 1373, 1314, 1315, 925, 1402,
	776, 777, 1275, 857, 858, 0, 1409, 0, 0, 1210,
	0, 1306, 1307, 867, 1308, 219, 219, 1310, 0, 1312,
	0, 0, 872, 0, 219, 583, 1258, 1258, 1258, 1258,
	1421, 238, 219, 0, 1424, 1296, 1431, 1435, 0, 0,
	1336, 1433, 1436, 1423, 0, 0, 1356, 0, 0, 1359,
	1360, 1446, 0, 0, 1453, 0, 0, 0, 1257, 0,
	0, 0, 1408, 593, 853, 0, 0, 0, 0, 1366,
	0, 0, 0, 1358, 238, 238, 238, 0, 1465, 1465,
	1465, 1466, 1467, 0, 0, 0, 1472, 1384, 0, 0,
	0, 0, 0, 0, 852, 0, 1391, 0, 0, 0,
	0, 0, 0, 1441, 1442, 0, 1455, 0, 238, 1480,
	0, 0, 1484, 0, 24, 51, 26, 27, 1443, 1444,
	1445, 855, 1257, 1257, 1257, 1257, 0, 1469, 0, 0,
	851, 219, 0, 696, 698, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 46,
	0, 0, 762, 28, 0, 0, 36, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 413, 37, 754, 0, 53, 848, 846, 842,
	0, 845, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 802, 801, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 219, 219, 0, 1476, 0, 1478, 1479,
	850, 0, 866, 219, 0, 0, 804, 0, 0, 0,
	0, 0, 219, 0, 30, 31, 32, 0, 34, 803,
	796, 0, 0, 849, 0, 0, 797, 0, 0, 0,
	35, 47, 39, 0, 0, 48, 49, 33, 0, 0,
	758, 0, 0, 0, 0, 1051, 1052, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 920, 698, 0, 0, 920, 920,
	0, 0, 920, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 0, 844, 0, 920, 920, 920, 920,
	0, 0, 0, 0, 0, 854, 0, 0, 0, 752,
	0, 920, 0, 0, 696, 0, 0, 843, 0, 0,
	753, 755, 756, 757, 0, 759, 760, 761, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 0, 0, 0,
	0, 0, 799, 0, 0, 0, 0, 0, 0, 807,
	0, 52, 806, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 41, 42, 0,
	44, 43, 155, 0, 111, 0, 0, 0, 135, 0,
	139, 142, 143, 750, 0, 45, 0, 0, 0, 0,
	0, 0, 915, 0, 432, 0, 0, 0, 127, 431,
	0, 0, 0, 0, 468, 145, 0, 0, 163, 148,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 481, 449, 448, 450,
	451, 452, 453, 0, 0, 117, 454, 455, 456, 0,
	0, 0, 429, 442, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 219, 219, 0, 0,
	0, 0, 1209, 0, 0, 439, 440, 918, 0, 0,
	0, 479, 1216, 441, 0, 0, 438, 443, 616, 615,
	625, 626, 618, 619, 620, 621, 622, 623, 624, 617,
	174, 0, 627, 477, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 920, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 920, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	219, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 0, 0, 0, 696, 0, 698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 469, 475,
	478, 0, 476, 473, 474, 472, 471, 470, 480, 463,
	464, 466, 0, 465, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 165, 0, 166, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 614,
	0, 0, 219, 0, 0, 628, 629, 630, 631, 632,
	633, 634, 219, 612, 613, 610, 616, 615, 625, 626,
	618, 619, 620, 621, 622, 623, 624, 617, 0, 0,
	627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 698, 920,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 219, 1340, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 219,
	219, 219, 219, 0, 0, 0, 293, 297, 324, 285,
	1383, 0, 0, 219, 0, 0, 1340, 0, 268, 696,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 236, 356, 154, 235, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 224, 0, 0, 229, 227,
	228, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 236, 356, 154, 235, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 229, 227,
	228, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 236, 356, 154, 235, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 506, 0, 0, 138, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 1362, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 700, 356, 154, 701, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 1229, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 700, 356, 154, 701, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 236, 356, 154, 235, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 700, 356, 154, 701, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 700, 356, 154, 701, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 700, 356, 154, 701, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 155, 138, 111,
	0, 0, 0, 135, 0, 139, 142, 143, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 432,
	0, 0, 0, 127, 431, 0, 0, 0, 0, 468,
	145, 0, 0, 163, 148, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 714, 53, 0,
	0, 481, 449, 448, 450, 451, 452, 453, 0, 0,
	117, 454, 455, 456, 715, 0, 0, 429, 442, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 440, 0, 0, 0, 0, 479, 0, 441, 0,
	0, 438, 443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 477, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 469, 475, 478, 0, 476, 473, 474,
	472, 471, 470, 480, 463, 464, 466, 0, 465, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 165, 0,
	166, 0, 0, 155, 138, 111, 0, 0, 0, 135,
	0, 139, 142, 143, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 432, 0, 0, 0, 127,
	431, 0, 0, 0, 0, 468, 145, 0, 0, 163,
	148, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 481, 449, 448,
	450, 451, 452, 453, 0, 0, 117, 454, 455, 456,
	0, 0, 0, 429, 442, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 440, 918, 0,
	0, 0, 479, 0, 441, 0, 0, 438, 443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 477, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 469,
	475, 478, 0, 476, 473, 474, 472, 471, 470, 480,
	463, 464, 466, 0, 465, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 165, 0, 166, 0, 0, 155,
	138, 111, 0, 0, 0, 135, 0, 139, 142, 143,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 432, 0, 0, 0, 127, 431, 0, 0, 0,
	0, 468, 145, 0, 0, 163, 148, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 423, 481, 449, 448, 450, 451, 452, 453,
	0, 0, 117, 454, 455, 456, 0, 0, 0, 429,
	442, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 440, 0, 0, 0, 0, 479, 0,
	441, 0, 0, 438, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	477, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 469, 475, 478, 0, 476,
	473, 474, 472, 471, 470, 480, 463, 464, 466, 0,
	465, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 130,
	165, 0, 166, 0, 0, 155, 138, 111, 0, 0,
	0, 135, 0, 139, 142, 143, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 432, 0, 0,
	0, 127, 431, 0, 0, 0, 0, 468, 145, 0,
	0, 163, 148, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 481,
	449, 448, 450, 451, 452, 453, 0, 0, 117, 454,
	455, 456, 0, 0, 0, 429, 442, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 440,
	0, 0, 0, 0, 479, 0, 441, 0, 0, 438,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 477, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 469, 475, 478, 0, 476, 473, 474, 472, 471,
	470, 480, 463, 464, 466, 0, 465, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 165, 0, 166, 0,
	0, 155, 138, 111, 0, 0, 0, 135, 0, 139,
	142, 143, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 432, 0, 0, 0, 127, 431, 0,
	0, 0, 0, 468, 145, 0, 0, 163, 148, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 481, 449, 448, 450, 451,
	452, 453, 0, 0, 117, 454, 455, 456, 0, 0,
	0, 429, 442, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 440, 0, 0, 0, 0,
	479, 0, 441, 0, 0, 438, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 477, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 469, 475, 478,
	0, 476, 473, 474, 472, 471, 470, 480, 463, 464,
	466, 0, 465, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 165, 155, 166, 111, 0, 0, 138, 135,
	0, 139, 142, 143, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 127,
	0, 0, 0, 0, 0, 468, 145, 0, 0, 163,
	148, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 481, 449, 448,
	450, 451, 452, 453, 0, 0, 117, 454, 455, 456,
	0, 0, 0, 0, 442, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 440, 0, 0,
	0, 0, 479, 0, 441, 0, 0, 438, 443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 477, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 469,
	475, 478, 0, 476, 473, 474, 472, 471, 470, 480,
	463, 464, 466, 0, 465, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 165, 155, 166, 111, 0, 0,
	138, 135, 0, 139, 142, 143, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 127, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 615, 625, 626, 618, 619,
	620, 621, 622, 623, 624, 617, 0, 0, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 155, 0,
	111, 0, 0, 0, 135, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 1098,
	132, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 163, 148, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 0, 1100, 130, 165, 0, 166, 0,
	0, 117, 138, 0, 0, 0, 604, 603, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 155,
	0, 111, 0, 0, 782, 781, 0, 139, 142, 143,
	0, 0, 0, 780, 0, 0, 0, 779, 0, 0,
	0, 167, 0, 132, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 371, 0, 0, 0, 0, 130, 165,
	0, 166, 117, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	165, 155, 166, 111, 0, 0, 138, 135, 0, 139,
	142, 143, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 127, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 163, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 155, 0, 111, 0, 0, 0, 135, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 167, 0, 132, 0, 127, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 163, 148,
	0, 0, 0, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 108, 0, 1341, 0,
	0, 130, 165, 0, 166, 117, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 165, 155, 166, 111, 0, 0, 138,
	135, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 0, 155, 0, 111, 0,
	0, 0, 135, 0, 139, 142, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 163, 148, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 0,
	237, 0, 0, 682, 130, 165, 683, 166, 0, 117,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 161, 0, 172, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 134,
	0, 0, 170, 171, 122, 175, 0, 0, 114, 0,
	0, 154, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 0, 0, 164, 0, 0, 133, 128, 168,
	125, 149, 118, 112, 0, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 0, 155, 0, 111,
	0, 0, 0, 135, 0, 139, 142, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 132, 0, 127, 511, 0, 0, 0, 0, 0,
	145, 0, 0, 163, 148, 0, 0, 0, 110, 115,
	144, 0, 160, 131, 173, 0, 0, 0, 0, 0,
	0, 237, 0, 510, 0, 0, 130, 165, 0, 166,
	117, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 155, 0,
	111, 0, 0, 0, 135, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 0, 127, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 163, 148, 0, 0, 0, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 108, 0, 1341, 0, 0, 130, 165, 0,
	166, 117, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 155,
	0, 111, 0, 0, 0, 135, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	53, 0, 0, 108, 0, 0, 0, 0, 130, 165,
	0, 166, 117, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	155, 0, 111, 0, 0, 0, 135, 0, 139, 142,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 127, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 237, 0, 1100, 0, 0, 130,
	165, 0, 166, 117, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 155, 0, 111, 0, 0, 0, 135, 0, 139,
	142, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 494, 127, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 163, 148, 0,
	0, 0, 110, 115, 144, 0, 160, 131, 173, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	130, 165, 0, 166, 117, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 155, 0, 111, 0, 0, 0, 135, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 0, 127, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 163, 148,
	0, 0, 0, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 237, 0, 0, 0,
	0, 130, 165, 0, 166, 117, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 155, 0, 111, 0, 0, 0, 135,
	0, 139, 142, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 0, 127,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 163,
	148, 0, 0, 0, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 481, 0, 0,
	0, 0, 130, 165, 0, 166, 117, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 0, 155, 0, 111, 0, 0, 0,
	135, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 0,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 0, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 130, 165, 0, 166, 117, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 155, 0, 111, 0, 0,
	0, 135, 0, 139, 142, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 127, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 371,
	0, 0, 0, 0, 130, 165, 0, 166, 117, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 155, 0, 111, 0,
	0, 0, 135, 0, 139, 142, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 0, 127, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 163, 148, 0, 0, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	1185, 0, 0, 0, 0, 130, 165, 0, 166, 117,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 161, 0, 172, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 134,
	0, 0, 170, 171, 122, 175, 0, 0, 114, 0,
	0, 154, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 0, 0, 164, 0, 0, 133, 128, 168,
	125, 149, 118, 112, 0, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 0, 155, 0, 111,
	0, 0, 0, 135, 0, 139, 142, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 132, 0, 127, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 163, 148, 0, 0, 0, 110, 115,
	144, 0, 160, 131, 173, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 130, 165, 0, 166,
	117, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 165, 0,
	166, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182,
}
var yyPact = [...]int{

	1478, -1000, -214, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1026, 1049, -1000, -1000, -1000, -1000, -1000, 786,
	153, 78, 155, 130, 118, 120, 116, 9427, -1000, -1000,
	-86, -1000, -169, -1000, -1000, -173, -1000, -1000, -1000, -1000,
	791, -1000, -1000, -1000, -1000, -1000, 995, 1024, 823, 964,
	881, -1000, 78, 9427, 1036, 2234, -148, 9628, 79, 105,
	104, 95, 79, -1000, -1000, -1000, 109, -1000, 101, 692,
	76, -1000, 9427, -1000, 9427, -93, 10, -1000, -1000, -56,
	277, -1000, -1000, -1000, -100, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 510, -1000, -1000, -1000, -1000,
	-1000, -1000, 769, 769, -1000, 9427, -1000, -1000, -188, -1000,
	-1000, -1000, -1000, 661, 948, 5964, 5964, 1026, -1000, 791,
	-1000, -1000, -1000, 906, -1000, -1000, 311, 8824, 933, 161,
	9427, 767, -1000, -1000, -182, 2834, -1000, -1000, -1000, -1000,
	278, 8020, 8020, -1000, -1000, -1000, 928, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1020, 1010, 691, -1000,
	149, -1000, -1000, 10030, 298, 683, 674, 663, 9427, 9427,
	76, 833, 10030, 944, -1000, -1000, 1035, 9427, 9427, -1000,
	-1000, 277, 277, -1000, -1000, 9427, -1000, -1000, -1000, -1000,
	-1000, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5964, -1000, -1000, 205, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1045, 186, 424, -1000, 5964,
	1970, 769, 769, -1000, -1000, 147, -1000, -1000, 6226, 6226,
	6226, 6226, 6226, 6226, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 769, 159, -1000,
	5698, 769, 769, 769, 769, 769, 769, 5964, 769, 769,
	769, 769, 769, 769, 769, 769, 769, 769, 769, 769,
	769, -1000, -1000, 766, -1000, 488, 995, 661, 881, 7819,
	854, -1000, -1000, 779, 9427, -1000, 9226, 4634, 1032, 2534,
	-1000, 765, 753, -179, -189, -1000, -182, 4900, -1000, -1000,
	-1000, -1000, 156, -1000, 769, 89, 1496, 6892, 1529, -1,
	-1000, -1000, -1000, 775, -1000, 775, 775, 775, 775, 30,
	30, 30, 30, -1000, -1000, -1000, -1000, -1000, 797, 793,
	-1000, 775, 775, 775, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 790, 790, 790, 777, 777, 935, -1000, -1000,
	942, 829, 825, 821, -1000, 1420, 9427, 9427, -1000, -1000,
	995, -97, -1000, -1000, 284, 9427, 9427, 277, -1000, -1000,
	-1000, -1000, 689, 394, -1000, 9427, -1000, -1000, -1000, -1000,
	-1000, -1000, 889, 5964, 5964, 516, 5964, 5964, 194, 6226,
	339, 366, 6226, 6226, 6226, 6226, 6226, 6226, 6226, 6226,
	6226, 6226, 6226, 6226, 6226, 6226, 6226, 552, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 652, -1000, 791, 604,
	604, 141, 141, 141, 141, 141, 6488, 1745, 4334, 661,
	5698, 5166, 5166, 5964, 5964, 5166, 945, 287, 394, 9025,
	-1000, 661, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5166,
	5166, 5166, 5166, 5964, -1000, -1000, -1000, 948, -1000, 945,
	1016, -1000, 912, 911, 5166, -1000, 811, 9226, 769, -1000,
	7617, -1000, 782, -1000, 266, -1000, 158, -1000, -1000, -1000,
	-1000, -1000, 1026, 5964, -1000, 3734, -1000, -181, -1000, -177,
	-192, -1000, -1000, -1000, -1000, -1000, 394, -1000, 640, 9628,
	769, 769, -1000, 1496, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 224,
	224, 77, 224, 224, 224, 224, 224, -28, -46, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, -1000, -1000, -1000, 597, 229, 211, -1000, -1000,
	-1000, -1000, 971, -1000, 1529, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 305, 100, -1000,
	961, -1000, 958, 577, 1043, 533, 146, 145, -5, -1000,
	-1000, 509, 30, 30, -1000, -1000, -1000, 927, -1000, -1000,
	-1000, 575, 575, -1000, -1000, -1000, -1000, 497, -1000, -1000,
	-1000, 492, -1000, -1000, 935, -1000, 46, -1000, 9427, 9427,
	9427, -1000, 330, 259, 84, 70, 69, 68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 757, -1000, 943, -1000,
	557, -1000, -1000, -1000, 554, 5964, -1000, 277, 1032, -1000,
	5964, -1000, -1000, 886, 194, 295, -1000, -1000, 355, -1000,
	-1000, 394, 394, 1762, -1000, -1000, -1000, -1000, 339, 6226,
	6226, 6226, 839, 1762, 1137, 502, 336, 141, 371, 371,
	168, 168, 168, 168, 168, 970, 970, -1000, -1000, -1000,
	661, -1000, -1000, -1000, 661, 5166, 751, -1000, -1000, 6691,
	157, 769, 152, -1000, -1000, 661, 659, 659, 138, 430,
	659, 5166, 315, -1000, 5964, 661, -1000, 659, 661, 659,
	659, -1000, -1000, 9427, -1000, -1000, -1000, -1000, 764, -1000,
	937, 721, 723, -1000, -1000, 5432, 661, 687, 151, 1026,
	9226, 5964, 4334, 995, 394, -1000, -1000, -1000, -185, -195,
	-1000, -1000, 661, 9628, 9628, -1000, 553, -1000, 533, 224,
	224, -1000, 926, 925, 491, 448, 447, 551, 547, 224,
	224, 428, 535, 634, 425, 415, 408, 511, 534, 204,
	483, 459, 423, 9829, 73, -1000, 597, -1000, 956, 229,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 789,
	-1000, -1000, -1000, -1000, -1000, -1000, -78, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 703, -1000,
	-1000, 221, 682, -1000, 678, 737, 670, -1000, 224, 224,
	-1000, 769, 769, 769, -1000, 9427, -1000, -1000, -1000, 613,
	28, 786, 600, 9628, -1000, 9427, -1000, -1000, -1000, 1000,
	922, 224, 224, -1000, -1000, -1000, 394, 284, -1000, 394,
	-1000, -1000, -1000, -1000, -1000, -1000, 839, 1762, 760, -1000,
	6226, 6226, -1000, -1000, 659, 5166, -1000, -1000, 8623, -1000,
	-1000, 3434, 5166, 4034, -1000, -1000, -1000, 660, 552, 660,
	-122, 762, 282, -1000, 5964, 422, -1000, -1000, -1000, -1000,
	-1000, -1000, 1032, 8422, 951, -1000, 769, -1000, -1000, 781,
	9025, 9025, 995, -1000, 394, -1000, -1000, -1000, -1000, -1000,
	-1000, 661, 661, -1000, -1000, 533, 533, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 528, 527, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, -1000, 985,
	784, 73, 597, 403, -1000, -1000, -1000, -1000, -1000, 521,
	-1000, 404, -1000, 401, 612, 333, 9025, 9025, 9025, -1000,
	-1000, -1000, 924, -1000, -1000, -1000, -1000, -1000, -1000, 612,
	612, -1000, -1000, 6226, 1762, 1762, -1000, -1000, -1000, -1000,
	150, 661, -1000, 661, 775, 775, -1000, 775, 777, -1000,
	775, 51, 775, 50, 661, 661, 769, -119, -1000, 394,
	5964, 1030, 730, 826, -1000, -1000, -1000, 952, 7154, 7355,
	1042, -1000, 769, -1000, 791, 142, -1000, -1000, 769, -153,
	-1000, -1000, -1000, -1000, 9025, -1000, -1000, -1000, -1000, 9025,
	776, 73, -1000, 702, -1000, 695, 671, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 649, -1000, 775, 649, 649, 594,
	-1000, -1000, 1762, 3134, -1000, -1000, -1000, 128, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6226, 661, 503, 394,
	1028, 1005, 8422, 8422, 8422, 8422, -1000, 873, 870, -1000,
	869, 845, 875, 9427, -1000, 639, 7154, 213, -1000, 8221,
	-1000, -1000, 9226, 723, 661, 9025, -150, -1000, 391, 633,
	631, 9025, 770, -1000, -1000, -1000, -1000, 9025, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44, -1000, -1000, -1000, 5964,
	5964, 826, 783, 858, -1000, -1000, -1000, -1000, 866, -1000,
	857, -1000, -1000, -1000, -1000, -1000, 93, 91, 88, -1000,
	720, -1000, -1000, 628, -1000, 592, -1000, -1000, -1000, 624,
	9025, 182, -1000, 122, 549, 661, 99, -130, 394, 706,
	5964, 5964, -1000, -1000, 769, 769, 769, -150, -1000, 909,
	113, 113, -1000, 617, -1000, -1000, -1000, -1000, 224, 367,
	992, -1000, -1000, -1000, 982, -1000, -1000, -1000, 885, -126,
	-145, 394, 394, 9025, 9025, 9025, -1000, 185, -1000, 224,
	-1000, 340, 980, 113, -1000, 365, -1000, -1000, -1000, -1000,
	590, -1000, 884, -1000, 589, -1000, 589, 589, 769, 338,
	-1000, 586, 113, -1000, -1000, -128, -1000, 9025, -1000, -1000,
	-1000, -1000, -1000, -140, -1000, -147, -1000,
}
var yyPgo = [...]int{

	0, 25, 23, 1372, 1371, 1370, 26, 998, 1361, 1360,
	1354, 1345, 1344, 1339, 1333, 31, 904, 1331, 1330, 1329,
	1328, 1327, 1322, 1321, 1319, 1318, 1316, 1315, 1314, 1312,
	1311, 1310, 231, 1309, 1306, 1303, 45, 1302, 81, 1301,
	80, 1300, 1299, 1298, 35, 97, 44, 42, 62, 1297,
	29, 40, 17, 1295, 1294, 15, 1290, 796, 1289, 1288,
	61, 88, 1286, 1285, 36, 1283, 1282, 1281, 6, 28,
	1278, 65, 1276, 1274, 86, 18, 1272, 1271, 1270, 1269,
	1268, 1267, 52, 5, 14, 10, 21, 1266, 169, 16,
	1265, 51, 1262, 1258, 1256, 1255, 27, 1241, 72, 1238,
	24, 77, 1237, 50, 8, 46, 1236, 1235, 71, 92,
	84, 76, 1234, 69, 1233, 1232, 172, 1231, 1230, 1229,
	901, 1228, 93, 652, 1226, 1225, 1222, 1218, 1214, 1210,
	55, 58, 0, 4, 13, 34, 1206, 48, 1006, 43,
	9, 1205, 89, 1204, 322, 33, 79, 30, 1201, 1199,
	1198, 1196, 1194, 1193, 1191, 146, 1190, 1189, 1188, 1187,
	1186, 1185, 1183, 1181, 1180, 1179, 1178, 1174, 1173, 1172,
	1171, 1170, 57, 1169, 1168, 1165, 1163, 1162, 1159, 1158,
	1156, 1155, 1154, 1152, 49, 1150, 1149, 1146, 20, 56,
	47, 78, 1144, 1143, 1141, 90, 22, 1134, 1130, 1129,
	1128, 59, 54, 1123, 75, 53, 39, 1121, 1116, 1111,
	67, 11, 12, 1105, 1102, 1100, 1, 7, 1098, 1095,
	1093, 1092, 2, 41, 37, 1088, 1076, 19, 1075, 1074,
	63, 1073, 1071, 60, 3, 1069, 1068, 1067, 1065, 73,
	121, 1055, 87,
}
var yyR1 = [...]int{

	0, 237, 238, 238, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 17, 17, 18,
	18, 19, 19, 35, 35, 20, 21, 22, 22, 235,
	235, 234, 160, 160, 7, 7, 23, 23, 23, 23,
	23, 236, 236, 236, 236, 236, 236, 226, 226, 227,
	227, 219, 217, 217, 214, 214, 220, 220, 213, 213,
	218, 218, 215, 215, 222, 222, 222, 222, 222, 223,
	224, 231, 231, 232, 232, 233, 233, 233, 191, 191,
	190, 190, 189, 189, 189, 192, 192, 192, 26, 206,
	208, 208, 209, 209, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 162, 164,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 177, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 180, 180,
	181, 181, 182, 182, 183, 183, 165, 188, 188, 163,
	159, 161, 207, 207, 207, 202, 137, 137, 148, 148,
	148, 148, 228, 228, 229, 229, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 151, 151, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 150, 150, 150,
	150, 150, 152, 152, 152, 152, 152, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 154, 154, 154, 154, 154, 154, 154, 154,
	201, 201, 155, 155, 195, 195, 196, 196, 196, 193,
	193, 194, 194, 197, 197, 156, 156, 156, 156, 156,
	156, 37, 36, 36, 36, 118, 118, 118, 198, 184,
	184, 184, 158, 185, 185, 186, 186, 186, 187, 187,
	187, 199, 199, 200, 200, 157, 203, 203, 203, 203,
	6, 6, 221, 221, 221, 221, 216, 216, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 5, 5, 205,
	205, 204, 204, 212, 212, 211, 24, 24, 24, 24,
	24, 24, 24, 24, 124, 124, 128, 128, 128, 25,
	25, 25, 65, 65, 129, 129, 8, 27, 9, 10,
	127, 127, 127, 11, 12, 12, 12, 12, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 43, 43, 63, 63,
	63, 60, 60, 61, 61, 62, 62, 59, 59, 64,
	64, 64, 31, 29, 30, 30, 30, 30, 241, 32,
	33, 33, 34, 34, 34, 40, 40, 40, 38, 38,
	39, 39, 46, 46, 45, 45, 47, 47, 47, 47,
	136, 136, 136, 135, 135, 49, 49, 50, 50, 51,
	51, 52, 52, 52, 66, 53, 53, 53, 53, 143,
	143, 141, 141, 141, 140, 140, 54, 54, 54, 54,
	55, 55, 55, 55, 56, 56, 58, 58, 57, 57,
	67, 67, 67, 67, 68, 68, 69, 69, 48, 48,
	48, 48, 48, 48, 48, 121, 121, 71, 71, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 81,
	81, 81, 81, 81, 81, 72, 72, 72, 72, 72,
	72, 72, 44, 44, 82, 82, 82, 88, 83, 83,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	79, 79, 79, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 78, 78, 78, 78, 78, 78, 78, 78,
	242, 242, 80, 80, 80, 80, 41, 41, 41, 41,
	41, 145, 145, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 92, 92, 42, 42,
	90, 90, 91, 93, 93, 89, 89, 89, 74, 74,
	74, 74, 74, 74, 74, 76, 76, 76, 94, 94,
	95, 95, 96, 96, 97, 97, 98, 99, 99, 99,
	100, 100, 100, 100, 101, 101, 101, 73, 73, 73,
	73, 73, 73, 102, 102, 102, 102, 103, 103, 84,
	84, 86, 86, 85, 87, 104, 104, 105, 106, 106,
	109, 109, 108, 108, 108, 108, 108, 117, 117, 116,
	116, 116, 107, 107, 110, 110, 114, 114, 113, 115,
	115, 115, 115, 112, 112, 111, 111, 146, 146, 146,
	119, 119, 122, 122, 123, 123, 120, 120, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 130, 130,
	130, 126, 126, 225, 225, 133, 133, 134, 134, 138,
	138, 139, 139, 142, 142, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 239, 240, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 1, 1, 3, 5, 11, 11,
	11, 0, 1, 1, 5, 9, 7, 1, 1, 1,
	1, 2, 3, 2, 0, 2, 1, 1, 0, 2,
	1, 3, 0, 2, 0, 1, 1, 2, 2, 3,
	3, 0, 1, 1, 2, 4, 4, 2, 0, 1,
	0, 1, 1, 2, 2, 1, 1, 1, 4, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	4, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 3,
	3, 4, 1, 3, 3, 3, 1, 1, 3, 1,
	1, 1, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 3, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 3, 4, 1, 1, 1, 1, 0,
	3, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 7, 7, 8, 9,
	0, 1, 3, 1, 2, 3, 0, 2, 0, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 3, 2, 6, 7, 7, 7,
	9, 7, 7, 7, 0, 1, 0, 1, 1, 6,
	6, 4, 1, 3, 0, 1, 3, 3, 2, 2,
	0, 1, 1, 4, 2, 3, 2, 2, 4, 4,
	3, 6, 3, 3, 4, 4, 4, 6, 5, 5,
	3, 3, 5, 6, 7, 3, 3, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 0, 3, 1, 1,
	1, 0, 2, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 4, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	1, 2, 3, 3, 3, 2, 3, 1, 2, 1,
	1, 1, 2, 3, 2, 2, 0, 2, 3, 2,
	2, 2, 1, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -237, -14, -15, -19, -20, -21, -22, -23, -24,
	-25, -8, -27, -28, -31, -29, -9, -10, -11, -12,
	-13, -30, -16, -17, 6, -35, 8, 9, 45, -26,
	126, 127, 128, 149, 130, 142, 48, 65, 269, 144,
	276, 279, 280, 283, 282, 297, 41, 143, 147, 148,
	-239, 7, 253, 68, -238, 305, -96, 14, -34, 5,
	-32, -241, -32, -32, -32, -32, -206, 68, -7, -225,
	23, 31, 133, 245, 246, 34, -120, 137, -124, 134,
	-7, 33, -129, 133, 133, 238, 126, 233, 271, -62,
	-63, 273, 274, 240, 133, 275, 236, 272, 235, 232,
	173, 71, 47, 134, 27, 25, 133, -138, 71, -132,
	259, 19, 204, 150, 169, 260, 302, 80, 203, 206,
	207, 145, 165, 209, 208, 201, 159, 43, 199, 183,
	277, 264, 242, 198, 160, 23, 184, 188, 284, 25,
	211, 182, 26, 27, 261, 50, 186, 212, 54, 202,
	213, 190, 189, 191, 172, 17, 214, 215, 185, 187,
	263, 147, 216, 53, 195, 278, 280, 240, 200, 174,
	163, 164, 149, 265, 135, 166, 297, 298, 300, 299,
	301, 303, 304, -144, -144, -127, 263, 206, -144, 281,
	-144, -144, 298, 300, 299, 301, 302, 304, 269, -144,
	-144, -144, -144, -15, -100, 16, 15, -18, -16, -239,
	6, 36, 37, -40, 55, 56, -33, -120, -57, -138,
	10, -106, -107, -109, 281, -146, -108, 285, 286, 284,
	-134, -117, 287, -133, -131, 173, 170, 71, -132, 86,
	38, 40, 193, 89, 156, 121, 178, 15, 21, 90,
	167, 120, 241, 205, 254, 126, 63, 244, 247, 243,
	245, 233, 161, 44, 9, 41, 143, 37, 114, 128,
	93, 94, 271, 146, 39, 144, 83, 18, 66, 10,
	47, 12, 13, 138, 137, 105, 134, 61, 7, 154,
	155, 122, 42, 102, 57, 35, 59, 103, 16, 248,
	249, 46, 181, 177, 258, 180, 153, 176, 116, 64,
	51, 87, 81, 162, 84, 67, 148, 85, 14, 62,
	274, 140, 273, 158, 104, 129, 253, 29, 60, 246,
	6, 257, 45, 142, 152, 58, 133, 234, 33, 179,
	151, 175, 92, 136, 82, 275, 5, 34, 196, 8,
	65, 139, 250, 251, 252, 49, 171, 168, 272, 262,
	91, 11, 197, -236, 284, 278, 270, 266, -207, -202,
	-137, 71, -132, -123, 138, 134, 134, 134, -123, 133,
	133, 71, -122, 138, -57, -57, 237, 133, 245, -144,
	-144, 234, -59, 241, 242, -61, 10, 105, -144, -144,
	-144, 240, -144, -144, -144, -144, -144, -144, -144, -57,
	74, -144, -85, -239, -85, -144, -57, -144, -144, 303,
	282, 283, -240, 70, -101, 18, 46, -48, -70, 87,
	-75, 44, 39, -74, -71, -89, -87, -88, 121, 110,
	111, 118, 88, 122, -79, -77, -78, -80, 73, 72,
	74, 75, 76, 77, 81, 82, 83, -133, -138, -85,
	-239, 59, 60, 254, 255, 258, 256, 90, 49, 243,
	252, 251, 250, 248, 249, 244, 247, 138, 245, 116,
	253, 71, -132, -97, -98, -48, -96, -15, -32, 51,
	-38, 37, 79, -58, 42, -57, 45, 123, -57, 69,
	-110, -113, -111, 288, 290, -108, 281, 95, -116, -133,
	73, 44, -116, 45, 15, 15, 70, 69, -148, -151,
	-153, -152, -154, -149, -150, 167, 168, 121, 171, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 45,
	145, 163, 164, 165, 166, 184, 185, 186, 187, 188,
	189, 190, 191, 150, 169, 260, 151, 152, 153, 154,
	155, 156, 158, 159, 160, 161, 162, -142, 71, -132,
	87, 71, 71, 71, -57, -57, -122, 67, -142, 39,
	-43, 10, -57, -138, -60, -61, -61, -57, -60, -144,
	-144, -144, -83, -48, -144, -130, 136, 38, -144, -144,
	-144, 8, 105, 86, 85, 102, 69, 17, -48, -72,
	105, 87, 103, 104, 89, 107, 106, 117, 110, 111,
	112, 113, 114, 115, 116, 108, 109, 120, 95, 96,
	97, 98, 99, 100, 101, -121, -239, -88, -239, 124,
	125, -75, -75, -75, -75, -75, -75, -239, 123, -15,
	-239, -239, -239, -239, -239, -239, -239, -92, -48, -239,
	-242, -239, -242, -242, -242, -242, -242, -242, -242, -239,
	-239, -239, -239, 69, -99, 40, 41, -100, -240, -40,
	-76, -133, 74, 77, -39, 58, -73, 45, 49, -15,
	-239, -57, -104, -105, -89, -133, -138, -139, -138, -131,
	170, 173, -69, 11, -109, -146, -112, 69, -114, 69,
	289, 291, 292, -110, 67, 84, -48, -185, 120, -239,
	268, 24, -208, -209, -210, -163, -159, -161, -162, -164,
	-165, -166, -167, -168, -169, -170, -171, -172, -173, -174,
	-175, -176, -177, -178, -179, -180, -181, -182, -183, 80,
	277, -191, 193, 204, 48, 205, 206, 207, 134, 209,
	210, 211, 26, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 44, -202, -203, -204, -5, -4, 134, 35,
	31, 23, 22, -228, -229, -230, -197, -156, -198, -199,
	-200, -157, -37, -158, -186, -187, 81, 87, 44, 193,
	140, 35, 34, 80, 67, 120, 203, 200, -193, 196,
	-155, 68, -155, -155, -155, -155, -184, 170, -184, -184,
	-184, 68, 68, -155, -155, -155, -195, 68, -195, -195,
	-196, 68, -196, -231, -232, -233, -191, 39, 67, 67,
	67, -125, 129, 277, 254, 131, 128, 132, 127, 193,
	170, 80, 44, 14, 265, 71, -65, -57, -57, -100,
	239, -144, -144, -64, 103, 11, -138, -57, -60, -144,
	69, -240, -57, 53, -48, -48, -81, 81, 87, 82,
	83, -48, -48, -75, -82, -85, -88, 78, 105, 103,
	104, 89, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -145, 71, 73,
	71, -74, -74, -133, -46, 37, -45, -47, 112, -48,
	-138, -134, -139, -131, -240, -15, -45, -45, -48, -48,
	-45, -38, -90, -91, 91, -133, -240, -45, -46, -45,
	-45, -98, -101, -119, 18, 10, 49, 49, -45, -103,
	67, -104, -84, -86, -85, -239, -15, -102, -133, -69,
	69, 95, 123, -96, -48, -111, -113, -115, 293, 290,
	296, 71, -137, -239, -239, -210, -190, 95, -190, 120,
	-189, 173, 170, 167, -190, -190, -190, -190, -190, 208,
	208, -190, -190, -190, -190, -190, -190, -190, -190, -190,
	-190, -190, -190, -190, -6, 71, -205, -204, 140, 34,
	32, -230, 81, 73, 74, 75, 81, -36, -71, -118,
	243, 248, 249, 35, 35, 73, 8, -188, 71, 73,
	198, 199, 44, 44, 201, 202, -194, 197, 74, -184,
	-184, 45, -201, 73, -201, 74, 74, -233, 120, -189,
	-172, -57, -57, -57, -144, -130, -126, 134, 35, 95,
	136, 141, 141, 141, -128, 69, 29, 21, -222, -223,
	-224, 46, 19, -144, 73, 73, -48, -60, -69, -48,
	-144, 54, 81, 82, 83, -82, -75, -75, -75, -44,
	146, 86, -240, -240, -45, 69, -136, -135, 38, -133,
	73, 123, -239, 123, -240, -240, -240, 69, 139, 38,
	-240, -45, -93, -91, 93, -48, -240, -240, -240, -240,
	-240, -57, -49, 10, 43, -103, 69, -240, -240, -240,
	69, 123, -96, -105, -48, -134, -100, 290, 294, 295,
	-240, -137, -137, 73, -188, -190, -190, 45, 45, 74,
	74, 74, 73, 73, -190, -190, 74, 73, 71, 74,
	74, 74, 74, 44, 73, 44, 199, 198, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 74,
	44, 74, 44, 74, 44, 71, -132, -2, -1, 139,
	-6, 35, -205, 68, -36, 70, 71, 121, 70, 69,
	70, 69, 70, 69, -190, -190, -239, -239, -239, -57,
	-144, 71, 170, -206, 71, -202, -57, -224, -223, -190,
	-190, -64, -44, 86, -75, -75, -240, -47, -135, 112,
	-139, -46, -134, -147, 121, 167, 145, 165, 161, 182,
	172, 195, 163, 196, -145, -147, 259, -96, 94, -48,
	92, -69, -50, -51, -52, -53, -66, -88, -239, -57,
	35, -86, 49, -15, -239, -133, -133, -100, -240, -240,
	-188, -188, 73, 73, 68, -3, 24, 20, 30, 68,
	-2, -6, 70, 74, 73, 74, 74, -227, 71, 44,
	-192, 71, 121, 44, -212, -211, -133, -212, -212, 45,
	-227, -227, -75, 123, -240, -240, -155, -155, -155, -196,
	-155, 155, -155, 155, -240, -240, -239, -42, 257, -48,
	-94, 12, 69, -54, -55, -56, 57, 61, 63, 58,
	59, 60, 64, -143, 38, -50, -239, -141, -140, 38,
	-138, 73, 8, -84, -15, 123, -239, -160, 267, -212,
	-212, 68, -2, 70, 70, 70, -240, 69, -155, -240,
	-240, 71, 112, -184, 71, -75, -240, 73, -95, 13,
	15, -51, -52, -51, -52, 57, 57, 57, 62, 57,
	62, 57, -55, -138, -240, -67, 65, 137, 66, -140,
	-104, -240, -133, -235, -234, 266, 74, 70, 70, -212,
	68, -214, -211, -213, -215, -41, 105, 262, -48, -83,
	67, 67, 57, 57, 134, 134, 134, 69, -240, 71,
	-216, -216, 70, -212, -222, -220, -217, -219, 26, 80,
	139, -222, -218, -217, 262, -222, -217, -240, 260, 64,
	263, -48, -48, -239, -239, -239, -234, 49, -221, 26,
	-1, 80, 262, -216, 70, -190, 73, -226, 24, 20,
	28, 54, 261, 264, -68, -133, -68, -68, 105, -190,
	73, 28, -216, 74, 71, 54, -240, 69, -240, -240,
	-85, 74, 71, 262, -133, 263, 264,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 612, 0, 398, 398, 398, 398, 398, 0,
	703, 686, 324, 334, 0, 385, 0, 0, 916, 916,
	340, 916, 0, 916, 916, 0, 916, 916, 916, 916,
	0, 33, 34, 914, 1, 3, 620, 0, 0, 402,
	405, 400, 686, 0, 0, 0, 51, 0, 684, 0,
	0, 0, 684, 44, 45, 704, 0, 687, 0, 0,
	682, 325, 0, 335, 0, 0, 0, 916, 916, 0,
	0, 916, 916, 916, 0, 916, 916, 916, 916, 916,
	916, 916, 386, 378, 379, 380, 0, 393, 709, 710,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 338, 339, 0, 341, 342, 344, 916,
	346, 347, 0, 0, 916, 0, 916, 916, 0, 394,
	395, 396, 397, 27, 624, 0, 0, 612, 29, 0,
	398, 403, 404, 408, 406, 407, 399, 0, 0, 458,
	0, 37, 38, 648, 0, 0, 650, 677, 678, -2,
	0, 0, 0, 707, 708, -2, 727, 705, 706, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 46, 52, 53, 0, 0, 0, 172,
	0, 176, 177, 0, 0, 0, 0, 0, 0, 0,
	682, 0, 0, 0, 336, 337, 376, 0, 0, 360,
	361, 381, 0, 387, 388, 0, 383, 384, 365, 366,
	367, 381, 369, 370, 371, 372, 373, 374, 375, 916,
	916, 345, 916, 0, 916, 350, 698, 352, 353, 916,
	916, 916, 28, 915, 23, 0, 0, 621, 468, 0,
	473, 475, 0, 510, 511, 512, 513, 514, 0, 0,
	0, 0, 0, 0, 536, 537, 538, 539, 598, 599,
	600, 601, 602, 603, 604, 477, 478, 595, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 560,
	560, 560, 560, 560, 560, 560, 560, 0, 0, 0,
	0, -2, -2, 613, 614, 617, 620, 27, 405, 0,
	410, 409, 401, 0, 0, 457, 0, 0, 466, 0,
	662, 673, 666, 0, 0, 651, 0, 0, 655, 659,
	660, 661, 273, 658, 0, 0, -2, 298, 182, 249,
	179, 180, 181, 242, 197, 242, 242, 242, 242, 269,
	269, 269, 269, 225, 226, 227, 228, 229, 0, 0,
	212, 242, 242, 242, 216, 232, 233, 234, 235, 236,
	237, 238, 239, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 244, 244, 244, 246, 246, -2, 713, 714,
	0, 0, 0, 0, 98, 0, 0, 0, 331, 683,
	620, 0, 916, 916, 389, 0, 0, 381, 916, 392,
	343, 348, 0, 508, 349, 0, 699, 700, 354, 355,
	356, 625, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 496,
	497, 498, 499, 500, 501, 474, 0, 488, 0, 0,
	0, 530, 531, 532, 533, 534, 0, 412, 0, 27,
	0, 0, 0, 0, 0, 0, 408, 0, 587, 0,
	552, 0, 553, 554, 555, 556, 557, 558, 559, 0,
	412, 0, 0, 0, 616, 618, 619, 624, 30, 408,
	0, 605, 0, 0, 0, 411, 637, 0, 0, -2,
	0, 456, 466, 645, 0, 595, 0, 459, 711, 712,
	727, 728, 612, 0, 649, 0, 664, 0, 665, 0,
	0, 675, 676, 663, 652, 653, 654, 656, 0, 0,
	0, 0, 99, -2, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 90,
	90, 0, 90, 90, 90, 90, 90, 0, 0, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 89, 173, 174, 290, 309, 0, 311, 312,
	307, -2, 299, 175, 183, 184, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 253, 0, 0, 268,
	0, 282, 284, 0, 0, 0, 0, 0, 251, 250,
	196, 0, 269, 269, 219, 220, 221, 0, 222, 223,
	224, 0, 0, 213, 214, 215, 207, 0, 208, 209,
	210, 0, 211, 47, -2, 83, 0, 685, 0, 0,
	0, 916, 698, 0, 695, 0, 693, 0, 688, 689,
	690, 691, 692, 694, 696, 697, 326, 332, 74, 916,
	0, 358, 359, 362, 0, 0, 382, 381, 466, 368,
	0, 643, 916, 0, 469, 470, 472, 489, 0, 491,
	493, 622, 623, 479, 480, 504, 505, 506, 0, 0,
	0, 0, 502, 484, 0, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 529, 571, 572,
	0, 527, 528, 535, 0, 0, 413, 414, 416, 420,
	0, 596, 0, -2, 507, 27, 0, 0, 0, 0,
	0, 0, 593, 590, 0, 0, 561, 0, 0, 0,
	0, 615, 24, 0, 680, 681, 606, 607, 425, 31,
	0, 637, 627, 639, 641, 0, 27, 0, 633, 612,
	0, 0, 0, 620, 467, 674, 667, 668, 0, 0,
	672, 274, 0, 0, 0, 103, 0, 91, 0, 90,
	90, 92, 0, 0, 0, 0, 0, 0, 0, 90,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 291, 290, 310, 0, 309,
	300, 185, 254, 255, 256, 257, 258, 259, 260, 262,
	265, 266, 267, 281, 283, 285, 0, 272, 167, 168,
	275, 276, 277, 278, 279, 280, 178, 252, 0, 217,
	218, 0, 0, 240, 0, 0, 0, 84, 90, 90,
	87, 0, 0, 0, 316, 0, 916, 701, 702, 0,
	0, 0, 0, 0, 329, 0, 327, 328, 330, 75,
	76, 90, 90, 357, 377, 390, 391, 389, 363, 509,
	351, 626, 490, 492, 494, 481, 502, 485, 0, 482,
	0, 0, 476, 540, 0, 0, 417, 421, 0, 423,
	424, 0, 412, 0, -2, 543, 544, 0, 0, 0,
	0, 612, 0, 591, 0, 0, 551, 562, 563, 564,
	565, 25, 466, 0, 0, 32, 0, 642, -2, 0,
	0, 0, 620, 646, 647, 596, 36, 669, 670, 671,
	54, 0, 0, 169, 170, 0, 0, 93, 94, 128,
	129, 166, 131, 132, 0, 0, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 0, 303, 0,
	0, 302, 290, 0, 261, 243, 270, 271, 230, 0,
	231, 0, 247, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 0, 321, 322, 323, 333, 77, 78, 0,
	0, 364, 483, 0, 503, 486, 541, 415, 422, 418,
	0, 0, 597, 0, 242, 242, 576, 242, 246, 579,
	242, 581, 242, 584, 0, 0, 0, 588, 550, 594,
	0, 608, 426, 427, 429, 430, 431, 439, 0, 441,
	0, 640, 0, -2, 0, 635, 634, 35, 0, 42,
	130, 171, 133, 134, 0, 301, 304, 305, 306, 0,
	0, 302, 263, 0, 241, 0, 0, 85, 59, 60,
	86, 95, 96, 97, 0, 313, 242, 0, 0, 0,
	79, 80, 487, 0, 542, 545, 573, 269, 577, 578,
	580, 582, 583, 585, 547, 546, 0, 0, 0, 592,
	610, 0, 0, 0, 0, 0, 446, 0, 0, 449,
	0, 0, 0, 0, 440, 0, 0, 460, 442, 0,
	444, 445, 0, 630, 27, 0, 0, 56, 0, 0,
	0, 0, 0, 264, 245, 248, 64, 0, 315, 68,
	72, 320, 419, 574, 575, 566, 549, 589, 26, 0,
	0, 428, 435, 0, 438, 447, 448, 450, 0, 452,
	0, 454, 455, 432, 433, 434, 0, 0, 0, 443,
	638, -2, 636, 0, 39, 0, 43, 296, 296, 0,
	0, 74, 314, 74, 74, 0, 0, 0, 611, 609,
	0, 0, 451, 453, 0, 0, 0, 0, 55, 0,
	286, 287, 296, 0, 48, 65, 66, 67, 90, 0,
	0, 49, 69, 70, 0, 50, 73, 548, 0, 0,
	0, 436, 437, 0, 0, 0, 40, 0, 297, 90,
	293, 0, 0, 288, 296, 0, 63, 61, 57, 58,
	0, 567, 0, 570, 0, 464, 0, 0, 0, 0,
	294, 0, 289, 62, 71, 568, 461, 0, 462, 463,
	41, 292, 295, 0, 465, 0, 569,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 3, 3, 115, 107, 3,
	68, 70, 112, 110, 69, 111, 123, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 305,
	96, 95, 97, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 89, 90, 91, 92, 93, 94, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1036
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1042
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1044
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1072
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1117
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1128
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1219
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.str = "hash"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.str = "btree"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.str = "default"
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1425
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1487
		{
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1492
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.str = "character set"
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.str = "char set"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = "default"
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1526
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1808
		{
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1824
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1877
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.optVal = nil
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.str = yyDollar[3].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2598
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2643
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2655
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 288:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2669
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2680
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2745
		{
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2748
		{
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2762
		{
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2794
		{
			// set empty
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.str = yyDollar[1].str
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2836
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2841
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.byt = 0
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.byt = 1
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2876
		{
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2878
		{
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2884
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2900
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2920
		{
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2922
		{
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.statement = &Xa{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.statement = &Explain{}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2949
		{
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2953
		{
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3043
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3054
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3061
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3065
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3069
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3150
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.str = "full "
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.showFilter = nil
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.statement = &OtherRead{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.statement = &OtherRead{}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3204
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3213
		{
			setAllowComments(yylex, true)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.bytes2 = nil
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.str = UnionStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.str = UnionAllStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.str = UnionDistinctStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.str = SQLCacheStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.str = DistinctStr
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.str = StraightJoinHint
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.selectExprs = nil
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3313
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3317
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3321
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3384
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3396
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3418
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3431
		{
			yyVAL.str = JoinStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3435
		{
			yyVAL.str = JoinStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.str = JoinStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.str = StraightJoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.str = LeftJoinStr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.str = LeftJoinStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3457
		{
			yyVAL.str = RightJoinStr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3461
		{
			yyVAL.str = RightJoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3467
		{
			yyVAL.str = NaturalJoinStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3471
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3481
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3500
		{
			yyVAL.indexHints = nil
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3504
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3508
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3512
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3518
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3527
		{
			yyVAL.expr = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3531
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3537
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3541
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3545
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3553
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3557
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3561
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3567
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3571
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3577
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3581
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3587
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3591
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3595
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3599
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3603
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3607
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3611
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3615
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3619
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3623
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.str = IsNullStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.str = IsNotNullStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.str = IsTrueStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3641
		{
			yyVAL.str = IsNotTrueStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3645
		{
			yyVAL.str = IsFalseStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3649
		{
			yyVAL.str = IsNotFalseStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.str = EqualStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.str = LessThanStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.str = GreaterThanStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.str = LessEqualStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3671
		{
			yyVAL.str = GreaterEqualStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3675
		{
			yyVAL.str = NotEqualStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3679
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3684
		{
			yyVAL.expr = nil
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3688
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3698
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3708
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3714
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3718
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3728
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3732
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3736
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3740
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3780
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3784
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3792
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3800
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3808
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3816
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3834
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3838
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3856
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3864
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3886
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3890
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 548:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3894
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 549:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3898
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3902
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3906
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3975
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3985
		{
			yyVAL.str = BooleanModeStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3989
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 569:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3993
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.str = QueryExpansionStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4059
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4063
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4068
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4072
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4077
		{
			yyVAL.str = string("")
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4097
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4102
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4106
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4112
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4116
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4126
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4130
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4138
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4142
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4146
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.expr = &NullVal{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4156
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4165
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4169
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4174
		{
			yyVAL.exprs = nil
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4178
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.expr = nil
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4187
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.orderBy = nil
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4202
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4206
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4212
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4217
		{
			yyVAL.str = AscScr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4221
		{
			yyVAL.str = AscScr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4225
		{
			yyVAL.str = DescScr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.limit = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4234
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4238
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4242
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4247
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4251
		{
			yyVAL.str = ForUpdateStr
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4255
		{
			yyVAL.str = ShareModeStr
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4268
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4272
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4276
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4281
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4285
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4289
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4296
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4300
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4304
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4308
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4313
		{
			yyVAL.updateExprs = nil
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4317
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4323
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4333
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4343
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4349
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4359
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4363
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4369
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4375
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4379
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4385
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4389
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4396
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4400
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4404
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4408
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4412
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4419
		{
			yyVAL.bytes = []byte("charset")
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4425
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4429
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.expr = &Default{}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4439
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4443
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4449
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4453
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4459
		{
			yyVAL.str = ""
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.str = yyDollar[2].str
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4469
		{
			yyVAL.str = yyDollar[3].str
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4475
		{
			yyVAL.str = RepeatableRead
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4479
		{
			yyVAL.str = ReadCommitted
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4483
		{
			yyVAL.str = ReadUncommitted
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4487
		{
			yyVAL.str = Serializable
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.str = yyDollar[2].str
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4503
		{
			yyVAL.str = TxReadWrite
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4507
		{
			yyVAL.str = TxReadOnly
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4513
		{
			yyVAL.str = SessionStr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4517
		{
			yyVAL.str = SessionStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.str = GlobalStr
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4530
		{
			yyVAL.byt = 0
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4534
		{
			yyVAL.byt = 1
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4539
		{
			yyVAL.byt = 0
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4543
		{
			yyVAL.byt = 1
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.str = ""
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.str = IgnoreStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4558
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4562
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4566
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4570
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4574
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4578
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4582
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4586
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4590
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4599
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4603
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4607
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4613
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4617
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.str = IndexStr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.str = UniqueStr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4636
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4643
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4649
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4653
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4660
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4666
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4670
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4896
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4905
		{
			decNesting(yylex)
		}
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4910
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
